// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('The provided Module[\'ENVIRONMENT\'] value is not valid. It must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}


if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = console.log;
  if (!Module['printErr']) Module['printErr'] = console.warn;

  var nodeFS;
  var nodePath;

  Module['read'] = function read(filename, binary) {
    if (!nodeFS) nodeFS = require('fs');
    if (!nodePath) nodePath = require('path');
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status, toThrow) {
      quit(status);
    }
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (ENVIRONMENT_IS_WORKER) {
    Module['readBinary'] = function read(url) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.responseType = 'arraybuffer';
      xhr.send(null);
      return xhr.response;
    };
  }

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
      } else {
        onerror();
      }
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.warn(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}
if (!Module['quit']) {
  Module['quit'] = function(status, toThrow) {
    throw toThrow;
  }
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
    return value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
    } else {
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      // optimize away arguments usage in common cases
      if (sig.length === 1) {
        sigCache[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func);
        };
      } else if (sig.length === 2) {
        sigCache[func] = function dynCall_wrapper(arg) {
          return Runtime.dynCall(sig, func, [arg]);
        };
      } else {
        // general case
        sigCache[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func, Array.prototype.slice.call(arguments));
        };
      }
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + size)|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = HEAP32[DYNAMICTOP_PTR>>2];var end = (((ret + size + 15)|0) & -16);HEAP32[DYNAMICTOP_PTR>>2] = end;if (end >= TOTAL_MEMORY) {var success = enlargeMemory();if (!success) {HEAP32[DYNAMICTOP_PTR>>2] = ret;return 0;}}return ret;},
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}



Module["Runtime"] = Runtime;



//========================================
// Runtime essentials
//========================================

var ABORT = 0; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try { func = eval('_' + ident); } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = Runtime.stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface.
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*[a-zA-Z$_0-9]*\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }

  // sources of useful functions. we create this lazily as it can trigger a source decompression on this entire file
  var JSsource = null;
  function ensureJSsource() {
    if (!JSsource) {
      JSsource = {};
      for (var fun in JSfuncs) {
        if (JSfuncs.hasOwnProperty(fun)) {
          // Elements of toCsource are arrays of three items:
          // the code, and the return value
          JSsource[fun] = parseJSFunc(JSfuncs[fun]);
        }
      }
    }
  }

  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      ensureJSsource();
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=(' + convertCode.returnValue + ');';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    if (!numericArgs) {
      // If we had a stack, restore it
      ensureJSsource();
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;

function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module["setValue"] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module["getValue"] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
Module["ALLOC_NONE"] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : Runtime.staticAlloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module["allocate"] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if (!runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}
Module["getMemory"] = getMemory;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module["Pointer_stringify"] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module["AsciiToString"] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module["stringToAscii"] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}
Module["UTF8ArrayToString"] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}
Module["UTF8ToString"] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module["stringToUTF8Array"] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}
Module["stringToUTF8"] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module["lengthBytesUTF8"] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}


function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}


function demangle(func) {
  var __cxa_demangle_func = Module['___cxa_demangle'] || Module['__cxa_demangle'];
  if (__cxa_demangle_func) {
    try {
      var s =
        func.substr(1);
      var len = lengthBytesUTF8(s)+1;
      var buf = _malloc(len);
      stringToUTF8(s, buf, len);
      var status = _malloc(4);
      var ret = __cxa_demangle_func(buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed
    } catch(e) {
      // ignore problems here
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
    // failure when using libcxxabi, don't demangle
    return func;
  }
  Runtime.warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (x + ' [' + y + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}
Module["stackTrace"] = stackTrace;

// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;
var MIN_TOTAL_MEMORY = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP;
var buffer;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
  staticSealed = false;



function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which adjusts the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}


function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
if (TOTAL_MEMORY < TOTAL_STACK) Module.printErr('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
}
updateGlobalBufferViews();


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 0x63736d65; /* 'emsc' */
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module["addOnPreRun"] = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module["addOnInit"] = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module["addOnPreMain"] = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module["addOnExit"] = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module["addOnPostRun"] = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module["intArrayFromString"] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module["intArrayToString"] = intArrayToString;

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
function writeStringToMemory(string, buffer, dontAddNull) {
  Runtime.warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var lastChar, end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}
Module["writeStringToMemory"] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  HEAP8.set(array, buffer);
}
Module["writeArrayToMemory"] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module["writeAsciiToMemory"] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

if (!Math['trunc']) Math['trunc'] = function(x) {
  return x < 0 ? Math.ceil(x) : Math.floor(x);
};
Math.trunc = Math['trunc'];

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled

function getUniqueRunDependency(id) {
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
}
Module["addRunDependency"] = addRunDependency;

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module["removeRunDependency"] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;






// === Body ===

var ASM_CONSTS = [];




STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 34048;
  /* global initializers */  __ATINIT__.push();
  

/* memory initializer */ allocate([0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,63,3,132,50,208,216,218,222,63,16,0,16,0,16,0,224,63,130,34,254,20,175,101,218,63,0,0,0,0,0,0,240,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,255,255,63,0,0,0,0,0,0,0,0,0,0,0,0,0,16,240,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,240,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,240,63,32,224,31,224,31,224,239,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,224,31,224,31,224,239,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,224,31,224,31,224,239,63,123,20,174,71,225,122,132,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,16,16,16,16,16,112,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,16,16,16,16,16,112,63,0,0,0,0,0,0,0,0,16,16,16,16,16,16,224,63,16,16,16,16,16,16,224,63,16,0,16,0,16,0,224,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,16,0,16,0,224,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,16,0,16,0,224,63,0,0,0,0,0,0,89,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,111,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,111,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,192,0,0,0,0,0,0,96,192,0,0,0,0,224,255,255,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,255,255,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,255,255,63,0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,63,0,0,0,0,0,0,240,63,136,99,93,220,70,3,212,63,117,147,24,4,86,14,213,63,0,0,0,0,0,0,240,63,123,20,174,71,225,122,228,63,31,133,235,81,184,30,213,63,0,0,0,0,0,0,240,63,51,51,51,51,51,51,211,63,51,51,51,51,51,51,227,63,0,0,0,0,0,0,240,63,51,51,51,51,51,51,195,63,184,30,133,235,81,184,174,63,0,0,0,0,0,0,240,63,208,179,89,245,185,218,238,63,0,0,0,0,0,0,240,63,132,13,79,175,148,101,234,63,0,0,0,0,0,0,0,0,92,172,168,193,52,12,199,63,4,226,117,253,130,221,208,63,99,122,194,18,15,40,207,191,0,0,0,0,0,0,36,64,142,1,217,235,221,31,199,63,21,87,149,125,87,4,209,63,3,67,86,183,122,78,208,191,0,0,0,0,0,0,52,64,160,79,228,73,210,53,199,63,173,47,18,218,114,46,209,63,250,68,158,36,93,51,209,191,0,0,0,0,0,0,62,64,31,186,160,190,101,78,199,63,179,36,64,77,45,91,209,63,135,191,38,107,212,67,210,191,0,0,0,0,0,0,68,64,39,136,186,15,64,106,199,63,95,36,180,229,92,138,209,63,57,214,197,109,52,128,211,191,0,0,0,0,0,0,73,64,182,185,49,61,97,137,199,63,235,28,3,178,215,187,209,63,182,243,253,212,120,233,212,191,0,0,0,0,0,0,78,64,92,114,220,41,29,172,199,63,59,199,128,236,245,238,209,63,142,59,165,131,245,127,214,191,0,0,0,0,0,128,81,64,24,178,186,213,115,210,199,63,136,17,194,163,141,35,210,63,78,209,145,92,254,67,216,191,0,0,0,0,0,0,84,64,120,156,162,35,185,252,199,63,183,180,26,18,247,88,210,63,75,234,4,52,17,54,218,191,0,0,0,0,0,128,86,64,237,13,190,48,153,42,200,63,59,141,180,84,222,142,210,63,17,170,212,236,129,86,220,191,0,0,0,0,0,0,89,64,6,42,227,223,103,92,200,63,191,101,78,151,197,196,210,63,188,87,173,76,248,165,222,191,0,0,0,0,0,64,95,64,239,225,146,227,78,233,200,63,181,253,43,43,77,74,211,63,199,215,158,89,18,160,226,191,0,0,0,0,0,192,98,64,147,82,208,237,37,141,201,63,124,39,102,189,24,202,211,63,204,64,101,252,251,140,230,191,0,0,0,0,0,224,101,64,18,131,192,202,161,69,202,63,83,145,10,99,11,65,212,63,66,67,255,4,23,43,235,191,0,0,0,0,0,0,105,64,114,51,220,128,207,15,203,63,203,190,43,130,255,173,212,63,95,152,76,21,140,74,240,191,0,0,0,0,0,32,108,64,97,142,30,191,183,233,203,63,114,51,220,128,207,15,213,63,100,93,220,70,3,120,243,191,0,0,0,0,0,64,111,64,227,83,0,140,103,208,204,63,17,1,135,80,165,102,213,63,128,72,191,125,29,56,247,191,0,0,0,0,0,48,113,64,26,139,166,179,147,193,205,63,52,75,2,212,212,178,213,63,204,238,201,195,66,173,251,191,0,0,0,0,0,192,114,64,65,130,226,199,152,187,206,63,247,88,250,208,5,245,213,63,166,10,70,37,117,130,0,192,0,0,0,0,0,80,116,64,31,157,186,242,89,158,207,63,118,113,27,13,224,45,214,63,145,15,122,54,171,190,3,192,0,0,0,0,0,224,117,64,255,9,46,86,212,96,208,63,88,255,231,48,95,94,214,63,188,150,144,15,122,182,7,192,0,0,0,0,0,112,119,64,76,55,137,65,96,229,208,63,186,73,12,2,43,135,214,63,187,39,15,11,181,166,12,192,0,0,0,0,0,0,121,64,150,4,168,169,101,107,209,63,126,169,159,55,21,169,214,63,21,140,74,234,4,116,17,192,0,0,0,0,0,144,122,64,53,7,8,230,232,241,209,63,133,119,185,136,239,196,214,63,83,5,163,146,58,129,21,192,0,0,0,0,0,32,124,64,41,63,169,246,233,120,210,63,236,250,5,187,97,219,214,63,186,107,9,249,160,231,26,192,0,0,0,0,0,176,125,64,143,83,116,36,151,255,210,63,147,140,156,133,61,237,214,63,55,137,65,96,229,48,33,192,0,0,0,0,0,64,127,64,103,68,105,111,240,133,211,63,208,97,190,188,0,251,214,63,217,206,247,83,227,165,38,192,0,0,0,0,0,104,128,64,93,220,70,3,120,11,212,63,48,158,65,67,255,4,215,63,168,198,75,55,137,65,47,192,0,0,0,0,0,48,129,64,171,9,162,238,3,144,212,63,149,154,61,208,10,12,215,63,51,51,51,51,51,83,55,192,0,0,0,0,0,248,129,64,136,186,15,64,106,19,213,63,141,122,136,70,119,16,215,63,195,245,40,92,143,98,68,192,0,0,0,0,0,192,130,64,104,203,185,20,87,149,213,63,166,97,248,136,152,18,215,63,205,204,204,204,204,28,93,192,134,201,84,193,168,164,236,63,177,225,233,149,178,12,209,63,240,133,201,84,193,168,196,191,196,177,46,110,163,1,232,191,209,34,219,249,126,106,251,63,39,194,134,167,87,202,162,63,9,249,160,103,179,234,163,63,240,167,198,75,55,137,177,191,183,98,127,217,61,121,240,63,0,0,0,0,0,0,240,63,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,7,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,0,0,0,0,80,101,114,99,101,112,116,117,97,108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,128,8,0,0,1,0,0,0,82,101,108,97,116,105,118,101,32,99,111,108,111,114,105,109,101,116,114,105,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,140,9,0,0,2,0,0,0,83,97,116,117,114,97,116,105,111,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,152,10,0,0,3,0,0,0,65,98,115,111,108,117,116,101,32,99,111,108,111,114,105,109,101,116,114,105,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,164,11,0,0,10,0,0,0,80,101,114,99,101,112,116,117,97,108,32,112,114,101,115,101,114,118,105,110,103,32,98,108,97,99,107,32,105,110,107,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,176,12,0,0,11,0,0,0,82,101,108,97,116,105,118,101,32,99,111,108,111,114,105,109,101,116,114,105,99,32,112,114,101,115,101,114,118,105,110,103,32,98,108,97,99,107,32,105,110,107,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,188,13,0,0,12,0,0,0,83,97,116,117,114,97,116,105,111,110,32,112,114,101,115,101,114,118,105,110,103,32,98,108,97,99,107,32,105,110,107,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,200,14,0,0,13,0,0,0,80,101,114,99,101,112,116,117,97,108,32,112,114,101,115,101,114,118,105,110,103,32,98,108,97,99,107,32,112,108,97,110,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,212,15,0,0,14,0,0,0,82,101,108,97,116,105,118,101,32,99,111,108,111,114,105,109,101,116,114,105,99,32,112,114,101,115,101,114,118,105,110,103,32,98,108,97,99,107,32,112,108,97,110,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,224,16,0,0,15,0,0,0,83,97,116,117,114,97,116,105,111,110,32,112,114,101,115,101,114,118,105,110,103,32,98,108,97,99,107,32,112,108,97,110,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,25,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,1,0,0,0,1,0,0,0,26,0,0,0,3,0,0,0,27,0,0,0,9,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,7,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,128,51,0,0,0,52,0,0,64,52,0,0,128,52,0,0,160,52,0,0,192,52,0,0,224,52,0,0,0,53,0,0,16,53,0,0,32,53,0,0,48,53,0,0,64,53,0,0,80,53,0,0,96,53,0,0,112,53,0,0,128,53,0,0,136,53,0,0,144,53,0,0,152,53,0,0,160,53,0,0,168,53,0,0,176,53,0,0,184,53,0,0,192,53,0,0,200,53,0,0,208,53,0,0,216,53,0,0,224,53,0,0,232,53,0,0,240,53,0,0,248,53,0,0,0,54,0,0,4,54,0,0,8,54,0,0,12,54,0,0,16,54,0,0,20,54,0,0,24,54,0,0,28,54,0,0,32,54,0,0,36,54,0,0,40,54,0,0,44,54,0,0,48,54,0,0,52,54,0,0,56,54,0,0,60,54,0,0,64,54,0,0,68,54,0,0,72,54,0,0,76,54,0,0,80,54,0,0,84,54,0,0,88,54,0,0,92,54,0,0,96,54,0,0,100,54,0,0,104,54,0,0,108,54,0,0,112,54,0,0,116,54,0,0,120,54,0,0,124,54,0,0,128,54,0,0,130,54,0,0,132,54,0,0,134,54,0,0,136,54,0,0,138,54,0,0,140,54,0,0,142,54,0,0,144,54,0,0,146,54,0,0,148,54,0,0,150,54,0,0,152,54,0,0,154,54,0,0,156,54,0,0,158,54,0,0,160,54,0,0,162,54,0,0,164,54,0,0,166,54,0,0,168,54,0,0,170,54,0,0,172,54,0,0,174,54,0,0,176,54,0,0,178,54,0,0,180,54,0,0,182,54,0,0,184,54,0,0,186,54,0,0,188,54,0,0,190,54,0,0,192,54,0,0,194,54,0,0,196,54,0,0,198,54,0,0,200,54,0,0,202,54,0,0,204,54,0,0,206,54,0,0,208,54,0,0,210,54,0,0,212,54,0,0,214,54,0,0,216,54,0,0,218,54,0,0,220,54,0,0,222,54,0,0,224,54,0,0,226,54,0,0,228,54,0,0,230,54,0,0,232,54,0,0,234,54,0,0,236,54,0,0,238,54,0,0,240,54,0,0,242,54,0,0,244,54,0,0,246,54,0,0,248,54,0,0,250,54,0,0,252,54,0,0,254,54,0,0,0,55,0,0,1,55,0,0,2,55,0,0,3,55,0,0,4,55,0,0,5,55,0,0,6,55,0,0,7,55,0,0,8,55,0,0,9,55,0,0,10,55,0,0,11,55,0,0,12,55,0,0,13,55,0,0,14,55,0,0,15,55,0,0,16,55,0,0,17,55,0,0,18,55,0,0,19,55,0,0,20,55,0,0,21,55,0,0,22,55,0,0,23,55,0,0,24,55,0,0,25,55,0,0,26,55,0,0,27,55,0,0,28,55,0,0,29,55,0,0,30,55,0,0,31,55,0,0,32,55,0,0,33,55,0,0,34,55,0,0,35,55,0,0,36,55,0,0,37,55,0,0,38,55,0,0,39,55,0,0,40,55,0,0,41,55,0,0,42,55,0,0,43,55,0,0,44,55,0,0,45,55,0,0,46,55,0,0,47,55,0,0,48,55,0,0,49,55,0,0,50,55,0,0,51,55,0,0,52,55,0,0,53,55,0,0,54,55,0,0,55,55,0,0,56,55,0,0,57,55,0,0,58,55,0,0,59,55,0,0,60,55,0,0,61,55,0,0,62,55,0,0,63,55,0,0,64,55,0,0,65,55,0,0,66,55,0,0,67,55,0,0,68,55,0,0,69,55,0,0,70,55,0,0,71,55,0,0,72,55,0,0,73,55,0,0,74,55,0,0,75,55,0,0,76,55,0,0,77,55,0,0,78,55,0,0,79,55,0,0,80,55,0,0,81,55,0,0,82,55,0,0,83,55,0,0,84,55,0,0,85,55,0,0,86,55,0,0,87,55,0,0,88,55,0,0,89,55,0,0,90,55,0,0,91,55,0,0,92,55,0,0,93,55,0,0,94,55,0,0,95,55,0,0,96,55,0,0,97,55,0,0,98,55,0,0,99,55,0,0,100,55,0,0,101,55,0,0,102,55,0,0,103,55,0,0,104,55,0,0,105,55,0,0,106,55,0,0,107,55,0,0,108,55,0,0,109,55,0,0,110,55,0,0,111,55,0,0,112,55,0,0,113,55,0,0,114,55,0,0,115,55,0,0,116,55,0,0,117,55,0,0,118,55,0,0,119,55,0,0,120,55,0,0,121,55,0,0,122,55,0,0,123,55,0,0,124,55,0,0,125,55,0,0,126,55,0,0,127,55,0,0,128,55,0,128,128,55,0,0,129,55,0,128,129,55,0,0,130,55,0,128,130,55,0,0,131,55,0,128,131,55,0,0,132,55,0,128,132,55,0,0,133,55,0,128,133,55,0,0,134,55,0,128,134,55,0,0,135,55,0,128,135,55,0,0,136,55,0,128,136,55,0,0,137,55,0,128,137,55,0,0,138,55,0,128,138,55,0,0,139,55,0,128,139,55,0,0,140,55,0,128,140,55,0,0,141,55,0,128,141,55,0,0,142,55,0,128,142,55,0,0,143,55,0,128,143,55,0,0,144,55,0,128,144,55,0,0,145,55,0,128,145,55,0,0,146,55,0,128,146,55,0,0,147,55,0,128,147,55,0,0,148,55,0,128,148,55,0,0,149,55,0,128,149,55,0,0,150,55,0,128,150,55,0,0,151,55,0,128,151,55,0,0,152,55,0,128,152,55,0,0,153,55,0,128,153,55,0,0,154,55,0,128,154,55,0,0,155,55,0,128,155,55,0,0,156,55,0,128,156,55,0,0,157,55,0,128,157,55,0,0,158,55,0,128,158,55,0,0,159,55,0,128,159,55,0,0,160,55,0,128,160,55,0,0,161,55,0,128,161,55,0,0,162,55,0,128,162,55,0,0,163,55,0,128,163,55,0,0,164,55,0,128,164,55,0,0,165,55,0,128,165,55,0,0,166,55,0,128,166,55,0,0,167,55,0,128,167,55,0,0,168,55,0,128,168,55,0,0,169,55,0,128,169,55,0,0,170,55,0,128,170,55,0,0,171,55,0,128,171,55,0,0,172,55,0,128,172,55,0,0,173,55,0,128,173,55,0,0,174,55,0,128,174,55,0,0,175,55,0,128,175,55,0,0,176,55,0,128,176,55,0,0,177,55,0,128,177,55,0,0,178,55,0,128,178,55,0,0,179,55,0,128,179,55,0,0,180,55,0,128,180,55,0,0,181,55,0,128,181,55,0,0,182,55,0,128,182,55,0,0,183,55,0,128,183,55,0,0,184,55,0,128,184,55,0,0,185,55,0,128,185,55,0,0,186,55,0,128,186,55,0,0,187,55,0,128,187,55,0,0,188,55,0,128,188,55,0,0,189,55,0,128,189,55,0,0,190,55,0,128,190,55,0,0,191,55,0,128,191,55,0,0,192,55,0,128,192,55,0,0,193,55,0,128,193,55,0,0,194,55,0,128,194,55,0,0,195,55,0,128,195,55,0,0,196,55,0,128,196,55,0,0,197,55,0,128,197,55,0,0,198,55,0,128,198,55,0,0,199,55,0,128,199,55,0,0,200,55,0,128,200,55,0,0,201,55,0,128,201,55,0,0,202,55,0,128,202,55,0,0,203,55,0,128,203,55,0,0,204,55,0,128,204,55,0,0,205,55,0,128,205,55,0,0,206,55,0,128,206,55,0,0,207,55,0,128,207,55,0,0,208,55,0,128,208,55,0,0,209,55,0,128,209,55,0,0,210,55,0,128,210,55,0,0,211,55,0,128,211,55,0,0,212,55,0,128,212,55,0,0,213,55,0,128,213,55,0,0,214,55,0,128,214,55,0,0,215,55,0,128,215,55,0,0,216,55,0,128,216,55,0,0,217,55,0,128,217,55,0,0,218,55,0,128,218,55,0,0,219,55,0,128,219,55,0,0,220,55,0,128,220,55,0,0,221,55,0,128,221,55,0,0,222,55,0,128,222,55,0,0,223,55,0,128,223,55,0,0,224,55,0,128,224,55,0,0,225,55,0,128,225,55,0,0,226,55,0,128,226,55,0,0,227,55,0,128,227,55,0,0,228,55,0,128,228,55,0,0,229,55,0,128,229,55,0,0,230,55,0,128,230,55,0,0,231,55,0,128,231,55,0,0,232,55,0,128,232,55,0,0,233,55,0,128,233,55,0,0,234,55,0,128,234,55,0,0,235,55,0,128,235,55,0,0,236,55,0,128,236,55,0,0,237,55,0,128,237,55,0,0,238,55,0,128,238,55,0,0,239,55,0,128,239,55,0,0,240,55,0,128,240,55,0,0,241,55,0,128,241,55,0,0,242,55,0,128,242,55,0,0,243,55,0,128,243,55,0,0,244,55,0,128,244,55,0,0,245,55,0,128,245,55,0,0,246,55,0,128,246,55,0,0,247,55,0,128,247,55,0,0,248,55,0,128,248,55,0,0,249,55,0,128,249,55,0,0,250,55,0,128,250,55,0,0,251,55,0,128,251,55,0,0,252,55,0,128,252,55,0,0,253,55,0,128,253,55,0,0,254,55,0,128,254,55,0,0,255,55,0,128,255,55,0,0,0,56,0,64,0,56,0,128,0,56,0,192,0,56,0,0,1,56,0,64,1,56,0,128,1,56,0,192,1,56,0,0,2,56,0,64,2,56,0,128,2,56,0,192,2,56,0,0,3,56,0,64,3,56,0,128,3,56,0,192,3,56,0,0,4,56,0,64,4,56,0,128,4,56,0,192,4,56,0,0,5,56,0,64,5,56,0,128,5,56,0,192,5,56,0,0,6,56,0,64,6,56,0,128,6,56,0,192,6,56,0,0,7,56,0,64,7,56,0,128,7,56,0,192,7,56,0,0,8,56,0,64,8,56,0,128,8,56,0,192,8,56,0,0,9,56,0,64,9,56,0,128,9,56,0,192,9,56,0,0,10,56,0,64,10,56,0,128,10,56,0,192,10,56,0,0,11,56,0,64,11,56,0,128,11,56,0,192,11,56,0,0,12,56,0,64,12,56,0,128,12,56,0,192,12,56,0,0,13,56,0,64,13,56,0,128,13,56,0,192,13,56,0,0,14,56,0,64,14,56,0,128,14,56,0,192,14,56,0,0,15,56,0,64,15,56,0,128,15,56,0,192,15,56,0,0,16,56,0,64,16,56,0,128,16,56,0,192,16,56,0,0,17,56,0,64,17,56,0,128,17,56,0,192,17,56,0,0,18,56,0,64,18,56,0,128,18,56,0,192,18,56,0,0,19,56,0,64,19,56,0,128,19,56,0,192,19,56,0,0,20,56,0,64,20,56,0,128,20,56,0,192,20,56,0,0,21,56,0,64,21,56,0,128,21,56,0,192,21,56,0,0,22,56,0,64,22,56,0,128,22,56,0,192,22,56,0,0,23,56,0,64,23,56,0,128,23,56,0,192,23,56,0,0,24,56,0,64,24,56,0,128,24,56,0,192,24,56,0,0,25,56,0,64,25,56,0,128,25,56,0,192,25,56,0,0,26,56,0,64,26,56,0,128,26,56,0,192,26,56,0,0,27,56,0,64,27,56,0,128,27,56,0,192,27,56,0,0,28,56,0,64,28,56,0,128,28,56,0,192,28,56,0,0,29,56,0,64,29,56,0,128,29,56,0,192,29,56,0,0,30,56,0,64,30,56,0,128,30,56,0,192,30,56,0,0,31,56,0,64,31,56,0,128,31,56,0,192,31,56,0,0,32,56,0,64,32,56,0,128,32,56,0,192,32,56,0,0,33,56,0,64,33,56,0,128,33,56,0,192,33,56,0,0,34,56,0,64,34,56,0,128,34,56,0,192,34,56,0,0,35,56,0,64,35,56,0,128,35,56,0,192,35,56,0,0,36,56,0,64,36,56,0,128,36,56,0,192,36,56,0,0,37,56,0,64,37,56,0,128,37,56,0,192,37,56,0,0,38,56,0,64,38,56,0,128,38,56,0,192,38,56,0,0,39,56,0,64,39,56,0,128,39,56,0,192,39,56,0,0,40,56,0,64,40,56,0,128,40,56,0,192,40,56,0,0,41,56,0,64,41,56,0,128,41,56,0,192,41,56,0,0,42,56,0,64,42,56,0,128,42,56,0,192,42,56,0,0,43,56,0,64,43,56,0,128,43,56,0,192,43,56,0,0,44,56,0,64,44,56,0,128,44,56,0,192,44,56,0,0,45,56,0,64,45,56,0,128,45,56,0,192,45,56,0,0,46,56,0,64,46,56,0,128,46,56,0,192,46,56,0,0,47,56,0,64,47,56,0,128,47,56,0,192,47,56,0,0,48,56,0,64,48,56,0,128,48,56,0,192,48,56,0,0,49,56,0,64,49,56,0,128,49,56,0,192,49,56,0,0,50,56,0,64,50,56,0,128,50,56,0,192,50,56,0,0,51,56,0,64,51,56,0,128,51,56,0,192,51,56,0,0,52,56,0,64,52,56,0,128,52,56,0,192,52,56,0,0,53,56,0,64,53,56,0,128,53,56,0,192,53,56,0,0,54,56,0,64,54,56,0,128,54,56,0,192,54,56,0,0,55,56,0,64,55,56,0,128,55,56,0,192,55,56,0,0,56,56,0,64,56,56,0,128,56,56,0,192,56,56,0,0,57,56,0,64,57,56,0,128,57,56,0,192,57,56,0,0,58,56,0,64,58,56,0,128,58,56,0,192,58,56,0,0,59,56,0,64,59,56,0,128,59,56,0,192,59,56,0,0,60,56,0,64,60,56,0,128,60,56,0,192,60,56,0,0,61,56,0,64,61,56,0,128,61,56,0,192,61,56,0,0,62,56,0,64,62,56,0,128,62,56,0,192,62,56,0,0,63,56,0,64,63,56,0,128,63,56,0,192,63,56,0,0,64,56,0,64,64,56,0,128,64,56,0,192,64,56,0,0,65,56,0,64,65,56,0,128,65,56,0,192,65,56,0,0,66,56,0,64,66,56,0,128,66,56,0,192,66,56,0,0,67,56,0,64,67,56,0,128,67,56,0,192,67,56,0,0,68,56,0,64,68,56,0,128,68,56,0,192,68,56,0,0,69,56,0,64,69,56,0,128,69,56,0,192,69,56,0,0,70,56,0,64,70,56,0,128,70,56,0,192,70,56,0,0,71,56,0,64,71,56,0,128,71,56,0,192,71,56,0,0,72,56,0,64,72,56,0,128,72,56,0,192,72,56,0,0,73,56,0,64,73,56,0,128,73,56,0,192,73,56,0,0,74,56,0,64,74,56,0,128,74,56,0,192,74,56,0,0,75,56,0,64,75,56,0,128,75,56,0,192,75,56,0,0,76,56,0,64,76,56,0,128,76,56,0,192,76,56,0,0,77,56,0,64,77,56,0,128,77,56,0,192,77,56,0,0,78,56,0,64,78,56,0,128,78,56,0,192,78,56,0,0,79,56,0,64,79,56,0,128,79,56,0,192,79,56,0,0,80,56,0,64,80,56,0,128,80,56,0,192,80,56,0,0,81,56,0,64,81,56,0,128,81,56,0,192,81,56,0,0,82,56,0,64,82,56,0,128,82,56,0,192,82,56,0,0,83,56,0,64,83,56,0,128,83,56,0,192,83,56,0,0,84,56,0,64,84,56,0,128,84,56,0,192,84,56,0,0,85,56,0,64,85,56,0,128,85,56,0,192,85,56,0,0,86,56,0,64,86,56,0,128,86,56,0,192,86,56,0,0,87,56,0,64,87,56,0,128,87,56,0,192,87,56,0,0,88,56,0,64,88,56,0,128,88,56,0,192,88,56,0,0,89,56,0,64,89,56,0,128,89,56,0,192,89,56,0,0,90,56,0,64,90,56,0,128,90,56,0,192,90,56,0,0,91,56,0,64,91,56,0,128,91,56,0,192,91,56,0,0,92,56,0,64,92,56,0,128,92,56,0,192,92,56,0,0,93,56,0,64,93,56,0,128,93,56,0,192,93,56,0,0,94,56,0,64,94,56,0,128,94,56,0,192,94,56,0,0,95,56,0,64,95,56,0,128,95,56,0,192,95,56,0,0,96,56,0,64,96,56,0,128,96,56,0,192,96,56,0,0,97,56,0,64,97,56,0,128,97,56,0,192,97,56,0,0,98,56,0,64,98,56,0,128,98,56,0,192,98,56,0,0,99,56,0,64,99,56,0,128,99,56,0,192,99,56,0,0,100,56,0,64,100,56,0,128,100,56,0,192,100,56,0,0,101,56,0,64,101,56,0,128,101,56,0,192,101,56,0,0,102,56,0,64,102,56,0,128,102,56,0,192,102,56,0,0,103,56,0,64,103,56,0,128,103,56,0,192,103,56,0,0,104,56,0,64,104,56,0,128,104,56,0,192,104,56,0,0,105,56,0,64,105,56,0,128,105,56,0,192,105,56,0,0,106,56,0,64,106,56,0,128,106,56,0,192,106,56,0,0,107,56,0,64,107,56,0,128,107,56,0,192,107,56,0,0,108,56,0,64,108,56,0,128,108,56,0,192,108,56,0,0,109,56,0,64,109,56,0,128,109,56,0,192,109,56,0,0,110,56,0,64,110,56,0,128,110,56,0,192,110,56,0,0,111,56,0,64,111,56,0,128,111,56,0,192,111,56,0,0,112,56,0,64,112,56,0,128,112,56,0,192,112,56,0,0,113,56,0,64,113,56,0,128,113,56,0,192,113,56,0,0,114,56,0,64,114,56,0,128,114,56,0,192,114,56,0,0,115,56,0,64,115,56,0,128,115,56,0,192,115,56,0,0,116,56,0,64,116,56,0,128,116,56,0,192,116,56,0,0,117,56,0,64,117,56,0,128,117,56,0,192,117,56,0,0,118,56,0,64,118,56,0,128,118,56,0,192,118,56,0,0,119,56,0,64,119,56,0,128,119,56,0,192,119,56,0,0,120,56,0,64,120,56,0,128,120,56,0,192,120,56,0,0,121,56,0,64,121,56,0,128,121,56,0,192,121,56,0,0,122,56,0,64,122,56,0,128,122,56,0,192,122,56,0,0,123,56,0,64,123,56,0,128,123,56,0,192,123,56,0,0,124,56,0,64,124,56,0,128,124,56,0,192,124,56,0,0,125,56,0,64,125,56,0,128,125,56,0,192,125,56,0,0,126,56,0,64,126,56,0,128,126,56,0,192,126,56,0,0,127,56,0,64,127,56,0,128,127,56,0,192,127,56,0,0,0,56,0,32,0,56,0,64,0,56,0,96,0,56,0,128,0,56,0,160,0,56,0,192,0,56,0,224,0,56,0,0,1,56,0,32,1,56,0,64,1,56,0,96,1,56,0,128,1,56,0,160,1,56,0,192,1,56,0,224,1,56,0,0,2,56,0,32,2,56,0,64,2,56,0,96,2,56,0,128,2,56,0,160,2,56,0,192,2,56,0,224,2,56,0,0,3,56,0,32,3,56,0,64,3,56,0,96,3,56,0,128,3,56,0,160,3,56,0,192,3,56,0,224,3,56,0,0,4,56,0,32,4,56,0,64,4,56,0,96,4,56,0,128,4,56,0,160,4,56,0,192,4,56,0,224,4,56,0,0,5,56,0,32,5,56,0,64,5,56,0,96,5,56,0,128,5,56,0,160,5,56,0,192,5,56,0,224,5,56,0,0,6,56,0,32,6,56,0,64,6,56,0,96,6,56,0,128,6,56,0,160,6,56,0,192,6,56,0,224,6,56,0,0,7,56,0,32,7,56,0,64,7,56,0,96,7,56,0,128,7,56,0,160,7,56,0,192,7,56,0,224,7,56,0,0,8,56,0,32,8,56,0,64,8,56,0,96,8,56,0,128,8,56,0,160,8,56,0,192,8,56,0,224,8,56,0,0,9,56,0,32,9,56,0,64,9,56,0,96,9,56,0,128,9,56,0,160,9,56,0,192,9,56,0,224,9,56,0,0,10,56,0,32,10,56,0,64,10,56,0,96,10,56,0,128,10,56,0,160,10,56,0,192,10,56,0,224,10,56,0,0,11,56,0,32,11,56,0,64,11,56,0,96,11,56,0,128,11,56,0,160,11,56,0,192,11,56,0,224,11,56,0,0,12,56,0,32,12,56,0,64,12,56,0,96,12,56,0,128,12,56,0,160,12,56,0,192,12,56,0,224,12,56,0,0,13,56,0,32,13,56,0,64,13,56,0,96,13,56,0,128,13,56,0,160,13,56,0,192,13,56,0,224,13,56,0,0,14,56,0,32,14,56,0,64,14,56,0,96,14,56,0,128,14,56,0,160,14,56,0,192,14,56,0,224,14,56,0,0,15,56,0,32,15,56,0,64,15,56,0,96,15,56,0,128,15,56,0,160,15,56,0,192,15,56,0,224,15,56,0,0,16,56,0,32,16,56,0,64,16,56,0,96,16,56,0,128,16,56,0,160,16,56,0,192,16,56,0,224,16,56,0,0,17,56,0,32,17,56,0,64,17,56,0,96,17,56,0,128,17,56,0,160,17,56,0,192,17,56,0,224,17,56,0,0,18,56,0,32,18,56,0,64,18,56,0,96,18,56,0,128,18,56,0,160,18,56,0,192,18,56,0,224,18,56,0,0,19,56,0,32,19,56,0,64,19,56,0,96,19,56,0,128,19,56,0,160,19,56,0,192,19,56,0,224,19,56,0,0,20,56,0,32,20,56,0,64,20,56,0,96,20,56,0,128,20,56,0,160,20,56,0,192,20,56,0,224,20,56,0,0,21,56,0,32,21,56,0,64,21,56,0,96,21,56,0,128,21,56,0,160,21,56,0,192,21,56,0,224,21,56,0,0,22,56,0,32,22,56,0,64,22,56,0,96,22,56,0,128,22,56,0,160,22,56,0,192,22,56,0,224,22,56,0,0,23,56,0,32,23,56,0,64,23,56,0,96,23,56,0,128,23,56,0,160,23,56,0,192,23,56,0,224,23,56,0,0,24,56,0,32,24,56,0,64,24,56,0,96,24,56,0,128,24,56,0,160,24,56,0,192,24,56,0,224,24,56,0,0,25,56,0,32,25,56,0,64,25,56,0,96,25,56,0,128,25,56,0,160,25,56,0,192,25,56,0,224,25,56,0,0,26,56,0,32,26,56,0,64,26,56,0,96,26,56,0,128,26,56,0,160,26,56,0,192,26,56,0,224,26,56,0,0,27,56,0,32,27,56,0,64,27,56,0,96,27,56,0,128,27,56,0,160,27,56,0,192,27,56,0,224,27,56,0,0,28,56,0,32,28,56,0,64,28,56,0,96,28,56,0,128,28,56,0,160,28,56,0,192,28,56,0,224,28,56,0,0,29,56,0,32,29,56,0,64,29,56,0,96,29,56,0,128,29,56,0,160,29,56,0,192,29,56,0,224,29,56,0,0,30,56,0,32,30,56,0,64,30,56,0,96,30,56,0,128,30,56,0,160,30,56,0,192,30,56,0,224,30,56,0,0,31,56,0,32,31,56,0,64,31,56,0,96,31,56,0,128,31,56,0,160,31,56,0,192,31,56,0,224,31,56,0,0,32,56,0,32,32,56,0,64,32,56,0,96,32,56,0,128,32,56,0,160,32,56,0,192,32,56,0,224,32,56,0,0,33,56,0,32,33,56,0,64,33,56,0,96,33,56,0,128,33,56,0,160,33,56,0,192,33,56,0,224,33,56,0,0,34,56,0,32,34,56,0,64,34,56,0,96,34,56,0,128,34,56,0,160,34,56,0,192,34,56,0,224,34,56,0,0,35,56,0,32,35,56,0,64,35,56,0,96,35,56,0,128,35,56,0,160,35,56,0,192,35,56,0,224,35,56,0,0,36,56,0,32,36,56,0,64,36,56,0,96,36,56,0,128,36,56,0,160,36,56,0,192,36,56,0,224,36,56,0,0,37,56,0,32,37,56,0,64,37,56,0,96,37,56,0,128,37,56,0,160,37,56,0,192,37,56,0,224,37,56,0,0,38,56,0,32,38,56,0,64,38,56,0,96,38,56,0,128,38,56,0,160,38,56,0,192,38,56,0,224,38,56,0,0,39,56,0,32,39,56,0,64,39,56,0,96,39,56,0,128,39,56,0,160,39,56,0,192,39,56,0,224,39,56,0,0,40,56,0,32,40,56,0,64,40,56,0,96,40,56,0,128,40,56,0,160,40,56,0,192,40,56,0,224,40,56,0,0,41,56,0,32,41,56,0,64,41,56,0,96,41,56,0,128,41,56,0,160,41,56,0,192,41,56,0,224,41,56,0,0,42,56], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([0,32,42,56,0,64,42,56,0,96,42,56,0,128,42,56,0,160,42,56,0,192,42,56,0,224,42,56,0,0,43,56,0,32,43,56,0,64,43,56,0,96,43,56,0,128,43,56,0,160,43,56,0,192,43,56,0,224,43,56,0,0,44,56,0,32,44,56,0,64,44,56,0,96,44,56,0,128,44,56,0,160,44,56,0,192,44,56,0,224,44,56,0,0,45,56,0,32,45,56,0,64,45,56,0,96,45,56,0,128,45,56,0,160,45,56,0,192,45,56,0,224,45,56,0,0,46,56,0,32,46,56,0,64,46,56,0,96,46,56,0,128,46,56,0,160,46,56,0,192,46,56,0,224,46,56,0,0,47,56,0,32,47,56,0,64,47,56,0,96,47,56,0,128,47,56,0,160,47,56,0,192,47,56,0,224,47,56,0,0,48,56,0,32,48,56,0,64,48,56,0,96,48,56,0,128,48,56,0,160,48,56,0,192,48,56,0,224,48,56,0,0,49,56,0,32,49,56,0,64,49,56,0,96,49,56,0,128,49,56,0,160,49,56,0,192,49,56,0,224,49,56,0,0,50,56,0,32,50,56,0,64,50,56,0,96,50,56,0,128,50,56,0,160,50,56,0,192,50,56,0,224,50,56,0,0,51,56,0,32,51,56,0,64,51,56,0,96,51,56,0,128,51,56,0,160,51,56,0,192,51,56,0,224,51,56,0,0,52,56,0,32,52,56,0,64,52,56,0,96,52,56,0,128,52,56,0,160,52,56,0,192,52,56,0,224,52,56,0,0,53,56,0,32,53,56,0,64,53,56,0,96,53,56,0,128,53,56,0,160,53,56,0,192,53,56,0,224,53,56,0,0,54,56,0,32,54,56,0,64,54,56,0,96,54,56,0,128,54,56,0,160,54,56,0,192,54,56,0,224,54,56,0,0,55,56,0,32,55,56,0,64,55,56,0,96,55,56,0,128,55,56,0,160,55,56,0,192,55,56,0,224,55,56,0,0,56,56,0,32,56,56,0,64,56,56,0,96,56,56,0,128,56,56,0,160,56,56,0,192,56,56,0,224,56,56,0,0,57,56,0,32,57,56,0,64,57,56,0,96,57,56,0,128,57,56,0,160,57,56,0,192,57,56,0,224,57,56,0,0,58,56,0,32,58,56,0,64,58,56,0,96,58,56,0,128,58,56,0,160,58,56,0,192,58,56,0,224,58,56,0,0,59,56,0,32,59,56,0,64,59,56,0,96,59,56,0,128,59,56,0,160,59,56,0,192,59,56,0,224,59,56,0,0,60,56,0,32,60,56,0,64,60,56,0,96,60,56,0,128,60,56,0,160,60,56,0,192,60,56,0,224,60,56,0,0,61,56,0,32,61,56,0,64,61,56,0,96,61,56,0,128,61,56,0,160,61,56,0,192,61,56,0,224,61,56,0,0,62,56,0,32,62,56,0,64,62,56,0,96,62,56,0,128,62,56,0,160,62,56,0,192,62,56,0,224,62,56,0,0,63,56,0,32,63,56,0,64,63,56,0,96,63,56,0,128,63,56,0,160,63,56,0,192,63,56,0,224,63,56,0,0,64,56,0,32,64,56,0,64,64,56,0,96,64,56,0,128,64,56,0,160,64,56,0,192,64,56,0,224,64,56,0,0,65,56,0,32,65,56,0,64,65,56,0,96,65,56,0,128,65,56,0,160,65,56,0,192,65,56,0,224,65,56,0,0,66,56,0,32,66,56,0,64,66,56,0,96,66,56,0,128,66,56,0,160,66,56,0,192,66,56,0,224,66,56,0,0,67,56,0,32,67,56,0,64,67,56,0,96,67,56,0,128,67,56,0,160,67,56,0,192,67,56,0,224,67,56,0,0,68,56,0,32,68,56,0,64,68,56,0,96,68,56,0,128,68,56,0,160,68,56,0,192,68,56,0,224,68,56,0,0,69,56,0,32,69,56,0,64,69,56,0,96,69,56,0,128,69,56,0,160,69,56,0,192,69,56,0,224,69,56,0,0,70,56,0,32,70,56,0,64,70,56,0,96,70,56,0,128,70,56,0,160,70,56,0,192,70,56,0,224,70,56,0,0,71,56,0,32,71,56,0,64,71,56,0,96,71,56,0,128,71,56,0,160,71,56,0,192,71,56,0,224,71,56,0,0,72,56,0,32,72,56,0,64,72,56,0,96,72,56,0,128,72,56,0,160,72,56,0,192,72,56,0,224,72,56,0,0,73,56,0,32,73,56,0,64,73,56,0,96,73,56,0,128,73,56,0,160,73,56,0,192,73,56,0,224,73,56,0,0,74,56,0,32,74,56,0,64,74,56,0,96,74,56,0,128,74,56,0,160,74,56,0,192,74,56,0,224,74,56,0,0,75,56,0,32,75,56,0,64,75,56,0,96,75,56,0,128,75,56,0,160,75,56,0,192,75,56,0,224,75,56,0,0,76,56,0,32,76,56,0,64,76,56,0,96,76,56,0,128,76,56,0,160,76,56,0,192,76,56,0,224,76,56,0,0,77,56,0,32,77,56,0,64,77,56,0,96,77,56,0,128,77,56,0,160,77,56,0,192,77,56,0,224,77,56,0,0,78,56,0,32,78,56,0,64,78,56,0,96,78,56,0,128,78,56,0,160,78,56,0,192,78,56,0,224,78,56,0,0,79,56,0,32,79,56,0,64,79,56,0,96,79,56,0,128,79,56,0,160,79,56,0,192,79,56,0,224,79,56,0,0,80,56,0,32,80,56,0,64,80,56,0,96,80,56,0,128,80,56,0,160,80,56,0,192,80,56,0,224,80,56,0,0,81,56,0,32,81,56,0,64,81,56,0,96,81,56,0,128,81,56,0,160,81,56,0,192,81,56,0,224,81,56,0,0,82,56,0,32,82,56,0,64,82,56,0,96,82,56,0,128,82,56,0,160,82,56,0,192,82,56,0,224,82,56,0,0,83,56,0,32,83,56,0,64,83,56,0,96,83,56,0,128,83,56,0,160,83,56,0,192,83,56,0,224,83,56,0,0,84,56,0,32,84,56,0,64,84,56,0,96,84,56,0,128,84,56,0,160,84,56,0,192,84,56,0,224,84,56,0,0,85,56,0,32,85,56,0,64,85,56,0,96,85,56,0,128,85,56,0,160,85,56,0,192,85,56,0,224,85,56,0,0,86,56,0,32,86,56,0,64,86,56,0,96,86,56,0,128,86,56,0,160,86,56,0,192,86,56,0,224,86,56,0,0,87,56,0,32,87,56,0,64,87,56,0,96,87,56,0,128,87,56,0,160,87,56,0,192,87,56,0,224,87,56,0,0,88,56,0,32,88,56,0,64,88,56,0,96,88,56,0,128,88,56,0,160,88,56,0,192,88,56,0,224,88,56,0,0,89,56,0,32,89,56,0,64,89,56,0,96,89,56,0,128,89,56,0,160,89,56,0,192,89,56,0,224,89,56,0,0,90,56,0,32,90,56,0,64,90,56,0,96,90,56,0,128,90,56,0,160,90,56,0,192,90,56,0,224,90,56,0,0,91,56,0,32,91,56,0,64,91,56,0,96,91,56,0,128,91,56,0,160,91,56,0,192,91,56,0,224,91,56,0,0,92,56,0,32,92,56,0,64,92,56,0,96,92,56,0,128,92,56,0,160,92,56,0,192,92,56,0,224,92,56,0,0,93,56,0,32,93,56,0,64,93,56,0,96,93,56,0,128,93,56,0,160,93,56,0,192,93,56,0,224,93,56,0,0,94,56,0,32,94,56,0,64,94,56,0,96,94,56,0,128,94,56,0,160,94,56,0,192,94,56,0,224,94,56,0,0,95,56,0,32,95,56,0,64,95,56,0,96,95,56,0,128,95,56,0,160,95,56,0,192,95,56,0,224,95,56,0,0,96,56,0,32,96,56,0,64,96,56,0,96,96,56,0,128,96,56,0,160,96,56,0,192,96,56,0,224,96,56,0,0,97,56,0,32,97,56,0,64,97,56,0,96,97,56,0,128,97,56,0,160,97,56,0,192,97,56,0,224,97,56,0,0,98,56,0,32,98,56,0,64,98,56,0,96,98,56,0,128,98,56,0,160,98,56,0,192,98,56,0,224,98,56,0,0,99,56,0,32,99,56,0,64,99,56,0,96,99,56,0,128,99,56,0,160,99,56,0,192,99,56,0,224,99,56,0,0,100,56,0,32,100,56,0,64,100,56,0,96,100,56,0,128,100,56,0,160,100,56,0,192,100,56,0,224,100,56,0,0,101,56,0,32,101,56,0,64,101,56,0,96,101,56,0,128,101,56,0,160,101,56,0,192,101,56,0,224,101,56,0,0,102,56,0,32,102,56,0,64,102,56,0,96,102,56,0,128,102,56,0,160,102,56,0,192,102,56,0,224,102,56,0,0,103,56,0,32,103,56,0,64,103,56,0,96,103,56,0,128,103,56,0,160,103,56,0,192,103,56,0,224,103,56,0,0,104,56,0,32,104,56,0,64,104,56,0,96,104,56,0,128,104,56,0,160,104,56,0,192,104,56,0,224,104,56,0,0,105,56,0,32,105,56,0,64,105,56,0,96,105,56,0,128,105,56,0,160,105,56,0,192,105,56,0,224,105,56,0,0,106,56,0,32,106,56,0,64,106,56,0,96,106,56,0,128,106,56,0,160,106,56,0,192,106,56,0,224,106,56,0,0,107,56,0,32,107,56,0,64,107,56,0,96,107,56,0,128,107,56,0,160,107,56,0,192,107,56,0,224,107,56,0,0,108,56,0,32,108,56,0,64,108,56,0,96,108,56,0,128,108,56,0,160,108,56,0,192,108,56,0,224,108,56,0,0,109,56,0,32,109,56,0,64,109,56,0,96,109,56,0,128,109,56,0,160,109,56,0,192,109,56,0,224,109,56,0,0,110,56,0,32,110,56,0,64,110,56,0,96,110,56,0,128,110,56,0,160,110,56,0,192,110,56,0,224,110,56,0,0,111,56,0,32,111,56,0,64,111,56,0,96,111,56,0,128,111,56,0,160,111,56,0,192,111,56,0,224,111,56,0,0,112,56,0,32,112,56,0,64,112,56,0,96,112,56,0,128,112,56,0,160,112,56,0,192,112,56,0,224,112,56,0,0,113,56,0,32,113,56,0,64,113,56,0,96,113,56,0,128,113,56,0,160,113,56,0,192,113,56,0,224,113,56,0,0,114,56,0,32,114,56,0,64,114,56,0,96,114,56,0,128,114,56,0,160,114,56,0,192,114,56,0,224,114,56,0,0,115,56,0,32,115,56,0,64,115,56,0,96,115,56,0,128,115,56,0,160,115,56,0,192,115,56,0,224,115,56,0,0,116,56,0,32,116,56,0,64,116,56,0,96,116,56,0,128,116,56,0,160,116,56,0,192,116,56,0,224,116,56,0,0,117,56,0,32,117,56,0,64,117,56,0,96,117,56,0,128,117,56,0,160,117,56,0,192,117,56,0,224,117,56,0,0,118,56,0,32,118,56,0,64,118,56,0,96,118,56,0,128,118,56,0,160,118,56,0,192,118,56,0,224,118,56,0,0,119,56,0,32,119,56,0,64,119,56,0,96,119,56,0,128,119,56,0,160,119,56,0,192,119,56,0,224,119,56,0,0,120,56,0,32,120,56,0,64,120,56,0,96,120,56,0,128,120,56,0,160,120,56,0,192,120,56,0,224,120,56,0,0,121,56,0,32,121,56,0,64,121,56,0,96,121,56,0,128,121,56,0,160,121,56,0,192,121,56,0,224,121,56,0,0,122,56,0,32,122,56,0,64,122,56,0,96,122,56,0,128,122,56,0,160,122,56,0,192,122,56,0,224,122,56,0,0,123,56,0,32,123,56,0,64,123,56,0,96,123,56,0,128,123,56,0,160,123,56,0,192,123,56,0,224,123,56,0,0,124,56,0,32,124,56,0,64,124,56,0,96,124,56,0,128,124,56,0,160,124,56,0,192,124,56,0,224,124,56,0,0,125,56,0,32,125,56,0,64,125,56,0,96,125,56,0,128,125,56,0,160,125,56,0,192,125,56,0,224,125,56,0,0,126,56,0,32,126,56,0,64,126,56,0,96,126,56,0,128,126,56,0,160,126,56,0,192,126,56,0,224,126,56,0,0,127,56,0,32,127,56,0,64,127,56,0,96,127,56,0,128,127,56,0,160,127,56,0,192,127,56,0,224,127,56,0,0,0,0,0,0,128,0,0,0,0,1,0,0,128,1,0,0,0,2,0,0,128,2,0,0,0,3,0,0,128,3,0,0,0,4,0,0,128,4,0,0,0,5,0,0,128,5,0,0,0,6,0,0,128,6,0,0,0,7,0,0,128,7,0,0,0,8,0,0,128,8,0,0,0,9,0,0,128,9,0,0,0,10,0,0,128,10,0,0,0,11,0,0,128,11,0,0,0,12,0,0,128,12,0,0,0,13,0,0,128,13,0,0,0,14,0,0,128,14,0,0,0,15,0,0,128,71,0,0,0,128,0,0,128,128,0,0,0,129,0,0,128,129,0,0,0,130,0,0,128,130,0,0,0,131,0,0,128,131,0,0,0,132,0,0,128,132,0,0,0,133,0,0,128,133,0,0,0,134,0,0,128,134,0,0,0,135,0,0,128,135,0,0,0,136,0,0,128,136,0,0,0,137,0,0,128,137,0,0,0,138,0,0,128,138,0,0,0,139,0,0,128,139,0,0,0,140,0,0,128,140,0,0,0,141,0,0,128,141,0,0,0,142,0,0,128,142,0,0,0,143,0,0,128,199,48,66,50,65,49,66,50,65,50,66,50,65,49,66,50,65,48,66,50,68,49,66,50,68,50,66,50,68,51,66,50,68,48,65,50,66,49,65,50,66,50,65,50,66,49,65,50,66,48,68,50,66,49,68,50,66,50,68,50,66,51,68,50,66,1,0,0,0,12,52,0,0,2,0,0,0,20,52,0,0,3,0,0,0,28,52,0,0,4,0,0,0,0,0,0,0,24,0,74,0,128,19,0,0,1,0,0,0,24,0,73,0,128,19,0,0,2,0,0,0,28,0,74,0,128,19,0,0,3,0,0,0,28,0,73,0,128,19,0,0,4,0,0,0,0,0,64,0,248,119,31,0,5,0,0,0,4,0,64,0,248,119,31,0,6,0,0,0,2,0,64,0,248,119,31,0,7,0,0,0,9,0,0,0,0,0,31,0,8,0,0,0,137,0,0,0,0,0,31,0,9,0,0,0,137,64,0,0,0,0,31,0,10,0,0,0,9,32,0,0,0,0,31,0,11,0,0,0,25,0,30,0,0,0,0,0,12,0,0,0,153,64,30,0,0,0,0,0,13,0,0,0,26,0,30,0,0,0,0,0,14,0,0,0,25,0,32,0,0,0,31,0,15,0,0,0,153,0,32,0,0,0,31,0,16,0,0,0,153,64,32,0,0,0,31,0,17,0,0,0,153,68,32,0,0,0,31,0,18,0,0,0,153,4,32,0,0,0,31,0,19,0,0,0,25,4,32,0,0,0,31,0,20,0,0,0,25,0,0,0,0,0,31,0,21,0,0,0,153,0,0,0,0,0,31,0,22,0,0,0,153,64,0,0,0,0,31,0,23,0,0,0,153,68,0,0,0,0,31,0,24,0,0,0,153,4,0,0,0,0,31,0,25,0,0,0,25,4,0,0,0,0,31,0,26,0,0,0,49,0,0,0,0,0,31,0,27,0,0,0,49,4,0,0,0,0,31,0,28,0,0,0,33,0,0,0,0,0,31,0,29,0,0,0,33,32,0,0,0,0,31,0,30,0,0,0,33,64,0,0,0,0,31,0,31,0,0,0,33,4,0,0,0,0,31,0,32,0,0,0,33,68,0,0,0,0,31,0,33,0,0,0,1,0,0,0,248,103,31,0,34,0,0,0,1,16,0,0,248,103,31,0,35,0,0,0,10,0,0,0,0,0,31,0,36,0,0,0,138,0,0,0,0,0,31,0,37,0,0,0,138,64,0,0,0,0,31,0,38,0,0,0,10,32,0,0,0,0,31,0,39,0,0,0,10,8,0,0,0,0,31,0,40,0,0,0,26,0,0,0,0,0,31,0,41,0,0,0,26,4,0,0,0,0,31,0,42,0,0,0,26,8,0,0,0,0,31,0,43,0,0,0,154,0,0,0,0,0,31,0,44,0,0,0,154,4,0,0,0,0,31,0,45,0,0,0,154,64,0,0,0,0,31,0,46,0,0,0,154,68,0,0,0,0,31,0,47,0,0,0,34,0,0,0,0,0,31,0,48,0,0,0,34,32,0,0,0,0,31,0,49,0,0,0,34,4,0,0,0,0,31,0,50,0,0,0,34,8,0,0,0,0,31,0,51,0,0,0,50,0,0,0,0,0,31,0,52,0,0,0,50,4,0,0,0,0,31,0,53,0,0,0,2,16,0,0,248,47,31,0,54,0,0,0,2,0,0,0,248,111,31,0,55,0,0,0,28,0,74,0,128,19,0,0,56,0,0,0,28,0,73,0,128,19,0,0,57,0,0,0,24,0,74,0,128,19,0,0,58,0,0,0,24,0,73,0,128,19,0,0,59,0,0,0,4,0,64,0,248,119,31,0,60,0,0,0,0,0,64,0,248,119,31,0,61,0,0,0,2,0,64,0,248,103,31,0,62,0,0,0,24,0,74,0,128,19,0,0,63,0,0,0,24,0,73,0,128,19,0,0,64,0,0,0,28,0,74,0,128,19,0,0,65,0,0,0,28,0,73,0,128,19,0,0,66,0,0,0,8,0,67,0,0,0,0,0,67,0,0,0,0,0,64,0,248,119,31,0,68,0,0,0,4,0,64,0,248,119,31,0,69,0,0,0,2,0,64,0,248,119,31,0,70,0,0,0,9,0,0,0,0,0,31,0,71,0,0,0,137,0,0,0,0,0,31,0,72,0,0,0,9,1,0,0,0,0,31,0,73,0,0,0,9,32,0,0,0,0,31,0,74,0,0,0,17,0,16,0,0,0,0,0,75,0,0,0,25,0,30,0,0,0,0,0,76,0,0,0,153,64,30,0,0,0,0,0,77,0,0,0,26,0,30,0,0,0,0,0,78,0,0,0,25,0,0,0,0,0,31,0,79,0,0,0,25,4,0,0,0,0,31,0,80,0,0,0,153,4,0,0,0,0,31,0,81,0,0,0,153,64,0,0,0,0,31,0,82,0,0,0,153,68,0,0,0,0,31,0,83,0,0,0,33,0,0,0,0,0,31,0,84,0,0,0,33,32,0,0,0,0,31,0,85,0,0,0,33,64,0,0,0,0,31,0,86,0,0,0,33,4,0,0,0,0,31,0,87,0,0,0,33,68,0,0,0,0,31,0,88,0,0,0,1,16,0,0,248,103,31,0,89,0,0,0,1,0,0,0,248,103,31,0,90,0,0,0,10,0,0,0,0,0,31,0,91,0,0,0,10,32,0,0,0,0,31,0,92,0,0,0,138,1,0,0,0,0,31,0,93,0,0,0,18,0,0,0,0,0,31,0,94,0,0,0,26,0,0,0,0,0,31,0,95,0,0,0,34,0,0,0,0,0,31,0,96,0,0,0,26,4,0,0,0,0,31,0,97,0,0,0,154,64,0,0,0,0,31,0,98,0,0,0,154,4,0,0,0,0,31,0,99,0,0,0,34,32,0,0,0,0,31,0,100,0,0,0,34,64,0,0,0,0,31,0,101,0,0,0,34,4,0,0,0,0,31,0,102,0,0,0,34,68,0,0,0,0,31,0,103,0,0,0,2,16,0,0,248,47,31,0,104,0,0,0,2,0,0,0,248,111,31,0,105,0,0,0,24,0,74,0,128,19,0,0,106,0,0,0,28,0,74,0,128,19,0,0,107,0,0,0,24,0,73,0,128,19,0,0,108,0,0,0,28,0,73,0,128,19,0,0,109,0,0,0,4,0,64,0,248,87,31,0,110,0,0,0,0,0,64,0,248,87,31,0,111,0,0,0,2,0,64,0,248,87,31,0,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,18,0,0,64,95,0,0,8,7,0,0,236,17,0,0,112,126,0,0,108,126,0,0,120,126,0,0,132,126,0,0,136,126,0,0,104,126,0,0,128,126,0,0,116,126,0,0,144,126,0,0,8,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,109,114,104,99,113,0,0,0,114,0,0,0,4,0,0,0,28,0,0,0,0,0,0,0,0,0,0,0,224,57,0,0,111,114,108,99,115,0,0,0,116,0,0,0,5,0,0,0,29,0,0,0,0,0,0,0,0,0,0,0,0,58,0,0,50,51,102,115,117,0,0,0,118,0,0,0,6,0,0,0,30,0,0,0,0,0,0,0,0,0,0,0,32,58,0,0,50,51,102,117,119,0,0,0,120,0,0,0,7,0,0,0,31,0,0,0,0,0,0,0,0,0,0,0,64,58,0,0,116,120,101,116,121,0,0,0,122,0,0,0,8,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,96,58,0,0,99,115,101,100,123,0,0,0,124,0,0,0,9,0,0,0,33,0,0,0,0,0,0,0,0,0,0,0,128,58,0,0,118,114,117,99,125,0,0,0,126,0,0,0,10,0,0,0,34,0,0,0,0,0,0,0,0,0,0,0,160,58,0,0,97,114,97,112,127,0,0,0,128,0,0,0,11,0,0,0,35,0,0,0,0,0,0,0,0,0,0,0,192,58,0,0,109,105,116,100,129,0,0,0,130,0,0,0,12,0,0,0,36,0,0,0,0,0,0,0,0,0,0,0,224,58,0,0,49,116,102,109,131,0,0,0,132,0,0,0,13,0,0,0,37,0,0,0,0,0,0,0,0,0,0,0,0,59,0,0,50,116,102,109,133,0,0,0,134,0,0,0,14,0,0,0,38,0,0,0,0,0,0,0,0,0,0,0,32,59,0,0,116,114,108,99,135,0,0,0,136,0,0,0,15,0,0,0,39,0,0,0,0,0,0,0,0,0,0,0,64,59,0,0,50,108,99,110,137,0,0,0,138,0,0,0,16,0,0,0,40,0,0,0,0,0,0,0,0,0,0,0,96,59,0,0,99,117,108,109,139,0,0,0,140,0,0,0,17,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,128,59,0,0,113,101,115,112,141,0,0,0,142,0,0,0,18,0,0,0,42,0,0,0,0,0,0,0,0,0,0,0,160,59,0,0,32,103,105,115,143,0,0,0,144,0,0,0,19,0,0,0,43,0,0,0,0,0,0,0,0,0,0,0,192,59,0,0,115,97,101,109,145,0,0,0,146,0,0,0,20,0,0,0,44,0,0,0,0,0,0,0,0,0,0,0,224,59,0,0,97,116,97,100,147,0,0,0,148,0,0,0,21,0,0,0,45,0,0,0,0,0,0,0,0,0,0,0,0,60,0,0,32,66,65,109,149,0,0,0,150,0,0,0,22,0,0,0,46,0,0,0,0,0,0,0,0,0,0,0,32,60,0,0,32,65,66,109,151,0,0,0,152,0,0,0,23,0,0,0,47,0,0,0,0,0,0,0,0,0,0,0,64,60,0,0,32,100,102,98,153,0,0,0,154,0,0,0,24,0,0,0,48,0,0,0,0,0,0,0,0,0,0,0,96,60,0,0,105,100,114,99,155,0,0,0,156,0,0,0,25,0,0,0,49,0,0,0,0,0,0,0,0,0,0,0,128,60,0,0,116,101,112,109,157,0,0,0,158,0,0,0,26,0,0,0,50,0,0,0,0,0,0,0,0,0,0,0,160,60,0,0,110,114,99,115,159,0,0,0,160,0,0,0,27,0,0,0,51,0,0,0,0,0,0,0,0,0,0,0,192,60,0,0,119,101,105,118,161,0,0,0,162,0,0,0,28,0,0,0,52,0,0,0,0,0,0,0,0,0,0,0,224,60,0,0,32,90,89,88,163,0,0,0,164,0,0,0,29,0,0,0,53,0,0,0,0,0,0,0,0,0,0,0,0,61,0,0,184,5,165,23,163,0,0,0,164,0,0,0,29,0,0,0,53,0,0,0,0,0,0,0,0,0,0,0,32,61,0,0,0,238,120,148,125,0,0,0,126,0,0,0,10,0,0,0,34,0,0,0,0,0,0,0,0,0,0,0,64,61,0,0,100,105,115,112,165,0,0,0,166,0,0,0,30,0,0,0,54,0,0,0,0,0,0,0,0,0,0,0,96,61,0,0,116,99,105,100,167,0,0,0,168,0,0,0,31,0,0,0,55,0,0,0,0,0,0,0,0,0,0,0,128,61,0,0,116,103,99,118,169,0,0,0,170,0,0,0,32,0,0,0,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,67,65,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,61,0,0,83,67,65,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,61,0,0,116,115,118,99,171,0,0,0,172,0,0,0,33,0,0,0,57,0,0,0,0,0,0,0,0,0,0,0,0,62,0,0,102,116,97,109,173,0,0,0,174,0,0,0,33,0,0,0,57,0,0,0,0,0,0,0,0,0,0,0,32,62,0,0,116,117,108,99,175,0,0,0,176,0,0,0,33,0,0,0,57,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,0,0,0,0,1,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,7,0,0,0,1,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,7,0,0,0,48,66,50,65,1,0,0,0,3,0,0,0,50,116,102,109,32,66,65,109,49,116,102,109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,220,62,0,0,49,66,50,65,1,0,0,0,3,0,0,0,50,116,102,109,32,66,65,109,49,116,102,109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,64,63,0,0,50,66,50,65,1,0,0,0,3,0,0,0,50,116,102,109,32,66,65,109,49,116,102,109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,164,63,0,0,48,65,50,66,1,0,0,0,3,0,0,0,50,116,102,109,32,65,66,109,49,116,102,109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,8,64,0,0,49,65,50,66,1,0,0,0,3,0,0,0,50,116,102,109,32,65,66,109,49,116,102,109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,108,64,0,0,50,65,50,66,1,0,0,0,3,0,0,0,50,116,102,109,32,65,66,109,49,116,102,109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,208,64,0,0,90,89,88,114,1,0,0,0,2,0,0,0,32,90,89,88,184,5,165,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,52,65,0,0,90,89,88,103,1,0,0,0,2,0,0,0,32,90,89,88,184,5,165,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,152,65,0,0,90,89,88,98,1,0,0,0,2,0,0,0,32,90,89,88,184,5,165,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,252,65,0,0,67,82,84,114,1,0,0,0,3,0,0,0,118,114,117,99,97,114,97,112,0,238,120,148,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,96,66,0,0,67,82,84,103,1,0,0,0,3,0,0,0,118,114,117,99,97,114,97,112,0,238,120,148,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,196,66,0,0,67,82,84,98,1,0,0,0,3,0,0,0,118,114,117,99,97,114,97,112,0,238,120,148,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,40,67,0,0,116,108,97,99,1,0,0,0,1,0,0,0,109,105,116,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,140,67,0,0,103,114,97,116,1,0,0,0,1,0,0,0,116,120,101,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,67,0,0,100,97,104,99,9,0,0,0,1,0,0,0,50,51,102,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,68,0,0,109,114,104,99,1,0,0,0,1,0,0,0,109,114,104,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,68,0,0,111,114,108,99,1,0,0,0,1,0,0,0,111,114,108,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,69,0,0,116,114,108,99,1,0,0,0,1,0,0,0,116,114,108,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,69,0,0,116,111,108,99,1,0,0,0,1,0,0,0,116,114,108,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,228,69,0,0,116,114,112,99,1,0,0,0,3,0,0,0,116,120,101,116,99,117,108,109,99,115,101,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,72,70,0,0,109,105,116,100,1,0,0,0,1,0,0,0,109,105,116,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,70,0,0,100,110,109,100,1,0,0,0,3,0,0,0,99,115,101,100,99,117,108,109,116,120,101,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,16,71,0,0,100,100,109,100,1,0,0,0,3,0,0,0,99,115,101,100,99,117,108,109,116,120,101,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,116,71,0,0,116,109,97,103,1,0,0,0,3,0,0,0,50,116,102,109,32,65,66,109,49,116,102,109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,216,71,0,0,67,82,84,107,1,0,0,0,2,0,0,0,118,114,117,99,97,114,97,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,60,72,0,0,105,109,117,108,1,0,0,0,1,0,0,0,32,90,89,88,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,72,0,0,116,112,107,98,1,0,0,0,2,0,0,0,32,90,89,88,184,5,165,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,73,0,0,116,112,116,119,1,0,0,0,2,0,0,0,32,90,89,88,184,5,165,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,73,0,0,50,108,99,110,1,0,0,0,1,0,0,0,50,108,99,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,204,73,0,0,48,101,114,112,1,0,0,0,3,0,0,0,50,116,102,109,32,65,66,109,49,116,102,109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,48,74,0,0,49,101,114,112,1,0,0,0,3,0,0,0,50,116,102,109,32,65,66,109,49,116,102,109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,148,74,0,0,50,101,114,112,1,0,0,0,3,0,0,0,50,116,102,109,32,65,66,109,49,116,102,109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,248,74,0,0,99,115,101,100,1,0,0,0,3,0,0,0,99,115,101,100,99,117,108,109,116,120,101,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,92,75,0,0,113,101,115,112,1,0,0,0,1,0,0,0,113,101,115,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,75,0,0,104,99,101,116,1,0,0,0,1,0,0,0,32,103,105,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,76,0,0,115,105,105,99,1,0,0,0,1,0,0,0,32,103,105,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,76,0,0,48,103,105,114,1,0,0,0,1,0,0,0,32,103,105,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,236,76,0,0,50,103,105,114,1,0,0,0,1,0,0,0,32,103,105,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,77,0,0,115,97,101,109,1,0,0,0,1,0,0,0,115,97,101,109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,77,0,0,48,100,115,112,1,0,0,0,1,0,0,0,97,116,97,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,78,0,0,49,100,115,112,1,0,0,0,1,0,0,0,97,116,97,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,124,78,0,0,50,100,115,112,1,0,0,0,1,0,0,0,97,116,97,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,78,0,0,51,100,115,112,1,0,0,0,1,0,0,0,97,116,97,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,79,0,0,115,50,115,112,1,0,0,0,1,0,0,0,97,116,97,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,79,0,0,105,50,115,112,1,0,0,0,1,0,0,0,97,116,97,100], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+10240);
/* memory initializer */ allocate([12,80,0,0,100,101,117,118,1,0,0,0,3,0,0,0,99,115,101,100,99,117,108,109,116,120,101,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,112,80,0,0,32,100,102,98,1,0,0,0,1,0,0,0,32,100,102,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,212,80,0,0,105,100,114,99,1,0,0,0,1,0,0,0,105,100,114,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,81,0,0,48,66,50,68,1,0,0,0,1,0,0,0,116,101,112,109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,156,81,0,0,49,66,50,68,1,0,0,0,1,0,0,0,116,101,112,109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,82,0,0,50,66,50,68,1,0,0,0,1,0,0,0,116,101,112,109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,82,0,0,51,66,50,68,1,0,0,0,1,0,0,0,116,101,112,109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,82,0,0,48,68,50,66,1,0,0,0,1,0,0,0,116,101,112,109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,83,0,0,49,68,50,66,1,0,0,0,1,0,0,0,116,101,112,109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,83,0,0,50,68,50,66,1,0,0,0,1,0,0,0,116,101,112,109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,244,83,0,0,51,68,50,66,1,0,0,0,1,0,0,0,116,101,112,109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,88,84,0,0,100,114,99,115,1,0,0,0,1,0,0,0,99,115,101,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,188,84,0,0,119,101,105,118,1,0,0,0,1,0,0,0,119,101,105,118,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,85,0,0,110,114,99,115,1,0,0,0,1,0,0,0,110,114,99,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,132,85,0,0,116,103,99,118,1,0,0,0,1,0,0,0,116,103,99,118,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,85,0,0,97,116,101,109,1,0,0,0,1,0,0,0,116,99,105,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,86,0,0,100,105,115,112,1,0,0,0,1,0,0,0,100,105,115,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,176,86,0,0,109,99,115,100,1,0,0,0,1,0,0,0,99,117,108,109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,87,0,0,115,116,114,97,9,0,0,0,1,0,0,0,50,51,102,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,82,0,0,0,71,0,0,0,66,0,0,0,32,0,0,0,98,0,0,0,117,0,0,0,105,0,0,0,108,0,0,0,116,0,0,0,45,0,0,0,105,0,0,0,110,0,0,0,0,0,0,0,78,0,0,0,111,0,0,0,32,0,0,0,99,0,0,0,111,0,0,0,112,0,0,0,121,0,0,0,114,0,0,0,105,0,0,0,103,0,0,0,104,0,0,0,116,0,0,0,44,0,0,0,32,0,0,0,117,0,0,0,115,0,0,0,101,0,0,0,32,0,0,0,102,0,0,0,114,0,0,0,101,0,0,0,101,0,0,0,108,0,0,0,121,0,0,0,0,0,0,0,76,0,0,0,97,0,0,0,98,0,0,0,32,0,0,0,105,0,0,0,100,0,0,0,101,0,0,0,110,0,0,0,116,0,0,0,105,0,0,0,116,0,0,0,121,0,0,0,32,0,0,0,98,0,0,0,117,0,0,0,105,0,0,0,108,0,0,0,116,0,0,0,45,0,0,0,105,0,0,0,110,0,0,0,0,0,0,0,115,0,0,0,82,0,0,0,71,0,0,0,66,0,0,0,32,0,0,0,98,0,0,0,117,0,0,0,105,0,0,0,108,0,0,0,116,0,0,0,45,0,0,0,105,0,0,0,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,188,126,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,0,0,0,35,0,0,0,252,128,0,0,0,4,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,0,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,2,0,4,0,8,0,16,0,32,0,64,0,128,0,0,1,0,2,0,4,0,8,0,12,0,16,0,20,0,24,0,28,0,32,0,36,0,40,0,44,0,48,0,52,0,56,0,60,0,64,0,68,0,72,0,76,0,80,0,84,0,88,0,92,0,96,0,100,0,104,0,108,0,112,0,116,0,120,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,124,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,0,128,1,128,2,128,4,128,8,128,16,128,32,128,64,128,128,128,0,129,0,130,0,132,0,136,0,140,0,144,0,148,0,152,0,156,0,160,0,164,0,168,0,172,0,176,0,180,0,184,0,188,0,192,0,196,0,200,0,204,0,208,0,212,0,216,0,220,0,224,0,228,0,232,0,236,0,240,0,244,0,248,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,0,252,255,255,0,0,0,0,0,0,255,255,255,255,255,255,0,0,255,255,128,128,128,128,0,0,0,0,128,128,128,128,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,127,0,127,0,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,110,114,101,99,111,103,110,105,122,101,100,32,97,108,112,104,97,32,99,104,97,110,110,101,108,32,119,105,100,116,104,0,67,111,108,111,114,83,112,97,99,101,32,109,105,115,109,97,116,99,104,0,67,111,117,108,100,110,39,116,32,108,105,110,107,32,39,37,100,39,32,112,114,111,102,105,108,101,115,0,85,110,115,117,112,112,111,114,116,101,100,32,105,110,116,101,110,116,32,39,37,100,39,0,109,109,50,47,76,105,116,116,108,101,45,67,77,83,47,115,114,99,47,99,109,115,103,97,109,109,97,46,99,0,40,116,32,33,61,32,40,40,118,111,105,100,42,41,48,41,41,0,67,111,117,108,100,110,39,116,32,99,114,101,97,116,101,32,116,111,110,101,32,99,117,114,118,101,32,111,102,32,109,111,114,101,32,116,104,97,110,32,54,53,53,51,48,32,101,110,116,114,105,101,115,0,67,111,117,108,100,110,39,116,32,99,114,101,97,116,101,32,116,111,110,101,32,99,117,114,118,101,32,119,105,116,104,32,122,101,114,111,32,115,101,103,109,101,110,116,115,32,97,110,100,32,110,111,32,116,97,98,108,101,0,40,83,101,103,109,101,110,116,115,32,33,61,32,40,40,118,111,105,100,42,41,48,41,41,0,99,109,115,66,117,105,108,100,83,101,103,109,101,110,116,101,100,84,111,110,101,67,117,114,118,101,0,40,80,97,114,97,109,115,32,33,61,32,40,40,118,111,105,100,42,41,48,41,41,0,99,109,115,66,117,105,108,100,80,97,114,97,109,101,116,114,105,99,84,111,110,101,67,117,114,118,101,0,73,110,118,97,108,105,100,32,112,97,114,97,109,101,116,114,105,99,32,99,117,114,118,101,32,116,121,112,101,32,37,100,0,40,67,117,114,118,101,32,33,61,32,40,40,118,111,105,100,42,41,48,41,41,0,99,109,115,70,114,101,101,84,111,110,101,67,117,114,118,101,84,114,105,112,108,101,0,40,88,32,33,61,32,40,40,118,111,105,100,42,41,48,41,41,0,99,109,115,74,111,105,110,84,111,110,101,67,117,114,118,101,0,40,89,32,33,61,32,40,40,118,111,105,100,42,41,48,41,41,0,99,109,115,69,118,97,108,84,111,110,101,67,117,114,118,101,70,108,111,97,116,0,99,109,115,69,118,97,108,84,111,110,101,67,117,114,118,101,49,54,0,40,73,110,67,117,114,118,101,32,33,61,32,40,40,118,111,105,100,42,41,48,41,41,0,99,109,115,82,101,118,101,114,115,101,84,111,110,101,67,117,114,118,101,69,120,0,99,109,115,73,115,84,111,110,101,67,117,114,118,101,68,101,115,99,101,110,100,105,110,103,0,40,73,110,71,97,109,109,97,32,33,61,32,40,40,118,111,105,100,42,41,48,41,41,0,99,109,115,82,101,118,101,114,115,101,84,111,110,101,67,117,114,118,101,0,99,109,115,73,115,84,111,110,101,67,117,114,118,101,76,105,110,101,97,114,0,99,109,115,73,115,84,111,110,101,67,117,114,118,101,77,111,110,111,116,111,110,105,99,0,99,109,115,71,101,116,84,111,110,101,67,117,114,118,101,80,97,114,97,109,101,116,114,105,99,84,121,112,101,0,87,114,111,110,103,32,112,111,115,105,116,105,111,110,32,111,102,32,80,67,83,46,32,49,46,46,50,53,53,32,101,120,112,101,99,116,101,100,44,32,37,100,32,102,111,117,110,100,46,0,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,22,21,20,19,18,17,16,15,14,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,13,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,23,22,21,20,19,18,17,16,15,14,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,13,85,110,115,117,112,112,111,114,116,101,100,32,105,110,116,101,114,112,111,108,97,116,105,111,110,32,40,37,100,45,62,37,100,32,99,104,97,110,110,101,108,115,41,0,40,65,99,99,101,115,115,77,111,100,101,32,33,61,32,40,40,118,111,105,100,42,41,48,41,41,0,109,109,50,47,76,105,116,116,108,101,45,67,77,83,47,115,114,99,47,99,109,115,105,111,48,46,99,0,99,109,115,79,112,101,110,73,79,104,97,110,100,108,101,114,70,114,111,109,77,101,109,0,67,111,117,108,100,110,39,116,32,114,101,97,100,32,112,114,111,102,105,108,101,32,102,114,111,109,32,78,85,76,76,32,112,111,105,110,116,101,114,0,67,111,117,108,100,110,39,116,32,97,108,108,111,99,97,116,101,32,37,108,100,32,98,121,116,101,115,32,102,111,114,32,112,114,111,102,105,108,101,0,85,110,107,110,111,119,110,32,97,99,99,101,115,115,32,109,111,100,101,32,39,37,99,39,0,84,111,111,32,102,101,119,32,100,97,116,97,59,32,112,114,111,98,97,98,108,121,32,99,111,114,114,117,112,116,101,100,32,112,114,111,102,105,108,101,0,82,101,97,100,32,102,114,111,109,32,109,101,109,111,114,121,32,101,114,114,111,114,46,32,71,111,116,32,37,100,32,98,121,116,101,115,44,32,98,108,111,99,107,32,115,104,111,117,108,100,32,98,101,32,111,102,32,37,100,32,98,121,116,101,115,0,40,70,105,108,101,78,97,109,101,32,33,61,32,40,40,118,111,105,100,42,41,48,41,41,0,99,109,115,79,112,101,110,73,79,104,97,110,100,108,101,114,70,114,111,109,70,105,108,101,0,114,98,0,70,105,108,101,32,39,37,115,39,32,110,111,116,32,102,111,117,110,100,0,67,97,110,110,111,116,32,103,101,116,32,115,105,122,101,32,111,102,32,102,105,108,101,32,39,37,115,39,0,119,98,0,67,111,117,108,100,110,39,116,32,99,114,101,97,116,101,32,39,37,115,39,0,84,101,108,108,32,101,114,114,111,114,59,32,112,114,111,98,97,98,108,121,32,99,111,114,114,117,112,116,101,100,32,102,105,108,101,0,83,101,101,107,32,101,114,114,111,114,59,32,112,114,111,98,97,98,108,121,32,99,111,114,114,117,112,116,101,100,32,102,105,108,101,0,82,101,97,100,32,101,114,114,111,114,46,32,71,111,116,32,37,100,32,98,121,116,101,115,44,32,98,108,111,99,107,32,115,104,111,117,108,100,32,98,101,32,111,102,32,37,100,32,98,121,116,101,115,0,110,111,116,32,97,110,32,73,67,67,32,112,114,111,102,105,108,101,44,32,105,110,118,97,108,105,100,32,115,105,103,110,97,116,117,114,101,0,84,111,111,32,109,97,110,121,32,116,97,103,115,32,40,37,100,41,0,119,0,40,104,80,114,111,102,105,108,101,32,33,61,32,40,40,118,111,105,100,42,41,48,41,41,0,99,109,115,83,97,118,101,80,114,111,102,105,108,101,84,111,73,79,104,97,110,100,108,101,114,0,40,73,110,116,101,114,110,97,108,41,32,110,111,32,104,97,110,100,108,101,114,32,102,111,114,32,116,97,103,32,37,120,0,67,111,117,108,100,110,39,116,32,119,114,105,116,101,32,116,121,112,101,32,39,37,115,39,0,114,0,85,110,107,110,111,119,110,32,116,97,103,32,116,121,112,101,32,39,37,115,39,32,102,111,117,110,100,46,0,67,111,114,114,117,112,116,101,100,32,116,97,103,32,39,37,115,39,0,39,37,115,39,32,73,110,99,111,110,115,105,115,116,101,110,116,32,110,117,109,98,101,114,32,111,102,32,105,116,101,109,115,58,32,101,120,112,101,99,116,101,100,32,37,100,44,32,103,111,116,32,37,100,0,85,110,115,117,112,112,111,114,116,101,100,32,116,97,103,32,39,37,120,39,0,85,110,115,117,112,112,111,114,116,101,100,32,116,121,112,101,32,39,37,115,39,32,102,111,114,32,116,97,103,32,39,37,115,39,0,77,97,108,102,111,114,109,101,100,32,115,116,114,117,99,116,32,105,110,32,116,121,112,101,32,39,37,115,39,32,102,111,114,32,116,97,103,32,39,37,115,39,0,40,73,99,99,32,33,61,32,40,40,118,111,105,100,42,41,48,41,41,0,95,99,109,115,68,101,108,101,116,101,84,97,103,66,121,80,111,115,0,40,105,32,62,61,32,48,41,0,109,109,50,47,76,105,116,116,108,101,45,67,77,83,47,115,114,99,47,99,109,115,105,111,49,46,99,0,95,99,109,115,82,101,97,100,77,101,100,105,97,87,104,105,116,101,80,111,105,110,116,0,95,99,109,115,82,101,97,100,67,72,65,68,0,40,114,32,33,61,32,40,40,118,111,105,100,42,41,48,41,41,0,82,101,97,100,73,67,67,77,97,116,114,105,120,82,71,66,50,88,89,90,0,85,110,101,120,112,101,99,116,101,100,32,100,105,114,101,99,116,105,111,110,32,40,37,100,41,0,40,109,112,101,32,33,61,32,40,40,118,111,105,100,42,41,48,41,41,0,109,109,50,47,76,105,116,116,108,101,45,67,77,83,47,115,114,99,47,99,109,115,108,117,116,46,99,0,67,117,114,118,101,83,101,116,69,108,101,109,84,121,112,101,70,114,101,101,0,69,118,97,108,117,97,116,101,67,117,114,118,101,115,0,40,99,108,117,116,80,111,105,110,116,115,32,33,61,32,40,40,118,111,105,100,42,41,48,41,41,0,99,109,115,83,116,97,103,101,65,108,108,111,99,67,76,117,116,49,54,98,105,116,71,114,97,110,117,108,97,114,0,84,111,111,32,109,97,110,121,32,105,110,112,117,116,32,99,104,97,110,110,101,108,115,32,40,37,100,32,99,104,97,110,110,101,108,115,44,32,109,97,120,61,37,100,41,0,40,68,105,109,115,32,33,61,32,40,40,118,111,105,100,42,41,48,41,41,0,67,117,98,101,83,105,122,101,0,40,109,112,101,32,45,62,73,110,112,117,116,67,104,97,110,110,101,108,115,32,60,61,32,49,50,56,41,0,69,118,97,108,117,97,116,101,67,76,85,84,102,108,111,97,116,73,110,49,54,0,40,109,112,101,32,45,62,79,117,116,112,117,116,67,104,97,110,110,101,108,115,32,60,61,32,49,50,56,41,0,99,109,115,83,116,97,103,101,65,108,108,111,99,67,76,117,116,70,108,111,97,116,71,114,97,110,117,108,97,114,0,40,108,117,116,32,33,61,32,40,40,118,111,105,100,42,41,48,41,41,0,99,109,115,80,105,112,101,108,105,110,101,73,110,112,117,116,67,104,97,110,110,101,108,115,0,99,109,115,80,105,112,101,108,105,110,101,79,117,116,112,117,116,67,104,97,110,110,101,108,115,0,99,109,115,80,105,112,101,108,105,110,101,69,118,97,108,49,54,0,99,109,115,80,105,112,101,108,105,110,101,69,118,97,108,70,108,111,97,116,0,67,111,108,111,114,32,37,100,32,111,117,116,32,111,102,32,114,97,110,103,101,0,40,100,105,99,116,32,33,61,32,40,40,118,111,105,100,42,41,48,41,41,0,109,109,50,47,76,105,116,116,108,101,45,67,77,83,47,115,114,99,47,99,109,115,110,97,109,101,100,46,99,0,99,109,115,68,105,99,116,70,114,101,101,0,99,109,115,68,105,99,116,65,100,100,69,110,116,114,121,0,40,78,97,109,101,32,33,61,32,40,40,118,111,105,100,42,41,48,41,41,0,40,111,108,100,95,100,105,99,116,32,33,61,32,40,40,118,111,105,100,42,41,48,41,41,0,99,109,115,68,105,99,116,68,117,112,0,109,109,50,47,76,105,116,116,108,101,45,67,77,83,47,115,114,99,47,99,109,115,111,112,116,46,99,0,40,105,110,116,101,114,110,97,108,41,32,65,116,116,101,109,112,116,32,116,111,32,80,97,116,99,104,76,85,84,32,111,110,32,110,111,110,45,108,117,116,32,115,116,97,103,101,0,40,105,110,116,101,114,110,97,108,41,32,37,100,32,67,104,97,110,110,101,108,115,32,97,114,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,111,110,32,80,97,116,99,104,76,85,84,0,40,76,117,116,32,45,62,32,73,110,112,117,116,67,104,97,110,110,101,108,115,32,60,32,49,54,41,0,88,70,111,114,109,83,97,109,112,108,101,114,49,54,0,40,76,117,116,32,45,62,32,79,117,116,112,117,116,67,104,97,110,110,101,108,115,32,60,32,49,54,41,0,79,112,116,105,109,105,122,101,66,121,82,101,115,97,109,112,108,105,110,103,0,40,82,101,115,117,108,116,32,33,61,32,40,40,118,111,105,100,42,41,48,41,41,0,109,109,50,47,76,105,116,116,108,101,45,67,77,83,47,115,114,99,47,99,109,115,112,108,117,103,105,110,46,99,0,95,99,109,115,65,100,106,117,115,116,69,110,100,105,97,110,101,115,115,54,52,0,95,99,109,115,82,101,97,100,85,73,110,116,56,78,117,109,98,101,114,0,95,99,109,115,82,101,97,100,85,73,110,116,49,54,78,117,109,98,101,114,0,95,99,109,115,82,101,97,100,85,73,110,116,49,54,65,114,114,97,121,0,95,99,109,115,82,101,97,100,85,73,110,116,51,50,78,117,109,98,101,114,0,95,99,109,115,82,101,97,100,70,108,111,97,116,51,50,78,117,109,98,101,114,0,95,99,109,115,82,101,97,100,85,73,110,116,54,52,78,117,109,98,101,114,0,95,99,109,115,82,101,97,100,49,53,70,105,120,101,100,49,54,78,117,109,98,101,114,0,95,99,109,115,82,101,97,100,88,89,90,78,117,109,98,101,114,0,95,99,109,115,87,114,105,116,101,85,73,110,116,56,78,117,109,98,101,114,0,95,99,109,115,87,114,105,116,101,85,73,110,116,49,54,78,117,109,98,101,114,0,95,99,109,115,87,114,105,116,101,85,73,110,116,49,54,65,114,114,97,121,0,40,65,114,114,97,121,32,33,61,32,40,40,118,111,105,100,42,41,48,41,41,0,95,99,109,115,87,114,105,116,101,85,73,110,116,51,50,78,117,109,98,101,114,0,95,99,109,115,87,114,105,116,101,70,108,111,97,116,51,50,78,117,109,98,101,114,0,95,99,109,115,87,114,105,116,101,85,73,110,116,54,52,78,117,109,98,101,114,0,95,99,109,115,87,114,105,116,101,49,53,70,105,120,101,100,49,54,78,117,109,98,101,114,0,95,99,109,115,87,114,105,116,101,88,89,90,78,117,109,98,101,114,0,40,88,89,90,32,33,61,32,40,40,118,111,105,100,42,41,48,41,41,0,40,68,101,115,116,32,33,61,32,40,40,118,111,105,100,42,41,48,41,41,0,95,99,109,115,68,101,99,111,100,101,68,97,116,101,84,105,109,101,78,117,109,98,101,114,0,40,83,111,117,114,99,101,32,33,61,32,40,40,118,111,105,100,42,41,48,41,41,0,95,99,109,115,69,110,99,111,100,101,68,97,116,101,84,105,109,101,78,117,109,98,101,114,0,95,99,109,115,82,101,97,100,84,121,112,101,66,97,115,101,0,95,99,109,115,87,114,105,116,101,84,121,112,101,66,97,115,101,0,95,99,109,115,82,101,97,100,65,108,105,103,110,109,101,110,116,0,95,99,109,115,87,114,105,116,101,65,108,105,103,110,109,101,110,116,0,66,97,100,32,99,111,110,116,101,120,116,32,99,108,105,101,110,116,32,45,45,32,112,111,115,115,105,98,108,101,32,99,111,114,114,117,112,116,105,111,110,0,40,48,41,0,95,99,109,115,67,111,110,116,101,120,116,71,101,116,67,108,105,101,110,116,67,104,117,110,107,0,85,110,115,117,112,112,111,114,116,101,100,32,110,117,109,98,101,114,32,111,102,32,99,104,97,110,110,101,108,115,32,102,111,114,32,86,67,71,84,32,39,37,100,39,0,85,110,115,117,112,112,111,114,116,101,100,32,98,105,116,32,100,101,112,116,104,32,102,111,114,32,86,67,71,84,32,39,37,100,39,0,85,110,115,117,112,112,111,114,116,101,100,32,116,97,103,32,116,121,112,101,32,102,111,114,32,86,67,71,84,32,39,37,100,39,0,40,105,111,32,33,61,32,40,40,118,111,105,100,42,41,48,41,41,0,109,109,50,47,76,105,116,116,108,101,45,67,77,83,47,115,114,99,47,99,109,115,116,121,112,101,115,46,99,0,95,99,109,115,87,114,105,116,101,87,67,104,97,114,65,114,114,97,121,0,40,33,40,65,114,114,97,121,32,61,61,32,40,40,118,111,105,100,42,41,48,41,32,38,38,32,110,32,62,32,48,41,41,0,85,110,107,110,111,119,110,32,114,101,99,111,114,100,32,108,101,110,103,116,104,32,105,110,32,100,105,99,116,105,111,110,97,114,121,32,39,37,100,39,0,66,97,100,32,100,105,99,116,105,111,110,97,114,121,32,78,97,109,101,47,86,97,108,117,101,0,95,99,109,115,82,101,97,100,87,67,104,97,114,65,114,114,97,121,0,70,111,117,110,100,32,117,110,107,110,111,119,110,32,77,80,69,32,116,121,112,101,32,39,37,115,39,0,85,110,107,110,111,119,110,32,99,117,114,118,101,32,101,108,101,109,101,110,116,32,116,121,112,101,32,39,37,115,39,32,102,111,117,110,100,46,0,85,110,107,110,111,119,110,32,77,80,69,32,116,121,112,101,32,39,37,115,39,32,102,111,117,110,100,46,0,110,109,0,35,48,0,35,49,0,35,50,0,35,51,0,80,83,0,76,85,84,32,105,115,32,110,111,116,32,115,117,105,116,97,98,108,101,32,116,111,32,98,101,32,115,97,118,101,100,32,97,115,32,76,117,116,66,84,111,65,0,67,97,110,110,111,116,32,115,97,118,101,32,102,108,111,97,116,105,110,103,32,112,111,105,110,116,32,100,97,116,97,44,32,67,76,85,84,32,97,114,101,32,56,32,111,114,32,49,54,32,98,105,116,32,111,110,108,121,0,85,110,107,110,111,119,110,32,112,114,101,99,105,115,105,111,110,32,111,102,32,39,37,100,39,0,85,110,107,110,111,119,110,32,99,117,114,118,101,32,116,121,112,101,32,39,37,115,39,0,76,85,84,32,105,115,32,110,111,116,32,115,117,105,116,97,98,108,101,32,116,111,32,98,101,32,115,97,118,101,100,32,97,115,32,76,117,116,65,84,111,66,0,109,117,108,116,105,76,111,99,97,108,105,122,101,100,85,110,105,99,111,100,101,84,121,112,101,32,111,102,32,108,101,110,32,33,61,32,49,50,32,105,115,32,110,111,116,32,115,117,112,112,111,114,116,101,100,46,0,84,111,111,32,109,97,110,121,32,110,97,109,101,100,32,99,111,108,111,114,115,32,39,37,100,39,0,84,111,111,32,109,97,110,121,32,100,101,118,105,99,101,32,99,111,111,114,100,105,110,97,116,101,115,32,39,37,100,39,0,84,111,111,32,109,97,110,121,32,99,111,108,111,114,97,110,116,115,32,39,37,100,39,0,76,85,84,32,105,115,32,110,111,116,32,115,117,105,116,97,98,108,101,32,116,111,32,98,101,32,115,97,118,101,100,32,97,115,32,76,85,84,49,54,0,40,84,97,98,108,101,115,32,33,61,32,40,40,118,111,105,100,42,41,48,41,41,0,87,114,105,116,101,49,54,98,105,116,84,97,98,108,101,115,0,76,85,84,32,105,115,32,110,111,116,32,115,117,105,116,97,98,108,101,32,116,111,32,98,101,32,115,97,118,101,100,32,97,115,32,76,85,84,56,0,76,85,84,56,32,110,101,101,100,115,32,50,53,54,32,101,110,116,114,105,101,115,32,111,110,32,112,114,101,108,105,110,101,97,114,105,122,97,116,105,111,110,0,77,117,108,116,105,115,101,103,109,101,110,116,32,111,114,32,73,110,118,101,114,116,101,100,32,112,97,114,97,109,101,116,114,105,99,32,99,117,114,118,101,115,32,99,97,110,110,111,116,32,98,101,32,119,114,105,116,116,101,110,0,85,110,115,117,112,112,111,114,116,101,100,32,112,97,114,97,109,101,116,114,105,99,32,99,117,114,118,101,0,85,110,107,110,111,119,110,32,112,97,114,97,109,101,116,114,105,99,32,99,117,114,118,101,32,116,121,112,101,32,39,37,100,39,0,101,110,0,85,83,0,40,87,104,105,116,101,80,111,105,110,116,32,33,61,32,40,40,118,111,105,100,42,41,48,41,41,0,109,109,50,47,76,105,116,116,108,101,45,67,77,83,47,115,114,99,47,99,109,115,119,116,112,110,116,46,99,0,99,109,115,87,104,105,116,101,80,111,105,110,116,70,114,111,109,84,101,109,112,0,99,109,115,87,104,105,116,101,80,111,105,110,116,70,114,111,109,84,101,109,112,58,32,105,110,118,97,108,105,100,32,116,101,109,112,0,99,109,115,84,101,109,112,70,114,111,109,87,104,105,116,101,80,111,105,110,116,0,40,84,101,109,112,75,32,33,61,32,40,40,118,111,105,100,42,41,48,41,41,0,109,109,50,47,76,105,116,116,108,101,45,67,77,83,47,115,114,99,47,99,109,115,120,102,111,114,109,46,99,0,40,112,32,33,61,32,40,40,118,111,105,100,42,41,48,41,41,0,99,109,115,68,101,108,101,116,101,84,114,97,110,115,102,111,114,109,0,78,85,76,76,32,105,110,112,117,116,32,112,114,111,102,105,108,101,115,32,111,110,32,116,114,97,110,115,102,111,114,109,0,87,114,111,110,103,32,105,110,112,117,116,32,99,111,108,111,114,32,115,112,97,99,101,32,111,110,32,116,114,97,110,115,102,111,114,109,0,87,114,111,110,103,32,111,117,116,112,117,116,32,99,111,108,111,114,32,115,112,97,99,101,32,111,110,32,116,114,97,110,115,102,111,114,109,0,67,111,117,108,100,110,39,116,32,108,105,110,107,32,116,104,101,32,112,114,111,102,105,108,101,115,0,67,104,97,110,110,101,108,32,99,111,117,110,116,32,100,111,101,115,110,39,116,32,109,97,116,99,104,46,32,80,114,111,102,105,108,101,32,105,115,32,99,111,114,114,117,112,116,101,100,0,85,110,115,117,112,112,111,114,116,101,100,32,114,97,115,116,101,114,32,102,111,114,109,97,116,0,87,114,111,110,103,32,110,117,109,98,101,114,32,111,102,32,112,114,111,102,105,108,101,115,46,32,49,46,46,50,53,53,32,101,120,112,101,99,116,101,100,44,32,37,100,32,102,111,117,110,100,46,0,114,119,97,0,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,45,43,32,32,32,48,88,48,120,0,40,110,117,108,108,41,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,105,110,102,0,73,78,70,0,110,97,110,0,78,65,78,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,46,0,84,33,34,25,13,1,2,3,17,75,28,12,16,4,11,29,18,30,39,104,110,111,112,113,98,32,5,6,15,19,20,21,26,8,22,7,40,36,23,24,9,10,14,27,31,37,35,131,130,125,38,42,43,60,61,62,63,67,71,74,77,88,89,90,91,92,93,94,95,96,97,99,100,101,102,103,105,106,107,108,114,115,116,121,122,123,124,0,73,108,108,101,103,97,108,32,98,121,116,101,32,115,101,113,117,101,110,99,101,0,68,111,109,97,105,110,32,101,114,114,111,114,0,82,101,115,117,108,116,32,110,111,116,32,114,101,112,114,101,115,101,110,116,97,98,108,101,0,78,111,116,32,97,32,116,116,121,0,80,101,114,109,105,115,115,105,111,110,32,100,101,110,105,101,100,0,79,112,101,114,97,116,105,111,110,32,110,111,116,32,112,101,114,109,105,116,116,101,100,0,78,111,32,115,117,99,104,32,102,105,108,101,32,111,114,32,100,105,114,101,99,116,111,114,121,0,78,111,32,115,117,99,104,32,112,114,111,99,101,115,115,0,70,105,108,101,32,101,120,105,115,116,115,0,86,97,108,117,101,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,100,97,116,97,32,116,121,112,101,0,78,111], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+20480);
/* memory initializer */ allocate([32,115,112,97,99,101,32,108,101,102,116,32,111,110,32,100,101,118,105,99,101,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,82,101,115,111,117,114,99,101,32,98,117,115,121,0,73,110,116,101,114,114,117,112,116,101,100,32,115,121,115,116,101,109,32,99,97,108,108,0,82,101,115,111,117,114,99,101,32,116,101,109,112,111,114,97,114,105,108,121,32,117,110,97,118,97,105,108,97,98,108,101,0,73,110,118,97,108,105,100,32,115,101,101,107,0,67,114,111,115,115,45,100,101,118,105,99,101,32,108,105,110,107,0,82,101,97,100,45,111,110,108,121,32,102,105,108,101,32,115,121,115,116,101,109,0,68,105,114,101,99,116,111,114,121,32,110,111,116,32,101,109,112,116,121,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,112,101,101,114,0,79,112,101,114,97,116,105,111,110,32,116,105,109,101,100,32,111,117,116,0,67,111,110,110,101,99,116,105,111,110,32,114,101,102,117,115,101,100,0,72,111,115,116,32,105,115,32,100,111,119,110,0,72,111,115,116,32,105,115,32,117,110,114,101,97,99,104,97,98,108,101,0,65,100,100,114,101,115,115,32,105,110,32,117,115,101,0,66,114,111,107,101,110,32,112,105,112,101,0,73,47,79,32,101,114,114,111,114,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,32,111,114,32,97,100,100,114,101,115,115,0,66,108,111,99,107,32,100,101,118,105,99,101,32,114,101,113,117,105,114,101,100,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,0,78,111,116,32,97,32,100,105,114,101,99,116,111,114,121,0,73,115,32,97,32,100,105,114,101,99,116,111,114,121,0,84,101,120,116,32,102,105,108,101,32,98,117,115,121,0,69,120,101,99,32,102,111,114,109,97,116,32,101,114,114,111,114,0,73,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,0,65,114,103,117,109,101,110,116,32,108,105,115,116,32,116,111,111,32,108,111,110,103,0,83,121,109,98,111,108,105,99,32,108,105,110,107,32,108,111,111,112,0,70,105,108,101,110,97,109,101,32,116,111,111,32,108,111,110,103,0,84,111,111,32,109,97,110,121,32,111,112,101,110,32,102,105,108,101,115,32,105,110,32,115,121,115,116,101,109,0,78,111,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,115,32,97,118,97,105,108,97,98,108,101,0,66,97,100,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,0,78,111,32,99,104,105,108,100,32,112,114,111,99,101,115,115,0,66,97,100,32,97,100,100,114,101,115,115,0,70,105,108,101,32,116,111,111,32,108,97,114,103,101,0,84,111,111,32,109,97,110,121,32,108,105,110,107,115,0,78,111,32,108,111,99,107,115,32,97,118,97,105,108,97,98,108,101,0,82,101,115,111,117,114,99,101,32,100,101,97,100,108,111,99,107,32,119,111,117,108,100,32,111,99,99,117,114,0,83,116,97,116,101,32,110,111,116,32,114,101,99,111,118,101,114,97,98,108,101,0,80,114,101,118,105,111,117,115,32,111,119,110,101,114,32,100,105,101,100,0,79,112,101,114,97,116,105,111,110,32,99,97,110,99,101,108,101,100,0,70,117,110,99,116,105,111,110,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,78,111,32,109,101,115,115,97,103,101,32,111,102,32,100,101,115,105,114,101,100,32,116,121,112,101,0,73,100,101,110,116,105,102,105,101,114,32,114,101,109,111,118,101,100,0,68,101,118,105,99,101,32,110,111,116,32,97,32,115,116,114,101,97,109,0,78,111,32,100,97,116,97,32,97,118,97,105,108,97,98,108,101,0,68,101,118,105,99,101,32,116,105,109,101,111,117,116,0,79,117,116,32,111,102,32,115,116,114,101,97,109,115,32,114,101,115,111,117,114,99,101,115,0,76,105,110,107,32,104,97,115,32,98,101,101,110,32,115,101,118,101,114,101,100,0,80,114,111,116,111,99,111,108,32,101,114,114,111,114,0,66,97,100,32,109,101,115,115,97,103,101,0,70,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,105,110,32,98,97,100,32,115,116,97,116,101,0,78,111,116,32,97,32,115,111,99,107,101,116,0,68,101,115,116,105,110,97,116,105,111,110,32,97,100,100,114,101,115,115,32,114,101,113,117,105,114,101,100,0,77,101,115,115,97,103,101,32,116,111,111,32,108,97,114,103,101,0,80,114,111,116,111,99,111,108,32,119,114,111,110,103,32,116,121,112,101,32,102,111,114,32,115,111,99,107,101,116,0,80,114,111,116,111,99,111,108,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,80,114,111,116,111,99,111,108,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,83,111,99,107,101,116,32,116,121,112,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,78,111,116,32,115,117,112,112,111,114,116,101,100,0,80,114,111,116,111,99,111,108,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,65,100,100,114,101,115,115,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,98,121,32,112,114,111,116,111,99,111,108,0,65,100,100,114,101,115,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,78,101,116,119,111,114,107,32,105,115,32,100,111,119,110,0,78,101,116,119,111,114,107,32,117,110,114,101,97,99,104,97,98,108,101,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,110,101,116,119,111,114,107,0,67,111,110,110,101,99,116,105,111,110,32,97,98,111,114,116,101,100,0,78,111,32,98,117,102,102,101,114,32,115,112,97,99,101,32,97,118,97,105,108,97,98,108,101,0,83,111,99,107,101,116,32,105,115,32,99,111,110,110,101,99,116,101,100,0,83,111,99,107,101,116,32,110,111,116,32,99,111,110,110,101,99,116,101,100,0,67,97,110,110,111,116,32,115,101,110,100,32,97,102,116,101,114,32,115,111,99,107,101,116,32,115,104,117,116,100,111,119,110,0,79,112,101,114,97,116,105,111,110,32,97,108,114,101,97,100,121,32,105,110,32,112,114,111,103,114,101,115,115,0,79,112,101,114,97,116,105,111,110,32,105,110,32,112,114,111,103,114,101,115,115,0,83,116,97,108,101,32,102,105,108,101,32,104,97,110,100,108,101,0,82,101,109,111,116,101,32,73,47,79,32,101,114,114,111,114,0,81,117,111,116,97,32,101,120,99,101,101,100,101,100,0,78,111,32,109,101,100,105,117,109,32,102,111,117,110,100,0,87,114,111,110,103,32,109,101,100,105,117,109,32,116,121,112,101,0,78,111,32,101,114,114,111,114,32,105,110,102,111,114,109,97,116,105,111,110,0,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+30720);





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


   
  Module["_i64Subtract"] = _i64Subtract;

  function ___assert_fail(condition, filename, line, func) {
      ABORT = true;
      throw 'Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + stackTrace();
    }

   
  Module["_memset"] = _memset;

   
  Module["_pthread_mutex_lock"] = _pthread_mutex_lock;

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _abort() {
      Module['abort']();
    }

  function _pthread_mutex_destroy() {}

  function ___lock() {}

  function ___unlock() {}

   
  Module["_i64Add"] = _i64Add;

  function _pthread_mutex_init() {}

  
  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var isPosixPlatform = (process.platform != 'win32'); // Node doesn't offer a direct check, so test by exclusion
  
              var fd = process.stdin.fd;
              if (isPosixPlatform) {
                // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
                var usingDevice = false;
                try {
                  fd = fs.openSync('/dev/stdin', 'r');
                  usingDevice = true;
                } catch (e) {}
              }
  
              try {
                bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.length : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        if (!req) {
          return callback("Unable to connect to IndexedDB");
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
          };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        flags &= ~0x200000 /*O_PATH*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x800 /*O_NONBLOCK*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x8000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x80000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            // Issue 4254: Using curr as a node name will prevent the node
            // from being found in FS.nameTable when FS.open is called on
            // a path which holds a child of this node,
            // given that all FS functions assume node names
            // are just their corresponding parts within their given path,
            // rather than incremental aggregates which include their parent's
            // directories.
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, parts[i], WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  
  var _stdin=STATICTOP; STATICTOP += 16;;
  
  var _stdout=STATICTOP; STATICTOP += 16;;
  
  var _stderr=STATICTOP; STATICTOP += 16;;var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(err) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(err);
        }
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function (path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != ERRNO_CODES.EEXIST) throw e;
          }
        }
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          //Module.printErr(stackTrace()); // useful for debugging
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21506: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        case 21523: {
          // TODO: in theory we should write to the winsize struct that gets
          // passed in, but for now musl doesn't read anything on it
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

  
  var ___tm_current=STATICTOP; STATICTOP += 48;;
  
  
  var ___tm_timezone=allocate(intArrayFromString("GMT"), "i8", ALLOC_STATIC);function _gmtime_r(time, tmPtr) {
      var date = new Date(HEAP32[((time)>>2)]*1000);
      HEAP32[((tmPtr)>>2)]=date.getUTCSeconds();
      HEAP32[(((tmPtr)+(4))>>2)]=date.getUTCMinutes();
      HEAP32[(((tmPtr)+(8))>>2)]=date.getUTCHours();
      HEAP32[(((tmPtr)+(12))>>2)]=date.getUTCDate();
      HEAP32[(((tmPtr)+(16))>>2)]=date.getUTCMonth();
      HEAP32[(((tmPtr)+(20))>>2)]=date.getUTCFullYear()-1900;
      HEAP32[(((tmPtr)+(24))>>2)]=date.getUTCDay();
      HEAP32[(((tmPtr)+(36))>>2)]=0;
      HEAP32[(((tmPtr)+(32))>>2)]=0;
      var start = Date.UTC(date.getUTCFullYear(), 0, 1, 0, 0, 0, 0);
      var yday = ((date.getTime() - start) / (1000 * 60 * 60 * 24))|0;
      HEAP32[(((tmPtr)+(28))>>2)]=yday;
      HEAP32[(((tmPtr)+(40))>>2)]=___tm_timezone;
  
      return tmPtr;
    }function _gmtime(time) {
      return _gmtime_r(time, ___tm_current);
    }

  function ___syscall10(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // unlink
      var path = SYSCALLS.getStr();
      FS.unlink(path);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

   
  Module["_pthread_mutex_unlock"] = _pthread_mutex_unlock;

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get() // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
  var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_STATIC); 
  Module["_llvm_cttz_i32"] = _llvm_cttz_i32; 
  Module["___udivmoddi4"] = ___udivmoddi4; 
  Module["___udivdi3"] = ___udivdi3;

  var _llvm_pow_f64=Math_pow;

   
  Module["_sbrk"] = _sbrk;

   
  Module["_memmove"] = _memmove;

   
  Module["___uremdi3"] = ___uremdi3;

   
  Module["_llvm_bswap_i32"] = _llvm_bswap_i32;

  function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -ERRNO_CODES.EINVAL;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        case 12: {
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        case 13:
        case 14:
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -ERRNO_CODES.EINVAL; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        default: {
          return -ERRNO_CODES.EINVAL;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

   
  Module["_llvm_bswap_i16"] = _llvm_bswap_i16;

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      var offset = offset_low;
      assert(offset_high === 0);
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall40(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // rmdir
      var path = SYSCALLS.getStr();
      FS.rmdir(path);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall145(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readv
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });;
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); };
DYNAMICTOP_PTR = allocate(1, "i32", ALLOC_STATIC);

STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = Runtime.alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory



function invoke_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    return Module["dynCall_iiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_diid(index,a1,a2,a3) {
  try {
    return Module["dynCall_diid"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_idi(index,a1,a2) {
  try {
    return Module["dynCall_idi"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "invoke_iiiiiiii": invoke_iiiiiiii, "invoke_iiii": invoke_iiii, "invoke_viiiii": invoke_viiiii, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_ii": invoke_ii, "invoke_diid": invoke_diid, "invoke_viii": invoke_viii, "invoke_idi": invoke_idi, "invoke_iiiii": invoke_iiiii, "invoke_viiiiii": invoke_viiiiii, "invoke_iii": invoke_iii, "invoke_iiiiii": invoke_iiiiii, "invoke_viiii": invoke_viiii, "___syscall221": ___syscall221, "___syscall140": ___syscall140, "_pthread_mutex_init": _pthread_mutex_init, "_gmtime_r": _gmtime_r, "_gmtime": _gmtime, "___lock": ___lock, "_pthread_mutex_destroy": _pthread_mutex_destroy, "_abort": _abort, "___setErrNo": ___setErrNo, "___syscall6": ___syscall6, "___syscall40": ___syscall40, "_time": _time, "___syscall5": ___syscall5, "_emscripten_memcpy_big": _emscripten_memcpy_big, "___syscall54": ___syscall54, "___unlock": ___unlock, "_llvm_pow_f64": _llvm_pow_f64, "___assert_fail": ___assert_fail, "___syscall145": ___syscall145, "___syscall146": ___syscall146, "___syscall10": ___syscall10, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "cttz_i8": cttz_i8 };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'use asm';
  
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var cttz_i8=env.cttz_i8|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var enlargeMemory=env.enlargeMemory;
  var getTotalMemory=env.getTotalMemory;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var invoke_iiiiiiii=env.invoke_iiiiiiii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_ii=env.invoke_ii;
  var invoke_diid=env.invoke_diid;
  var invoke_viii=env.invoke_viii;
  var invoke_idi=env.invoke_idi;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_viiii=env.invoke_viiii;
  var ___syscall221=env.___syscall221;
  var ___syscall140=env.___syscall140;
  var _pthread_mutex_init=env._pthread_mutex_init;
  var _gmtime_r=env._gmtime_r;
  var _gmtime=env._gmtime;
  var ___lock=env.___lock;
  var _pthread_mutex_destroy=env._pthread_mutex_destroy;
  var _abort=env._abort;
  var ___setErrNo=env.___setErrNo;
  var ___syscall6=env.___syscall6;
  var ___syscall40=env.___syscall40;
  var _time=env._time;
  var ___syscall5=env.___syscall5;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var ___syscall54=env.___syscall54;
  var ___unlock=env.___unlock;
  var _llvm_pow_f64=env._llvm_pow_f64;
  var ___assert_fail=env.___assert_fail;
  var ___syscall145=env.___syscall145;
  var ___syscall146=env.___syscall146;
  var ___syscall10=env.___syscall10;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS

function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function _from16toFLT($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0.0, $4 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP16[$1>>1]|0;
 $3 = (+($2&65535));
 $4 = $3 / 65535.0;
 HEAPF32[$0>>2] = $4;
 return;
}
function _from16toDBL($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP16[$1>>1]|0;
 $3 = (+($2&65535));
 $4 = $3 / 65535.0;
 $5 = $4;
 HEAPF64[$0>>3] = $5;
 return;
}
function __cmsHandleExtraChannels($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0103 = 0, $$086102 = 0, $$087100 = 0, $$08899 = 0, $$089101 = 0, $$09098 = 0, $$092107 = 0, $$1114 = 0, $$191105 = 0, $$2110 = 0, $$3111 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond116 = 0, $exitcond117 = 0, $exitcond118 = 0, $exitcond119 = 0, $exitcond120 = 0, $exitcond121 = 0, $or$cond = 0, $or$cond93 = 0, dest = 0, label = 0, sp = 0;
 var stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0;
 $6 = sp + 448|0;
 $7 = sp + 384|0;
 $8 = sp + 320|0;
 $9 = sp + 256|0;
 $10 = sp + 192|0;
 $11 = sp + 128|0;
 $12 = sp + 64|0;
 $13 = sp;
 $14 = ((($0)) + 172|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 & 67108864;
 $17 = ($16|0)==(0);
 if ($17) {
  STACKTOP = sp;return;
 }
 $18 = HEAP32[$0>>2]|0;
 $19 = ((($0)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($18|0)==($20|0);
 $22 = ($1|0)==($2|0);
 $or$cond = $22 & $21;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 $23 = $18 >>> 7;
 $24 = $23 & 7;
 $25 = $20 >>> 7;
 $26 = $25 & 7;
 $27 = ($24|0)!=($26|0);
 $28 = ($24|0)==(0);
 $or$cond93 = $28 | $27;
 if ($or$cond93) {
  STACKTOP = sp;return;
 }
 $29 = ((($5)) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 _ComputeComponentIncrements($18,$30,$6,$7);
 $31 = HEAP32[$19>>2]|0;
 $32 = ((($5)) + 12|0);
 $33 = HEAP32[$32>>2]|0;
 _ComputeComponentIncrements($31,$33,$8,$9);
 $34 = ((($0)) + 188|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = HEAP32[$0>>2]|0;
 $37 = HEAP32[$19>>2]|0;
 $38 = (__cmsGetFormatterAlpha($35,$36,$37)|0);
 $39 = ($24|0)==(1);
 if ($39) {
  $40 = ($4|0)==(0);
  if ($40) {
   STACKTOP = sp;return;
  }
  $41 = HEAP32[$6>>2]|0;
  $42 = (($1) + ($41)|0);
  $43 = HEAP32[$8>>2]|0;
  $44 = (($2) + ($43)|0);
  $45 = ($3|0)==(0);
  $46 = ((($5)) + 4|0);
  $47 = HEAP32[$7>>2]|0;
  $48 = HEAP32[$9>>2]|0;
  $$0103 = 0;$$086102 = 0;$$089101 = 0;
  while(1) {
   if (!($45)) {
    $49 = (($44) + ($$0103)|0);
    $50 = (($42) + ($$086102)|0);
    $$087100 = $49;$$08899 = $50;$$09098 = 0;
    while(1) {
     FUNCTION_TABLE_vii[$38 & 63]($$087100,$$08899);
     $51 = (($$08899) + ($47)|0);
     $52 = (($$087100) + ($48)|0);
     $53 = (($$09098) + 1)|0;
     $exitcond = ($53|0)==($3|0);
     if ($exitcond) {
      break;
     } else {
      $$087100 = $52;$$08899 = $51;$$09098 = $53;
     }
    }
   }
   $54 = HEAP32[$5>>2]|0;
   $55 = (($54) + ($$086102))|0;
   $56 = HEAP32[$46>>2]|0;
   $57 = (($56) + ($$0103))|0;
   $58 = (($$089101) + 1)|0;
   $exitcond116 = ($58|0)==($4|0);
   if ($exitcond116) {
    break;
   } else {
    $$0103 = $57;$$086102 = $55;$$089101 = $58;
   }
  }
  STACKTOP = sp;return;
 }
 dest=$12; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 dest=$13; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $59 = ($4|0)==(0);
 if (!($59)) {
  $60 = ($24|0)==(0);
  $61 = ($3|0)==(0);
  $62 = ($24|0)==(0);
  $63 = ((($5)) + 4|0);
  $64 = ($24|0)==(0);
  $$1114 = 0;
  while(1) {
   if (!($60)) {
    $$191105 = 0;
    while(1) {
     $65 = (($6) + ($$191105<<2)|0);
     $66 = HEAP32[$65>>2]|0;
     $67 = (($1) + ($66)|0);
     $68 = (($12) + ($$191105<<2)|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = (($67) + ($69)|0);
     $71 = (($10) + ($$191105<<2)|0);
     HEAP32[$71>>2] = $70;
     $72 = (($8) + ($$191105<<2)|0);
     $73 = HEAP32[$72>>2]|0;
     $74 = (($2) + ($73)|0);
     $75 = (($13) + ($$191105<<2)|0);
     $76 = HEAP32[$75>>2]|0;
     $77 = (($74) + ($76)|0);
     $78 = (($11) + ($$191105<<2)|0);
     HEAP32[$78>>2] = $77;
     $79 = (($$191105) + 1)|0;
     $exitcond117 = ($79|0)==($24|0);
     if ($exitcond117) {
      break;
     } else {
      $$191105 = $79;
     }
    }
   }
   if (!($61)) {
    $$2110 = 0;
    while(1) {
     if (!($64)) {
      $$092107 = 0;
      while(1) {
       $82 = (($11) + ($$092107<<2)|0);
       $83 = HEAP32[$82>>2]|0;
       $84 = (($10) + ($$092107<<2)|0);
       $85 = HEAP32[$84>>2]|0;
       FUNCTION_TABLE_vii[$38 & 63]($83,$85);
       $86 = (($7) + ($$092107<<2)|0);
       $87 = HEAP32[$86>>2]|0;
       $88 = (($85) + ($87)|0);
       HEAP32[$84>>2] = $88;
       $89 = (($9) + ($$092107<<2)|0);
       $90 = HEAP32[$89>>2]|0;
       $91 = HEAP32[$82>>2]|0;
       $92 = (($91) + ($90)|0);
       HEAP32[$82>>2] = $92;
       $93 = (($$092107) + 1)|0;
       $exitcond118 = ($93|0)==($24|0);
       if ($exitcond118) {
        break;
       } else {
        $$092107 = $93;
       }
      }
     }
     $94 = (($$2110) + 1)|0;
     $exitcond119 = ($94|0)==($3|0);
     if ($exitcond119) {
      break;
     } else {
      $$2110 = $94;
     }
    }
   }
   if (!($62)) {
    $80 = HEAP32[$5>>2]|0;
    $81 = HEAP32[$63>>2]|0;
    $$3111 = 0;
    while(1) {
     $95 = (($12) + ($$3111<<2)|0);
     $96 = HEAP32[$95>>2]|0;
     $97 = (($96) + ($80))|0;
     HEAP32[$95>>2] = $97;
     $98 = (($13) + ($$3111<<2)|0);
     $99 = HEAP32[$98>>2]|0;
     $100 = (($99) + ($81))|0;
     HEAP32[$98>>2] = $100;
     $101 = (($$3111) + 1)|0;
     $exitcond120 = ($101|0)==($24|0);
     if ($exitcond120) {
      break;
     } else {
      $$3111 = $101;
     }
    }
   }
   $102 = (($$1114) + 1)|0;
   $exitcond121 = ($102|0)==($4|0);
   if ($exitcond121) {
    break;
   } else {
    $$1114 = $102;
   }
  }
 }
 STACKTOP = sp;return;
}
function _ComputeComponentIncrements($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $0 & 4096;
 $5 = ($4|0)==(0);
 if ($5) {
  _ComputeIncrementsForChunky($0,$2,$3);
  return;
 } else {
  _ComputeIncrementsForPlanar($0,$1,$2,$3);
  return;
 }
}
function __cmsGetFormatterAlpha($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond3 = 0, $or$cond5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $3 = (_FormatterPos($1)|0);
 $4 = (_FormatterPos($2)|0);
 $5 = $4 | $3;
 $6 = ($5|0)<(0);
 $7 = ($3|0)>(4);
 $or$cond3 = $7 | $6;
 $8 = ($4|0)>(4);
 $or$cond5 = $8 | $or$cond3;
 if ($or$cond5) {
  _cmsSignalError($0,8,24416,$vararg_buffer);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $9 = ((1808 + (($3*20)|0)|0) + ($4<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $$0 = $10;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _ComputeIncrementsForPlanar($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$067 = 0, $$164 = 0, $$262 = 0, $$360 = 0, $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $exitcond = 0, $exitcond71 = 0, $exitcond72 = 0, $exitcond73 = 0, $or$cond5 = 0, $scevgep = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $4 = sp;
 $5 = $0 >>> 7;
 $6 = $5 & 7;
 $7 = $0 >>> 3;
 $8 = $7 & 15;
 $9 = (($8) + ($6))|0;
 $10 = (_trueBytesSize($0)|0);
 $11 = (($9) + -1)|0;
 $12 = ($11>>>0)>(14);
 if ($12) {
  STACKTOP = sp;return;
 }
 dest=$4; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $13 = ($6|0)==(0);
 if ($13) {
  label = 4;
 } else {
  $$067 = 0;
  while(1) {
   $18 = (($3) + ($$067<<2)|0);
   HEAP32[$18>>2] = $10;
   $19 = (($$067) + 1)|0;
   $exitcond73 = ($19|0)==($6|0);
   if ($exitcond73) {
    break;
   } else {
    $$067 = $19;
   }
  }
  $14 = ($9|0)==(0);
  if (!($14)) {
   label = 4;
  }
 }
 if ((label|0) == 4) {
  $15 = $0 & 1024;
  $16 = ($15|0)==(0);
  $17 = (($9) + -1)|0;
  $$164 = 0;
  while(1) {
   $20 = (($17) - ($$164))|0;
   $$sink = $16 ? $$164 : $20;
   $21 = (($4) + ($$164<<2)|0);
   HEAP32[$21>>2] = $$sink;
   $22 = (($$164) + 1)|0;
   $exitcond72 = ($22|0)==($9|0);
   if ($exitcond72) {
    break;
   } else {
    $$164 = $22;
   }
  }
  $23 = $0 & 16384;
  $24 = ($23|0)!=(0);
  $25 = ($9|0)!=(0);
  $or$cond5 = $24 & $25;
  if ($or$cond5) {
   $26 = HEAP32[$4>>2]|0;
   $27 = ($11|0)==(0);
   if (!($27)) {
    $$262 = 0;
    while(1) {
     $28 = (($$262) + 1)|0;
     $29 = (($4) + ($28<<2)|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = (($4) + ($$262<<2)|0);
     HEAP32[$31>>2] = $30;
     $exitcond71 = ($28|0)==($11|0);
     if ($exitcond71) {
      break;
     } else {
      $$262 = $28;
     }
    }
   }
   $32 = (($4) + ($11<<2)|0);
   HEAP32[$32>>2] = $26;
  }
  $33 = ($9|0)==(0);
  if (!($33)) {
   $$360 = 0;
   while(1) {
    $35 = (($4) + ($$360<<2)|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = Math_imul($36, $1)|0;
    HEAP32[$35>>2] = $37;
    $38 = (($$360) + 1)|0;
    $exitcond = ($38|0)==($9|0);
    if ($exitcond) {
     break;
    } else {
     $$360 = $38;
    }
   }
  }
 }
 $34 = ($6|0)==(0);
 if ($34) {
  STACKTOP = sp;return;
 }
 $scevgep = (($4) + ($8<<2)|0);
 $39 = $6 << 2;
 _memcpy(($2|0),($scevgep|0),($39|0))|0;
 STACKTOP = sp;return;
}
function _ComputeIncrementsForChunky($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$072 = 0, $$169 = 0, $$267 = 0, $$365 = 0, $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond76 = 0, $exitcond77 = 0, $exitcond78 = 0, $or$cond = 0, $or$cond5 = 0, $scevgep = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $3 = sp;
 $4 = $0 >>> 7;
 $5 = $4 & 7;
 $6 = $0 >>> 3;
 $7 = $6 & 15;
 $8 = (($7) + ($5))|0;
 $9 = (_trueBytesSize($0)|0);
 $10 = Math_imul($9, $8)|0;
 $11 = (($8) + -1)|0;
 $12 = ($11>>>0)>(14);
 if ($12) {
  STACKTOP = sp;return;
 }
 dest=$3; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $13 = ($5|0)==(0);
 if ($13) {
  label = 4;
 } else {
  $$072 = 0;
  while(1) {
   $18 = (($2) + ($$072<<2)|0);
   HEAP32[$18>>2] = $10;
   $19 = (($$072) + 1)|0;
   $exitcond78 = ($19|0)==($5|0);
   if ($exitcond78) {
    break;
   } else {
    $$072 = $19;
   }
  }
  $14 = ($8|0)==(0);
  if (!($14)) {
   label = 4;
  }
 }
 if ((label|0) == 4) {
  $15 = $0 & 1024;
  $16 = ($15|0)==(0);
  $17 = (($8) + -1)|0;
  $$169 = 0;
  while(1) {
   $20 = (($17) - ($$169))|0;
   $$sink = $16 ? $$169 : $20;
   $21 = (($3) + ($$169<<2)|0);
   HEAP32[$21>>2] = $$sink;
   $22 = (($$169) + 1)|0;
   $exitcond77 = ($22|0)==($8|0);
   if ($exitcond77) {
    break;
   } else {
    $$169 = $22;
   }
  }
  $23 = $0 & 16384;
  $24 = ($23|0)!=(0);
  $25 = ($8>>>0)>(1);
  $or$cond5 = $24 & $25;
  if ($or$cond5) {
   $26 = HEAP32[$3>>2]|0;
   $27 = ($11|0)==(0);
   if (!($27)) {
    $$267 = 0;
    while(1) {
     $28 = (($$267) + 1)|0;
     $29 = (($3) + ($28<<2)|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = (($3) + ($$267<<2)|0);
     HEAP32[$31>>2] = $30;
     $exitcond76 = ($28|0)==($11|0);
     if ($exitcond76) {
      break;
     } else {
      $$267 = $28;
     }
    }
   }
   $32 = (($3) + ($11<<2)|0);
   HEAP32[$32>>2] = $26;
  }
  $33 = ($9>>>0)>(1);
  $34 = ($8|0)!=(0);
  $or$cond = $33 & $34;
  if ($or$cond) {
   $$365 = 0;
   while(1) {
    $36 = (($3) + ($$365<<2)|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = Math_imul($37, $9)|0;
    HEAP32[$36>>2] = $38;
    $39 = (($$365) + 1)|0;
    $exitcond = ($39|0)==($8|0);
    if ($exitcond) {
     break;
    } else {
     $$365 = $39;
    }
   }
  }
 }
 $35 = ($5|0)==(0);
 if ($35) {
  STACKTOP = sp;return;
 }
 $scevgep = (($3) + ($7<<2)|0);
 $40 = $5 << 2;
 _memcpy(($1|0),($scevgep|0),($40|0))|0;
 STACKTOP = sp;return;
}
function _trueBytesSize($0) {
 $0 = $0|0;
 var $$ = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0 & 7;
 $2 = ($1|0)==(0);
 $$ = $2 ? 8 : $1;
 return ($$|0);
}
function _copy8($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$1>>0]|0;
 HEAP8[$0>>0] = $2;
 return;
}
function _from8to16($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2&255;
 $4 = $3 << 8;
 $5 = $4 | $3;
 $6 = $5&65535;
 HEAP16[$0>>1] = $6;
 return;
}
function _from8toHLF($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$1>>0]|0;
 $3 = (+($2&255));
 $4 = $3 / 255.0;
 $5 = (__cmsFloat2Half($4)|0);
 HEAP16[$0>>1] = $5;
 return;
}
function _from8toFLT($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0.0, $4 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$1>>0]|0;
 $3 = (+($2&255));
 $4 = $3 / 255.0;
 HEAPF32[$0>>2] = $4;
 return;
}
function _from8toDBL($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0.0, $4 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$1>>0]|0;
 $3 = (+($2&255));
 $4 = $3 / 255.0;
 HEAPF64[$0>>3] = $4;
 return;
}
function _from16to8($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP16[$1>>1]|0;
 $3 = $2&65535;
 $4 = ($3*65281)|0;
 $5 = (($4) + 8388608)|0;
 $6 = $5 >>> 24;
 $7 = $6&255;
 HEAP8[$0>>0] = $7;
 return;
}
function _copy16($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAPU8[$1>>0]|(HEAPU8[$1+1>>0]<<8);
 HEAP8[$0>>0]=$2&255;HEAP8[$0+1>>0]=$2>>8;
 return;
}
function _from16toHLF($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP16[$1>>1]|0;
 $3 = (+($2&65535));
 $4 = $3 / 65535.0;
 $5 = (__cmsFloat2Half($4)|0);
 HEAP16[$0>>1] = $5;
 return;
}
function _fromHLFto8($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP16[$1>>1]|0;
 $3 = (+__cmsHalf2Float($2));
 $4 = $3 * 255.0;
 $5 = $4;
 $6 = (__cmsQuickSaturateByte($5)|0);
 HEAP8[$0>>0] = $6;
 return;
}
function _fromHLFto16($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP16[$1>>1]|0;
 $3 = (+__cmsHalf2Float($2));
 $4 = $3 * 65535.0;
 $5 = $4;
 $6 = (__cmsQuickSaturateWord($5)|0);
 HEAP16[$0>>1] = $6;
 return;
}
function _fromHLFtoFLT($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP16[$1>>1]|0;
 $3 = (+__cmsHalf2Float($2));
 HEAPF32[$0>>2] = $3;
 return;
}
function _fromHLFtoDBL($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0.0, $4 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP16[$1>>1]|0;
 $3 = (+__cmsHalf2Float($2));
 $4 = $3;
 HEAPF64[$0>>3] = $4;
 return;
}
function _fromFLTto8($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = +HEAPF32[$1>>2];
 $3 = $2 * 255.0;
 $4 = $3;
 $5 = (__cmsQuickSaturateByte($4)|0);
 HEAP8[$0>>0] = $5;
 return;
}
function _fromFLTto16($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = +HEAPF32[$1>>2];
 $3 = $2 * 65535.0;
 $4 = $3;
 $5 = (__cmsQuickSaturateWord($4)|0);
 HEAP16[$0>>1] = $5;
 return;
}
function _fromFLTtoHLF($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0.0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = +HEAPF32[$1>>2];
 $3 = (__cmsFloat2Half($2)|0);
 HEAP16[$0>>1] = $3;
 return;
}
function _copy32($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAPU8[$1>>0]|(HEAPU8[$1+1>>0]<<8)|(HEAPU8[$1+2>>0]<<16)|(HEAPU8[$1+3>>0]<<24);
 HEAP8[$0>>0]=$2&255;HEAP8[$0+1>>0]=($2>>8)&255;HEAP8[$0+2>>0]=($2>>16)&255;HEAP8[$0+3>>0]=$2>>24;
 return;
}
function _fromFLTtoDBL($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0.0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = +HEAPF32[$1>>2];
 $3 = $2;
 HEAPF64[$0>>3] = $3;
 return;
}
function _fromDBLto8($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0.0, $3 = 0.0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = +HEAPF64[$1>>3];
 $3 = $2 * 255.0;
 $4 = (__cmsQuickSaturateByte($3)|0);
 HEAP8[$0>>0] = $4;
 return;
}
function _fromDBLto16($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0.0, $3 = 0.0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = +HEAPF64[$1>>3];
 $3 = $2 * 65535.0;
 $4 = (__cmsQuickSaturateWord($3)|0);
 HEAP16[$0>>1] = $4;
 return;
}
function _fromDBLtoHLF($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0.0, $3 = 0.0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = +HEAPF64[$1>>3];
 $3 = $2;
 $4 = (__cmsFloat2Half($3)|0);
 HEAP16[$0>>1] = $4;
 return;
}
function _fromDBLtoFLT($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0.0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = +HEAPF64[$1>>3];
 $3 = $2;
 HEAPF32[$0>>2] = $3;
 return;
}
function _copy64($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1;
 $3 = $2;
 $4 = HEAPU8[$3>>0]|(HEAPU8[$3+1>>0]<<8)|(HEAPU8[$3+2>>0]<<16)|(HEAPU8[$3+3>>0]<<24);
 $5 = (($2) + 4)|0;
 $6 = $5;
 $7 = HEAPU8[$6>>0]|(HEAPU8[$6+1>>0]<<8)|(HEAPU8[$6+2>>0]<<16)|(HEAPU8[$6+3>>0]<<24);
 $8 = $0;
 $9 = $8;
 HEAP8[$9>>0]=$4&255;HEAP8[$9+1>>0]=($4>>8)&255;HEAP8[$9+2>>0]=($4>>16)&255;HEAP8[$9+3>>0]=$4>>24;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP8[$11>>0]=$7&255;HEAP8[$11+1>>0]=($7>>8)&255;HEAP8[$11+2>>0]=($7>>16)&255;HEAP8[$11+3>>0]=$7>>24;
 return;
}
function _FormatterPos($0) {
 $0 = $0|0;
 var $$ = 0, $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0 & 4194311;
 $2 = ($1|0)==(4194304);
 if ($2) {
  $$0 = 4;
  return ($$0|0);
 }
 $3 = $0 & 4194311;
 $4 = ($3|0)==(4194306);
 if ($4) {
  $$0 = 2;
  return ($$0|0);
 }
 $5 = $0 & 4194311;
 $6 = ($5|0)==(4194308);
 if ($6) {
  $$0 = 3;
  return ($$0|0);
 }
 $7 = $0 & 4194311;
 $8 = ($7|0)==(2);
 if ($8) {
  $$0 = 1;
  return ($$0|0);
 } else {
  $9 = $0 & 4194311;
  $not$ = ($9|0)!=(1);
  $$ = $not$ << 31 >> 31;
  return ($$|0);
 }
 return (0)|0;
}
function __cmsQuickSaturateByte($0) {
 $0 = +$0;
 var $$0 = 0, $1 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0 + 0.5;
 $2 = !($1 <= 0.0);
 if ($2) {
  $3 = !($1 >= 255.0);
  if ($3) {
   $4 = (__cmsQuickFloorWord($1)|0);
   $5 = $4&255;
   $$0 = $5;
  } else {
   $$0 = -1;
  }
 } else {
  $$0 = 0;
 }
 return ($$0|0);
}
function __cmsQuickFloorWord($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0 + -32767.0;
 $2 = (__cmsQuickFloor($1)|0);
 $3 = (($2) + 32767)|0;
 $4 = $3&65535;
 return ($4|0);
}
function __cmsQuickFloor($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0 + 103079215104.0;
 HEAPF64[tempDoublePtr>>3] = $1;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = $2 >> 16;
 return ($4|0);
}
function __cmsQuickSaturateWord($0) {
 $0 = +$0;
 var $$0 = 0, $1 = 0.0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0 + 0.5;
 $2 = !($1 <= 0.0);
 if ($2) {
  $3 = !($1 >= 65535.0);
  if ($3) {
   $4 = (__cmsQuickFloorWord($1)|0);
   $$0 = $4;
  } else {
   $$0 = -1;
  }
 } else {
  $$0 = 0;
 }
 return ($$0|0);
}
function _DefaultICCintents($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$0 = 0, $$0117 = 0, $$0118140 = 0, $$0121137 = 0, $$1 = 0, $$1120 = 0, $$2$ph$ph = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond5 = 0, $or$cond7 = 0, $switch$split112D = 0, $switch$split142D = 0, $switch$split22D = 0, $switch$split2D = 0, $switch$split52D = 0, $switch$split82D = 0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $vararg_buffer = sp + 96|0;
 $7 = sp + 24|0;
 $8 = sp;
 $9 = ($1|0)==(0);
 if ($9) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = (_cmsPipelineAlloc($0,0,0)|0);
 $11 = ($10|0)==(0|0);
 if ($11) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $12 = HEAP32[$3>>2]|0;
 $13 = (_cmsGetColorSpace($12)|0);
 $14 = ($1|0)==(1);
 $$0118140 = 0;$$0121137 = $13;
 L7: while(1) {
  $15 = (($3) + ($$0118140<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (_cmsGetDeviceClass($16)|0);
  $18 = ($17|0)==(1633842036);
  $19 = ($$0118140|0)!=(0);
  L9: do {
   if ($19) {
    label = 7;
   } else {
    $switch$split2D = ($17|0)<(1818848875);
    if ($switch$split2D) {
     switch ($17|0) {
     case 1633842036:  {
      label = 7;
      break L9;
      break;
     }
     default: {
     }
     }
    } else {
     switch ($17|0) {
     case 1818848875:  {
      label = 7;
      break L9;
      break;
     }
     default: {
     }
     }
    }
    $20 = (($2) + ($$0118140<<2)|0);
    $21 = HEAP32[$20>>2]|0;
    $67 = 1;$68 = $21;
    label = 9;
   }
  } while(0);
  L15: do {
   if ((label|0) == 7) {
    label = 0;
    $22 = (($2) + ($$0118140<<2)|0);
    $23 = HEAP32[$22>>2]|0;
    $switch$split22D = ($$0121137|0)<(1482250784);
    if ($switch$split22D) {
     switch ($$0121137|0) {
     case 1281450528:  {
      break;
     }
     default: {
      $67 = 1;$68 = $23;
      label = 9;
      break L15;
     }
     }
    } else {
     switch ($$0121137|0) {
     case 1482250784:  {
      break;
     }
     default: {
      $67 = 1;$68 = $23;
      label = 9;
      break L15;
     }
     }
    }
    $switch$split52D = ($17|0)<(1818848875);
    if ($switch$split52D) {
     switch ($17|0) {
     case 1633842036:  {
      $67 = 0;$68 = $23;
      label = 9;
      break L15;
      break;
     }
     default: {
     }
     }
    } else {
     switch ($17|0) {
     case 1818848875:  {
      $67 = 0;$68 = $23;
      label = 9;
      break L15;
      break;
     }
     default: {
     }
     }
    }
    $26 = (_cmsGetPCS($16)|0);
    $27 = (_cmsGetColorSpace($16)|0);
    $$0117 = $26;$$1120 = $27;$31 = $23;$69 = 0;
   }
  } while(0);
  if ((label|0) == 9) {
   label = 0;
   $24 = (_cmsGetColorSpace($16)|0);
   $25 = (_cmsGetPCS($16)|0);
   $$0117 = $24;$$1120 = $25;$31 = $68;$69 = $67;
  }
  $28 = (_ColorSpaceIsCompatible($$0117,$$0121137)|0);
  $29 = ($28|0)==(0);
  if ($29) {
   label = 12;
   break;
  }
  $switch$split82D = ($17|0)<(1818848875);
  if ($switch$split82D) {
   switch ($17|0) {
   case 1633842036:  {
    label = 15;
    break;
   }
   default: {
    label = 14;
   }
   }
  } else {
   switch ($17|0) {
   case 1818848875:  {
    label = 15;
    break;
   }
   default: {
    label = 14;
   }
   }
  }
  do {
   if ((label|0) == 14) {
    label = 0;
    $30 = ($17|0)==(1852662636);
    $or$cond5 = $14 & $30;
    if ($or$cond5) {
     label = 15;
    } else {
     if ($69) {
      $42 = (__cmsReadInputLUT($16,$31)|0);
      $43 = ($42|0)==(0|0);
      if ($43) {
       break L7;
      } else {
       $$1 = $42;
       break;
      }
     }
     $44 = (__cmsReadOutputLUT($16,$31)|0);
     $45 = ($44|0)==(0|0);
     if ($45) {
      break L7;
     }
     $46 = (($4) + ($$0118140<<2)|0);
     $47 = HEAP32[$46>>2]|0;
     $48 = (($5) + ($$0118140<<3)|0);
     $49 = +HEAPF64[$48>>3];
     $50 = (_ComputeConversion($$0118140,$3,$31,$47,$49,$7,$8)|0);
     $51 = ($50|0)==(0);
     if ($51) {
      $$2$ph$ph = $44;
      label = 31;
      break L7;
     }
     $52 = (_AddConversion($10,$$0121137,$$0117,$7,$8)|0);
     $53 = ($52|0)==(0);
     if ($53) {
      $$2$ph$ph = $44;
      label = 31;
      break L7;
     } else {
      $$1 = $44;
     }
    }
   }
  } while(0);
  if ((label|0) == 15) {
   label = 0;
   $32 = (__cmsReadDevicelinkLUT($16,$31)|0);
   $33 = ($32|0)==(0|0);
   if ($33) {
    break;
   }
   $or$cond7 = $19 & $18;
   if ($or$cond7) {
    $34 = (($4) + ($$0118140<<2)|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = (($5) + ($$0118140<<3)|0);
    $37 = +HEAPF64[$36>>3];
    $38 = (_ComputeConversion($$0118140,$3,$31,$35,$37,$7,$8)|0);
    $39 = ($38|0)==(0);
    if ($39) {
     $$2$ph$ph = $32;
     label = 31;
     break;
    }
   } else {
    __cmsMAT3identity($7);
    __cmsVEC3init($8,0.0,0.0,0.0);
   }
   $40 = (_AddConversion($10,$$0121137,$$0117,$7,$8)|0);
   $41 = ($40|0)==(0);
   if ($41) {
    $$2$ph$ph = $32;
    label = 31;
    break;
   } else {
    $$1 = $32;
   }
  }
  $54 = (_cmsPipelineCat($10,$$1)|0);
  $55 = ($54|0)==(0);
  if ($55) {
   $$2$ph$ph = $$1;
   label = 31;
   break;
  }
  _cmsPipelineFree($$1);
  $56 = (($$0118140) + 1)|0;
  $57 = ($56>>>0)<($1>>>0);
  if ($57) {
   $$0118140 = $56;$$0121137 = $$1120;
  } else {
   label = 27;
   break;
  }
 }
 if ((label|0) == 12) {
  _cmsSignalError($0,9,24449,$vararg_buffer);
 }
 else if ((label|0) == 27) {
  $58 = $6 & 32768;
  $59 = ($58|0)==(0);
  if ($59) {
   $$0 = $10;
   STACKTOP = sp;return ($$0|0);
  }
  $switch$split112D = ($$1120|0)<(1196573017);
  L54: do {
   if ($switch$split112D) {
    switch ($$1120|0) {
    case 1129142603:  {
     break L54;
     break;
    }
    default: {
     $$0 = $10;
    }
    }
    STACKTOP = sp;return ($$0|0);
   } else {
    $switch$split142D = ($$1120|0)<(1380401696);
    if ($switch$split142D) {
     switch ($$1120|0) {
     case 1196573017:  {
      break L54;
      break;
     }
     default: {
      $$0 = $10;
     }
     }
     STACKTOP = sp;return ($$0|0);
    } else {
     switch ($$1120|0) {
     case 1380401696:  {
      break L54;
      break;
     }
     default: {
      $$0 = $10;
     }
     }
     STACKTOP = sp;return ($$0|0);
    }
   }
  } while(0);
  $60 = ((($10)) + 32|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = (_cmsChannelsOf($$1120)|0);
  $63 = (__cmsStageClipNegatives($61,$62)|0);
  $64 = ($63|0)==(0|0);
  if (!($64)) {
   $65 = (_cmsPipelineInsertStage($10,1,$63)|0);
   $66 = ($65|0)==(0);
   if (!($66)) {
    $$0 = $10;
    STACKTOP = sp;return ($$0|0);
   }
  }
 }
 else if ((label|0) == 31) {
  _cmsPipelineFree($$2$ph$ph);
 }
 _cmsPipelineFree($10);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _ColorSpaceIsCompatible($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$$ = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $narrow = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==($1|0);
 if ($2) {
  return 1;
 }
 $3 = ($0|0)==(876825682);
 $4 = ($1|0)==(1129142603);
 $or$cond = $3 & $4;
 if ($or$cond) {
  return 1;
 }
 $5 = ($0|0)==(1129142603);
 $6 = ($1|0)==(876825682);
 $or$cond3 = $5 & $6;
 if ($or$cond3) {
  return 1;
 } else {
  $7 = ($0|0)==(1482250784);
  $8 = ($1|0)==(1281450528);
  $or$cond5 = $7 & $8;
  $9 = ($0|0)==(1281450528);
  $10 = ($1|0)==(1482250784);
  $or$cond7 = $9 & $10;
  $narrow = $or$cond5 | $or$cond7;
  $$$ = $narrow&1;
  return ($$$|0);
 }
 return (0)|0;
}
function _ComputeConversion($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = +$4;
 $5 = $5|0;
 $6 = $6|0;
 var $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0;
 var $29 = 0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0.0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0.0, $46 = 0.0, $7 = 0, $8 = 0;
 var $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0;
 $7 = sp + 168|0;
 $8 = sp + 144|0;
 $9 = sp + 72|0;
 $10 = sp;
 __cmsMAT3identity($5);
 __cmsVEC3init($6,0.0,0.0,0.0);
 $11 = ($2|0)==(3);
 if ($11) {
  $12 = (($0) + -1)|0;
  $13 = (($1) + ($12<<2)|0);
  $14 = HEAP32[$13>>2]|0;
  (__cmsReadMediaWhitePoint($7,$14)|0);
  $15 = HEAP32[$13>>2]|0;
  (__cmsReadCHAD($9,$15)|0);
  $16 = (($1) + ($0<<2)|0);
  $17 = HEAP32[$16>>2]|0;
  (__cmsReadMediaWhitePoint($8,$17)|0);
  $18 = HEAP32[$16>>2]|0;
  (__cmsReadCHAD($10,$18)|0);
  $19 = (_ComputeAbsoluteIntent($4,$7,$9,$8,$10,$5)|0);
  $not$ = ($19|0)==(0);
  if ($not$) {
   $$1 = 0;
   STACKTOP = sp;return ($$1|0);
  }
 } else {
  $20 = ($3|0)==(0);
  if (!($20)) {
   $21 = (($0) + -1)|0;
   $22 = (($1) + ($21<<2)|0);
   $23 = HEAP32[$22>>2]|0;
   (_cmsDetectBlackPoint($7,$23,$2,0)|0);
   $24 = (($1) + ($0<<2)|0);
   $25 = HEAP32[$24>>2]|0;
   (_cmsDetectDestinationBlackPoint($8,$25,$2,0)|0);
   $26 = +HEAPF64[$7>>3];
   $27 = +HEAPF64[$8>>3];
   $28 = $26 != $27;
   if ($28) {
    label = 7;
   } else {
    $29 = ((($7)) + 8|0);
    $30 = +HEAPF64[$29>>3];
    $31 = ((($8)) + 8|0);
    $32 = +HEAPF64[$31>>3];
    $33 = $30 != $32;
    if ($33) {
     label = 7;
    } else {
     $34 = ((($7)) + 16|0);
     $35 = +HEAPF64[$34>>3];
     $36 = ((($8)) + 16|0);
     $37 = +HEAPF64[$36>>3];
     $38 = $35 != $37;
     if ($38) {
      label = 7;
     }
    }
   }
   if ((label|0) == 7) {
    _ComputeBlackPointCompensation($7,$8,$5,$6);
   }
  }
 }
 $39 = +HEAPF64[$6>>3];
 $40 = $39 / 1.999969482421875;
 HEAPF64[$6>>3] = $40;
 $41 = ((($6)) + 8|0);
 $42 = +HEAPF64[$41>>3];
 $43 = $42 / 1.999969482421875;
 HEAPF64[$41>>3] = $43;
 $44 = ((($6)) + 16|0);
 $45 = +HEAPF64[$44>>3];
 $46 = $45 / 1.999969482421875;
 HEAPF64[$44>>3] = $46;
 $$1 = 1;
 STACKTOP = sp;return ($$1|0);
}
function _AddConversion($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $switch$split12D = 0, $switch$split2D = 0, $switch$split42D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $switch$split2D = ($1|0)<(1482250784);
 L1: do {
  if ($switch$split2D) {
   switch ($1|0) {
   case 1281450528:  {
    break;
   }
   default: {
    label = 16;
    break L1;
   }
   }
   $switch$split42D = ($2|0)<(1482250784);
   if (!($switch$split42D)) {
    switch ($2|0) {
    case 1482250784:  {
     break;
    }
    default: {
     $$0 = 0;
     return ($$0|0);
    }
    }
    $24 = ((($0)) + 32|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = (__cmsStageAllocLab2XYZ($25)|0);
    $27 = (_cmsPipelineInsertStage($0,1,$26)|0);
    $28 = ($27|0)==(0);
    if ($28) {
     $$0 = 0;
     return ($$0|0);
    }
    $29 = (_IsEmptyLayer($3,$4)|0);
    $30 = ($29|0)==(0);
    if (!($30)) {
     break;
    }
    $31 = HEAP32[$24>>2]|0;
    $32 = (_cmsStageAllocMatrix($31,3,3,$3,$4)|0);
    $33 = (_cmsPipelineInsertStage($0,1,$32)|0);
    $34 = ($33|0)==(0);
    if ($34) {
     $$0 = 0;
    } else {
     break;
    }
    return ($$0|0);
   }
   switch ($2|0) {
   case 1281450528:  {
    break;
   }
   default: {
    $$0 = 0;
    return ($$0|0);
   }
   }
   $35 = (_IsEmptyLayer($3,$4)|0);
   $36 = ($35|0)==(0);
   if ($36) {
    $37 = ((($0)) + 32|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = (__cmsStageAllocLab2XYZ($38)|0);
    $40 = (_cmsPipelineInsertStage($0,1,$39)|0);
    $41 = ($40|0)==(0);
    if ($41) {
     $$0 = 0;
     return ($$0|0);
    }
    $42 = HEAP32[$37>>2]|0;
    $43 = (_cmsStageAllocMatrix($42,3,3,$3,$4)|0);
    $44 = (_cmsPipelineInsertStage($0,1,$43)|0);
    $45 = ($44|0)==(0);
    if ($45) {
     $$0 = 0;
     return ($$0|0);
    }
    $46 = HEAP32[$37>>2]|0;
    $47 = (__cmsStageAllocXYZ2Lab($46)|0);
    $48 = (_cmsPipelineInsertStage($0,1,$47)|0);
    $49 = ($48|0)==(0);
    if ($49) {
     $$0 = 0;
     return ($$0|0);
    }
   }
  } else {
   switch ($1|0) {
   case 1482250784:  {
    break;
   }
   default: {
    label = 16;
    break L1;
   }
   }
   $switch$split12D = ($2|0)<(1482250784);
   if (!($switch$split12D)) {
    switch ($2|0) {
    case 1482250784:  {
     break;
    }
    default: {
     $$0 = 0;
     return ($$0|0);
    }
    }
    $5 = (_IsEmptyLayer($3,$4)|0);
    $6 = ($5|0)==(0);
    if (!($6)) {
     break;
    }
    $7 = ((($0)) + 32|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = (_cmsStageAllocMatrix($8,3,3,$3,$4)|0);
    $10 = (_cmsPipelineInsertStage($0,1,$9)|0);
    $11 = ($10|0)==(0);
    if ($11) {
     $$0 = 0;
    } else {
     break;
    }
    return ($$0|0);
   }
   switch ($2|0) {
   case 1281450528:  {
    break;
   }
   default: {
    $$0 = 0;
    return ($$0|0);
   }
   }
   $12 = (_IsEmptyLayer($3,$4)|0);
   $13 = ($12|0)==(0);
   if ($13) {
    $14 = ((($0)) + 32|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = (_cmsStageAllocMatrix($15,3,3,$3,$4)|0);
    $17 = (_cmsPipelineInsertStage($0,1,$16)|0);
    $18 = ($17|0)==(0);
    if ($18) {
     $$0 = 0;
     return ($$0|0);
    }
   }
   $19 = ((($0)) + 32|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (__cmsStageAllocXYZ2Lab($20)|0);
   $22 = (_cmsPipelineInsertStage($0,1,$21)|0);
   $23 = ($22|0)==(0);
   if ($23) {
    $$0 = 0;
    return ($$0|0);
   }
  }
 } while(0);
 if ((label|0) == 16) {
  $50 = ($1|0)==($2|0);
  if (!($50)) {
   $$0 = 0;
   return ($$0|0);
  }
 }
 $$0 = 1;
 return ($$0|0);
}
function _IsEmptyLayer($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$024 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0.0;
 var $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0;
 var $46 = 0.0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0.0, $60 = 0.0, $61 = 0, $62 = 0.0, $63 = 0.0;
 var $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0.0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0, $8 = 0.0, $9 = 0.0, $or$cond = 0, $or$cond3 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $2 = sp;
 $3 = ($0|0)==(0|0);
 $4 = ($1|0)==(0|0);
 $or$cond = $3 & $4;
 if ($or$cond) {
  $$024 = 1;
  STACKTOP = sp;return ($$024|0);
 }
 $5 = ($1|0)!=(0|0);
 $or$cond3 = $3 & $5;
 if ($or$cond3) {
  $$024 = 0;
  STACKTOP = sp;return ($$024|0);
 }
 __cmsMAT3identity($2);
 $6 = +HEAPF64[$0>>3];
 $7 = +HEAPF64[$2>>3];
 $8 = $6 - $7;
 $9 = (+Math_abs((+$8)));
 $10 = ((($0)) + 8|0);
 $11 = +HEAPF64[$10>>3];
 $12 = ((($2)) + 8|0);
 $13 = +HEAPF64[$12>>3];
 $14 = $11 - $13;
 $15 = (+Math_abs((+$14)));
 $16 = $9 + $15;
 $17 = ((($0)) + 16|0);
 $18 = +HEAPF64[$17>>3];
 $19 = ((($2)) + 16|0);
 $20 = +HEAPF64[$19>>3];
 $21 = $18 - $20;
 $22 = (+Math_abs((+$21)));
 $23 = $16 + $22;
 $24 = ((($0)) + 24|0);
 $25 = +HEAPF64[$24>>3];
 $26 = ((($2)) + 24|0);
 $27 = +HEAPF64[$26>>3];
 $28 = $25 - $27;
 $29 = (+Math_abs((+$28)));
 $30 = $23 + $29;
 $31 = ((($0)) + 32|0);
 $32 = +HEAPF64[$31>>3];
 $33 = ((($2)) + 32|0);
 $34 = +HEAPF64[$33>>3];
 $35 = $32 - $34;
 $36 = (+Math_abs((+$35)));
 $37 = $30 + $36;
 $38 = ((($0)) + 40|0);
 $39 = +HEAPF64[$38>>3];
 $40 = ((($2)) + 40|0);
 $41 = +HEAPF64[$40>>3];
 $42 = $39 - $41;
 $43 = (+Math_abs((+$42)));
 $44 = $37 + $43;
 $45 = ((($0)) + 48|0);
 $46 = +HEAPF64[$45>>3];
 $47 = ((($2)) + 48|0);
 $48 = +HEAPF64[$47>>3];
 $49 = $46 - $48;
 $50 = (+Math_abs((+$49)));
 $51 = $44 + $50;
 $52 = ((($0)) + 56|0);
 $53 = +HEAPF64[$52>>3];
 $54 = ((($2)) + 56|0);
 $55 = +HEAPF64[$54>>3];
 $56 = $53 - $55;
 $57 = (+Math_abs((+$56)));
 $58 = $51 + $57;
 $59 = ((($0)) + 64|0);
 $60 = +HEAPF64[$59>>3];
 $61 = ((($2)) + 64|0);
 $62 = +HEAPF64[$61>>3];
 $63 = $60 - $62;
 $64 = (+Math_abs((+$63)));
 $65 = $58 + $64;
 $66 = +HEAPF64[$1>>3];
 $67 = (+Math_abs((+$66)));
 $68 = $65 + $67;
 $69 = ((($1)) + 8|0);
 $70 = +HEAPF64[$69>>3];
 $71 = (+Math_abs((+$70)));
 $72 = $68 + $71;
 $73 = ((($1)) + 16|0);
 $74 = +HEAPF64[$73>>3];
 $75 = (+Math_abs((+$74)));
 $76 = $72 + $75;
 $77 = $76 < 0.002;
 $78 = $77&1;
 $$024 = $78;
 STACKTOP = sp;return ($$024|0);
}
function _ComputeAbsoluteIntent($0,$1,$2,$3,$4,$5) {
 $0 = +$0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0$ph = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0.0;
 var $28 = 0, $29 = 0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0.0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0;
 var $48 = 0, $49 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 432|0;
 $6 = sp + 360|0;
 $7 = sp + 288|0;
 $8 = sp + 216|0;
 $9 = sp + 144|0;
 $10 = sp + 72|0;
 $11 = sp;
 $12 = $0 == 1.0;
 $13 = +HEAPF64[$3>>3];
 $14 = +HEAPF64[$1>>3];
 $15 = $14 / $13;
 if ($12) {
  __cmsVEC3init($5,$15,0.0,0.0);
  $16 = ((($5)) + 24|0);
  $17 = ((($1)) + 8|0);
  $18 = +HEAPF64[$17>>3];
  $19 = ((($3)) + 8|0);
  $20 = +HEAPF64[$19>>3];
  $21 = $18 / $20;
  __cmsVEC3init($16,0.0,$21,0.0);
  $22 = ((($5)) + 48|0);
  $23 = ((($1)) + 16|0);
  $24 = +HEAPF64[$23>>3];
  $25 = ((($3)) + 16|0);
  $26 = +HEAPF64[$25>>3];
  $27 = $24 / $26;
  __cmsVEC3init($22,0.0,0.0,$27);
  $$1 = 1;
  STACKTOP = sp;return ($$1|0);
 }
 __cmsVEC3init($6,$15,0.0,0.0);
 $28 = ((($6)) + 24|0);
 $29 = ((($1)) + 8|0);
 $30 = +HEAPF64[$29>>3];
 $31 = ((($3)) + 8|0);
 $32 = +HEAPF64[$31>>3];
 $33 = $30 / $32;
 __cmsVEC3init($28,0.0,$33,0.0);
 $34 = ((($6)) + 48|0);
 $35 = ((($1)) + 16|0);
 $36 = +HEAPF64[$35>>3];
 $37 = ((($3)) + 16|0);
 $38 = +HEAPF64[$37>>3];
 $39 = $36 / $38;
 __cmsVEC3init($34,0.0,0.0,$39);
 $40 = $0 == 0.0;
 if ($40) {
  dest=$7; src=$4; stop=dest+72|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  __cmsMAT3per($8,$7,$6);
  __cmsMAT3per($5,$8,$4);
  dest=$9; src=$2; stop=dest+72|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  $41 = (__cmsMAT3inverse($9,$10)|0);
  $42 = ($41|0)==(0);
  if ($42) {
   $$1 = 0;
   STACKTOP = sp;return ($$1|0);
  }
  __cmsMAT3per($5,$8,$10);
  $$1 = 1;
  STACKTOP = sp;return ($$1|0);
 }
 dest=$7; src=$2; stop=dest+72|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $43 = (__cmsMAT3inverse($7,$8)|0);
 $44 = ($43|0)==(0);
 do {
  if ($44) {
   $$0$ph = 0;
  } else {
   __cmsMAT3per($9,$8,$6);
   $45 = (+_CHAD2Temp($2));
   $46 = (+_CHAD2Temp($4));
   $47 = $45 < 0.0;
   $48 = $46 < 0.0;
   $or$cond = $47 | $48;
   if ($or$cond) {
    $$0$ph = 0;
   } else {
    $49 = (__cmsMAT3isIdentity($6)|0);
    $50 = ($49|0)==(0);
    if (!($50)) {
     $51 = $45 - $46;
     $52 = (+Math_abs((+$51)));
     $53 = $52 < 0.01;
     if ($53) {
      __cmsMAT3identity($5);
      $$0$ph = 1;
      break;
     }
    }
    $54 = 1.0 - $0;
    $55 = $54 * $46;
    $56 = $45 * $0;
    $57 = $56 + $55;
    _Temp2CHAD($11,$57);
    __cmsMAT3per($5,$9,$11);
    $$1 = 1;
    STACKTOP = sp;return ($$1|0);
   }
  }
 } while(0);
 $$1 = $$0$ph;
 STACKTOP = sp;return ($$1|0);
}
function _ComputeBlackPointCompensation($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0.0;
 var $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0;
 var $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0;
 var $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = +HEAPF64[$0>>3];
 $5 = (_cmsD50_XYZ()|0);
 $6 = +HEAPF64[$5>>3];
 $7 = $4 - $6;
 $8 = ((($0)) + 8|0);
 $9 = +HEAPF64[$8>>3];
 $10 = (_cmsD50_XYZ()|0);
 $11 = ((($10)) + 8|0);
 $12 = +HEAPF64[$11>>3];
 $13 = $9 - $12;
 $14 = ((($0)) + 16|0);
 $15 = +HEAPF64[$14>>3];
 $16 = (_cmsD50_XYZ()|0);
 $17 = ((($16)) + 16|0);
 $18 = +HEAPF64[$17>>3];
 $19 = $15 - $18;
 $20 = +HEAPF64[$1>>3];
 $21 = (_cmsD50_XYZ()|0);
 $22 = +HEAPF64[$21>>3];
 $23 = $20 - $22;
 $24 = $23 / $7;
 $25 = ((($1)) + 8|0);
 $26 = +HEAPF64[$25>>3];
 $27 = (_cmsD50_XYZ()|0);
 $28 = ((($27)) + 8|0);
 $29 = +HEAPF64[$28>>3];
 $30 = $26 - $29;
 $31 = $30 / $13;
 $32 = ((($1)) + 16|0);
 $33 = +HEAPF64[$32>>3];
 $34 = (_cmsD50_XYZ()|0);
 $35 = ((($34)) + 16|0);
 $36 = +HEAPF64[$35>>3];
 $37 = $33 - $36;
 $38 = $37 / $19;
 $39 = (_cmsD50_XYZ()|0);
 $40 = +HEAPF64[$39>>3];
 $41 = +HEAPF64[$1>>3];
 $42 = +HEAPF64[$0>>3];
 $43 = $41 - $42;
 $44 = $40 * $43;
 $45 = -$44;
 $46 = $45 / $7;
 $47 = (_cmsD50_XYZ()|0);
 $48 = ((($47)) + 8|0);
 $49 = +HEAPF64[$48>>3];
 $50 = +HEAPF64[$25>>3];
 $51 = +HEAPF64[$8>>3];
 $52 = $50 - $51;
 $53 = $49 * $52;
 $54 = -$53;
 $55 = $54 / $13;
 $56 = (_cmsD50_XYZ()|0);
 $57 = ((($56)) + 16|0);
 $58 = +HEAPF64[$57>>3];
 $59 = +HEAPF64[$32>>3];
 $60 = +HEAPF64[$14>>3];
 $61 = $59 - $60;
 $62 = $58 * $61;
 $63 = -$62;
 $64 = $63 / $19;
 __cmsVEC3init($2,$24,0.0,0.0);
 $65 = ((($2)) + 24|0);
 __cmsVEC3init($65,0.0,$31,0.0);
 $66 = ((($2)) + 48|0);
 __cmsVEC3init($66,0.0,0.0,$38);
 __cmsVEC3init($3,$46,$55,$64);
 return;
}
function _CHAD2Temp($0) {
 $0 = $0|0;
 var $$ = 0.0, $$0 = 0.0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0.0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0;
 $1 = sp + 224|0;
 $2 = sp + 200|0;
 $3 = sp + 176|0;
 $4 = sp + 152|0;
 $5 = sp + 144|0;
 $6 = sp + 72|0;
 $7 = sp;
 dest=$6; src=$0; stop=dest+72|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $8 = (__cmsMAT3inverse($6,$7)|0);
 $9 = ($8|0)==(0);
 if ($9) {
  $$0 = 0.0;
  STACKTOP = sp;return (+$$0);
 }
 $10 = (_cmsD50_XYZ()|0);
 $11 = +HEAPF64[$10>>3];
 HEAPF64[$2>>3] = $11;
 $12 = (_cmsD50_XYZ()|0);
 $13 = ((($12)) + 8|0);
 $14 = +HEAPF64[$13>>3];
 $15 = ((($2)) + 8|0);
 HEAPF64[$15>>3] = $14;
 $16 = (_cmsD50_XYZ()|0);
 $17 = ((($16)) + 16|0);
 $18 = +HEAPF64[$17>>3];
 $19 = ((($2)) + 16|0);
 HEAPF64[$19>>3] = $18;
 __cmsMAT3eval($1,$7,$2);
 $20 = +HEAPF64[$1>>3];
 HEAPF64[$3>>3] = $20;
 $21 = ((($1)) + 8|0);
 $22 = +HEAPF64[$21>>3];
 $23 = ((($3)) + 8|0);
 HEAPF64[$23>>3] = $22;
 $24 = ((($1)) + 16|0);
 $25 = +HEAPF64[$24>>3];
 $26 = ((($3)) + 16|0);
 HEAPF64[$26>>3] = $25;
 _cmsXYZ2xyY($4,$3);
 $27 = (_cmsTempFromWhitePoint($5,$4)|0);
 $28 = ($27|0)==(0);
 $29 = +HEAPF64[$5>>3];
 $$ = $28 ? -1.0 : $29;
 $$0 = $$;
 STACKTOP = sp;return (+$$0);
}
function _Temp2CHAD($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $2 = sp + 24|0;
 $3 = sp;
 (_cmsWhitePointFromTemp($3,$1)|0);
 _cmsxyY2XYZ($2,$3);
 $4 = (_cmsD50_XYZ()|0);
 (__cmsAdaptationMatrix($0,0,$2,$4)|0);
 STACKTOP = sp;return;
}
function __cmsLinkProfiles($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$0 = 0, $$03637 = 0, $$pr = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $7 = (($1) + -1)|0;
 $8 = ($7>>>0)>(254);
 if ($8) {
  HEAP32[$vararg_buffer>>2] = $1;
  _cmsSignalError($0,2,24469,$vararg_buffer);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $$03637 = 0;
 }
 while(1) {
  $9 = (($2) + ($$03637<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(3);
  if ($11) {
   $12 = (($4) + ($$03637<<2)|0);
   HEAP32[$12>>2] = 0;
   $$pr = HEAP32[$9>>2]|0;
   $13 = $$pr;
  } else {
   $13 = $10;
  }
  switch ($13|0) {
  case 2: case 0:  {
   $14 = (($3) + ($$03637<<2)|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = (_cmsGetEncodedICCversion($15)|0);
   $17 = ($16>>>0)>(67108863);
   if ($17) {
    $18 = (($4) + ($$03637<<2)|0);
    HEAP32[$18>>2] = 1;
   }
   break;
  }
  default: {
  }
  }
  $19 = (($$03637) + 1)|0;
  $exitcond = ($19|0)==($1|0);
  if ($exitcond) {
   break;
  } else {
   $$03637 = $19;
  }
 }
 $20 = HEAP32[$2>>2]|0;
 $21 = (_SearchIntent($0,$20)|0);
 $22 = ($21|0)==(0|0);
 if ($22) {
  $23 = HEAP32[$2>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $23;
  _cmsSignalError($0,8,24497,$vararg_buffer1);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $24 = ((($21)) + 260|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (FUNCTION_TABLE_iiiiiiii[$25 & 3]($0,$1,$2,$3,$4,$5,$6)|0);
  $$0 = $26;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _SearchIntent($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$013 = 0, $$017 = 0, $$018 = 0, $$116 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__cmsContextGetClientChunk($0,10)|0);
 $$017 = HEAP32[$2>>2]|0;
 $3 = ($$017|0)==(0|0);
 L1: do {
  if ($3) {
   $$116 = 1908;
  } else {
   $$018 = $$017;
   while(1) {
    $4 = HEAP32[$$018>>2]|0;
    $5 = ($4|0)==($1|0);
    if ($5) {
     $$013 = $$018;
     break;
    }
    $6 = ((($$018)) + 264|0);
    $$0 = HEAP32[$6>>2]|0;
    $7 = ($$0|0)==(0|0);
    if ($7) {
     $$116 = 1908;
     break L1;
    } else {
     $$018 = $$0;
    }
   }
   return ($$013|0);
  }
 } while(0);
 while(1) {
  $8 = HEAP32[$$116>>2]|0;
  $9 = ($8|0)==($1|0);
  if ($9) {
   $$013 = $$116;
   label = 6;
   break;
  }
  $10 = ((($$116)) + 264|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(0|0);
  if ($12) {
   $$013 = 0;
   label = 6;
   break;
  } else {
   $$116 = $11;
  }
 }
 if ((label|0) == 6) {
  return ($$013|0);
 }
 return (0)|0;
}
function _BlackPreservingKOnlyIntents($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$0 = 0, $$04950 = 0, $$pr = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1040|0;
 $7 = sp;
 $8 = sp + 8|0;
 $9 = (($1) + -1)|0;
 $10 = ($9>>>0)>(254);
 if ($10) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $$04950 = 0;
 }
 while(1) {
  $11 = (($2) + ($$04950<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (_TranslateNonICCIntents($12)|0);
  $14 = (($8) + ($$04950<<2)|0);
  HEAP32[$14>>2] = $13;
  $15 = (($$04950) + 1)|0;
  $exitcond = ($15|0)==($1|0);
  if ($exitcond) {
   break;
  } else {
   $$04950 = $15;
  }
 }
 $16 = HEAP32[$3>>2]|0;
 $17 = (_cmsGetColorSpace($16)|0);
 $18 = ($17|0)==(1129142603);
 if ($18) {
  $19 = (($3) + ($9<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (_cmsGetColorSpace($20)|0);
  $22 = ($21|0)==(1129142603);
  if ($22) {
   $24 = $7;
   $25 = $24;
   HEAP32[$25>>2] = 0;
   $26 = (($24) + 4)|0;
   $27 = $26;
   HEAP32[$27>>2] = 0;
   $28 = (_cmsPipelineAlloc($0,4,4)|0);
   $29 = ($28|0)==(0|0);
   if ($29) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $30 = (_DefaultICCintents($0,$1,$8,$3,$4,$5,$6)|0);
   HEAP32[$7>>2] = $30;
   $31 = ($30|0)==(0|0);
   if (!($31)) {
    $32 = (__cmsBuildKToneCurve($0,4096,$1,$8,$3,$4,$5,$6)|0);
    $33 = ((($7)) + 4|0);
    HEAP32[$33>>2] = $32;
    $34 = ($32|0)==(0|0);
    if (!($34)) {
     $35 = (__cmsReasonableGridpointsByColorspace(1129142603,$6)|0);
     $36 = (_cmsStageAllocCLut16bit($0,$35,4,4,0)|0);
     $37 = ($36|0)==(0|0);
     if (!($37)) {
      $38 = (_cmsPipelineInsertStage($28,0,$36)|0);
      $39 = ($38|0)==(0);
      if (!($39)) {
       $40 = (_cmsStageSampleCLut16bit($36,37,$7,0)|0);
       $41 = ($40|0)==(0);
       if (!($41)) {
        $42 = HEAP32[$7>>2]|0;
        _cmsPipelineFree($42);
        $43 = HEAP32[$33>>2]|0;
        _cmsFreeToneCurve($43);
        $$0 = $28;
        STACKTOP = sp;return ($$0|0);
       }
      }
     }
    }
    $$pr = HEAP32[$7>>2]|0;
    $44 = ($$pr|0)==(0|0);
    if (!($44)) {
     _cmsPipelineFree($$pr);
    }
   }
   $45 = ((($7)) + 4|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)==(0|0);
   if (!($47)) {
    _cmsFreeToneCurve($46);
   }
   _cmsPipelineFree($28);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $23 = (_DefaultICCintents($0,$1,$8,$3,$4,$5,$6)|0);
 $$0 = $23;
 STACKTOP = sp;return ($$0|0);
}
function _BlackPreservingKPlaneIntents($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$0 = 0, $$06566 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $exitcond = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1072|0;
 $7 = sp;
 $8 = sp + 48|0;
 $9 = (($1) + -1)|0;
 $10 = ($9>>>0)>(254);
 if ($10) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $$06566 = 0;
 }
 while(1) {
  $11 = (($2) + ($$06566<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (_TranslateNonICCIntents($12)|0);
  $14 = (($8) + ($$06566<<2)|0);
  HEAP32[$14>>2] = $13;
  $15 = (($$06566) + 1)|0;
  $exitcond = ($15|0)==($1|0);
  if ($exitcond) {
   break;
  } else {
   $$06566 = $15;
  }
 }
 $16 = HEAP32[$3>>2]|0;
 $17 = (_cmsGetColorSpace($16)|0);
 $18 = ($17|0)==(1129142603);
 do {
  if ($18) {
   $19 = (($3) + ($9<<2)|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (_cmsGetColorSpace($20)|0);
   $22 = ($21|0)==(1129142603);
   if (!($22)) {
    $23 = HEAP32[$19>>2]|0;
    $24 = (_cmsGetDeviceClass($23)|0);
    $25 = ($24|0)==(1886549106);
    if (!($25)) {
     break;
    }
   }
   $27 = (_cmsPipelineAlloc($0,4,4)|0);
   $28 = ($27|0)==(0|0);
   if ($28) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   dest=$7; stop=dest+48|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
   $29 = HEAP32[$19>>2]|0;
   $30 = (__cmsReadInputLUT($29,1)|0);
   $31 = ((($7)) + 16|0);
   HEAP32[$31>>2] = $30;
   $32 = ($30|0)==(0|0);
   if (!($32)) {
    $33 = HEAP32[$19>>2]|0;
    $34 = (+_cmsDetectTAC($33));
    $35 = $34 / 100.0;
    $36 = ((($7)) + 40|0);
    HEAPF64[$36>>3] = $35;
    $37 = !($35 <= 0.0);
    if ($37) {
     $38 = (_DefaultICCintents($0,$1,$8,$3,$4,$5,$6)|0);
     HEAP32[$7>>2] = $38;
     $39 = ($38|0)==(0|0);
     if (!($39)) {
      $40 = (__cmsBuildKToneCurve($0,4096,$1,$8,$3,$4,$5,$6)|0);
      $41 = ((($7)) + 12|0);
      HEAP32[$41>>2] = $40;
      $42 = ($40|0)==(0|0);
      if (!($42)) {
       $43 = (_cmsCreateLab4ProfileTHR($0,0)|0);
       $44 = HEAP32[$19>>2]|0;
       $45 = (_cmsCreateTransformTHR($0,$44,34,$43,4849688,1,320)|0);
       $46 = ((($7)) + 4|0);
       HEAP32[$46>>2] = $45;
       $47 = ($45|0)==(0|0);
       if (!($47)) {
        $48 = HEAP32[$19>>2]|0;
        $49 = (_cmsCreateTransformTHR($0,$48,4194340,$43,4194332,1,320)|0);
        $50 = ((($7)) + 8|0);
        HEAP32[$50>>2] = $49;
        $51 = ($49|0)==(0|0);
        if (!($51)) {
         (_cmsCloseProfile($43)|0);
         $52 = ((($7)) + 24|0);
         HEAPF64[$52>>3] = 0.0;
         $53 = (__cmsReasonableGridpointsByColorspace(1129142603,$6)|0);
         $54 = (_cmsStageAllocCLut16bit($0,$53,4,4,0)|0);
         $55 = ($54|0)==(0|0);
         if (!($55)) {
          $56 = (_cmsPipelineInsertStage($27,0,$54)|0);
          $57 = ($56|0)==(0);
          if (!($57)) {
           (_cmsStageSampleCLut16bit($54,38,$7,0)|0);
          }
         }
        }
       }
      }
     }
    }
   }
   $58 = HEAP32[$7>>2]|0;
   $59 = ($58|0)==(0|0);
   if (!($59)) {
    _cmsPipelineFree($58);
   }
   $60 = ((($7)) + 8|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = ($61|0)==(0|0);
   if (!($62)) {
    _cmsDeleteTransform($61);
   }
   $63 = ((($7)) + 4|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = ($64|0)==(0|0);
   if (!($65)) {
    _cmsDeleteTransform($64);
   }
   $66 = ((($7)) + 12|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = ($67|0)==(0|0);
   if (!($68)) {
    _cmsFreeToneCurve($67);
   }
   $69 = HEAP32[$31>>2]|0;
   $70 = ($69|0)==(0|0);
   if ($70) {
    $$0 = $27;
    STACKTOP = sp;return ($$0|0);
   }
   _cmsPipelineFree($69);
   $$0 = $27;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $26 = (_DefaultICCintents($0,$1,$8,$3,$4,$5,$6)|0);
 $$0 = $26;
 STACKTOP = sp;return ($$0|0);
}
function _TranslateNonICCIntents($0) {
 $0 = $0|0;
 var $$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($0|0) {
 case 13: case 10:  {
  $$0 = 0;
  break;
 }
 case 14: case 11:  {
  $$0 = 1;
  break;
 }
 case 15: case 12:  {
  $$0 = 2;
  break;
 }
 default: {
  $$0 = $0;
 }
 }
 return ($$0|0);
}
function _BlackPreservingSampler($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$055 = 0.0, $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0.0, $115 = 0.0, $116 = 0.0;
 var $117 = 0.0, $118 = 0, $119 = 0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0, $124 = 0, $125 = 0, $126 = 0.0, $127 = 0, $128 = 0.0, $129 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0;
 var $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0.0;
 var $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0.0;
 var $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0;
 var $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0, $98 = 0.0, $99 = 0, $fabsf = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $3 = sp + 80|0;
 $4 = sp + 64|0;
 $5 = sp + 48|0;
 $6 = sp + 24|0;
 $7 = sp;
 $8 = HEAP16[$0>>1]|0;
 $9 = (+($8&65535));
 $10 = $9 / 65535.0;
 $11 = $10;
 HEAPF32[$3>>2] = $11;
 $12 = ((($0)) + 2|0);
 $13 = HEAP16[$12>>1]|0;
 $14 = (+($13&65535));
 $15 = $14 / 65535.0;
 $16 = $15;
 $17 = ((($3)) + 4|0);
 HEAPF32[$17>>2] = $16;
 $18 = ((($0)) + 4|0);
 $19 = HEAP16[$18>>1]|0;
 $20 = (+($19&65535));
 $21 = $20 / 65535.0;
 $22 = $21;
 $23 = ((($3)) + 8|0);
 HEAPF32[$23>>2] = $22;
 $24 = ((($0)) + 6|0);
 $25 = HEAP16[$24>>1]|0;
 $26 = (+($25&65535));
 $27 = $26 / 65535.0;
 $28 = $27;
 $29 = ((($3)) + 12|0);
 HEAPF32[$29>>2] = $28;
 $30 = ((($2)) + 12|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (+_cmsEvalToneCurveFloat($31,$28));
 $33 = ((($5)) + 12|0);
 HEAPF32[$33>>2] = $32;
 $34 = HEAP16[$0>>1]|0;
 $35 = ($34<<16>>16)==(0);
 if ($35) {
  $36 = ((($0)) + 2|0);
  $37 = HEAP16[$36>>1]|0;
  $38 = ($37<<16>>16)==(0);
  if ($38) {
   $39 = ((($0)) + 4|0);
   $40 = HEAP16[$39>>1]|0;
   $41 = ($40<<16>>16)==(0);
   if ($41) {
    $42 = ((($1)) + 4|0);
    HEAP16[$42>>1] = 0;
    $43 = ((($1)) + 2|0);
    HEAP16[$43>>1] = 0;
    HEAP16[$1>>1] = 0;
    $44 = +HEAPF32[$33>>2];
    $45 = $44;
    $46 = $45 * 65535.0;
    $47 = (__cmsQuickSaturateWord_145($46)|0);
    $48 = ((($1)) + 6|0);
    HEAP16[$48>>1] = $47;
    STACKTOP = sp;return 1;
   }
  }
 }
 $49 = HEAP32[$2>>2]|0;
 _cmsPipelineEvalFloat($3,$4,$49);
 $50 = +HEAPF32[$4>>2];
 $51 = $50;
 $52 = $51 * 65535.0;
 $53 = (__cmsQuickSaturateWord_145($52)|0);
 HEAP16[$1>>1] = $53;
 $54 = ((($4)) + 4|0);
 $55 = +HEAPF32[$54>>2];
 $56 = $55;
 $57 = $56 * 65535.0;
 $58 = (__cmsQuickSaturateWord_145($57)|0);
 $59 = ((($1)) + 2|0);
 HEAP16[$59>>1] = $58;
 $60 = ((($4)) + 8|0);
 $61 = +HEAPF32[$60>>2];
 $62 = $61;
 $63 = $62 * 65535.0;
 $64 = (__cmsQuickSaturateWord_145($63)|0);
 $65 = ((($1)) + 4|0);
 HEAP16[$65>>1] = $64;
 $66 = ((($4)) + 12|0);
 $67 = +HEAPF32[$66>>2];
 $68 = $67;
 $69 = $68 * 65535.0;
 $70 = (__cmsQuickSaturateWord_145($69)|0);
 $71 = ((($1)) + 6|0);
 HEAP16[$71>>1] = $70;
 $72 = ((($4)) + 12|0);
 $73 = +HEAPF32[$72>>2];
 $74 = +HEAPF32[$33>>2];
 $75 = $73 - $74;
 $fabsf = (+Math_abs((+$75)));
 $76 = $fabsf;
 $77 = $76 < 4.5777065690089265E-5;
 if ($77) {
  STACKTOP = sp;return 1;
 }
 $78 = ((($2)) + 4|0);
 $79 = HEAP32[$78>>2]|0;
 _cmsDoTransform($79,$1,$6,1);
 $80 = ((($2)) + 8|0);
 $81 = HEAP32[$80>>2]|0;
 _cmsDoTransform($81,$4,$5,1);
 $82 = ((($2)) + 16|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = (_cmsPipelineEvalReverseFloat($5,$4,$4,$83)|0);
 $85 = ($84|0)==(0);
 if ($85) {
  STACKTOP = sp;return 1;
 }
 $86 = +HEAPF32[$33>>2];
 HEAPF32[$72>>2] = $86;
 $87 = +HEAPF32[$4>>2];
 $88 = ((($4)) + 4|0);
 $89 = +HEAPF32[$88>>2];
 $90 = $87 + $89;
 $91 = ((($4)) + 8|0);
 $92 = +HEAPF32[$91>>2];
 $93 = $90 + $92;
 $94 = $93;
 $95 = $86;
 $96 = $95 + $94;
 $97 = ((($2)) + 40|0);
 $98 = +HEAPF64[$97>>3];
 $99 = $96 > $98;
 if ($99) {
  $100 = $96 - $98;
  $101 = $100 / $94;
  $102 = 1.0 - $101;
  $103 = $102 < 0.0;
  if ($103) {
   $$055 = 0.0;
  } else {
   $$055 = $102;
  }
 } else {
  $$055 = 1.0;
 }
 $104 = $87;
 $105 = $104 * $$055;
 $106 = $105 * 65535.0;
 $107 = (__cmsQuickSaturateWord_145($106)|0);
 HEAP16[$1>>1] = $107;
 $108 = +HEAPF32[$88>>2];
 $109 = $108;
 $110 = $$055 * $109;
 $111 = $110 * 65535.0;
 $112 = (__cmsQuickSaturateWord_145($111)|0);
 $113 = ((($1)) + 2|0);
 HEAP16[$113>>1] = $112;
 $114 = +HEAPF32[$91>>2];
 $115 = $114;
 $116 = $$055 * $115;
 $117 = $116 * 65535.0;
 $118 = (__cmsQuickSaturateWord_145($117)|0);
 $119 = ((($1)) + 4|0);
 HEAP16[$119>>1] = $118;
 $120 = +HEAPF32[$72>>2];
 $121 = $120;
 $122 = $121 * 65535.0;
 $123 = (__cmsQuickSaturateWord_145($122)|0);
 $124 = ((($1)) + 6|0);
 HEAP16[$124>>1] = $123;
 $125 = HEAP32[$78>>2]|0;
 _cmsDoTransform($125,$1,$7,1);
 $126 = (+_cmsDeltaE($6,$7));
 $127 = ((($2)) + 24|0);
 $128 = +HEAPF64[$127>>3];
 $129 = $126 > $128;
 if (!($129)) {
  STACKTOP = sp;return 1;
 }
 HEAPF64[$127>>3] = $126;
 STACKTOP = sp;return 1;
}
function __cmsQuickSaturateWord_145($0) {
 $0 = +$0;
 var $$0 = 0, $1 = 0.0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0 + 0.5;
 $2 = !($1 <= 0.0);
 if ($2) {
  $3 = !($1 >= 65535.0);
  if ($3) {
   $4 = (__cmsQuickFloorWord_146($1)|0);
   $$0 = $4;
  } else {
   $$0 = -1;
  }
 } else {
  $$0 = 0;
 }
 return ($$0|0);
}
function __cmsQuickFloorWord_146($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0 + -32767.0;
 $2 = (__cmsQuickFloor_147($1)|0);
 $3 = (($2) + 32767)|0;
 $4 = $3&65535;
 return ($4|0);
}
function __cmsQuickFloor_147($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0 + 103079215104.0;
 HEAPF64[tempDoublePtr>>3] = $1;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = $2 >> 16;
 return ($4|0);
}
function _BlackPreservingGrayOnlySampler($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP16[$0>>1]|0;
 $4 = ($3<<16>>16)==(0);
 if ($4) {
  $5 = ((($0)) + 2|0);
  $6 = HEAP16[$5>>1]|0;
  $7 = ($6<<16>>16)==(0);
  if ($7) {
   $8 = ((($0)) + 4|0);
   $9 = HEAP16[$8>>1]|0;
   $10 = ($9<<16>>16)==(0);
   if ($10) {
    $11 = ((($1)) + 4|0);
    HEAP16[$11>>1] = 0;
    $12 = ((($1)) + 2|0);
    HEAP16[$12>>1] = 0;
    HEAP16[$1>>1] = 0;
    $13 = ((($2)) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($0)) + 6|0);
    $16 = HEAP16[$15>>1]|0;
    $17 = (_cmsEvalToneCurve16($14,$16)|0);
    $18 = ((($1)) + 6|0);
    HEAP16[$18>>1] = $17;
    return 1;
   }
  }
 }
 $19 = HEAP32[$2>>2]|0;
 $20 = ((($19)) + 16|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ((($19)) + 12|0);
 $23 = HEAP32[$22>>2]|0;
 FUNCTION_TABLE_viii[$21 & 63]($0,$1,$23);
 return 1;
}
function __cmsMallocDefaultFn($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)>(536870912);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = (_malloc($1)|0);
  $$0 = $3;
 }
 return ($$0|0);
}
function __cmsMallocZeroDefaultFn($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__cmsMalloc($0,$1)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$0 = 0;
  return ($$0|0);
 }
 _memset(($2|0),0,($1|0))|0;
 $$0 = $2;
 return ($$0|0);
}
function __cmsFreeDefaultFn($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  _free($1);
 }
 return;
}
function __cmsReallocDefaultFn($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2>>>0)>(536870912);
 if ($3) {
  $$0 = 0;
 } else {
  $4 = (_realloc($1,$2)|0);
  $$0 = $4;
 }
 return ($$0|0);
}
function __cmsCallocDefaultFn($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond13 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = Math_imul($2, $1)|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $$0 = 0;
  return ($$0|0);
 }
 $5 = (4294967295 / ($2>>>0))&-1;
 $6 = ($5>>>0)>($1>>>0);
 if (!($6)) {
  $$0 = 0;
  return ($$0|0);
 }
 $7 = ($3>>>0)<($1>>>0);
 $8 = ($3>>>0)<($2>>>0);
 $or$cond = $7 | $8;
 $9 = ($3>>>0)>(536870912);
 $or$cond13 = $9 | $or$cond;
 if ($or$cond13) {
  $$0 = 0;
  return ($$0|0);
 }
 $10 = (__cmsMallocZero($0,$3)|0);
 $$0 = $10;
 return ($$0|0);
}
function __cmsDupDefaultFn($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2>>>0)>(536870912);
 if ($3) {
  $$0 = 0;
  return ($$0|0);
 }
 $4 = (__cmsMalloc($0,$2)|0);
 $5 = ($4|0)!=(0|0);
 $6 = ($1|0)!=(0|0);
 $or$cond = $6 & $5;
 if (!($or$cond)) {
  $$0 = $4;
  return ($$0|0);
 }
 _memmove(($4|0),($1|0),($2|0))|0;
 $$0 = $4;
 return ($$0|0);
}
function __cmsMalloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__cmsContextGetClientChunk($0,4)|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_iii[$3 & 15]($0,$1)|0);
 return ($4|0);
}
function __cmsMallocZero($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__cmsContextGetClientChunk($0,4)|0);
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_iii[$4 & 15]($0,$1)|0);
 return ($5|0);
}
function _DefaultLogErrorHandlerFunction($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _defMtxCreate($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__cmsMalloc($0,28)|0);
 __cmsInitMutexPrimitive($1);
 return ($1|0);
}
function _defMtxDestroy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __cmsDestroyMutexPrimitive($1);
 __cmsFree($0,$1);
 return;
}
function _defMtxLock($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__cmsLockPrimitive($1)|0);
 $3 = ($2|0)==(0);
 $4 = $3&1;
 return ($4|0);
}
function _defMtxUnlock($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __cmsUnlockPrimitive($1);
 return;
}
function __cmsUnlockPrimitive($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (_pthread_mutex_unlock(($0|0))|0);
 return;
}
function __cmsLockPrimitive($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_pthread_mutex_lock(($0|0))|0);
 return ($1|0);
}
function __cmsDestroyMutexPrimitive($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (_pthread_mutex_destroy(($0|0))|0);
 return;
}
function __cmsFree($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = (__cmsContextGetClientChunk($0,4)|0);
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 FUNCTION_TABLE_vii[$5 & 63]($0,$1);
 return;
}
function __cmsInitMutexPrimitive($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (_pthread_mutex_init(($0|0),(0|0))|0);
 return;
}
function _cmsfilelength($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_ftell($0)|0);
 $2 = ($1|0)==(-1);
 if ($2) {
  $$0 = -1;
 } else {
  $3 = (_fseek($0,0,2)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   $5 = (_ftell($0)|0);
   (_fseek($0,$1,0)|0);
   $$0 = $5;
  } else {
   $$0 = -1;
  }
 }
 return ($$0|0);
}
function __cmsCalloc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (__cmsContextGetClientChunk($0,4)|0);
 $4 = ((($3)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_iiii[$5 & 63]($0,$1,$2)|0);
 return ($6|0);
}
function __cmsRealloc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (__cmsContextGetClientChunk($0,4)|0);
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_iiii[$5 & 63]($0,$1,$2)|0);
 return ($6|0);
}
function __cmsDupMem($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (__cmsContextGetClientChunk($0,4)|0);
 $4 = ((($3)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_iiii[$5 & 63]($0,$1,$2)|0);
 return ($6|0);
}
function _cmsSignalError($0,$1,$2,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $varargs = $varargs|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1040|0;
 $3 = sp;
 $4 = sp + 16|0;
 HEAP32[$3>>2] = $varargs;
 (_vsnprintf($4,1023,$2,$3)|0);
 $5 = (__cmsContextGetClientChunk($0,1)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  STACKTOP = sp;return;
 }
 FUNCTION_TABLE_viii[$6 & 63]($0,$1,$4);
 STACKTOP = sp;return;
}
function __cmsTagSignature2String($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__cmsAdjustEndianess32($1)|0);
 HEAP8[$0>>0]=$2&255;HEAP8[$0+1>>0]=($2>>8)&255;HEAP8[$0+2>>0]=($2>>16)&255;HEAP8[$0+3>>0]=$2>>24;
 $3 = ((($0)) + 4|0);
 HEAP8[$3>>0] = 0;
 return;
}
function __cmsCreateMutex($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__cmsContextGetClientChunk($0,14)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$0 = 0;
  return ($$0|0);
 }
 $4 = (FUNCTION_TABLE_ii[$2 & 15]($0)|0);
 $$0 = $4;
 return ($$0|0);
}
function __cmsDestroyMutex($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__cmsContextGetClientChunk($0,14)|0);
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  return;
 }
 FUNCTION_TABLE_vii[$4 & 63]($0,$1);
 return;
}
function __cmsLockMutex($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__cmsContextGetClientChunk($0,14)|0);
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $$0 = 1;
  return ($$0|0);
 }
 $6 = (FUNCTION_TABLE_iii[$4 & 15]($0,$1)|0);
 $$0 = $6;
 return ($$0|0);
}
function __cmsUnlockMutex($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__cmsContextGetClientChunk($0,14)|0);
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  return;
 }
 FUNCTION_TABLE_vii[$4 & 63]($0,$1);
 return;
}
function _cmsBuildTabulatedToneCurve16($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_AllocateToneCurveStruct($0,$1,0,0,$2)|0);
 return ($3|0);
}
function _AllocateToneCurveStruct($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$0107113 = 0, $$1112 = 0, $$pn = 0, $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $exitcond = 0, $exitcond115 = 0, $or$cond5 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $5 = ($1>>>0)>(65530);
 if ($5) {
  _cmsSignalError($0,2,24569,$vararg_buffer);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = ($1|0)==(0);
 $7 = ($2|0)==(0);
 $8 = $2 | $1;
 $9 = ($8|0)==(0);
 if ($9) {
  _cmsSignalError($0,2,24623,$vararg_buffer1);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = (__cmsMallocZero($0,28)|0);
 $11 = ($10|0)==(0|0);
 if ($11) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 if ($7) {
  $12 = ((($10)) + 8|0);
  HEAP32[$12>>2] = 0;
  $13 = ((($10)) + 16|0);
  HEAP32[$13>>2] = 0;
  label = 10;
 } else {
  $14 = (__cmsCalloc($0,$2,104)|0);
  $15 = ((($10)) + 8|0);
  HEAP32[$15>>2] = $14;
  $16 = ($14|0)==(0|0);
  if (!($16)) {
   $17 = (__cmsCalloc($0,$2,4)|0);
   $18 = ((($10)) + 16|0);
   HEAP32[$18>>2] = $17;
   $19 = ($17|0)==(0|0);
   if (!($19)) {
    label = 10;
   }
  }
 }
 do {
  if ((label|0) == 10) {
   $20 = ((($10)) + 4|0);
   HEAP32[$20>>2] = $2;
   if ($6) {
    $21 = ((($10)) + 24|0);
    HEAP32[$21>>2] = 0;
    $22 = ((($10)) + 20|0);
    HEAP32[$22>>2] = $1;
    $71 = $22;
   } else {
    $23 = (__cmsCalloc($0,$1,2)|0);
    $24 = ((($10)) + 24|0);
    HEAP32[$24>>2] = $23;
    $25 = ($23|0)==(0|0);
    if ($25) {
     break;
    }
    $26 = ((($10)) + 20|0);
    HEAP32[$26>>2] = $1;
    $27 = ($4|0)==(0|0);
    if ($27) {
     $71 = $26;
    } else {
     $28 = ((($10)) + 24|0);
     $29 = HEAP32[$28>>2]|0;
     $$0107113 = 0;
     while(1) {
      $30 = (($4) + ($$0107113<<1)|0);
      $31 = HEAP16[$30>>1]|0;
      $32 = (($29) + ($$0107113<<1)|0);
      HEAP16[$32>>1] = $31;
      $33 = (($$0107113) + 1)|0;
      $exitcond115 = ($33|0)==($1|0);
      if ($exitcond115) {
       $71 = $26;
       break;
      } else {
       $$0107113 = $33;
      }
     }
    }
   }
   $34 = ($3|0)!=(0|0);
   $35 = ($2|0)!=(0);
   $or$cond5 = $35 & $34;
   if ($or$cond5) {
    $36 = (__cmsCalloc($0,$2,4)|0);
    $37 = ((($10)) + 12|0);
    HEAP32[$37>>2] = $36;
    $38 = ($36|0)==(0|0);
    if ($38) {
     break;
    }
    $39 = ((($10)) + 8|0);
    $40 = ((($10)) + 16|0);
    $$1112 = 0;
    while(1) {
     $41 = (($3) + (($$1112*104)|0)|0);
     $42 = (((($3) + (($$1112*104)|0)|0)) + 8|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = ($43|0)==(0);
     if ($44) {
      $45 = (((($3) + (($$1112*104)|0)|0)) + 96|0);
      $46 = HEAP32[$45>>2]|0;
      $47 = (__cmsComputeInterpParams($0,$46,1,1,0,1)|0);
      $48 = HEAP32[$37>>2]|0;
      $49 = (($48) + ($$1112<<2)|0);
      HEAP32[$49>>2] = $47;
     }
     $50 = HEAP32[$39>>2]|0;
     $51 = (($50) + (($$1112*104)|0)|0);
     _memmove(($51|0),($41|0),104)|0;
     $52 = HEAP32[$42>>2]|0;
     $53 = ($52|0)==(0);
     if ($53) {
      $54 = (((($3) + (($$1112*104)|0)|0)) + 100|0);
      $55 = HEAP32[$54>>2]|0;
      $56 = ($55|0)==(0|0);
      if ($56) {
       $$sink = 0;
      } else {
       $57 = (((($3) + (($$1112*104)|0)|0)) + 96|0);
       $58 = HEAP32[$57>>2]|0;
       $59 = $58 << 2;
       $60 = (__cmsDupMem($0,$55,$59)|0);
       $$sink = $60;
      }
     } else {
      $$sink = 0;
     }
     $$pn = HEAP32[$39>>2]|0;
     $61 = (((($$pn) + (($$1112*104)|0)|0)) + 100|0);
     HEAP32[$61>>2] = $$sink;
     $62 = HEAP32[$42>>2]|0;
     $63 = (_GetParametricCurveByType($0,$62,0)|0);
     $64 = ($63|0)==(0|0);
     if (!($64)) {
      $65 = ((($63)) + 164|0);
      $66 = HEAP32[$65>>2]|0;
      $67 = HEAP32[$40>>2]|0;
      $68 = (($67) + ($$1112<<2)|0);
      HEAP32[$68>>2] = $66;
     }
     $69 = (($$1112) + 1)|0;
     $exitcond = ($69|0)==($2|0);
     if ($exitcond) {
      break;
     } else {
      $$1112 = $69;
     }
    }
   }
   $70 = HEAP32[$71>>2]|0;
   $72 = ((($10)) + 24|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = (__cmsComputeInterpParams($0,$70,1,1,$73,0)|0);
   HEAP32[$10>>2] = $74;
   $75 = ($74|0)==(0|0);
   if (!($75)) {
    $$0 = $10;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $76 = ((($10)) + 8|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = ($77|0)==(0|0);
 if (!($78)) {
  __cmsFree($0,$77);
 }
 $79 = ((($10)) + 16|0);
 $80 = HEAP32[$79>>2]|0;
 $81 = ($80|0)==(0|0);
 if (!($81)) {
  __cmsFree($0,$80);
 }
 $82 = ((($10)) + 24|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = ($83|0)==(0|0);
 if (!($84)) {
  __cmsFree($0,$83);
 }
 __cmsFree($0,$10);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _GetParametricCurveByType($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$025 = 0, $$02530 = 0, $$02531 = 0, $$129 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (__cmsContextGetClientChunk($0,6)|0);
 $$02530 = HEAP32[$3>>2]|0;
 $4 = ($$02530|0)==(0|0);
 L1: do {
  if ($4) {
   $$129 = 4632;
  } else {
   $$02531 = $$02530;
   while(1) {
    $5 = (_IsInSet($1,$$02531)|0);
    $6 = ($5|0)==(-1);
    if (!($6)) {
     break;
    }
    $8 = ((($$02531)) + 168|0);
    $$025 = HEAP32[$8>>2]|0;
    $9 = ($$025|0)==(0|0);
    if ($9) {
     $$129 = 4632;
     break L1;
    } else {
     $$02531 = $$025;
    }
   }
   $7 = ($2|0)==(0|0);
   if ($7) {
    $$0 = $$02531;
    return ($$0|0);
   }
   HEAP32[$2>>2] = $5;
   $$0 = $$02531;
   return ($$0|0);
  }
 } while(0);
 while(1) {
  $10 = (_IsInSet($1,$$129)|0);
  $11 = ($10|0)==(-1);
  if (!($11)) {
   break;
  }
  $13 = ((($$129)) + 168|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)==(0|0);
  if ($15) {
   $$0 = 0;
   label = 10;
   break;
  } else {
   $$129 = $14;
  }
 }
 if ((label|0) == 10) {
  return ($$0|0);
 }
 $12 = ($2|0)==(0|0);
 if ($12) {
  $$0 = $$129;
  return ($$0|0);
 }
 HEAP32[$2>>2] = $10;
 $$0 = $$129;
 return ($$0|0);
}
function _IsInSet($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$07 = 0, $$08 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ispos = 0, $neg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ispos = ($0|0)>(-1);
 $neg = (0 - ($0))|0;
 $2 = $ispos ? $0 : $neg;
 $3 = HEAP32[$1>>2]|0;
 $4 = ($3|0)>(0);
 if ($4) {
  $$08 = 0;
 } else {
  $$07 = -1;
  return ($$07|0);
 }
 while(1) {
  $5 = (((($1)) + 4|0) + ($$08<<2)|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($2|0)==($6|0);
  if ($7) {
   $$07 = $$08;
   label = 4;
   break;
  }
  $8 = (($$08) + 1)|0;
  $9 = HEAP32[$1>>2]|0;
  $10 = ($8|0)<($9|0);
  if ($10) {
   $$08 = $8;
  } else {
   $$07 = -1;
   label = 4;
   break;
  }
 }
 if ((label|0) == 4) {
  return ($$07|0);
 }
 return (0)|0;
}
function _DefaultEvalParametricFn($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 var $$ = 0.0, $$0 = 0.0, $$0172 = 0.0, $$1 = 0.0, $$173 = 0.0, $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0;
 var $113 = 0, $114 = 0.0, $115 = 0.0, $116 = 0, $117 = 0.0, $118 = 0.0, $119 = 0, $12 = 0.0, $120 = 0.0, $121 = 0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0;
 var $131 = 0.0, $132 = 0, $133 = 0, $134 = 0.0, $135 = 0.0, $136 = 0, $137 = 0.0, $138 = 0.0, $139 = 0, $14 = 0.0, $140 = 0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0, $146 = 0.0, $147 = 0.0, $148 = 0, $149 = 0.0;
 var $15 = 0, $150 = 0.0, $151 = 0, $152 = 0.0, $153 = 0.0, $154 = 0, $155 = 0, $156 = 0.0, $157 = 0.0, $158 = 0, $159 = 0, $16 = 0.0, $160 = 0.0, $161 = 0.0, $162 = 0, $163 = 0.0, $164 = 0.0, $165 = 0, $166 = 0, $167 = 0.0;
 var $168 = 0.0, $169 = 0, $17 = 0.0, $170 = 0.0, $171 = 0.0, $172 = 0.0, $173 = 0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0, $183 = 0.0, $184 = 0.0, $185 = 0;
 var $186 = 0, $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0.0, $190 = 0.0, $191 = 0, $192 = 0.0, $193 = 0.0, $194 = 0, $195 = 0, $196 = 0.0, $197 = 0.0, $198 = 0, $199 = 0.0, $20 = 0.0, $200 = 0.0, $201 = 0.0, $202 = 0, $203 = 0.0;
 var $204 = 0.0, $205 = 0.0, $206 = 0, $207 = 0.0, $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0, $212 = 0.0, $213 = 0.0, $214 = 0, $215 = 0, $216 = 0.0, $217 = 0, $218 = 0.0, $219 = 0.0, $22 = 0, $220 = 0.0, $221 = 0.0;
 var $222 = 0.0, $223 = 0.0, $224 = 0, $225 = 0, $226 = 0.0, $227 = 0.0, $228 = 0, $229 = 0, $23 = 0.0, $230 = 0.0, $231 = 0.0, $232 = 0, $233 = 0, $234 = 0.0, $235 = 0.0, $236 = 0.0, $237 = 0.0, $238 = 0, $239 = 0.0, $24 = 0.0;
 var $240 = 0.0, $241 = 0.0, $242 = 0.0, $243 = 0.0, $244 = 0.0, $245 = 0, $246 = 0.0, $247 = 0, $248 = 0.0, $249 = 0.0, $25 = 0.0, $250 = 0, $251 = 0.0, $252 = 0.0, $253 = 0.0, $254 = 0.0, $255 = 0, $256 = 0.0, $257 = 0.0, $258 = 0;
 var $259 = 0.0, $26 = 0, $260 = 0.0, $261 = 0, $262 = 0.0, $263 = 0.0, $264 = 0, $265 = 0, $266 = 0.0, $267 = 0.0, $268 = 0, $269 = 0.0, $27 = 0.0, $270 = 0.0, $271 = 0, $272 = 0.0, $273 = 0.0, $274 = 0.0, $275 = 0, $276 = 0.0;
 var $277 = 0.0, $278 = 0.0, $279 = 0.0, $28 = 0.0, $280 = 0.0, $281 = 0, $282 = 0.0, $283 = 0.0, $284 = 0.0, $285 = 0.0, $286 = 0.0, $287 = 0.0, $288 = 0.0, $289 = 0.0, $29 = 0, $290 = 0.0, $291 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0;
 var $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0.0;
 var $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0.0, $67 = 0, $68 = 0.0;
 var $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0, $74 = 0.0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0.0;
 var $87 = 0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0.0, $98 = 0.0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 do {
  switch ($0|0) {
  case 1:  {
   $3 = $2 < 0.0;
   $4 = +HEAPF64[$1>>3];
   if ($3) {
    $5 = $4 + -1.0;
    $6 = (+Math_abs((+$5)));
    $7 = $6 < 1.0E-4;
    $$ = $7 ? $2 : 0.0;
    $$0172 = $$;
    return (+$$0172);
   } else {
    $8 = (+Math_pow((+$2),(+$4)));
    $$0172 = $8;
    return (+$$0172);
   }
   break;
  }
  case -1:  {
   $9 = $2 < 0.0;
   $10 = +HEAPF64[$1>>3];
   if ($9) {
    $11 = $10 + -1.0;
    $12 = (+Math_abs((+$11)));
    $13 = $12 < 1.0E-4;
    $$173 = $13 ? $2 : 0.0;
    $$0172 = $$173;
    return (+$$0172);
   }
   $14 = (+Math_abs((+$10)));
   $15 = $14 < 1.0E-4;
   if ($15) {
    $$0172 = 9.9999997781963083E+21;
    return (+$$0172);
   }
   $16 = 1.0 / $10;
   $17 = (+Math_pow((+$2),(+$16)));
   $$0172 = $17;
   return (+$$0172);
   break;
  }
  case 2:  {
   $18 = ((($1)) + 8|0);
   $19 = +HEAPF64[$18>>3];
   $20 = (+Math_abs((+$19)));
   $21 = $20 < 1.0E-4;
   if ($21) {
    $$0172 = 0.0;
    return (+$$0172);
   }
   $22 = ((($1)) + 16|0);
   $23 = +HEAPF64[$22>>3];
   $24 = -$23;
   $25 = $24 / $19;
   $26 = !($25 <= $2);
   if ($26) {
    $$0172 = 0.0;
    return (+$$0172);
   }
   $27 = $19 * $2;
   $28 = $27 + $23;
   $29 = $28 > 0.0;
   if (!($29)) {
    $$0172 = 0.0;
    return (+$$0172);
   }
   $30 = +HEAPF64[$1>>3];
   $31 = (+Math_pow((+$28),(+$30)));
   $$0172 = $31;
   return (+$$0172);
   break;
  }
  case -2:  {
   $32 = +HEAPF64[$1>>3];
   $33 = (+Math_abs((+$32)));
   $34 = $33 < 1.0E-4;
   if ($34) {
    $$0172 = 0.0;
    return (+$$0172);
   }
   $35 = ((($1)) + 8|0);
   $36 = +HEAPF64[$35>>3];
   $37 = (+Math_abs((+$36)));
   $38 = $37 < 1.0E-4;
   $39 = $2 < 0.0;
   $or$cond = $39 | $38;
   if ($or$cond) {
    $$0172 = 0.0;
    return (+$$0172);
   }
   $40 = ((($1)) + 16|0);
   $41 = 1.0 / $32;
   $42 = (+Math_pow((+$2),(+$41)));
   $43 = +HEAPF64[$40>>3];
   $44 = $42 - $43;
   $45 = $44 / $36;
   $46 = $45 < 0.0;
   if (!($46)) {
    $$0172 = $45;
    return (+$$0172);
   }
   $$0172 = 0.0;
   return (+$$0172);
   break;
  }
  case 3:  {
   $47 = ((($1)) + 8|0);
   $48 = +HEAPF64[$47>>3];
   $49 = (+Math_abs((+$48)));
   $50 = $49 < 1.0E-4;
   if ($50) {
    $$0172 = 0.0;
    return (+$$0172);
   }
   $51 = ((($1)) + 16|0);
   $52 = +HEAPF64[$51>>3];
   $53 = -$52;
   $54 = $53 / $48;
   $55 = $54 < 0.0;
   $$0 = $55 ? 0.0 : $54;
   $56 = !($$0 <= $2);
   if ($56) {
    $65 = ((($1)) + 24|0);
    $66 = +HEAPF64[$65>>3];
    $$0172 = $66;
    return (+$$0172);
   }
   $57 = $48 * $2;
   $58 = $57 + $52;
   $59 = $58 > 0.0;
   if (!($59)) {
    $$0172 = 0.0;
    return (+$$0172);
   }
   $60 = +HEAPF64[$1>>3];
   $61 = (+Math_pow((+$58),(+$60)));
   $62 = ((($1)) + 24|0);
   $63 = +HEAPF64[$62>>3];
   $64 = $61 + $63;
   $$0172 = $64;
   return (+$$0172);
   break;
  }
  case -3:  {
   $67 = ((($1)) + 8|0);
   $68 = +HEAPF64[$67>>3];
   $69 = (+Math_abs((+$68)));
   $70 = $69 < 1.0E-4;
   if ($70) {
    $$0172 = 0.0;
    return (+$$0172);
   }
   $71 = ((($1)) + 24|0);
   $72 = +HEAPF64[$71>>3];
   $73 = !($72 <= $2);
   if ($73) {
    $83 = ((($1)) + 16|0);
    $84 = +HEAPF64[$83>>3];
    $85 = -$84;
    $86 = $85 / $68;
    $$0172 = $86;
    return (+$$0172);
   }
   $74 = $2 - $72;
   $75 = $74 > 0.0;
   if (!($75)) {
    $$0172 = 0.0;
    return (+$$0172);
   }
   $76 = +HEAPF64[$1>>3];
   $77 = 1.0 / $76;
   $78 = (+Math_pow((+$74),(+$77)));
   $79 = ((($1)) + 16|0);
   $80 = +HEAPF64[$79>>3];
   $81 = $78 - $80;
   $82 = $81 / $68;
   $$0172 = $82;
   return (+$$0172);
   break;
  }
  case 4:  {
   $87 = ((($1)) + 32|0);
   $88 = +HEAPF64[$87>>3];
   $89 = !($88 <= $2);
   if ($89) {
    $99 = ((($1)) + 24|0);
    $100 = +HEAPF64[$99>>3];
    $101 = $100 * $2;
    $$0172 = $101;
    return (+$$0172);
   }
   $90 = ((($1)) + 8|0);
   $91 = +HEAPF64[$90>>3];
   $92 = $91 * $2;
   $93 = ((($1)) + 16|0);
   $94 = +HEAPF64[$93>>3];
   $95 = $92 + $94;
   $96 = $95 > 0.0;
   if (!($96)) {
    $$0172 = 0.0;
    return (+$$0172);
   }
   $97 = +HEAPF64[$1>>3];
   $98 = (+Math_pow((+$95),(+$97)));
   $$0172 = $98;
   return (+$$0172);
   break;
  }
  case -4:  {
   $102 = +HEAPF64[$1>>3];
   $103 = (+Math_abs((+$102)));
   $104 = $103 < 1.0E-4;
   if ($104) {
    $$0172 = 0.0;
    return (+$$0172);
   }
   $105 = ((($1)) + 8|0);
   $106 = +HEAPF64[$105>>3];
   $107 = (+Math_abs((+$106)));
   $108 = $107 < 1.0E-4;
   if ($108) {
    $$0172 = 0.0;
    return (+$$0172);
   }
   $109 = ((($1)) + 24|0);
   $110 = +HEAPF64[$109>>3];
   $111 = (+Math_abs((+$110)));
   $112 = $111 < 1.0E-4;
   if ($112) {
    $$0172 = 0.0;
    return (+$$0172);
   }
   $113 = ((($1)) + 32|0);
   $114 = +HEAPF64[$113>>3];
   $115 = $106 * $114;
   $116 = ((($1)) + 16|0);
   $117 = +HEAPF64[$116>>3];
   $118 = $115 + $117;
   $119 = $118 < 0.0;
   if ($119) {
    $$1 = 0.0;
   } else {
    $120 = (+Math_pow((+$118),(+$102)));
    $$1 = $120;
   }
   $121 = !($$1 <= $2);
   if ($121) {
    $128 = +HEAPF64[$109>>3];
    $129 = $2 / $128;
    $$0172 = $129;
    return (+$$0172);
   } else {
    $122 = +HEAPF64[$1>>3];
    $123 = 1.0 / $122;
    $124 = (+Math_pow((+$2),(+$123)));
    $125 = $124 - $117;
    $126 = +HEAPF64[$105>>3];
    $127 = $125 / $126;
    $$0172 = $127;
    return (+$$0172);
   }
   break;
  }
  case 5:  {
   $130 = ((($1)) + 32|0);
   $131 = +HEAPF64[$130>>3];
   $132 = !($131 <= $2);
   if ($132) {
    $145 = ((($1)) + 24|0);
    $146 = +HEAPF64[$145>>3];
    $147 = $146 * $2;
    $148 = ((($1)) + 48|0);
    $149 = +HEAPF64[$148>>3];
    $150 = $147 + $149;
    $$0172 = $150;
    return (+$$0172);
   }
   $133 = ((($1)) + 8|0);
   $134 = +HEAPF64[$133>>3];
   $135 = $134 * $2;
   $136 = ((($1)) + 16|0);
   $137 = +HEAPF64[$136>>3];
   $138 = $135 + $137;
   $139 = $138 > 0.0;
   $140 = ((($1)) + 40|0);
   $141 = +HEAPF64[$140>>3];
   if (!($139)) {
    $$0172 = $141;
    return (+$$0172);
   }
   $142 = +HEAPF64[$1>>3];
   $143 = (+Math_pow((+$138),(+$142)));
   $144 = $141 + $143;
   $$0172 = $144;
   return (+$$0172);
   break;
  }
  case -5:  {
   $151 = ((($1)) + 8|0);
   $152 = +HEAPF64[$151>>3];
   $153 = (+Math_abs((+$152)));
   $154 = $153 < 1.0E-4;
   if ($154) {
    $$0172 = 0.0;
    return (+$$0172);
   }
   $155 = ((($1)) + 24|0);
   $156 = +HEAPF64[$155>>3];
   $157 = (+Math_abs((+$156)));
   $158 = $157 < 1.0E-4;
   if ($158) {
    $$0172 = 0.0;
    return (+$$0172);
   }
   $159 = ((($1)) + 32|0);
   $160 = +HEAPF64[$159>>3];
   $161 = $156 * $160;
   $162 = ((($1)) + 48|0);
   $163 = +HEAPF64[$162>>3];
   $164 = $161 + $163;
   $165 = !($164 <= $2);
   if ($165) {
    $177 = $2 - $163;
    $178 = $177 / $156;
    $$0172 = $178;
    return (+$$0172);
   }
   $166 = ((($1)) + 40|0);
   $167 = +HEAPF64[$166>>3];
   $168 = $2 - $167;
   $169 = $168 < 0.0;
   if ($169) {
    $$0172 = 0.0;
    return (+$$0172);
   }
   $170 = +HEAPF64[$1>>3];
   $171 = 1.0 / $170;
   $172 = (+Math_pow((+$168),(+$171)));
   $173 = ((($1)) + 16|0);
   $174 = +HEAPF64[$173>>3];
   $175 = $172 - $174;
   $176 = $175 / $152;
   $$0172 = $176;
   return (+$$0172);
   break;
  }
  case 6:  {
   $179 = ((($1)) + 8|0);
   $180 = +HEAPF64[$179>>3];
   $181 = $180 * $2;
   $182 = ((($1)) + 16|0);
   $183 = +HEAPF64[$182>>3];
   $184 = $181 + $183;
   $185 = $184 < 0.0;
   $186 = ((($1)) + 24|0);
   $187 = +HEAPF64[$186>>3];
   if ($185) {
    $$0172 = $187;
    return (+$$0172);
   }
   $188 = +HEAPF64[$1>>3];
   $189 = (+Math_pow((+$184),(+$188)));
   $190 = $187 + $189;
   $$0172 = $190;
   return (+$$0172);
   break;
  }
  case -6:  {
   $191 = ((($1)) + 8|0);
   $192 = +HEAPF64[$191>>3];
   $193 = (+Math_abs((+$192)));
   $194 = $193 < 1.0E-4;
   if ($194) {
    $$0172 = 0.0;
    return (+$$0172);
   }
   $195 = ((($1)) + 24|0);
   $196 = +HEAPF64[$195>>3];
   $197 = $2 - $196;
   $198 = $197 < 0.0;
   if ($198) {
    $$0172 = 0.0;
    return (+$$0172);
   }
   $199 = +HEAPF64[$1>>3];
   $200 = 1.0 / $199;
   $201 = (+Math_pow((+$197),(+$200)));
   $202 = ((($1)) + 16|0);
   $203 = +HEAPF64[$202>>3];
   $204 = $201 - $203;
   $205 = $204 / $192;
   $$0172 = $205;
   return (+$$0172);
   break;
  }
  case 7:  {
   $206 = ((($1)) + 16|0);
   $207 = +HEAPF64[$206>>3];
   $208 = +HEAPF64[$1>>3];
   $209 = (+Math_pow((+$2),(+$208)));
   $210 = $207 * $209;
   $211 = ((($1)) + 24|0);
   $212 = +HEAPF64[$211>>3];
   $213 = $210 + $212;
   $214 = !($213 <= 0.0);
   $215 = ((($1)) + 32|0);
   $216 = +HEAPF64[$215>>3];
   if (!($214)) {
    $$0172 = $216;
    return (+$$0172);
   }
   $217 = ((($1)) + 8|0);
   $218 = +HEAPF64[$217>>3];
   $219 = (+_log10($213));
   $220 = $218 * $219;
   $221 = $216 + $220;
   $$0172 = $221;
   return (+$$0172);
   break;
  }
  case -7:  {
   $222 = +HEAPF64[$1>>3];
   $223 = (+Math_abs((+$222)));
   $224 = $223 < 1.0E-4;
   if ($224) {
    $$0172 = 0.0;
    return (+$$0172);
   }
   $225 = ((($1)) + 8|0);
   $226 = +HEAPF64[$225>>3];
   $227 = (+Math_abs((+$226)));
   $228 = $227 < 1.0E-4;
   if ($228) {
    $$0172 = 0.0;
    return (+$$0172);
   }
   $229 = ((($1)) + 16|0);
   $230 = +HEAPF64[$229>>3];
   $231 = (+Math_abs((+$230)));
   $232 = $231 < 1.0E-4;
   if ($232) {
    $$0172 = 0.0;
    return (+$$0172);
   }
   $233 = ((($1)) + 32|0);
   $234 = +HEAPF64[$233>>3];
   $235 = $2 - $234;
   $236 = $235 / $226;
   $237 = (+Math_pow(10.0,(+$236)));
   $238 = ((($1)) + 24|0);
   $239 = +HEAPF64[$238>>3];
   $240 = $237 - $239;
   $241 = $240 / $230;
   $242 = 1.0 / $222;
   $243 = (+Math_pow((+$241),(+$242)));
   $$0172 = $243;
   return (+$$0172);
   break;
  }
  case 8:  {
   $244 = +HEAPF64[$1>>3];
   $245 = ((($1)) + 8|0);
   $246 = +HEAPF64[$245>>3];
   $247 = ((($1)) + 16|0);
   $248 = +HEAPF64[$247>>3];
   $249 = $248 * $2;
   $250 = ((($1)) + 24|0);
   $251 = +HEAPF64[$250>>3];
   $252 = $249 + $251;
   $253 = (+Math_pow((+$246),(+$252)));
   $254 = $244 * $253;
   $255 = ((($1)) + 32|0);
   $256 = +HEAPF64[$255>>3];
   $257 = $254 + $256;
   $$0172 = $257;
   return (+$$0172);
   break;
  }
  case -8:  {
   $258 = ((($1)) + 32|0);
   $259 = +HEAPF64[$258>>3];
   $260 = $2 - $259;
   $261 = $260 < 0.0;
   if ($261) {
    $$0172 = 0.0;
    return (+$$0172);
   }
   $262 = +HEAPF64[$1>>3];
   $263 = (+Math_abs((+$262)));
   $264 = $263 < 1.0E-4;
   if ($264) {
    $$0172 = 0.0;
    return (+$$0172);
   }
   $265 = ((($1)) + 16|0);
   $266 = +HEAPF64[$265>>3];
   $267 = (+Math_abs((+$266)));
   $268 = $267 < 1.0E-4;
   if ($268) {
    $$0172 = 0.0;
    return (+$$0172);
   }
   $269 = $260 / $262;
   $270 = (+Math_log((+$269)));
   $271 = ((($1)) + 8|0);
   $272 = +HEAPF64[$271>>3];
   $273 = (+Math_log((+$272)));
   $274 = $270 / $273;
   $275 = ((($1)) + 24|0);
   $276 = +HEAPF64[$275>>3];
   $277 = $274 - $276;
   $278 = $277 / $266;
   $$0172 = $278;
   return (+$$0172);
   break;
  }
  case 108:  {
   $279 = +HEAPF64[$1>>3];
   $280 = (+Math_abs((+$279)));
   $281 = $280 < 1.0E-4;
   $282 = 1.0 / $279;
   if ($281) {
    $$0172 = 0.0;
    return (+$$0172);
   }
   $283 = 1.0 - $2;
   $284 = (+Math_pow((+$283),(+$282)));
   $285 = 1.0 - $284;
   $286 = (+Math_pow((+$285),(+$282)));
   $$0172 = $286;
   return (+$$0172);
   break;
  }
  case -108:  {
   $287 = +HEAPF64[$1>>3];
   $288 = (+Math_pow((+$2),(+$287)));
   $289 = 1.0 - $288;
   $290 = (+Math_pow((+$289),(+$287)));
   $291 = 1.0 - $290;
   $$0172 = $291;
   return (+$$0172);
   break;
  }
  default: {
   $$0172 = 0.0;
   return (+$$0172);
  }
  }
 } while(0);
 return +(0.0);
}
function _cmsBuildSegmentedToneCurve($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$029 = 0, $$03031 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0|0);
 if ($3) {
  ___assert_fail((24682|0),(24521|0),750,(24707|0));
  // unreachable;
 }
 $4 = ($1|0)==(1);
 if ($4) {
  $5 = ((($2)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==(1);
  if ($7) {
   $8 = ((($2)) + 16|0);
   $9 = +HEAPF64[$8>>3];
   $10 = (_EntriesByGamma($9)|0);
   $$0 = $10;
  } else {
   $$0 = 4096;
  }
 } else {
  $$0 = 4096;
 }
 $11 = (_AllocateToneCurveStruct($0,$$0,$1,$2,0)|0);
 $12 = ($11|0)==(0|0);
 if ($12) {
  $$029 = 0;
  return ($$029|0);
 }
 $13 = ($$0|0)==(0);
 if ($13) {
  $$029 = $11;
  return ($$029|0);
 }
 $14 = (($$0) + -1)|0;
 $15 = (+($14>>>0));
 $16 = ((($11)) + 24|0);
 $$03031 = 0;
 while(1) {
  $17 = (+($$03031>>>0));
  $18 = $17 / $15;
  $19 = (+_EvalSegmentedFn($11,$18));
  $20 = $19 * 65535.0;
  $21 = (__cmsQuickSaturateWord_169($20)|0);
  $22 = HEAP32[$16>>2]|0;
  $23 = (($22) + ($$03031<<1)|0);
  HEAP16[$23>>1] = $21;
  $24 = (($$03031) + 1)|0;
  $exitcond = ($24|0)==($$0|0);
  if ($exitcond) {
   $$029 = $11;
   break;
  } else {
   $$03031 = $24;
  }
 }
 return ($$029|0);
}
function _EntriesByGamma($0) {
 $0 = +$0;
 var $$ = 0, $1 = 0.0, $2 = 0.0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0 + -1.0;
 $2 = (+Math_abs((+$1)));
 $3 = $2 < 0.001;
 $$ = $3 ? 2 : 4096;
 return ($$|0);
}
function _EvalSegmentedFn($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $$$0 = 0.0, $$0 = 0.0, $$03944 = 0, $$03944$in = 0, $$040 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0;
 var $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp + 4|0;
 $3 = sp;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)>(0);
 if (!($6)) {
  $$040 = -9.9999997781963083E+21;
  STACKTOP = sp;return (+$$040);
 }
 $7 = ((($0)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $$03944$in = $5;
 while(1) {
  $$03944 = (($$03944$in) + -1)|0;
  $9 = (($8) + (($$03944*104)|0)|0);
  $10 = +HEAPF32[$9>>2];
  $11 = $10;
  $12 = $11 < $1;
  if ($12) {
   $13 = (((($8) + (($$03944*104)|0)|0)) + 4|0);
   $14 = +HEAPF32[$13>>2];
   $15 = $14;
   $16 = !($15 >= $1);
   if (!($16)) {
    break;
   }
  }
  $17 = ($$03944$in|0)>(1);
  if ($17) {
   $$03944$in = $$03944;
  } else {
   $$040 = -9.9999997781963083E+21;
   label = 11;
   break;
  }
 }
 if ((label|0) == 11) {
  STACKTOP = sp;return (+$$040);
 }
 $18 = (((($8) + (($$03944*104)|0)|0)) + 8|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)==(0);
 if ($20) {
  $21 = HEAP32[$7>>2]|0;
  $22 = (($21) + (($$03944*104)|0)|0);
  $23 = +HEAPF32[$22>>2];
  $24 = $23;
  $25 = $1 - $24;
  $26 = $25;
  $27 = (((($21) + (($$03944*104)|0)|0)) + 4|0);
  $28 = +HEAPF32[$27>>2];
  $29 = $28 - $23;
  $30 = $26 / $29;
  HEAPF32[$3>>2] = $30;
  $31 = HEAP32[$7>>2]|0;
  $32 = (((($31) + (($$03944*104)|0)|0)) + 100|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = ((($0)) + 12|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = (($35) + ($$03944<<2)|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ((($37)) + 112|0);
  HEAP32[$38>>2] = $33;
  $39 = HEAP32[$34>>2]|0;
  $40 = (($39) + ($$03944<<2)|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ((($41)) + 116|0);
  $43 = HEAP32[$42>>2]|0;
  FUNCTION_TABLE_viii[$43 & 63]($3,$2,$41);
  $44 = +HEAPF32[$2>>2];
  $45 = $44;
  $$0 = $45;
 } else {
  $46 = ((($0)) + 16|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = (($47) + ($$03944<<2)|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (((($8) + (($$03944*104)|0)|0)) + 16|0);
  $51 = (+FUNCTION_TABLE_diid[$49 & 1]($19,$50,$1));
  $$0 = $51;
 }
 $52 = (___DOUBLE_BITS($$0)|0);
 $53 = tempRet0;
 $54 = $53 & 2147483647;
 $55 = ($52|0)==(0);
 $56 = ($54|0)==(2146435072);
 $57 = $55 & $56;
 if ($57) {
  $$040 = 9.9999997781963083E+21;
  STACKTOP = sp;return (+$$040);
 }
 $58 = -$$0;
 $59 = (___DOUBLE_BITS($58)|0);
 $60 = tempRet0;
 $61 = $60 & 2147483647;
 $62 = ($59|0)==(0);
 $63 = ($61|0)==(2146435072);
 $64 = $62 & $63;
 $$$0 = $64 ? -9.9999997781963083E+21 : $$0;
 $$040 = $$$0;
 STACKTOP = sp;return (+$$040);
}
function __cmsQuickSaturateWord_169($0) {
 $0 = +$0;
 var $$0 = 0, $1 = 0.0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0 + 0.5;
 $2 = !($1 <= 0.0);
 if ($2) {
  $3 = !($1 >= 65535.0);
  if ($3) {
   $4 = (__cmsQuickFloorWord_170($1)|0);
   $$0 = $4;
  } else {
   $$0 = -1;
  }
 } else {
  $$0 = 0;
 }
 return ($$0|0);
}
function __cmsQuickFloorWord_170($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0 + -32767.0;
 $2 = (__cmsQuickFloor_171($1)|0);
 $3 = (($2) + 32767)|0;
 $4 = $3&65535;
 return ($4|0);
}
function __cmsQuickFloor_171($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0 + 103079215104.0;
 HEAPF64[tempDoublePtr>>3] = $1;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = $2 >> 16;
 return ($4|0);
}
function ___DOUBLE_BITS($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 tempRet0 = ($2);
 return ($1|0);
}
function _cmsBuildTabulatedToneCurveFloat($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0;
 $3 = sp;
 HEAPF32[$3>>2] = -9.9999997781963083E+21;
 $4 = ((($3)) + 4|0);
 HEAPF32[$4>>2] = 0.0;
 $5 = ((($3)) + 8|0);
 HEAP32[$5>>2] = 6;
 $6 = ((($3)) + 16|0);
 HEAPF64[$6>>3] = 1.0;
 $7 = ((($3)) + 24|0);
 ;HEAP32[$7>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;HEAP32[$7+12>>2]=0|0;
 $8 = +HEAPF32[$2>>2];
 $9 = $8;
 $10 = ((($3)) + 40|0);
 HEAPF64[$10>>3] = $9;
 $11 = ((($3)) + 48|0);
 HEAPF64[$11>>3] = 0.0;
 $12 = ((($3)) + 104|0);
 HEAPF32[$12>>2] = 0.0;
 $13 = ((($3)) + 108|0);
 HEAPF32[$13>>2] = 1.0;
 $14 = ((($3)) + 112|0);
 HEAP32[$14>>2] = 0;
 $15 = ((($3)) + 200|0);
 HEAP32[$15>>2] = $1;
 $16 = ((($3)) + 204|0);
 HEAP32[$16>>2] = $2;
 $17 = ((($3)) + 208|0);
 HEAPF32[$17>>2] = 1.0;
 $18 = ((($3)) + 212|0);
 HEAPF32[$18>>2] = 9.9999997781963083E+21;
 $19 = ((($3)) + 216|0);
 HEAP32[$19>>2] = 6;
 $20 = ((($3)) + 224|0);
 HEAPF64[$20>>3] = 1.0;
 $21 = ((($3)) + 232|0);
 $22 = (($1) + -1)|0;
 $23 = (($2) + ($22<<2)|0);
 ;HEAP32[$21>>2]=0|0;HEAP32[$21+4>>2]=0|0;HEAP32[$21+8>>2]=0|0;HEAP32[$21+12>>2]=0|0;
 $24 = +HEAPF32[$23>>2];
 $25 = $24;
 $26 = ((($3)) + 248|0);
 HEAPF64[$26>>3] = $25;
 $27 = ((($3)) + 256|0);
 HEAPF64[$27>>3] = 0.0;
 $28 = (_cmsBuildSegmentedToneCurve($0,3,$3)|0);
 STACKTOP = sp;return ($28|0);
}
function _cmsBuildParametricToneCurve($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $vararg_buffer = sp + 104|0;
 $3 = sp;
 $4 = sp + 108|0;
 HEAP32[$4>>2] = 0;
 $5 = (_GetParametricCurveByType($0,$1,$4)|0);
 $6 = ($2|0)==(0|0);
 if ($6) {
  ___assert_fail((24734|0),(24521|0),828,(24757|0));
  // unreachable;
 }
 $7 = ($5|0)==(0|0);
 if ($7) {
  HEAP32[$vararg_buffer>>2] = $1;
  _cmsSignalError($0,8,24785,$vararg_buffer);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  dest=$3; stop=dest+104|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  HEAPF32[$3>>2] = -9.9999997781963083E+21;
  $8 = ((($3)) + 4|0);
  HEAPF32[$8>>2] = 9.9999997781963083E+21;
  $9 = ((($3)) + 8|0);
  HEAP32[$9>>2] = $1;
  $10 = HEAP32[$4>>2]|0;
  $11 = (((($5)) + 84|0) + ($10<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $12 << 3;
  $14 = ((($3)) + 16|0);
  _memcpy(($14|0),($2|0),($13|0))|0;
  $15 = (_cmsBuildSegmentedToneCurve($0,1,$3)|0);
  $$0 = $15;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _cmsBuildGamma($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 HEAPF64[$2>>3] = $1;
 $3 = (_cmsBuildParametricToneCurve($0,1,$2)|0);
 STACKTOP = sp;return ($3|0);
}
function _cmsFreeToneCurve($0) {
 $0 = $0|0;
 var $$031 = 0, $$lcssa = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = HEAP32[$0>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 __cmsFreeInterpParams($2);
 $4 = ((($0)) + 24|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  __cmsFree($3,$5);
 }
 $7 = ((($0)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if (!($9)) {
  $10 = ((($0)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(0);
  $13 = HEAP32[$7>>2]|0;
  if ($12) {
   $$lcssa = $13;
  } else {
   $14 = ((($0)) + 12|0);
   $$031 = 0;$16 = $13;
   while(1) {
    $15 = (((($16) + (($$031*104)|0)|0)) + 100|0);
    $17 = HEAP32[$15>>2]|0;
    $18 = ($17|0)==(0|0);
    if (!($18)) {
     __cmsFree($3,$17);
    }
    $19 = HEAP32[$14>>2]|0;
    $20 = (($19) + ($$031<<2)|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ($21|0)==(0|0);
    if (!($22)) {
     __cmsFreeInterpParams($21);
    }
    $23 = (($$031) + 1)|0;
    $24 = HEAP32[$10>>2]|0;
    $25 = ($23>>>0)<($24>>>0);
    $26 = HEAP32[$7>>2]|0;
    if ($25) {
     $$031 = $23;$16 = $26;
    } else {
     $$lcssa = $26;
     break;
    }
   }
  }
  __cmsFree($3,$$lcssa);
  $27 = ((($0)) + 12|0);
  $28 = HEAP32[$27>>2]|0;
  __cmsFree($3,$28);
 }
 $29 = ((($0)) + 16|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)==(0|0);
 if (!($31)) {
  __cmsFree($3,$30);
 }
 __cmsFree($3,$0);
 return;
}
function _cmsFreeToneCurveTriple($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  ___assert_fail((24818|0),(24521|0),898,(24840|0));
  // unreachable;
 }
 $2 = HEAP32[$0>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  _cmsFreeToneCurve($2);
 }
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  _cmsFreeToneCurve($5);
 }
 $7 = ((($0)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if ($9) {
  HEAP32[$7>>2] = 0;
  HEAP32[$4>>2] = 0;
  HEAP32[$0>>2] = 0;
  return;
 }
 _cmsFreeToneCurve($8);
 HEAP32[$7>>2] = 0;
 HEAP32[$4>>2] = 0;
 HEAP32[$0>>2] = 0;
 return;
}
function _cmsDupToneCurve($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 $2 = HEAP32[$0>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($0)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($0)) + 24|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (_AllocateToneCurveStruct($3,$5,$7,$9,$11)|0);
 $$0 = $12;
 return ($$0|0);
}
function _cmsJoinToneCurve($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0394042 = 0, $$0394446 = 0, $$043 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($1|0)==(0|0);
 if ($4) {
  ___assert_fail((24863|0),(24521|0),932,(24881|0));
  // unreachable;
 }
 $5 = ($2|0)==(0|0);
 if ($5) {
  ___assert_fail((24898|0),(24521|0),933,(24881|0));
  // unreachable;
 }
 $6 = (_cmsReverseToneCurveEx($3,$2)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  $$0394042 = 0;
  return ($$0394042|0);
 }
 $8 = (__cmsCalloc($0,$3,4)|0);
 $9 = ($8|0)==(0|0);
 if ($9) {
  $$0394446 = 0;
 } else {
  $10 = ($3|0)==(0);
  if (!($10)) {
   $11 = (($3) + -1)|0;
   $12 = (+($11>>>0));
   $$043 = 0;
   while(1) {
    $13 = (+($$043>>>0));
    $14 = $13 / $12;
    $15 = (+_cmsEvalToneCurveFloat($1,$14));
    $16 = (+_cmsEvalToneCurveFloat($6,$15));
    $17 = (($8) + ($$043<<2)|0);
    HEAPF32[$17>>2] = $16;
    $18 = (($$043) + 1)|0;
    $exitcond = ($18|0)==($3|0);
    if ($exitcond) {
     break;
    } else {
     $$043 = $18;
    }
   }
  }
  $19 = (_cmsBuildTabulatedToneCurveFloat($0,$3,$8)|0);
  __cmsFree($0,$8);
  if ($7) {
   $$0394042 = $19;
   return ($$0394042|0);
  } else {
   $$0394446 = $19;
  }
 }
 _cmsFreeToneCurve($6);
 $$0394042 = $$0394446;
 return ($$0394042|0);
}
function _cmsReverseToneCurveEx($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$07179 = 0.0, $$07278 = 0, $$07377 = 0.0, $$1 = 0.0, $$174 = 0.0, $$2 = 0.0, $$275 = 0.0, $$pn = 0, $$pn$in = 0, $$sink1 = 0, $$sink76 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0;
 var $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0;
 var $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0|0);
 if ($2) {
  ___assert_fail((24957|0),(24521|0),1018,(24981|0));
  // unreachable;
 }
 $3 = ((($1)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(1);
 if ($5) {
  $6 = ((($1)) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ((($7)) + 8|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)>(0);
  if ($10) {
   $11 = HEAP32[$1>>2]|0;
   $12 = HEAP32[$11>>2]|0;
   $13 = (_GetParametricCurveByType($12,$9,0)|0);
   $14 = ($13|0)==(0|0);
   if (!($14)) {
    $15 = HEAP32[$1>>2]|0;
    $16 = HEAP32[$15>>2]|0;
    $17 = HEAP32[$6>>2]|0;
    $18 = ((($17)) + 8|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = (0 - ($19))|0;
    $21 = ((($17)) + 16|0);
    $22 = (_cmsBuildParametricToneCurve($16,$20,$21)|0);
    $$0 = $22;
    return ($$0|0);
   }
  }
 }
 $23 = HEAP32[$1>>2]|0;
 $24 = HEAP32[$23>>2]|0;
 $25 = (_cmsBuildTabulatedToneCurve16($24,$0,0)|0);
 $26 = ($25|0)==(0|0);
 if ($26) {
  $$0 = 0;
  return ($$0|0);
 }
 $27 = (_cmsIsToneCurveDescending($1)|0);
 $28 = ($27|0)==(0);
 $29 = ($0|0)>(0);
 if (!($29)) {
  $$0 = $25;
  return ($$0|0);
 }
 $30 = (($0) + -1)|0;
 $31 = (+($30>>>0));
 $32 = ((($1)) + 24|0);
 $33 = ((($1)) + 20|0);
 $$pn$in = ((($25)) + 24|0);
 $$07179 = 0.0;$$07278 = 0;$$07377 = 0.0;
 while(1) {
  $34 = (+($$07278|0));
  $35 = $34 * 65535.0;
  $36 = $35 / $31;
  $37 = HEAP32[$32>>2]|0;
  $38 = HEAP32[$1>>2]|0;
  $39 = (_GetInterval($36,$37,$38)|0);
  $40 = ($39|0)>(-1);
  do {
   if ($40) {
    $41 = (($37) + ($39<<1)|0);
    $42 = HEAP16[$41>>1]|0;
    $43 = (+($42&65535));
    $44 = (($39) + 1)|0;
    $45 = (($37) + ($44<<1)|0);
    $46 = HEAP16[$45>>1]|0;
    $47 = (+($46&65535));
    $48 = (+($39|0));
    $49 = $48 * 65535.0;
    $50 = HEAP32[$33>>2]|0;
    $51 = (($50) + -1)|0;
    $52 = (+($51>>>0));
    $53 = $49 / $52;
    $54 = (+($44|0));
    $55 = $54 * 65535.0;
    $56 = $55 / $52;
    $57 = $43 == $47;
    if ($57) {
     $58 = $28 ? $56 : $53;
     $$2 = $$07179;$$275 = $$07377;$$sink76 = $58;
     break;
    } else {
     $59 = $56 - $53;
     $60 = $47 - $43;
     $61 = $59 / $60;
     $62 = $47 * $61;
     $63 = $56 - $62;
     $$1 = $61;$$174 = $63;
     label = 14;
     break;
    }
   } else {
    $$1 = $$07179;$$174 = $$07377;
    label = 14;
   }
  } while(0);
  if ((label|0) == 14) {
   label = 0;
   $64 = $36 * $$1;
   $65 = $$174 + $64;
   $$2 = $$1;$$275 = $$174;$$sink76 = $65;
  }
  $66 = (__cmsQuickSaturateWord_169($$sink76)|0);
  $$pn = HEAP32[$$pn$in>>2]|0;
  $$sink1 = (($$pn) + ($$07278<<1)|0);
  HEAP16[$$sink1>>1] = $66;
  $67 = (($$07278) + 1)|0;
  $exitcond = ($67|0)==($0|0);
  if ($exitcond) {
   $$0 = $25;
   break;
  } else {
   $$07179 = $$2;$$07278 = $67;$$07377 = $$275;
  }
 }
 return ($$0|0);
}
function _cmsEvalToneCurveFloat($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $$0 = 0.0, $$0$in = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  ___assert_fail((24818|0),(24521|0),1353,(24916|0));
  // unreachable;
 }
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 $6 = $1;
 if ($5) {
  $7 = $6 * 65535.0;
  $8 = (__cmsQuickSaturateWord_169($7)|0);
  $9 = (_cmsEvalToneCurve16($0,$8)|0);
  $10 = (+($9&65535));
  $11 = $10 / 65535.0;
  $$0$in = $11;
  $$0 = $$0$in;
  return (+$$0);
 } else {
  $12 = (+_EvalSegmentedFn($0,$6));
  $$0$in = $12;
  $$0 = $$0$in;
  return (+$$0);
 }
 return +(0.0);
}
function _cmsEvalToneCurve16($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 $3 = sp + 2|0;
 HEAP16[$2>>1] = $1;
 $4 = ($0|0)==(0|0);
 if ($4) {
  ___assert_fail((24818|0),(24521|0),1374,(24938|0));
  // unreachable;
 } else {
  $5 = HEAP32[$0>>2]|0;
  $6 = ((($5)) + 116|0);
  $7 = HEAP32[$6>>2]|0;
  FUNCTION_TABLE_viii[$7 & 63]($2,$3,$5);
  $8 = HEAP16[$3>>1]|0;
  STACKTOP = sp;return ($8|0);
 }
 return (0)|0;
}
function _cmsIsToneCurveDescending($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  ___assert_fail((24551|0),(24521|0),1328,(25003|0));
  // unreachable;
 } else {
  $2 = ((($0)) + 24|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = HEAP16[$3>>1]|0;
  $5 = ((($0)) + 20|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (($6) + -1)|0;
  $8 = (($3) + ($7<<1)|0);
  $9 = HEAP16[$8>>1]|0;
  $10 = ($4&65535)>($9&65535);
  $11 = $10&1;
  return ($11|0);
 }
 return (0)|0;
}
function _GetInterval($0,$1,$2) {
 $0 = +$0;
 $1 = $1|0;
 $2 = $2|0;
 var $$051 = 0, $$065 = 0, $$065$in = 0, $$170 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0.0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond54 = 0, $or$cond56 = 0, $or$cond58 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 48|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  $$051 = -1;
  return ($$051|0);
 }
 $6 = HEAP16[$1>>1]|0;
 $7 = (($1) + ($4<<1)|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = ($6&65535)<($8&65535);
 if ($9) {
  $12 = ($4|0)>(0);
  if ($12) {
   $$065$in = $4;
  } else {
   $$051 = -1;
   return ($$051|0);
  }
  while(1) {
   $$065 = (($$065$in) + -1)|0;
   $13 = (($1) + ($$065<<1)|0);
   $14 = HEAP16[$13>>1]|0;
   $15 = (($1) + ($$065$in<<1)|0);
   $16 = HEAP16[$15>>1]|0;
   $17 = ($14&65535)>($16&65535);
   if ($17) {
    $23 = (+($16&65535));
    $24 = !($23 <= $0);
    $25 = (+($14&65535));
    $26 = !($25 >= $0);
    $or$cond54 = $26 | $24;
    if (!($or$cond54)) {
     $$051 = $$065;
     label = 13;
     break;
    }
   } else {
    $18 = (+($14&65535));
    $19 = !($18 <= $0);
    $20 = (+($16&65535));
    $21 = !($20 >= $0);
    $or$cond = $19 | $21;
    if (!($or$cond)) {
     $$051 = $$065;
     label = 13;
     break;
    }
   }
   $22 = ($$065$in|0)>(1);
   if ($22) {
    $$065$in = $$065;
   } else {
    $$051 = -1;
    label = 13;
    break;
   }
  }
  if ((label|0) == 13) {
   return ($$051|0);
  }
 } else {
  $10 = HEAP32[$3>>2]|0;
  $11 = ($10|0)>(0);
  if ($11) {
   $$170 = 0;
  } else {
   $$051 = -1;
   return ($$051|0);
  }
  while(1) {
   $27 = (($1) + ($$170<<1)|0);
   $28 = HEAP16[$27>>1]|0;
   $29 = (($$170) + 1)|0;
   $30 = (($1) + ($29<<1)|0);
   $31 = HEAP16[$30>>1]|0;
   $32 = ($28&65535)>($31&65535);
   if ($32) {
    $39 = (+($31&65535));
    $40 = !($39 <= $0);
    $41 = (+($28&65535));
    $42 = !($41 >= $0);
    $or$cond58 = $42 | $40;
    if (!($or$cond58)) {
     $$051 = $$170;
     label = 13;
     break;
    }
   } else {
    $33 = (+($28&65535));
    $34 = !($33 <= $0);
    $35 = (+($31&65535));
    $36 = !($35 >= $0);
    $or$cond56 = $34 | $36;
    if (!($or$cond56)) {
     $$051 = $$170;
     label = 13;
     break;
    }
   }
   $37 = HEAP32[$3>>2]|0;
   $38 = ($29|0)<($37|0);
   if ($38) {
    $$170 = $29;
   } else {
    $$051 = -1;
    label = 13;
    break;
   }
  }
  if ((label|0) == 13) {
   return ($$051|0);
  }
 }
 return (0)|0;
}
function _cmsReverseToneCurve($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  ___assert_fail((25028|0),(24521|0),1080,(25052|0));
  // unreachable;
 } else {
  $2 = (_cmsReverseToneCurveEx(4096,$0)|0);
  return ($2|0);
 }
 return (0)|0;
}
function _cmsIsToneCurveLinear($0) {
 $0 = $0|0;
 var $$0 = 0, $$01213 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $ispos = 0, $neg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  ___assert_fail((24818|0),(24521|0),1267,(25072|0));
  // unreachable;
 }
 $2 = ((($0)) + 24|0);
 $3 = ((($0)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)>(0);
 if ($5) {
  $$01213 = 0;$14 = $4;
 } else {
  $$0 = 1;
  return ($$0|0);
 }
 while(1) {
  $9 = HEAP32[$2>>2]|0;
  $10 = (($9) + ($$01213<<1)|0);
  $11 = HEAP16[$10>>1]|0;
  $12 = $11&65535;
  $13 = (+($$01213|0));
  $15 = (__cmsQuantizeVal($13,$14)|0);
  $16 = $15&65535;
  $17 = (($12) - ($16))|0;
  $ispos = ($17|0)>(-1);
  $neg = (0 - ($17))|0;
  $18 = $ispos ? $17 : $neg;
  $19 = ($18|0)>(15);
  $8 = (($$01213) + 1)|0;
  if ($19) {
   $$0 = 0;
   label = 6;
   break;
  }
  $6 = HEAP32[$3>>2]|0;
  $7 = ($8|0)<($6|0);
  if ($7) {
   $$01213 = $8;$14 = $6;
  } else {
   $$0 = 1;
   label = 6;
   break;
  }
 }
 if ((label|0) == 6) {
  return ($$0|0);
 }
 return (0)|0;
}
function _cmsIsToneCurveMonotonic($0) {
 $0 = $0|0;
 var $$0 = 0, $$03040 = 0, $$03139 = 0, $$13235 = 0, $$136 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  ___assert_fail((24551|0),(24521|0),1286,(25093|0));
  // unreachable;
 }
 $2 = ((($0)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3>>>0)<(2);
 if ($4) {
  $$0 = 1;
  return ($$0|0);
 }
 $5 = (_cmsIsToneCurveDescending($0)|0);
 $6 = ($5|0)==(0);
 $7 = ((($0)) + 24|0);
 $8 = HEAP32[$7>>2]|0;
 if ($6) {
  $20 = (($3) + -2)|0;
  $21 = ($20|0)>(-1);
  if (!($21)) {
   $$0 = 1;
   return ($$0|0);
  }
  $22 = (($3) + -1)|0;
  $23 = (($8) + ($22<<1)|0);
  $24 = HEAP16[$23>>1]|0;
  $25 = $24&65535;
  $26 = HEAP32[$7>>2]|0;
  $$13235 = $20;$$136 = $25;
  while(1) {
   $29 = (($26) + ($$13235<<1)|0);
   $30 = HEAP16[$29>>1]|0;
   $31 = $30&65535;
   $32 = (($31) - ($$136))|0;
   $33 = ($32|0)>(2);
   if ($33) {
    $$0 = 0;
    label = 13;
    break;
   }
   $27 = (($$13235) + -1)|0;
   $28 = ($$13235|0)>(0);
   if ($28) {
    $$13235 = $27;$$136 = $31;
   } else {
    $$0 = 1;
    label = 13;
    break;
   }
  }
  if ((label|0) == 13) {
   return ($$0|0);
  }
 } else {
  $9 = ($3|0)>(1);
  if (!($9)) {
   $$0 = 1;
   return ($$0|0);
  }
  $10 = HEAP16[$8>>1]|0;
  $11 = $10&65535;
  $12 = HEAP32[$7>>2]|0;
  $$03040 = $11;$$03139 = 1;
  while(1) {
   $15 = (($12) + ($$03139<<1)|0);
   $16 = HEAP16[$15>>1]|0;
   $17 = $16&65535;
   $18 = (($17) - ($$03040))|0;
   $19 = ($18|0)>(2);
   $14 = (($$03139) + 1)|0;
   if ($19) {
    $$0 = 0;
    label = 13;
    break;
   }
   $13 = ($14|0)<($3|0);
   if ($13) {
    $$03040 = $17;$$03139 = $14;
   } else {
    $$0 = 1;
    label = 13;
    break;
   }
  }
  if ((label|0) == 13) {
   return ($$0|0);
  }
 }
 return (0)|0;
}
function _cmsGetToneCurveParametricType($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  ___assert_fail((24551|0),(24521|0),1344,(25117|0));
  // unreachable;
 }
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(1);
 if (!($4)) {
  $$0 = 0;
  return ($$0|0);
 }
 $5 = ((($0)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $$0 = $8;
 return ($$0|0);
}
function __cmsChain2Lab($0,$1,$2,$3,$4,$5,$6,$7,$8) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 var $$035 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 5120|0;
 $9 = sp + 4096|0;
 $10 = sp + 3072|0;
 $11 = sp;
 $12 = sp + 2048|0;
 $13 = ($1>>>0)>(254);
 if ($13) {
  $$035 = 0;
  STACKTOP = sp;return ($$035|0);
 }
 $14 = (_cmsCreateLab4ProfileTHR($0,0)|0);
 $15 = ($14|0)==(0|0);
 if ($15) {
  $$035 = 0;
  STACKTOP = sp;return ($$035|0);
 }
 $16 = ($1|0)==(0);
 if (!($16)) {
  $17 = $1 << 2;
  _memcpy(($9|0),($5|0),($17|0))|0;
  _memcpy(($10|0),($6|0),($17|0))|0;
  $18 = $1 << 3;
  _memcpy(($11|0),($7|0),($18|0))|0;
  _memcpy(($12|0),($4|0),($17|0))|0;
 }
 $19 = (($9) + ($1<<2)|0);
 HEAP32[$19>>2] = $14;
 $20 = (($10) + ($1<<2)|0);
 HEAP32[$20>>2] = 0;
 $21 = (($11) + ($1<<3)|0);
 HEAPF64[$21>>3] = 1.0;
 $22 = (($12) + ($1<<2)|0);
 HEAP32[$22>>2] = 1;
 $23 = (($1) + 1)|0;
 $24 = (_cmsCreateExtendedTransform($0,$23,$9,$10,$12,$11,0,0,$2,$3,$8)|0);
 (_cmsCloseProfile($14)|0);
 $$035 = $24;
 STACKTOP = sp;return ($$035|0);
}
function __cmsBuildKToneCurve($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $8 = HEAP32[$4>>2]|0;
 $9 = (_cmsGetColorSpace($8)|0);
 $10 = ($9|0)==(1129142603);
 if (!($10)) {
  $$0 = 0;
  return ($$0|0);
 }
 $11 = (($2) + -1)|0;
 $12 = (($4) + ($11<<2)|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (_cmsGetColorSpace($13)|0);
 $15 = ($14|0)==(1129142603);
 if (!($15)) {
  $$0 = 0;
  return ($$0|0);
 }
 $16 = HEAP32[$12>>2]|0;
 $17 = (_cmsGetDeviceClass($16)|0);
 $18 = ($17|0)==(1886549106);
 if (!($18)) {
  $$0 = 0;
  return ($$0|0);
 }
 $19 = (_ComputeKToLstar($0,$1,$11,$3,$4,$5,$6,$7)|0);
 $20 = ($19|0)==(0|0);
 if ($20) {
  $$0 = 0;
  return ($$0|0);
 }
 $21 = (($3) + ($11<<2)|0);
 $22 = (($5) + ($11<<2)|0);
 $23 = (($6) + ($11<<3)|0);
 $24 = (_ComputeKToLstar($0,$1,1,$21,$12,$22,$23,$7)|0);
 $25 = ($24|0)==(0|0);
 if ($25) {
  _cmsFreeToneCurve($19);
  $$0 = 0;
  return ($$0|0);
 }
 $26 = (_cmsJoinToneCurve($0,$19,$24,$1)|0);
 _cmsFreeToneCurve($19);
 _cmsFreeToneCurve($24);
 $27 = ($26|0)==(0|0);
 if ($27) {
  $$0 = 0;
  return ($$0|0);
 }
 $28 = (_cmsIsToneCurveMonotonic($26)|0);
 $29 = ($28|0)==(0);
 if (!($29)) {
  $$0 = $26;
  return ($$0|0);
 }
 _cmsFreeToneCurve($26);
 $$0 = 0;
 return ($$0|0);
}
function _ComputeKToLstar($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$0 = 0, $$03536 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0;
 var $28 = 0, $29 = 0, $30 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $8 = sp;
 $9 = sp + 24|0;
 $10 = (__cmsChain2Lab($0,$2,4587556,4849688,$3,$4,$5,$6,$7)|0);
 $11 = ($10|0)==(0|0);
 if ($11) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $12 = (__cmsCalloc($0,$1,4)|0);
 $13 = ($12|0)==(0|0);
 if ($13) {
  _cmsDeleteTransform($10);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $14 = ($1|0)==(0);
 if (!($14)) {
  $15 = ((($9)) + 4|0);
  $16 = ((($9)) + 8|0);
  $17 = (($1) + -1)|0;
  $18 = (+($17>>>0));
  $19 = ((($9)) + 12|0);
  $$03536 = 0;
  while(1) {
   HEAPF32[$9>>2] = 0.0;
   HEAPF32[$15>>2] = 0.0;
   HEAPF32[$16>>2] = 0.0;
   $20 = (+($$03536>>>0));
   $21 = $20 * 100.0;
   $22 = $21 / $18;
   $23 = $22;
   HEAPF32[$19>>2] = $23;
   _cmsDoTransform($10,$9,$8,1);
   $24 = +HEAPF64[$8>>3];
   $25 = $24 / 100.0;
   $26 = 1.0 - $25;
   $27 = $26;
   $28 = (($12) + ($$03536<<2)|0);
   HEAPF32[$28>>2] = $27;
   $29 = (($$03536) + 1)|0;
   $exitcond = ($29|0)==($1|0);
   if ($exitcond) {
    break;
   } else {
    $$03536 = $29;
   }
  }
 }
 $30 = (_cmsBuildTabulatedToneCurveFloat($0,$1,$12)|0);
 _cmsDeleteTransform($10);
 __cmsFree($0,$12);
 $$0 = $30;
 STACKTOP = sp;return ($$0|0);
}
function __cmsCreateGamutCheckPipeline($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$070 = 0, $$071 = 0, $$sink = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond73 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 5152|0;
 $vararg_buffer = sp + 2072|0;
 $7 = sp + 2048|0;
 $8 = sp + 4128|0;
 $9 = sp + 3104|0;
 $10 = sp;
 $11 = sp + 2080|0;
 ;HEAP32[$7>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;HEAP32[$7+12>>2]=0|0;HEAP32[$7+16>>2]=0|0;HEAP32[$7+20>>2]=0|0;
 $12 = (($5) + -1)|0;
 $13 = ($12>>>0)>(254);
 if ($13) {
  HEAP32[$vararg_buffer>>2] = $5;
  _cmsSignalError($0,2,25147,$vararg_buffer);
  $$070 = 0;
  STACKTOP = sp;return ($$070|0);
 }
 $14 = (_cmsCreateLab4ProfileTHR($0,0)|0);
 $15 = ($14|0)==(0|0);
 if ($15) {
  $$070 = 0;
  STACKTOP = sp;return ($$070|0);
 }
 $16 = (_cmsIsMatrixShaper($6)|0);
 $17 = ($16|0)!=(0);
 $18 = ((($7)) + 16|0);
 $$sink = $17 ? 1.0 : 5.0;
 HEAPF64[$18>>3] = $$sink;
 $19 = $5 << 2;
 _memcpy(($8|0),($1|0),($19|0))|0;
 _memcpy(($9|0),($2|0),($19|0))|0;
 $20 = $5 << 3;
 _memcpy(($10|0),($4|0),($20|0))|0;
 _memcpy(($11|0),($3|0),($19|0))|0;
 $21 = (($8) + ($5<<2)|0);
 HEAP32[$21>>2] = $14;
 $22 = (($9) + ($5<<2)|0);
 HEAP32[$22>>2] = 0;
 $23 = (($10) + ($5<<3)|0);
 HEAPF64[$23>>3] = 1.0;
 $24 = (($11) + ($5<<2)|0);
 HEAP32[$24>>2] = 1;
 $25 = (_cmsGetColorSpace($6)|0);
 $26 = (_cmsChannelsOf($25)|0);
 $27 = (__cmsReasonableGridpointsByColorspace($25,1024)|0);
 $28 = $26 << 3;
 $29 = $28 | 2;
 $30 = (($5) + 1)|0;
 $31 = (_cmsCreateExtendedTransform($0,$30,$8,$9,$11,$10,0,0,$29,4849688,64)|0);
 HEAP32[$7>>2] = $31;
 $32 = (_cmsCreateTransformTHR($0,$14,4849688,$6,$29,1,64)|0);
 $33 = ((($7)) + 4|0);
 HEAP32[$33>>2] = $32;
 $34 = (_cmsCreateTransformTHR($0,$6,$29,$14,4849688,1,64)|0);
 $35 = ((($7)) + 8|0);
 HEAP32[$35>>2] = $34;
 $36 = HEAP32[$7>>2]|0;
 $37 = ($36|0)==(0|0);
 $38 = HEAP32[$33>>2]|0;
 $39 = ($38|0)==(0|0);
 $or$cond = $37 | $39;
 $40 = ($34|0)==(0|0);
 $or$cond73 = $40 | $or$cond;
 do {
  if ($or$cond73) {
   $$071 = 0;
  } else {
   $41 = (_cmsPipelineAlloc($0,3,1)|0);
   $42 = ($41|0)==(0|0);
   if ($42) {
    $$071 = 0;
   } else {
    $43 = (_cmsStageAllocCLut16bit($0,$27,$26,1,0)|0);
    $44 = (_cmsPipelineInsertStage($41,0,$43)|0);
    $45 = ($44|0)==(0);
    if ($45) {
     _cmsPipelineFree($41);
     $$071 = 0;
     break;
    } else {
     (_cmsStageSampleCLut16bit($43,39,$7,0)|0);
     $$071 = $41;
     break;
    }
   }
  }
 } while(0);
 $46 = HEAP32[$7>>2]|0;
 $47 = ($46|0)==(0|0);
 if (!($47)) {
  _cmsDeleteTransform($46);
 }
 $48 = HEAP32[$33>>2]|0;
 $49 = ($48|0)==(0|0);
 if (!($49)) {
  _cmsDeleteTransform($48);
 }
 $50 = HEAP32[$35>>2]|0;
 $51 = ($50|0)==(0|0);
 if (!($51)) {
  _cmsDeleteTransform($50);
 }
 (_cmsCloseProfile($14)|0);
 $$070 = $$071;
 STACKTOP = sp;return ($$070|0);
}
function _GamutSampler($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0.0, $$sink$sink$sink$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond46 = 0, $or$cond47 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0;
 $3 = sp + 72|0;
 $4 = sp + 48|0;
 $5 = sp + 24|0;
 $6 = sp;
 $7 = sp + 128|0;
 $8 = sp + 96|0;
 $9 = HEAP32[$2>>2]|0;
 _cmsDoTransform($9,$0,$3,1);
 $10 = ((($2)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 _cmsDoTransform($11,$3,$7,1);
 $12 = ((($2)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 _cmsDoTransform($13,$7,$4,1);
 ;HEAP32[$5>>2]=HEAP32[$4>>2]|0;HEAP32[$5+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$5+12>>2]=HEAP32[$4+12>>2]|0;HEAP32[$5+16>>2]=HEAP32[$4+16>>2]|0;HEAP32[$5+20>>2]=HEAP32[$4+20>>2]|0;
 $14 = HEAP32[$10>>2]|0;
 _cmsDoTransform($14,$4,$8,1);
 $15 = HEAP32[$12>>2]|0;
 _cmsDoTransform($15,$8,$6,1);
 $16 = (+_cmsDeltaE($3,$4));
 $17 = (+_cmsDeltaE($5,$6));
 $18 = ((($2)) + 16|0);
 $19 = +HEAPF64[$18>>3];
 $20 = $16 < $19;
 $21 = ($17 == $17) & ($19 == $19) &($17 != $19);
 $or$cond47 = $20 & $21;
 if ($or$cond47) {
  $$sink$sink$sink$sink = 0;
  HEAP16[$1>>1] = $$sink$sink$sink$sink;
  STACKTOP = sp;return 1;
 }
 $22 = $17 < $19;
 $23 = $16 > $19;
 $or$cond46 = $23 & $22;
 if ($or$cond46) {
  $24 = $16 - $19;
  $25 = $24 + 0.5;
  $26 = (__cmsQuickFloor_194($25)|0);
  $27 = $26&65535;
  $$sink$sink$sink$sink = $27;
  HEAP16[$1>>1] = $$sink$sink$sink$sink;
  STACKTOP = sp;return 1;
 }
 $28 = $17 == 0.0;
 $29 = $16 / $17;
 $$0 = $28 ? $16 : $29;
 $30 = $$0 > $19;
 if (!($30)) {
  $$sink$sink$sink$sink = 0;
  HEAP16[$1>>1] = $$sink$sink$sink$sink;
  STACKTOP = sp;return 1;
 }
 $31 = $$0 - $19;
 $32 = $31 + 0.5;
 $33 = (__cmsQuickFloor_194($32)|0);
 $34 = $33&65535;
 $$sink$sink$sink$sink = $34;
 HEAP16[$1>>1] = $$sink$sink$sink$sink;
 STACKTOP = sp;return 1;
}
function __cmsQuickFloor_194($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0 + 103079215104.0;
 HEAPF64[tempDoublePtr>>3] = $1;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = $2 >> 16;
 return ($4|0);
}
function _cmsDetectTAC($0) {
 $0 = $0|0;
 var $$0 = 0.0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $1 = sp + 32|0;
 $2 = sp;
 $3 = (_cmsGetProfileContextID($0)|0);
 $4 = (_cmsGetDeviceClass($0)|0);
 $5 = ($4|0)==(1886549106);
 if (!($5)) {
  $$0 = 0.0;
  STACKTOP = sp;return (+$$0);
 }
 $6 = (_cmsFormatterForColorspaceOfProfile($0,4,1)|0);
 $7 = $6 >>> 3;
 $8 = $7 & 15;
 HEAP32[$1>>2] = $8;
 $9 = ((($1)) + 8|0);
 HEAPF32[$9>>2] = 0.0;
 $10 = (_cmsCreateLab4ProfileTHR($3,0)|0);
 $11 = ($10|0)==(0|0);
 if ($11) {
  $$0 = 0.0;
  STACKTOP = sp;return (+$$0);
 }
 $12 = (_cmsCreateTransformTHR($3,$10,655386,$0,$6,0,320)|0);
 $13 = ((($1)) + 4|0);
 HEAP32[$13>>2] = $12;
 (_cmsCloseProfile($10)|0);
 $14 = ($12|0)==(0|0);
 if ($14) {
  $$0 = 0.0;
  STACKTOP = sp;return (+$$0);
 }
 HEAP32[$2>>2] = 6;
 $15 = ((($2)) + 4|0);
 HEAP32[$15>>2] = 74;
 $16 = ((($2)) + 8|0);
 HEAP32[$16>>2] = 74;
 $17 = (_cmsSliceSpace16(3,$2,40,$1)|0);
 $18 = ($17|0)==(0);
 if ($18) {
  HEAPF32[$9>>2] = 0.0;
 }
 $19 = HEAP32[$13>>2]|0;
 _cmsDeleteTransform($19);
 $20 = +HEAPF32[$9>>2];
 $21 = $20;
 $$0 = $21;
 STACKTOP = sp;return (+$$0);
}
function _EstimateTAC($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0.0, $$02325 = 0, $$026 = 0.0, $$124 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $3 = sp;
 $4 = ((($2)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 _cmsDoTransform($5,$0,$3,1);
 $6 = HEAP32[$2>>2]|0;
 $7 = ($6|0)==(0);
 if ($7) {
  $$0$lcssa = 0.0;
 } else {
  $8 = HEAP32[$2>>2]|0;
  $$02325 = 0;$$026 = 0.0;
  while(1) {
   $9 = (($3) + ($$02325<<2)|0);
   $10 = +HEAPF32[$9>>2];
   $11 = $$026 + $10;
   $12 = (($$02325) + 1)|0;
   $13 = ($12>>>0)<($8>>>0);
   if ($13) {
    $$02325 = $12;$$026 = $11;
   } else {
    $$0$lcssa = $11;
    break;
   }
  }
 }
 $14 = ((($2)) + 8|0);
 $15 = +HEAPF32[$14>>2];
 $16 = $$0$lcssa > $15;
 if (!($16)) {
  STACKTOP = sp;return 1;
 }
 HEAPF32[$14>>2] = $$0$lcssa;
 $17 = HEAP32[$2>>2]|0;
 $18 = ($17|0)==(0);
 if ($18) {
  STACKTOP = sp;return 1;
 }
 $19 = ((($2)) + 12|0);
 $$124 = 0;
 while(1) {
  $20 = (($0) + ($$124<<1)|0);
  $21 = HEAP16[$20>>1]|0;
  $22 = (+($21&65535));
  $23 = (($19) + ($$124<<2)|0);
  HEAPF32[$23>>2] = $22;
  $24 = (($$124) + 1)|0;
  $25 = HEAP32[$2>>2]|0;
  $26 = ($24>>>0)<($25>>>0);
  if ($26) {
   $$124 = $24;
  } else {
   break;
  }
 }
 STACKTOP = sp;return 1;
}
function __cmsHalf2Float($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0&65535;
 $2 = $1 >>> 10;
 $3 = $1 & 1023;
 $4 = (23184 + ($2<<1)|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = $5&65535;
 $7 = (($6) + ($3))|0;
 $8 = (4804 + ($7<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (12996 + ($2<<2)|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + ($9))|0;
 $13 = (HEAP32[tempDoublePtr>>2]=$12,+HEAPF32[tempDoublePtr>>2]);
 return (+$13);
}
function __cmsFloat2Half($0) {
 $0 = +$0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (HEAPF32[tempDoublePtr>>2]=$0,HEAP32[tempDoublePtr>>2]|0);
 $2 = $1 >>> 23;
 $3 = (23312 + ($2<<1)|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = $4&65535;
 $6 = $1 & 8388607;
 $7 = (25197 + ($2)|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = $6 >>> $9;
 $11 = (($10) + ($5))|0;
 $12 = $11&65535;
 return ($12|0);
}
function __cmsSetInterpolationRoutine($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp + 4|0;
 $3 = sp;
 $4 = (__cmsContextGetClientChunk($0,5)|0);
 $5 = ((($1)) + 116|0);
 HEAP32[$5>>2] = 0;
 $6 = HEAP32[$4>>2]|0;
 $7 = ($6|0)==(0|0);
 if (!($7)) {
  $8 = ((($1)) + 8|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($1)) + 12|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($1)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  FUNCTION_TABLE_viiii[$6 & 0]($2,$9,$11,$13);
  $14 = HEAP32[$2>>2]|0;
  HEAP32[$5>>2] = $14;
  $15 = ($14|0)==(0);
  if (!($15)) {
   $23 = HEAP32[$5>>2]|0;
   $not$ = ($23|0)!=(0|0);
   $$ = $not$&1;
   STACKTOP = sp;return ($$|0);
  }
 }
 $16 = ((($1)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($1)) + 12|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($1)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 _DefaultInterpolatorsFactory($3,$17,$19,$21);
 $22 = HEAP32[$3>>2]|0;
 HEAP32[$5>>2] = $22;
 $23 = HEAP32[$5>>2]|0;
 $not$ = ($23|0)!=(0|0);
 $$ = $not$&1;
 STACKTOP = sp;return ($$|0);
}
function _DefaultInterpolatorsFactory($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$Eval1Input = 0, $$LinLerp1D = 0, $$TetrahedralInterp16 = 0, $$TrilinearInterp16 = 0, $$sroa$0$0$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $BilinearInterp16$ = 0;
 var $Eval4Inputs$ = 0, $Eval5Inputs$ = 0, $Eval6Inputs$ = 0, $Eval7Inputs$ = 0, $Eval8Inputs$ = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $3 & 1;
 $5 = $3 & 256;
 $6 = ($1>>>0)>(3);
 $7 = ($2>>>0)>(127);
 $or$cond = $6 & $7;
 L1: do {
  if ($or$cond) {
   $$sroa$0$0$sink = 0;
  } else {
   switch ($1|0) {
   case 1:  {
    $8 = ($2|0)==(1);
    $9 = ($4|0)!=(0);
    if ($8) {
     $$LinLerp1D = $9 ? 2 : 3;
     $$sroa$0$0$sink = $$LinLerp1D;
     break L1;
    } else {
     $$Eval1Input = $9 ? 4 : 5;
     $$sroa$0$0$sink = $$Eval1Input;
     break L1;
    }
    break;
   }
   case 2:  {
    $10 = ($4|0)==(0);
    $BilinearInterp16$ = $10 ? 6 : 7;
    $$sroa$0$0$sink = $BilinearInterp16$;
    break L1;
    break;
   }
   case 3:  {
    $11 = ($5|0)==(0);
    $12 = ($4|0)!=(0);
    if ($11) {
     $$TetrahedralInterp16 = $12 ? 10 : 11;
     $$sroa$0$0$sink = $$TetrahedralInterp16;
     break L1;
    } else {
     $$TrilinearInterp16 = $12 ? 8 : 9;
     $$sroa$0$0$sink = $$TrilinearInterp16;
     break L1;
    }
    break;
   }
   case 4:  {
    $13 = ($4|0)==(0);
    $Eval4Inputs$ = $13 ? 12 : 13;
    $$sroa$0$0$sink = $Eval4Inputs$;
    break L1;
    break;
   }
   case 5:  {
    $14 = ($4|0)==(0);
    $Eval5Inputs$ = $14 ? 14 : 15;
    $$sroa$0$0$sink = $Eval5Inputs$;
    break L1;
    break;
   }
   case 6:  {
    $15 = ($4|0)==(0);
    $Eval6Inputs$ = $15 ? 16 : 17;
    $$sroa$0$0$sink = $Eval6Inputs$;
    break L1;
    break;
   }
   case 7:  {
    $16 = ($4|0)==(0);
    $Eval7Inputs$ = $16 ? 18 : 19;
    $$sroa$0$0$sink = $Eval7Inputs$;
    break L1;
    break;
   }
   case 8:  {
    $17 = ($4|0)==(0);
    $Eval8Inputs$ = $17 ? 20 : 21;
    $$sroa$0$0$sink = $Eval8Inputs$;
    break L1;
    break;
   }
   default: {
    $$sroa$0$0$sink = 0;
    break L1;
   }
   }
  }
 } while(0);
 HEAP32[$0>>2] = $$sroa$0$0$sink;
 return;
}
function _LinLerp1Dfloat($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sink = 0.0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0;
 var $7 = 0, $8 = 0, $9 = 0, $ceilf = 0.0, $floorf = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 112|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = +HEAPF32[$0>>2];
 $6 = (+_fclamp($5));
 $7 = $6 == 1.0;
 $8 = ((($2)) + 48|0);
 $9 = HEAP32[$8>>2]|0;
 if ($7) {
  $10 = (($4) + ($9<<2)|0);
  $11 = +HEAPF32[$10>>2];
  $$sink = $11;
  HEAPF32[$1>>2] = $$sink;
  return;
 } else {
  $12 = (+($9>>>0));
  $13 = $6 * $12;
  $floorf = (+Math_floor((+$13)));
  $14 = (~~(($floorf)));
  $ceilf = (+Math_ceil((+$13)));
  $15 = (~~(($ceilf)));
  $16 = (+($14|0));
  $17 = $13 - $16;
  $18 = (($4) + ($14<<2)|0);
  $19 = +HEAPF32[$18>>2];
  $20 = (($4) + ($15<<2)|0);
  $21 = +HEAPF32[$20>>2];
  $22 = $21 - $19;
  $23 = $17 * $22;
  $24 = $19 + $23;
  $$sink = $24;
  HEAPF32[$1>>2] = $$sink;
  return;
 }
}
function _LinLerp1D($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 112|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP16[$0>>1]|0;
 $6 = ($5<<16>>16)==(-1);
 $7 = ((($2)) + 48|0);
 $8 = HEAP32[$7>>2]|0;
 if ($6) {
  $9 = (($4) + ($8<<1)|0);
  $10 = HEAP16[$9>>1]|0;
  $$sink = $10;
  HEAP16[$1>>1] = $$sink;
  return;
 } else {
  $11 = $5&65535;
  $12 = Math_imul($8, $11)|0;
  $13 = (__cmsToFixedDomain($12)|0);
  $14 = $13 >> 16;
  $15 = $13 & 65535;
  $16 = (($4) + ($14<<1)|0);
  $17 = HEAP16[$16>>1]|0;
  $18 = (($14) + 1)|0;
  $19 = (($4) + ($18<<1)|0);
  $20 = HEAP16[$19>>1]|0;
  $21 = $17&65535;
  $22 = $20&65535;
  $23 = (_LinearInterp($15,$21,$22)|0);
  $$sink = $23;
  HEAP16[$1>>1] = $$sink;
  return;
 }
}
function _Eval1InputFloat($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$051 = 0, $$152 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0, $5 = 0.0;
 var $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, $ceilf = 0.0, $floorf = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 112|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = +HEAPF32[$0>>2];
 $6 = (+_fclamp($5));
 $7 = $6 == 1.0;
 $8 = ((($2)) + 48|0);
 $9 = HEAP32[$8>>2]|0;
 if ($7) {
  $10 = (($4) + ($9<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($2)) + 12|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==(0);
  if ($14) {
   return;
  }
  $15 = HEAP32[$12>>2]|0;
  $$051 = 0;
  while(1) {
   $16 = (($1) + ($$051<<2)|0);
   HEAP32[$16>>2] = $11;
   $17 = (($$051) + 1)|0;
   $18 = ($17>>>0)<($15>>>0);
   if ($18) {
    $$051 = $17;
   } else {
    break;
   }
  }
  return;
 } else {
  $19 = (+($9>>>0));
  $20 = $6 * $19;
  $floorf = (+Math_floor((+$20)));
  $21 = (~~(($floorf)));
  $ceilf = (+Math_ceil((+$20)));
  $22 = (~~(($ceilf)));
  $23 = (+($21|0));
  $24 = $20 - $23;
  $25 = ((($2)) + 80|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = Math_imul($26, $21)|0;
  $28 = Math_imul($22, $26)|0;
  $29 = ((($2)) + 12|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($30|0)==(0);
  if ($31) {
   return;
  }
  $32 = HEAP32[$29>>2]|0;
  $$152 = 0;
  while(1) {
   $33 = (($$152) + ($27))|0;
   $34 = (($4) + ($33<<2)|0);
   $35 = +HEAPF32[$34>>2];
   $36 = (($$152) + ($28))|0;
   $37 = (($4) + ($36<<2)|0);
   $38 = +HEAPF32[$37>>2];
   $39 = $38 - $35;
   $40 = $24 * $39;
   $41 = $35 + $40;
   $42 = (($1) + ($$152<<2)|0);
   HEAPF32[$42>>2] = $41;
   $43 = (($$152) + 1)|0;
   $44 = ($43>>>0)<($32>>>0);
   if ($44) {
    $$152 = $43;
   } else {
    break;
   }
  }
  return;
 }
}
function _Eval1Input($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$040 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 112|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP16[$0>>1]|0;
 $6 = $5&65535;
 $7 = ((($2)) + 48|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = Math_imul($6, $8)|0;
 $10 = (__cmsToFixedDomain($9)|0);
 $11 = $10 >> 16;
 $12 = $10 & 65535;
 $13 = ($5<<16>>16)!=(-1);
 $14 = $13&1;
 $15 = (($11) + ($14))|0;
 $16 = ((($2)) + 80|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = Math_imul($17, $11)|0;
 $19 = Math_imul($15, $17)|0;
 $20 = ((($2)) + 12|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)==(0);
 if ($22) {
  return;
 }
 $23 = HEAP32[$20>>2]|0;
 $$040 = 0;
 while(1) {
  $24 = (($$040) + ($18))|0;
  $25 = (($4) + ($24<<1)|0);
  $26 = HEAP16[$25>>1]|0;
  $27 = $26&65535;
  $28 = (($$040) + ($19))|0;
  $29 = (($4) + ($28<<1)|0);
  $30 = HEAP16[$29>>1]|0;
  $31 = $30&65535;
  $32 = (_LinearInterp($12,$27,$31)|0);
  $33 = (($1) + ($$040<<1)|0);
  HEAP16[$33>>1] = $32;
  $34 = (($$040) + 1)|0;
  $35 = ($34>>>0)<($23>>>0);
  if ($35) {
   $$040 = $34;
  } else {
   break;
  }
 }
 return;
}
function _BilinearInterp16($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$092 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 112|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($2)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP16[$0>>1]|0;
 $8 = $7&65535;
 $9 = ((($2)) + 48|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = Math_imul($8, $10)|0;
 $12 = (__cmsToFixedDomain($11)|0);
 $13 = $12 >> 16;
 $14 = $12 & 65535;
 $15 = ((($0)) + 2|0);
 $16 = HEAP16[$15>>1]|0;
 $17 = $16&65535;
 $18 = ((($2)) + 52|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = Math_imul($17, $19)|0;
 $21 = (__cmsToFixedDomain($20)|0);
 $22 = $21 >> 16;
 $23 = $21 & 65535;
 $24 = ((($2)) + 84|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = Math_imul($25, $13)|0;
 $27 = ($7<<16>>16)==(-1);
 $$ = $27 ? 0 : $25;
 $28 = (($26) + ($$))|0;
 $29 = ((($2)) + 80|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = Math_imul($30, $22)|0;
 $32 = ($16<<16>>16)==(-1);
 $33 = $32 ? 0 : $30;
 $34 = (($31) + ($33))|0;
 $35 = ($6|0)>(0);
 if (!($35)) {
  return;
 }
 $36 = (($31) + ($26))|0;
 $37 = (($34) + ($26))|0;
 $38 = (($28) + ($31))|0;
 $39 = (($34) + ($28))|0;
 $$092 = 0;
 while(1) {
  $40 = (($36) + ($$092))|0;
  $41 = (($4) + ($40<<1)|0);
  $42 = HEAP16[$41>>1]|0;
  $43 = $42&65535;
  $44 = (($37) + ($$092))|0;
  $45 = (($4) + ($44<<1)|0);
  $46 = HEAP16[$45>>1]|0;
  $47 = $46&65535;
  $48 = (($38) + ($$092))|0;
  $49 = (($4) + ($48<<1)|0);
  $50 = HEAP16[$49>>1]|0;
  $51 = $50&65535;
  $52 = (($39) + ($$092))|0;
  $53 = (($4) + ($52<<1)|0);
  $54 = HEAP16[$53>>1]|0;
  $55 = $54&65535;
  $56 = (($51) - ($43))|0;
  $57 = Math_imul($56, $14)|0;
  $58 = (($57) + 32768)|0;
  $59 = $58 >>> 16;
  $60 = (($59) + ($43))|0;
  $61 = $60 & 65535;
  $62 = (($55) - ($47))|0;
  $63 = Math_imul($62, $14)|0;
  $64 = (($63) + 32768)|0;
  $65 = $64 >>> 16;
  $66 = (($65) + ($47))|0;
  $67 = $66 & 65535;
  $68 = (($67) - ($61))|0;
  $69 = Math_imul($68, $23)|0;
  $70 = (($69) + 32768)|0;
  $71 = $70 >>> 16;
  $72 = (($71) + ($60))|0;
  $73 = $72&65535;
  $74 = (($1) + ($$092<<1)|0);
  HEAP16[$74>>1] = $73;
  $75 = (($$092) + 1)|0;
  $exitcond = ($75|0)==($6|0);
  if ($exitcond) {
   break;
  } else {
   $$092 = $75;
  }
 }
 return;
}
function _BilinearInterpFloat($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$094 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0;
 var $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 112|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($2)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = +HEAPF32[$0>>2];
 $8 = (+_fclamp($7));
 $9 = ((($2)) + 48|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (+($10>>>0));
 $12 = $8 * $11;
 $13 = ((($0)) + 4|0);
 $14 = +HEAPF32[$13>>2];
 $15 = (+_fclamp($14));
 $16 = ((($2)) + 52|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (+($17>>>0));
 $19 = $15 * $18;
 $20 = $12;
 $21 = (__cmsQuickFloor_205($20)|0);
 $22 = (+($21|0));
 $23 = $12 - $22;
 $24 = $19;
 $25 = (__cmsQuickFloor_205($24)|0);
 $26 = (+($25|0));
 $27 = $19 - $26;
 $28 = ((($2)) + 84|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = Math_imul($29, $21)|0;
 $31 = !($8 >= 1.0);
 $32 = $31 ? $29 : 0;
 $33 = (($30) + ($32))|0;
 $34 = ((($2)) + 80|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = Math_imul($35, $25)|0;
 $37 = +HEAPF32[$13>>2];
 $38 = (+_fclamp($37));
 $39 = !($38 >= 1.0);
 $40 = $39 ? $35 : 0;
 $41 = (($40) + ($36))|0;
 $42 = ($6|0)>(0);
 if (!($42)) {
  return;
 }
 $43 = (($36) + ($30))|0;
 $44 = (($41) + ($30))|0;
 $45 = (($33) + ($36))|0;
 $46 = (($41) + ($33))|0;
 $$094 = 0;
 while(1) {
  $47 = (($43) + ($$094))|0;
  $48 = (($4) + ($47<<2)|0);
  $49 = +HEAPF32[$48>>2];
  $50 = (($44) + ($$094))|0;
  $51 = (($4) + ($50<<2)|0);
  $52 = +HEAPF32[$51>>2];
  $53 = (($45) + ($$094))|0;
  $54 = (($4) + ($53<<2)|0);
  $55 = +HEAPF32[$54>>2];
  $56 = (($46) + ($$094))|0;
  $57 = (($4) + ($56<<2)|0);
  $58 = +HEAPF32[$57>>2];
  $59 = $55 - $49;
  $60 = $23 * $59;
  $61 = $49 + $60;
  $62 = $58 - $52;
  $63 = $23 * $62;
  $64 = $52 + $63;
  $65 = $64 - $61;
  $66 = $27 * $65;
  $67 = $61 + $66;
  $68 = (($1) + ($$094<<2)|0);
  HEAPF32[$68>>2] = $67;
  $69 = (($$094) + 1)|0;
  $exitcond = ($69|0)==($6|0);
  if ($exitcond) {
   break;
  } else {
   $$094 = $69;
  }
 }
 return;
}
function _TrilinearInterpFloat($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0172 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0;
 var $117 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0;
 var $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0.0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0, $84 = 0;
 var $85 = 0.0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0, $91 = 0.0, $92 = 0, $93 = 0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $exitcond = 0, $floorf = 0.0, $floorf170 = 0.0, $floorf171 = 0.0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 112|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($2)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = +HEAPF32[$0>>2];
 $8 = (+_fclamp($7));
 $9 = ((($2)) + 48|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (+($10>>>0));
 $12 = $8 * $11;
 $13 = ((($0)) + 4|0);
 $14 = +HEAPF32[$13>>2];
 $15 = (+_fclamp($14));
 $16 = ((($2)) + 52|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (+($17>>>0));
 $19 = $15 * $18;
 $20 = ((($0)) + 8|0);
 $21 = +HEAPF32[$20>>2];
 $22 = (+_fclamp($21));
 $23 = ((($2)) + 56|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (+($24>>>0));
 $26 = $22 * $25;
 $floorf = (+Math_floor((+$12)));
 $27 = (~~(($floorf)));
 $28 = (+($27|0));
 $29 = $12 - $28;
 $floorf170 = (+Math_floor((+$19)));
 $30 = (~~(($floorf170)));
 $31 = (+($30|0));
 $32 = $19 - $31;
 $floorf171 = (+Math_floor((+$26)));
 $33 = (~~(($floorf171)));
 $34 = (+($33|0));
 $35 = $26 - $34;
 $36 = ((($2)) + 88|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = Math_imul($37, $27)|0;
 $39 = !($8 >= 1.0);
 $40 = $39 ? $37 : 0;
 $41 = (($38) + ($40))|0;
 $42 = ((($2)) + 84|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = Math_imul($43, $30)|0;
 $45 = +HEAPF32[$13>>2];
 $46 = (+_fclamp($45));
 $47 = !($46 >= 1.0);
 $48 = $47 ? $43 : 0;
 $49 = (($48) + ($44))|0;
 $50 = ((($2)) + 80|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = Math_imul($51, $33)|0;
 $53 = +HEAPF32[$20>>2];
 $54 = (+_fclamp($53));
 $55 = !($54 >= 1.0);
 $56 = $55 ? $51 : 0;
 $57 = (($56) + ($52))|0;
 $58 = ($6|0)>(0);
 if (!($58)) {
  return;
 }
 $59 = (($44) + ($38))|0;
 $60 = (($52) + ($59))|0;
 $61 = (($57) + ($59))|0;
 $62 = (($49) + ($38))|0;
 $63 = (($62) + ($52))|0;
 $64 = (($57) + ($62))|0;
 $65 = (($41) + ($44))|0;
 $66 = (($52) + ($65))|0;
 $67 = (($57) + ($65))|0;
 $68 = (($49) + ($41))|0;
 $69 = (($68) + ($52))|0;
 $70 = (($57) + ($68))|0;
 $$0172 = 0;
 while(1) {
  $71 = (($60) + ($$0172))|0;
  $72 = (($4) + ($71<<2)|0);
  $73 = +HEAPF32[$72>>2];
  $74 = (($61) + ($$0172))|0;
  $75 = (($4) + ($74<<2)|0);
  $76 = +HEAPF32[$75>>2];
  $77 = (($63) + ($$0172))|0;
  $78 = (($4) + ($77<<2)|0);
  $79 = +HEAPF32[$78>>2];
  $80 = (($64) + ($$0172))|0;
  $81 = (($4) + ($80<<2)|0);
  $82 = +HEAPF32[$81>>2];
  $83 = (($66) + ($$0172))|0;
  $84 = (($4) + ($83<<2)|0);
  $85 = +HEAPF32[$84>>2];
  $86 = (($67) + ($$0172))|0;
  $87 = (($4) + ($86<<2)|0);
  $88 = +HEAPF32[$87>>2];
  $89 = (($69) + ($$0172))|0;
  $90 = (($4) + ($89<<2)|0);
  $91 = +HEAPF32[$90>>2];
  $92 = (($70) + ($$0172))|0;
  $93 = (($4) + ($92<<2)|0);
  $94 = +HEAPF32[$93>>2];
  $95 = $85 - $73;
  $96 = $29 * $95;
  $97 = $73 + $96;
  $98 = $88 - $76;
  $99 = $29 * $98;
  $100 = $76 + $99;
  $101 = $91 - $79;
  $102 = $29 * $101;
  $103 = $79 + $102;
  $104 = $94 - $82;
  $105 = $29 * $104;
  $106 = $82 + $105;
  $107 = $103 - $97;
  $108 = $32 * $107;
  $109 = $97 + $108;
  $110 = $106 - $100;
  $111 = $32 * $110;
  $112 = $100 + $111;
  $113 = $112 - $109;
  $114 = $35 * $113;
  $115 = $109 + $114;
  $116 = (($1) + ($$0172<<2)|0);
  HEAPF32[$116>>2] = $115;
  $117 = (($$0172) + 1)|0;
  $exitcond = ($117|0)==($6|0);
  if ($exitcond) {
   break;
  } else {
   $$0172 = $117;
  }
 }
 return;
}
function _TrilinearInterp16($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0168 = 0, $$167 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 112|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($2)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP16[$0>>1]|0;
 $8 = $7&65535;
 $9 = ((($2)) + 48|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = Math_imul($8, $10)|0;
 $12 = (__cmsToFixedDomain($11)|0);
 $13 = $12 >> 16;
 $14 = $12 & 65535;
 $15 = ((($0)) + 2|0);
 $16 = HEAP16[$15>>1]|0;
 $17 = $16&65535;
 $18 = ((($2)) + 52|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = Math_imul($17, $19)|0;
 $21 = (__cmsToFixedDomain($20)|0);
 $22 = $21 >> 16;
 $23 = $21 & 65535;
 $24 = ((($0)) + 4|0);
 $25 = HEAP16[$24>>1]|0;
 $26 = $25&65535;
 $27 = ((($2)) + 56|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = Math_imul($26, $28)|0;
 $30 = (__cmsToFixedDomain($29)|0);
 $31 = $30 >> 16;
 $32 = $30 & 65535;
 $33 = ((($2)) + 88|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = Math_imul($34, $13)|0;
 $36 = ($7<<16>>16)==(-1);
 $$ = $36 ? 0 : $34;
 $37 = (($35) + ($$))|0;
 $38 = ((($2)) + 84|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = Math_imul($39, $22)|0;
 $41 = ($16<<16>>16)==(-1);
 $42 = $41 ? 0 : $39;
 $43 = (($40) + ($42))|0;
 $44 = ((($2)) + 80|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = Math_imul($45, $31)|0;
 $47 = ($25<<16>>16)==(-1);
 $$167 = $47 ? 0 : $45;
 $48 = (($46) + ($$167))|0;
 $49 = ($6|0)>(0);
 if (!($49)) {
  return;
 }
 $50 = (($40) + ($35))|0;
 $51 = (($50) + ($46))|0;
 $52 = (($48) + ($50))|0;
 $53 = (($43) + ($35))|0;
 $54 = (($53) + ($46))|0;
 $55 = (($53) + ($48))|0;
 $56 = (($37) + ($40))|0;
 $57 = (($56) + ($46))|0;
 $58 = (($48) + ($56))|0;
 $59 = (($43) + ($37))|0;
 $60 = (($59) + ($46))|0;
 $61 = (($59) + ($48))|0;
 $$0168 = 0;
 while(1) {
  $62 = (($51) + ($$0168))|0;
  $63 = (($4) + ($62<<1)|0);
  $64 = HEAP16[$63>>1]|0;
  $65 = $64&65535;
  $66 = (($52) + ($$0168))|0;
  $67 = (($4) + ($66<<1)|0);
  $68 = HEAP16[$67>>1]|0;
  $69 = $68&65535;
  $70 = (($54) + ($$0168))|0;
  $71 = (($4) + ($70<<1)|0);
  $72 = HEAP16[$71>>1]|0;
  $73 = $72&65535;
  $74 = (($55) + ($$0168))|0;
  $75 = (($4) + ($74<<1)|0);
  $76 = HEAP16[$75>>1]|0;
  $77 = $76&65535;
  $78 = (($57) + ($$0168))|0;
  $79 = (($4) + ($78<<1)|0);
  $80 = HEAP16[$79>>1]|0;
  $81 = $80&65535;
  $82 = (($58) + ($$0168))|0;
  $83 = (($4) + ($82<<1)|0);
  $84 = HEAP16[$83>>1]|0;
  $85 = $84&65535;
  $86 = (($60) + ($$0168))|0;
  $87 = (($4) + ($86<<1)|0);
  $88 = HEAP16[$87>>1]|0;
  $89 = $88&65535;
  $90 = (($61) + ($$0168))|0;
  $91 = (($4) + ($90<<1)|0);
  $92 = HEAP16[$91>>1]|0;
  $93 = $92&65535;
  $94 = (($81) - ($65))|0;
  $95 = Math_imul($94, $14)|0;
  $96 = (($95) + 32768)|0;
  $97 = $96 >>> 16;
  $98 = (($97) + ($65))|0;
  $99 = $98 & 65535;
  $100 = (($85) - ($69))|0;
  $101 = Math_imul($100, $14)|0;
  $102 = (($101) + 32768)|0;
  $103 = $102 >>> 16;
  $104 = (($103) + ($69))|0;
  $105 = $104 & 65535;
  $106 = (($89) - ($73))|0;
  $107 = Math_imul($106, $14)|0;
  $108 = (($107) + 32768)|0;
  $109 = $108 >>> 16;
  $110 = (($109) + ($73))|0;
  $111 = $110 & 65535;
  $112 = (($93) - ($77))|0;
  $113 = Math_imul($112, $14)|0;
  $114 = (($113) + 32768)|0;
  $115 = $114 >>> 16;
  $116 = (($115) + ($77))|0;
  $117 = $116 & 65535;
  $118 = (($111) - ($99))|0;
  $119 = Math_imul($118, $23)|0;
  $120 = (($119) + 32768)|0;
  $121 = $120 >>> 16;
  $122 = (($121) + ($98))|0;
  $123 = $122 & 65535;
  $124 = (($117) - ($105))|0;
  $125 = Math_imul($124, $23)|0;
  $126 = (($125) + 32768)|0;
  $127 = $126 >>> 16;
  $128 = (($127) + ($104))|0;
  $129 = $128 & 65535;
  $130 = (($129) - ($123))|0;
  $131 = Math_imul($130, $32)|0;
  $132 = (($131) + 32768)|0;
  $133 = $132 >>> 16;
  $134 = (($133) + ($122))|0;
  $135 = $134&65535;
  $136 = (($1) + ($$0168<<1)|0);
  HEAP16[$136>>1] = $135;
  $137 = (($$0168) + 1)|0;
  $exitcond = ($137|0)==($6|0);
  if ($exitcond) {
   break;
  } else {
   $$0168 = $137;
  }
 }
 return;
}
function _TetrahedralInterpFloat($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0.0, $$0271287 = 0, $$0272 = 0.0, $$0273 = 0.0, $$not = 0, $$not276 = 0, $$not278 = 0, $$not280 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0.0;
 var $110 = 0.0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0.0, $115 = 0, $116 = 0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0.0, $127 = 0, $128 = 0;
 var $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0, $133 = 0, $134 = 0.0, $135 = 0, $136 = 0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0.0, $140 = 0, $141 = 0, $142 = 0.0, $143 = 0.0, $144 = 0, $145 = 0, $146 = 0.0;
 var $147 = 0, $148 = 0, $149 = 0.0, $15 = 0.0, $150 = 0.0, $151 = 0, $152 = 0, $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0, $157 = 0, $158 = 0.0, $159 = 0, $16 = 0, $160 = 0, $161 = 0.0, $162 = 0.0, $163 = 0, $164 = 0;
 var $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0, $170 = 0.0, $171 = 0.0, $172 = 0.0, $173 = 0.0, $174 = 0, $175 = 0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0.0;
 var $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0.0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0.0;
 var $99 = 0.0, $brmerge = 0, $brmerge282 = 0, $brmerge284 = 0, $brmerge286 = 0, $exitcond = 0, $floorf = 0.0, $floorf274 = 0.0, $floorf275 = 0.0, $or$cond = 0, $or$cond277 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 112|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($2)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = +HEAPF32[$0>>2];
 $8 = (+_fclamp($7));
 $9 = ((($2)) + 48|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (+($10>>>0));
 $12 = $8 * $11;
 $13 = ((($0)) + 4|0);
 $14 = +HEAPF32[$13>>2];
 $15 = (+_fclamp($14));
 $16 = ((($2)) + 52|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (+($17>>>0));
 $19 = $15 * $18;
 $20 = ((($0)) + 8|0);
 $21 = +HEAPF32[$20>>2];
 $22 = (+_fclamp($21));
 $23 = ((($2)) + 56|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (+($24>>>0));
 $26 = $22 * $25;
 $floorf = (+Math_floor((+$12)));
 $27 = (~~(($floorf)));
 $28 = (+($27|0));
 $29 = $12 - $28;
 $floorf274 = (+Math_floor((+$19)));
 $30 = (~~(($floorf274)));
 $31 = (+($30|0));
 $32 = $19 - $31;
 $floorf275 = (+Math_floor((+$26)));
 $33 = (~~(($floorf275)));
 $34 = (+($33|0));
 $35 = $26 - $34;
 $36 = ((($2)) + 88|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = Math_imul($37, $27)|0;
 $39 = !($8 >= 1.0);
 $40 = $39 ? $37 : 0;
 $41 = (($38) + ($40))|0;
 $42 = ((($2)) + 84|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = Math_imul($43, $30)|0;
 $45 = +HEAPF32[$13>>2];
 $46 = (+_fclamp($45));
 $47 = !($46 >= 1.0);
 $48 = $47 ? $43 : 0;
 $49 = (($48) + ($44))|0;
 $50 = ((($2)) + 80|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = Math_imul($51, $33)|0;
 $53 = +HEAPF32[$20>>2];
 $54 = (+_fclamp($53));
 $55 = !($54 >= 1.0);
 $56 = $55 ? $51 : 0;
 $57 = (($56) + ($52))|0;
 $58 = ($6|0)>(0);
 if (!($58)) {
  return;
 }
 $59 = (($44) + ($38))|0;
 $60 = (($52) + ($59))|0;
 $$not = !($29 >= $32);
 $61 = !($32 >= $35);
 $or$cond = $$not | $61;
 $$not276 = !($29 >= $35);
 $62 = !($35 >= $32);
 $or$cond277 = $$not276 | $62;
 $$not278 = !($35 >= $29);
 $brmerge = $$not | $$not278;
 $$not280 = !($32 >= $29);
 $brmerge282 = $$not280 | $$not276;
 $brmerge284 = $61 | $$not278;
 $brmerge286 = $$not280 | $62;
 $63 = (($49) + ($41))|0;
 $64 = (($63) + ($57))|0;
 $65 = (($49) + ($38))|0;
 $66 = (($65) + ($57))|0;
 $67 = (($57) + ($59))|0;
 $68 = (($49) + ($41))|0;
 $69 = (($68) + ($57))|0;
 $70 = (($49) + ($38))|0;
 $71 = (($57) + ($70))|0;
 $72 = (($70) + ($52))|0;
 $73 = (($49) + ($41))|0;
 $74 = (($73) + ($52))|0;
 $75 = (($52) + ($38))|0;
 $76 = (($75) + ($49))|0;
 $77 = (($57) + ($73))|0;
 $78 = (($41) + ($44))|0;
 $79 = (($78) + ($57))|0;
 $80 = (($57) + ($59))|0;
 $81 = (($49) + ($41))|0;
 $82 = (($81) + ($57))|0;
 $83 = (($41) + ($44))|0;
 $84 = (($52) + ($83))|0;
 $85 = (($49) + ($41))|0;
 $86 = (($85) + ($57))|0;
 $87 = (($57) + ($83))|0;
 $88 = (($41) + ($44))|0;
 $89 = (($88) + ($52))|0;
 $90 = (($49) + ($41))|0;
 $91 = (($90) + ($52))|0;
 $92 = (($57) + ($90))|0;
 $$0271287 = 0;
 while(1) {
  $93 = (($60) + ($$0271287))|0;
  $94 = (($4) + ($93<<2)|0);
  $95 = +HEAPF32[$94>>2];
  do {
   if ($or$cond) {
    if (!($or$cond277)) {
     $108 = (($84) + ($$0271287))|0;
     $109 = (($4) + ($108<<2)|0);
     $110 = +HEAPF32[$109>>2];
     $111 = $110 - $95;
     $112 = (($86) + ($$0271287))|0;
     $113 = (($4) + ($112<<2)|0);
     $114 = +HEAPF32[$113>>2];
     $115 = (($87) + ($$0271287))|0;
     $116 = (($4) + ($115<<2)|0);
     $117 = +HEAPF32[$116>>2];
     $118 = $114 - $117;
     $119 = $117 - $110;
     $$0 = $111;$$0272 = $119;$$0273 = $118;
     break;
    }
    if (!($brmerge)) {
     $120 = (($79) + ($$0271287))|0;
     $121 = (($4) + ($120<<2)|0);
     $122 = +HEAPF32[$121>>2];
     $123 = (($80) + ($$0271287))|0;
     $124 = (($4) + ($123<<2)|0);
     $125 = +HEAPF32[$124>>2];
     $126 = $122 - $125;
     $127 = (($82) + ($$0271287))|0;
     $128 = (($4) + ($127<<2)|0);
     $129 = +HEAPF32[$128>>2];
     $130 = $129 - $122;
     $131 = $125 - $95;
     $$0 = $126;$$0272 = $131;$$0273 = $130;
     break;
    }
    if (!($brmerge282)) {
     $132 = (($74) + ($$0271287))|0;
     $133 = (($4) + ($132<<2)|0);
     $134 = +HEAPF32[$133>>2];
     $135 = (($76) + ($$0271287))|0;
     $136 = (($4) + ($135<<2)|0);
     $137 = +HEAPF32[$136>>2];
     $138 = $134 - $137;
     $139 = $137 - $95;
     $140 = (($77) + ($$0271287))|0;
     $141 = (($4) + ($140<<2)|0);
     $142 = +HEAPF32[$141>>2];
     $143 = $142 - $134;
     $$0 = $138;$$0272 = $143;$$0273 = $139;
     break;
    }
    if (!($brmerge284)) {
     $144 = (($69) + ($$0271287))|0;
     $145 = (($4) + ($144<<2)|0);
     $146 = +HEAPF32[$145>>2];
     $147 = (($71) + ($$0271287))|0;
     $148 = (($4) + ($147<<2)|0);
     $149 = +HEAPF32[$148>>2];
     $150 = $146 - $149;
     $151 = (($72) + ($$0271287))|0;
     $152 = (($4) + ($151<<2)|0);
     $153 = +HEAPF32[$152>>2];
     $154 = $153 - $95;
     $155 = $149 - $153;
     $$0 = $150;$$0272 = $155;$$0273 = $154;
     break;
    }
    if ($brmerge286) {
     $$0 = 0.0;$$0272 = 0.0;$$0273 = 0.0;
    } else {
     $156 = (($64) + ($$0271287))|0;
     $157 = (($4) + ($156<<2)|0);
     $158 = +HEAPF32[$157>>2];
     $159 = (($66) + ($$0271287))|0;
     $160 = (($4) + ($159<<2)|0);
     $161 = +HEAPF32[$160>>2];
     $162 = $158 - $161;
     $163 = (($67) + ($$0271287))|0;
     $164 = (($4) + ($163<<2)|0);
     $165 = +HEAPF32[$164>>2];
     $166 = $161 - $165;
     $167 = $165 - $95;
     $$0 = $162;$$0272 = $167;$$0273 = $166;
    }
   } else {
    $96 = (($89) + ($$0271287))|0;
    $97 = (($4) + ($96<<2)|0);
    $98 = +HEAPF32[$97>>2];
    $99 = $98 - $95;
    $100 = (($91) + ($$0271287))|0;
    $101 = (($4) + ($100<<2)|0);
    $102 = +HEAPF32[$101>>2];
    $103 = $102 - $98;
    $104 = (($92) + ($$0271287))|0;
    $105 = (($4) + ($104<<2)|0);
    $106 = +HEAPF32[$105>>2];
    $107 = $106 - $102;
    $$0 = $99;$$0272 = $107;$$0273 = $103;
   }
  } while(0);
  $168 = $29 * $$0;
  $169 = $95 + $168;
  $170 = $32 * $$0273;
  $171 = $170 + $169;
  $172 = $35 * $$0272;
  $173 = $172 + $171;
  $174 = (($1) + ($$0271287<<2)|0);
  HEAPF32[$174>>2] = $173;
  $175 = (($$0271287) + 1)|0;
  $exitcond = ($175|0)==($6|0);
  if ($exitcond) {
   break;
  } else {
   $$0271287 = $175;
  }
 }
 return;
}
function _TetrahedralInterp16($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0256297 = 0, $$0262296 = 0, $$0298 = 0, $$1257293 = 0, $$1263292 = 0, $$1294 = 0, $$2258289 = 0, $$2264288 = 0, $$2290 = 0, $$268 = 0, $$3259285 = 0, $$3265284 = 0, $$3286 = 0, $$4260281 = 0, $$4266280 = 0, $$4282 = 0, $$5261278 = 0, $$5267277 = 0, $$5279 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 112|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($2)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP16[$0>>1]|0;
 $8 = $7&65535;
 $9 = ((($2)) + 48|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = Math_imul($8, $10)|0;
 $12 = (__cmsToFixedDomain($11)|0);
 $13 = ((($0)) + 2|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14&65535;
 $16 = ((($2)) + 52|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = Math_imul($15, $17)|0;
 $19 = (__cmsToFixedDomain($18)|0);
 $20 = ((($0)) + 4|0);
 $21 = HEAP16[$20>>1]|0;
 $22 = $21&65535;
 $23 = ((($2)) + 56|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = Math_imul($22, $24)|0;
 $26 = (__cmsToFixedDomain($25)|0);
 $27 = $12 >> 16;
 $28 = $19 >> 16;
 $29 = $26 >> 16;
 $30 = $12 & 65535;
 $31 = $19 & 65535;
 $32 = $26 & 65535;
 $33 = ((($2)) + 88|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = Math_imul($34, $27)|0;
 $36 = ($7<<16>>16)==(-1);
 $$ = $36 ? 0 : $34;
 $37 = ((($2)) + 84|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = Math_imul($38, $28)|0;
 $40 = ($14<<16>>16)==(-1);
 $41 = $40 ? 0 : $38;
 $42 = ((($2)) + 80|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = Math_imul($43, $29)|0;
 $45 = ($21<<16>>16)==(-1);
 $$268 = $45 ? 0 : $43;
 $46 = (($39) + ($35))|0;
 $47 = (($46) + ($44))|0;
 $48 = (($4) + ($47<<1)|0);
 $49 = ($30>>>0)<($31>>>0);
 if ($49) {
  $145 = ($30>>>0)<($32>>>0);
  if (!($145)) {
   $146 = (($41) + ($$))|0;
   $147 = (($$268) + ($146))|0;
   $148 = ($6|0)==(0);
   if ($148) {
    return;
   } else {
    $$3259285 = $1;$$3265284 = $48;$$3286 = $6;
   }
   while(1) {
    $149 = (($$3265284) + ($146<<1)|0);
    $150 = HEAP16[$149>>1]|0;
    $151 = $150&65535;
    $152 = (($$3265284) + ($41<<1)|0);
    $153 = HEAP16[$152>>1]|0;
    $154 = $153&65535;
    $155 = (($$3265284) + ($147<<1)|0);
    $156 = HEAP16[$155>>1]|0;
    $157 = $156&65535;
    $158 = ((($$3265284)) + 2|0);
    $159 = HEAP16[$$3265284>>1]|0;
    $160 = $159&65535;
    $161 = (($157) - ($151))|0;
    $162 = (($151) - ($154))|0;
    $163 = (($154) - ($160))|0;
    $164 = Math_imul($162, $30)|0;
    $165 = Math_imul($163, $31)|0;
    $166 = Math_imul($161, $32)|0;
    $167 = (($164) + 32769)|0;
    $168 = (($167) + ($166))|0;
    $169 = (($168) + ($165))|0;
    $170 = $169 >> 16;
    $171 = (($170) + ($169))|0;
    $172 = $171 >>> 16;
    $173 = (($172) + ($160))|0;
    $174 = $173&65535;
    $175 = ((($$3259285)) + 2|0);
    HEAP16[$$3259285>>1] = $174;
    $176 = (($$3286) + -1)|0;
    $177 = ($176|0)==(0);
    if ($177) {
     break;
    } else {
     $$3259285 = $175;$$3265284 = $158;$$3286 = $176;
    }
   }
   return;
  }
  $178 = ($31>>>0)<($32>>>0);
  $179 = (($$268) + ($41))|0;
  $180 = (($179) + ($$))|0;
  $181 = ($6|0)==(0);
  if ($178) {
   if ($181) {
    return;
   } else {
    $$5261278 = $1;$$5267277 = $48;$$5279 = $6;
   }
   while(1) {
    $211 = (($$5267277) + ($180<<1)|0);
    $212 = HEAP16[$211>>1]|0;
    $213 = $212&65535;
    $214 = (($$5267277) + ($179<<1)|0);
    $215 = HEAP16[$214>>1]|0;
    $216 = $215&65535;
    $217 = (($$5267277) + ($$268<<1)|0);
    $218 = HEAP16[$217>>1]|0;
    $219 = $218&65535;
    $220 = ((($$5267277)) + 2|0);
    $221 = HEAP16[$$5267277>>1]|0;
    $222 = $221&65535;
    $223 = (($213) - ($216))|0;
    $224 = (($216) - ($219))|0;
    $225 = (($219) - ($222))|0;
    $226 = Math_imul($223, $30)|0;
    $227 = Math_imul($224, $31)|0;
    $228 = Math_imul($225, $32)|0;
    $229 = (($226) + 32769)|0;
    $230 = (($229) + ($227))|0;
    $231 = (($230) + ($228))|0;
    $232 = $231 >> 16;
    $233 = (($232) + ($231))|0;
    $234 = $233 >>> 16;
    $235 = (($234) + ($222))|0;
    $236 = $235&65535;
    $237 = ((($$5261278)) + 2|0);
    HEAP16[$$5261278>>1] = $236;
    $238 = (($$5279) + -1)|0;
    $239 = ($238|0)==(0);
    if ($239) {
     break;
    } else {
     $$5261278 = $237;$$5267277 = $220;$$5279 = $238;
    }
   }
   return;
  } else {
   if ($181) {
    return;
   } else {
    $$4260281 = $1;$$4266280 = $48;$$4282 = $6;
   }
   while(1) {
    $182 = (($$4266280) + ($180<<1)|0);
    $183 = HEAP16[$182>>1]|0;
    $184 = $183&65535;
    $185 = (($$4266280) + ($41<<1)|0);
    $186 = HEAP16[$185>>1]|0;
    $187 = $186&65535;
    $188 = (($$4266280) + ($179<<1)|0);
    $189 = HEAP16[$188>>1]|0;
    $190 = $189&65535;
    $191 = ((($$4266280)) + 2|0);
    $192 = HEAP16[$$4266280>>1]|0;
    $193 = $192&65535;
    $194 = (($184) - ($190))|0;
    $195 = (($190) - ($187))|0;
    $196 = (($187) - ($193))|0;
    $197 = Math_imul($194, $30)|0;
    $198 = Math_imul($196, $31)|0;
    $199 = Math_imul($195, $32)|0;
    $200 = (($197) + 32769)|0;
    $201 = (($200) + ($199))|0;
    $202 = (($201) + ($198))|0;
    $203 = $202 >> 16;
    $204 = (($203) + ($202))|0;
    $205 = $204 >>> 16;
    $206 = (($205) + ($193))|0;
    $207 = $206&65535;
    $208 = ((($$4260281)) + 2|0);
    HEAP16[$$4260281>>1] = $207;
    $209 = (($$4282) + -1)|0;
    $210 = ($209|0)==(0);
    if ($210) {
     break;
    } else {
     $$4260281 = $208;$$4266280 = $191;$$4282 = $209;
    }
   }
   return;
  }
 } else {
  $50 = ($31>>>0)<($32>>>0);
  if (!($50)) {
   $51 = (($41) + ($$))|0;
   $52 = (($$268) + ($51))|0;
   $53 = ($6|0)==(0);
   if ($53) {
    return;
   } else {
    $$0256297 = $1;$$0262296 = $48;$$0298 = $6;
   }
   while(1) {
    $54 = (($$0262296) + ($$<<1)|0);
    $55 = HEAP16[$54>>1]|0;
    $56 = $55&65535;
    $57 = (($$0262296) + ($51<<1)|0);
    $58 = HEAP16[$57>>1]|0;
    $59 = $58&65535;
    $60 = (($$0262296) + ($52<<1)|0);
    $61 = HEAP16[$60>>1]|0;
    $62 = $61&65535;
    $63 = ((($$0262296)) + 2|0);
    $64 = HEAP16[$$0262296>>1]|0;
    $65 = $64&65535;
    $66 = (($62) - ($59))|0;
    $67 = (($59) - ($56))|0;
    $68 = (($56) - ($65))|0;
    $69 = Math_imul($68, $30)|0;
    $70 = Math_imul($67, $31)|0;
    $71 = Math_imul($66, $32)|0;
    $72 = (($70) + 32769)|0;
    $73 = (($72) + ($71))|0;
    $74 = (($73) + ($69))|0;
    $75 = $74 >> 16;
    $76 = (($75) + ($74))|0;
    $77 = $76 >>> 16;
    $78 = (($77) + ($65))|0;
    $79 = $78&65535;
    $80 = ((($$0256297)) + 2|0);
    HEAP16[$$0256297>>1] = $79;
    $81 = (($$0298) + -1)|0;
    $82 = ($81|0)==(0);
    if ($82) {
     break;
    } else {
     $$0256297 = $80;$$0262296 = $63;$$0298 = $81;
    }
   }
   return;
  }
  $83 = ($32>>>0)<($30>>>0);
  $84 = (($$268) + ($$))|0;
  $85 = (($84) + ($41))|0;
  $86 = ($6|0)==(0);
  if ($83) {
   if ($86) {
    return;
   } else {
    $$2258289 = $1;$$2264288 = $48;$$2290 = $6;
   }
   while(1) {
    $116 = (($$2264288) + ($$<<1)|0);
    $117 = HEAP16[$116>>1]|0;
    $118 = $117&65535;
    $119 = (($$2264288) + ($85<<1)|0);
    $120 = HEAP16[$119>>1]|0;
    $121 = $120&65535;
    $122 = (($$2264288) + ($84<<1)|0);
    $123 = HEAP16[$122>>1]|0;
    $124 = $123&65535;
    $125 = ((($$2264288)) + 2|0);
    $126 = HEAP16[$$2264288>>1]|0;
    $127 = $126&65535;
    $128 = (($121) - ($124))|0;
    $129 = (($124) - ($118))|0;
    $130 = (($118) - ($127))|0;
    $131 = Math_imul($130, $30)|0;
    $132 = Math_imul($128, $31)|0;
    $133 = Math_imul($129, $32)|0;
    $134 = (($132) + 32769)|0;
    $135 = (($134) + ($133))|0;
    $136 = (($135) + ($131))|0;
    $137 = $136 >> 16;
    $138 = (($137) + ($136))|0;
    $139 = $138 >>> 16;
    $140 = (($139) + ($127))|0;
    $141 = $140&65535;
    $142 = ((($$2258289)) + 2|0);
    HEAP16[$$2258289>>1] = $141;
    $143 = (($$2290) + -1)|0;
    $144 = ($143|0)==(0);
    if ($144) {
     break;
    } else {
     $$2258289 = $142;$$2264288 = $125;$$2290 = $143;
    }
   }
   return;
  } else {
   if ($86) {
    return;
   } else {
    $$1257293 = $1;$$1263292 = $48;$$1294 = $6;
   }
   while(1) {
    $87 = (($$1263292) + ($84<<1)|0);
    $88 = HEAP16[$87>>1]|0;
    $89 = $88&65535;
    $90 = (($$1263292) + ($85<<1)|0);
    $91 = HEAP16[$90>>1]|0;
    $92 = $91&65535;
    $93 = (($$1263292) + ($$268<<1)|0);
    $94 = HEAP16[$93>>1]|0;
    $95 = $94&65535;
    $96 = ((($$1263292)) + 2|0);
    $97 = HEAP16[$$1263292>>1]|0;
    $98 = $97&65535;
    $99 = (($92) - ($89))|0;
    $100 = (($89) - ($95))|0;
    $101 = (($95) - ($98))|0;
    $102 = Math_imul($100, $30)|0;
    $103 = Math_imul($99, $31)|0;
    $104 = Math_imul($101, $32)|0;
    $105 = (($103) + 32769)|0;
    $106 = (($105) + ($102))|0;
    $107 = (($106) + ($104))|0;
    $108 = $107 >> 16;
    $109 = (($108) + ($107))|0;
    $110 = $109 >>> 16;
    $111 = (($110) + ($98))|0;
    $112 = $111&65535;
    $113 = ((($$1257293)) + 2|0);
    HEAP16[$$1257293>>1] = $112;
    $114 = (($$1294) + -1)|0;
    $115 = ($114|0)==(0);
    if ($115) {
     break;
    } else {
     $$1257293 = $113;$$1263292 = $96;$$1294 = $114;
    }
   }
   return;
  }
 }
}
function _Eval4Inputs($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0498 = 0, $$0500 = 0, $$0502 = 0, $$0504531 = 0, $$0535 = 0, $$1499 = 0, $$1501 = 0, $$1503 = 0, $$1532 = 0, $$505 = 0, $$not = 0, $$not506 = 0, $$not508 = 0, $$not510 = 0, $$not517 = 0, $$not519 = 0, $$not521 = 0, $$not524 = 0, $$pr = 0;
 var $$pr539$pr = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge = 0, $brmerge512 = 0, $brmerge514 = 0, $brmerge516 = 0, $brmerge523 = 0, $brmerge526 = 0, $brmerge528 = 0, $brmerge530 = 0, $or$cond = 0, $or$cond507 = 0, $or$cond518 = 0, $or$cond520 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0;
 $3 = sp + 256|0;
 $4 = sp;
 $5 = HEAP16[$0>>1]|0;
 $6 = $5&65535;
 $7 = ((($2)) + 48|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = Math_imul($6, $8)|0;
 $10 = (__cmsToFixedDomain($9)|0);
 $11 = ((($0)) + 2|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = $12&65535;
 $14 = ((($2)) + 52|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = Math_imul($13, $15)|0;
 $17 = (__cmsToFixedDomain($16)|0);
 $18 = ((($0)) + 4|0);
 $19 = HEAP16[$18>>1]|0;
 $20 = $19&65535;
 $21 = ((($2)) + 56|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = Math_imul($20, $22)|0;
 $24 = (__cmsToFixedDomain($23)|0);
 $25 = ((($0)) + 6|0);
 $26 = HEAP16[$25>>1]|0;
 $27 = $26&65535;
 $28 = ((($2)) + 60|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = Math_imul($27, $29)|0;
 $31 = (__cmsToFixedDomain($30)|0);
 $32 = $10 >> 16;
 $33 = $17 >> 16;
 $34 = $24 >> 16;
 $35 = $31 >> 16;
 $36 = $10 & 65535;
 $37 = $17 & 65535;
 $38 = $24 & 65535;
 $39 = $31 & 65535;
 $40 = ((($2)) + 92|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = Math_imul($41, $32)|0;
 $43 = ($5<<16>>16)==(-1);
 $$ = $43 ? 0 : $41;
 $44 = (($42) + ($$))|0;
 $45 = ((($2)) + 88|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = Math_imul($46, $33)|0;
 $48 = ($12<<16>>16)==(-1);
 $49 = $48 ? 0 : $46;
 $50 = (($47) + ($49))|0;
 $51 = ((($2)) + 84|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = Math_imul($52, $34)|0;
 $54 = ($19<<16>>16)==(-1);
 $$505 = $54 ? 0 : $52;
 $55 = (($53) + ($$505))|0;
 $56 = ((($2)) + 80|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = Math_imul($57, $35)|0;
 $59 = ($26<<16>>16)==(-1);
 $60 = $59 ? 0 : $57;
 $61 = (($58) + ($60))|0;
 $62 = ((($2)) + 112|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = (($63) + ($42<<1)|0);
 $65 = ((($2)) + 12|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = ($66|0)==(0);
 if ($67) {
  STACKTOP = sp;return;
 }
 $68 = (($53) + ($47))|0;
 $69 = (($68) + ($58))|0;
 $$not = ($37>>>0)<($38>>>0);
 $70 = ($38>>>0)<($39>>>0);
 $or$cond = $$not | $70;
 $$not506 = ($37>>>0)<($39>>>0);
 $71 = ($39>>>0)<($38>>>0);
 $or$cond507 = $$not506 | $71;
 $$not508 = ($39>>>0)<($37>>>0);
 $brmerge = $$not | $$not508;
 $$not510 = ($38>>>0)<($37>>>0);
 $brmerge512 = $$not510 | $$not506;
 $brmerge514 = $70 | $$not508;
 $brmerge516 = $$not510 | $71;
 $72 = (($55) + ($50))|0;
 $73 = (($72) + ($61))|0;
 $74 = (($55) + ($47))|0;
 $75 = (($74) + ($61))|0;
 $76 = (($61) + ($68))|0;
 $77 = (($55) + ($50))|0;
 $78 = (($77) + ($61))|0;
 $79 = (($55) + ($47))|0;
 $80 = (($79) + ($61))|0;
 $81 = (($79) + ($58))|0;
 $82 = (($55) + ($50))|0;
 $83 = (($82) + ($58))|0;
 $84 = (($55) + ($47))|0;
 $85 = (($84) + ($58))|0;
 $86 = (($82) + ($61))|0;
 $87 = (($50) + ($53))|0;
 $88 = (($87) + ($61))|0;
 $89 = (($61) + ($68))|0;
 $90 = (($55) + ($50))|0;
 $91 = (($90) + ($61))|0;
 $92 = (($50) + ($53))|0;
 $93 = (($92) + ($58))|0;
 $94 = (($55) + ($50))|0;
 $95 = (($94) + ($61))|0;
 $96 = (($61) + ($92))|0;
 $97 = HEAP32[$65>>2]|0;
 $98 = (($50) + ($53))|0;
 $99 = (($98) + ($58))|0;
 $100 = (($55) + ($50))|0;
 $101 = (($100) + ($58))|0;
 $102 = (($100) + ($61))|0;
 $$0535 = 0;
 while(1) {
  $103 = (($69) + ($$0535))|0;
  $104 = (($64) + ($103<<1)|0);
  $105 = HEAP16[$104>>1]|0;
  $106 = $105&65535;
  do {
   if ($or$cond) {
    if (!($or$cond507)) {
     $122 = (($93) + ($$0535))|0;
     $123 = (($64) + ($122<<1)|0);
     $124 = HEAP16[$123>>1]|0;
     $125 = $124&65535;
     $126 = (($125) - ($106))|0;
     $127 = (($95) + ($$0535))|0;
     $128 = (($64) + ($127<<1)|0);
     $129 = HEAP16[$128>>1]|0;
     $130 = $129&65535;
     $131 = (($96) + ($$0535))|0;
     $132 = (($64) + ($131<<1)|0);
     $133 = HEAP16[$132>>1]|0;
     $134 = $133&65535;
     $135 = (($130) - ($134))|0;
     $136 = (($134) - ($125))|0;
     $$0498 = $136;$$0500 = $135;$$0502 = $126;
     break;
    }
    if (!($brmerge)) {
     $137 = (($88) + ($$0535))|0;
     $138 = (($64) + ($137<<1)|0);
     $139 = HEAP16[$138>>1]|0;
     $140 = $139&65535;
     $141 = (($89) + ($$0535))|0;
     $142 = (($64) + ($141<<1)|0);
     $143 = HEAP16[$142>>1]|0;
     $144 = $143&65535;
     $145 = (($140) - ($144))|0;
     $146 = (($91) + ($$0535))|0;
     $147 = (($64) + ($146<<1)|0);
     $148 = HEAP16[$147>>1]|0;
     $149 = $148&65535;
     $150 = (($149) - ($140))|0;
     $151 = (($144) - ($106))|0;
     $$0498 = $151;$$0500 = $150;$$0502 = $145;
     break;
    }
    if (!($brmerge512)) {
     $152 = (($83) + ($$0535))|0;
     $153 = (($64) + ($152<<1)|0);
     $154 = HEAP16[$153>>1]|0;
     $155 = $154&65535;
     $156 = (($85) + ($$0535))|0;
     $157 = (($64) + ($156<<1)|0);
     $158 = HEAP16[$157>>1]|0;
     $159 = $158&65535;
     $160 = (($155) - ($159))|0;
     $161 = (($159) - ($106))|0;
     $162 = (($86) + ($$0535))|0;
     $163 = (($64) + ($162<<1)|0);
     $164 = HEAP16[$163>>1]|0;
     $165 = $164&65535;
     $166 = (($165) - ($155))|0;
     $$0498 = $166;$$0500 = $161;$$0502 = $160;
     break;
    }
    if (!($brmerge514)) {
     $167 = (($78) + ($$0535))|0;
     $168 = (($64) + ($167<<1)|0);
     $169 = HEAP16[$168>>1]|0;
     $170 = $169&65535;
     $171 = (($80) + ($$0535))|0;
     $172 = (($64) + ($171<<1)|0);
     $173 = HEAP16[$172>>1]|0;
     $174 = $173&65535;
     $175 = (($170) - ($174))|0;
     $176 = (($81) + ($$0535))|0;
     $177 = (($64) + ($176<<1)|0);
     $178 = HEAP16[$177>>1]|0;
     $179 = $178&65535;
     $180 = (($179) - ($106))|0;
     $181 = (($174) - ($179))|0;
     $$0498 = $181;$$0500 = $180;$$0502 = $175;
     break;
    }
    if ($brmerge516) {
     $$0498 = 0;$$0500 = 0;$$0502 = 0;
    } else {
     $182 = (($73) + ($$0535))|0;
     $183 = (($64) + ($182<<1)|0);
     $184 = HEAP16[$183>>1]|0;
     $185 = $184&65535;
     $186 = (($75) + ($$0535))|0;
     $187 = (($64) + ($186<<1)|0);
     $188 = HEAP16[$187>>1]|0;
     $189 = $188&65535;
     $190 = (($185) - ($189))|0;
     $191 = (($76) + ($$0535))|0;
     $192 = (($64) + ($191<<1)|0);
     $193 = HEAP16[$192>>1]|0;
     $194 = $193&65535;
     $195 = (($189) - ($194))|0;
     $196 = (($194) - ($106))|0;
     $$0498 = $196;$$0500 = $195;$$0502 = $190;
    }
   } else {
    $107 = (($99) + ($$0535))|0;
    $108 = (($64) + ($107<<1)|0);
    $109 = HEAP16[$108>>1]|0;
    $110 = $109&65535;
    $111 = (($110) - ($106))|0;
    $112 = (($101) + ($$0535))|0;
    $113 = (($64) + ($112<<1)|0);
    $114 = HEAP16[$113>>1]|0;
    $115 = $114&65535;
    $116 = (($115) - ($110))|0;
    $117 = (($102) + ($$0535))|0;
    $118 = (($64) + ($117<<1)|0);
    $119 = HEAP16[$118>>1]|0;
    $120 = $119&65535;
    $121 = (($120) - ($115))|0;
    $$0498 = $121;$$0500 = $116;$$0502 = $111;
   }
  } while(0);
  $197 = Math_imul($$0502, $37)|0;
  $198 = Math_imul($$0500, $38)|0;
  $199 = (($198) + ($197))|0;
  $200 = Math_imul($$0498, $39)|0;
  $201 = (($199) + ($200))|0;
  $202 = (__cmsToFixedDomain($201)|0);
  $203 = (($202) + 32768)|0;
  $204 = $203 >>> 16;
  $205 = (($204) + ($106))|0;
  $206 = $205&65535;
  $207 = (($3) + ($$0535<<1)|0);
  HEAP16[$207>>1] = $206;
  $208 = (($$0535) + 1)|0;
  $209 = ($208>>>0)<($97>>>0);
  if ($209) {
   $$0535 = $208;
  } else {
   break;
  }
 }
 $$pr = HEAP32[$65>>2]|0;
 $210 = HEAP32[$62>>2]|0;
 $211 = (($210) + ($44<<1)|0);
 $212 = ($$pr|0)==(0);
 if ($212) {
  STACKTOP = sp;return;
 }
 $213 = (($53) + ($47))|0;
 $214 = (($213) + ($58))|0;
 $$not517 = ($37>>>0)<($38>>>0);
 $215 = ($38>>>0)<($39>>>0);
 $or$cond518 = $$not517 | $215;
 $$not519 = ($37>>>0)<($39>>>0);
 $216 = ($39>>>0)<($38>>>0);
 $or$cond520 = $$not519 | $216;
 $$not521 = ($39>>>0)<($37>>>0);
 $brmerge523 = $$not517 | $$not521;
 $$not524 = ($38>>>0)<($37>>>0);
 $brmerge526 = $$not524 | $$not519;
 $brmerge528 = $215 | $$not521;
 $brmerge530 = $$not524 | $216;
 $217 = (($55) + ($50))|0;
 $218 = (($217) + ($61))|0;
 $219 = (($55) + ($47))|0;
 $220 = (($219) + ($61))|0;
 $221 = (($61) + ($213))|0;
 $222 = (($55) + ($50))|0;
 $223 = (($222) + ($61))|0;
 $224 = (($55) + ($47))|0;
 $225 = (($224) + ($61))|0;
 $226 = (($224) + ($58))|0;
 $227 = (($55) + ($50))|0;
 $228 = (($227) + ($58))|0;
 $229 = (($55) + ($47))|0;
 $230 = (($229) + ($58))|0;
 $231 = (($227) + ($61))|0;
 $232 = (($50) + ($53))|0;
 $233 = (($232) + ($61))|0;
 $234 = (($61) + ($213))|0;
 $235 = (($55) + ($50))|0;
 $236 = (($235) + ($61))|0;
 $237 = (($50) + ($53))|0;
 $238 = (($237) + ($58))|0;
 $239 = (($55) + ($50))|0;
 $240 = (($239) + ($61))|0;
 $241 = (($61) + ($237))|0;
 $242 = HEAP32[$65>>2]|0;
 $243 = (($50) + ($53))|0;
 $244 = (($243) + ($58))|0;
 $245 = (($55) + ($50))|0;
 $246 = (($245) + ($58))|0;
 $247 = (($245) + ($61))|0;
 $$1532 = 0;
 while(1) {
  $250 = (($214) + ($$1532))|0;
  $251 = (($211) + ($250<<1)|0);
  $252 = HEAP16[$251>>1]|0;
  $253 = $252&65535;
  do {
   if ($or$cond518) {
    if (!($or$cond520)) {
     $269 = (($238) + ($$1532))|0;
     $270 = (($211) + ($269<<1)|0);
     $271 = HEAP16[$270>>1]|0;
     $272 = $271&65535;
     $273 = (($272) - ($253))|0;
     $274 = (($240) + ($$1532))|0;
     $275 = (($211) + ($274<<1)|0);
     $276 = HEAP16[$275>>1]|0;
     $277 = $276&65535;
     $278 = (($241) + ($$1532))|0;
     $279 = (($211) + ($278<<1)|0);
     $280 = HEAP16[$279>>1]|0;
     $281 = $280&65535;
     $282 = (($277) - ($281))|0;
     $283 = (($281) - ($272))|0;
     $$1499 = $283;$$1501 = $282;$$1503 = $273;
     break;
    }
    if (!($brmerge523)) {
     $284 = (($233) + ($$1532))|0;
     $285 = (($211) + ($284<<1)|0);
     $286 = HEAP16[$285>>1]|0;
     $287 = $286&65535;
     $288 = (($234) + ($$1532))|0;
     $289 = (($211) + ($288<<1)|0);
     $290 = HEAP16[$289>>1]|0;
     $291 = $290&65535;
     $292 = (($287) - ($291))|0;
     $293 = (($236) + ($$1532))|0;
     $294 = (($211) + ($293<<1)|0);
     $295 = HEAP16[$294>>1]|0;
     $296 = $295&65535;
     $297 = (($296) - ($287))|0;
     $298 = (($291) - ($253))|0;
     $$1499 = $298;$$1501 = $297;$$1503 = $292;
     break;
    }
    if (!($brmerge526)) {
     $299 = (($228) + ($$1532))|0;
     $300 = (($211) + ($299<<1)|0);
     $301 = HEAP16[$300>>1]|0;
     $302 = $301&65535;
     $303 = (($230) + ($$1532))|0;
     $304 = (($211) + ($303<<1)|0);
     $305 = HEAP16[$304>>1]|0;
     $306 = $305&65535;
     $307 = (($302) - ($306))|0;
     $308 = (($306) - ($253))|0;
     $309 = (($231) + ($$1532))|0;
     $310 = (($211) + ($309<<1)|0);
     $311 = HEAP16[$310>>1]|0;
     $312 = $311&65535;
     $313 = (($312) - ($302))|0;
     $$1499 = $313;$$1501 = $308;$$1503 = $307;
     break;
    }
    if (!($brmerge528)) {
     $314 = (($223) + ($$1532))|0;
     $315 = (($211) + ($314<<1)|0);
     $316 = HEAP16[$315>>1]|0;
     $317 = $316&65535;
     $318 = (($225) + ($$1532))|0;
     $319 = (($211) + ($318<<1)|0);
     $320 = HEAP16[$319>>1]|0;
     $321 = $320&65535;
     $322 = (($317) - ($321))|0;
     $323 = (($226) + ($$1532))|0;
     $324 = (($211) + ($323<<1)|0);
     $325 = HEAP16[$324>>1]|0;
     $326 = $325&65535;
     $327 = (($326) - ($253))|0;
     $328 = (($321) - ($326))|0;
     $$1499 = $328;$$1501 = $327;$$1503 = $322;
     break;
    }
    if ($brmerge530) {
     $$1499 = 0;$$1501 = 0;$$1503 = 0;
    } else {
     $329 = (($218) + ($$1532))|0;
     $330 = (($211) + ($329<<1)|0);
     $331 = HEAP16[$330>>1]|0;
     $332 = $331&65535;
     $333 = (($220) + ($$1532))|0;
     $334 = (($211) + ($333<<1)|0);
     $335 = HEAP16[$334>>1]|0;
     $336 = $335&65535;
     $337 = (($332) - ($336))|0;
     $338 = (($221) + ($$1532))|0;
     $339 = (($211) + ($338<<1)|0);
     $340 = HEAP16[$339>>1]|0;
     $341 = $340&65535;
     $342 = (($336) - ($341))|0;
     $343 = (($341) - ($253))|0;
     $$1499 = $343;$$1501 = $342;$$1503 = $337;
    }
   } else {
    $254 = (($244) + ($$1532))|0;
    $255 = (($211) + ($254<<1)|0);
    $256 = HEAP16[$255>>1]|0;
    $257 = $256&65535;
    $258 = (($257) - ($253))|0;
    $259 = (($246) + ($$1532))|0;
    $260 = (($211) + ($259<<1)|0);
    $261 = HEAP16[$260>>1]|0;
    $262 = $261&65535;
    $263 = (($262) - ($257))|0;
    $264 = (($247) + ($$1532))|0;
    $265 = (($211) + ($264<<1)|0);
    $266 = HEAP16[$265>>1]|0;
    $267 = $266&65535;
    $268 = (($267) - ($262))|0;
    $$1499 = $268;$$1501 = $263;$$1503 = $258;
   }
  } while(0);
  $344 = Math_imul($$1503, $37)|0;
  $345 = Math_imul($$1501, $38)|0;
  $346 = (($345) + ($344))|0;
  $347 = Math_imul($$1499, $39)|0;
  $348 = (($346) + ($347))|0;
  $349 = (__cmsToFixedDomain($348)|0);
  $350 = (($349) + 32768)|0;
  $351 = $350 >>> 16;
  $352 = (($351) + ($253))|0;
  $353 = $352&65535;
  $354 = (($4) + ($$1532<<1)|0);
  HEAP16[$354>>1] = $353;
  $355 = (($$1532) + 1)|0;
  $356 = ($355>>>0)<($242>>>0);
  if ($356) {
   $$1532 = $355;
  } else {
   break;
  }
 }
 $$pr539$pr = HEAP32[$65>>2]|0;
 $248 = ($$pr539$pr|0)==(0);
 if ($248) {
  STACKTOP = sp;return;
 }
 $249 = HEAP32[$65>>2]|0;
 $$0504531 = 0;
 while(1) {
  $357 = (($3) + ($$0504531<<1)|0);
  $358 = HEAP16[$357>>1]|0;
  $359 = $358&65535;
  $360 = (($4) + ($$0504531<<1)|0);
  $361 = HEAP16[$360>>1]|0;
  $362 = $361&65535;
  $363 = (_LinearInterp($36,$359,$362)|0);
  $364 = (($1) + ($$0504531<<1)|0);
  HEAP16[$364>>1] = $363;
  $365 = (($$0504531) + 1)|0;
  $366 = ($365>>>0)<($249>>>0);
  if ($366) {
   $$0504531 = $365;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _Eval4InputsFloat($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$050 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0.0, $9 = 0.0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1152|0;
 $3 = sp + 632|0;
 $4 = sp + 120|0;
 $5 = sp;
 $6 = ((($2)) + 112|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = +HEAPF32[$0>>2];
 $9 = (+_fclamp($8));
 $10 = ((($2)) + 48|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (+($11>>>0));
 $13 = $9 * $12;
 $14 = $13;
 $15 = (__cmsQuickFloor_205($14)|0);
 $16 = (+($15|0));
 $17 = $13 - $16;
 $18 = ((($2)) + 92|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = Math_imul($19, $15)|0;
 $21 = !($9 >= 1.0);
 $22 = $21 ? $19 : 0;
 $23 = (($20) + ($22))|0;
 dest=$5; src=$2; stop=dest+120|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $24 = ((($5)) + 48|0);
 $25 = ((($2)) + 52|0);
 ;HEAP32[$24>>2]=HEAP32[$25>>2]|0;HEAP32[$24+4>>2]=HEAP32[$25+4>>2]|0;HEAP32[$24+8>>2]=HEAP32[$25+8>>2]|0;
 $26 = (($7) + ($20<<2)|0);
 $27 = ((($5)) + 112|0);
 HEAP32[$27>>2] = $26;
 $28 = ((($0)) + 4|0);
 _TetrahedralInterpFloat($28,$3,$5);
 $29 = (($7) + ($23<<2)|0);
 HEAP32[$27>>2] = $29;
 _TetrahedralInterpFloat($28,$4,$5);
 $30 = ((($2)) + 12|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)==(0);
 if ($32) {
  STACKTOP = sp;return;
 }
 $33 = HEAP32[$30>>2]|0;
 $$050 = 0;
 while(1) {
  $34 = (($3) + ($$050<<2)|0);
  $35 = +HEAPF32[$34>>2];
  $36 = (($4) + ($$050<<2)|0);
  $37 = +HEAPF32[$36>>2];
  $38 = $37 - $35;
  $39 = $17 * $38;
  $40 = $35 + $39;
  $41 = (($1) + ($$050<<2)|0);
  HEAPF32[$41>>2] = $40;
  $42 = (($$050) + 1)|0;
  $43 = ($42>>>0)<($33>>>0);
  if ($43) {
   $$050 = $42;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _Eval5Inputs($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$042 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 640|0;
 $3 = sp + 376|0;
 $4 = sp + 120|0;
 $5 = sp;
 $6 = ((($2)) + 112|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP16[$0>>1]|0;
 $9 = $8&65535;
 $10 = ((($2)) + 48|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = Math_imul($9, $11)|0;
 $13 = (__cmsToFixedDomain($12)|0);
 $14 = $13 >> 16;
 $15 = $13 & 65535;
 $16 = ((($2)) + 96|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = Math_imul($17, $14)|0;
 $19 = ($8<<16>>16)!=(-1);
 $20 = $19&1;
 $21 = (($14) + ($20))|0;
 $22 = Math_imul($21, $17)|0;
 dest=$5; src=$2; stop=dest+120|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $23 = ((($5)) + 48|0);
 $24 = ((($2)) + 52|0);
 ;HEAP32[$23>>2]=HEAP32[$24>>2]|0;HEAP32[$23+4>>2]=HEAP32[$24+4>>2]|0;HEAP32[$23+8>>2]=HEAP32[$24+8>>2]|0;HEAP32[$23+12>>2]=HEAP32[$24+12>>2]|0;
 $25 = (($7) + ($18<<1)|0);
 $26 = ((($5)) + 112|0);
 HEAP32[$26>>2] = $25;
 $27 = ((($0)) + 2|0);
 _Eval4Inputs($27,$3,$5);
 $28 = (($7) + ($22<<1)|0);
 HEAP32[$26>>2] = $28;
 _Eval4Inputs($27,$4,$5);
 $29 = ((($2)) + 12|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)==(0);
 if ($31) {
  STACKTOP = sp;return;
 }
 $32 = HEAP32[$29>>2]|0;
 $$042 = 0;
 while(1) {
  $33 = (($3) + ($$042<<1)|0);
  $34 = HEAP16[$33>>1]|0;
  $35 = $34&65535;
  $36 = (($4) + ($$042<<1)|0);
  $37 = HEAP16[$36>>1]|0;
  $38 = $37&65535;
  $39 = (_LinearInterp($15,$35,$38)|0);
  $40 = (($1) + ($$042<<1)|0);
  HEAP16[$40>>1] = $39;
  $41 = (($$042) + 1)|0;
  $42 = ($41>>>0)<($32>>>0);
  if ($42) {
   $$042 = $41;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _Eval5InputsFloat($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$050 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0.0, $9 = 0.0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1152|0;
 $3 = sp + 632|0;
 $4 = sp + 120|0;
 $5 = sp;
 $6 = ((($2)) + 112|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = +HEAPF32[$0>>2];
 $9 = (+_fclamp($8));
 $10 = ((($2)) + 48|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (+($11>>>0));
 $13 = $9 * $12;
 $14 = $13;
 $15 = (__cmsQuickFloor_205($14)|0);
 $16 = (+($15|0));
 $17 = $13 - $16;
 $18 = ((($2)) + 96|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = Math_imul($19, $15)|0;
 $21 = !($9 >= 1.0);
 $22 = $21 ? $19 : 0;
 $23 = (($20) + ($22))|0;
 dest=$5; src=$2; stop=dest+120|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $24 = ((($5)) + 48|0);
 $25 = ((($2)) + 52|0);
 ;HEAP32[$24>>2]=HEAP32[$25>>2]|0;HEAP32[$24+4>>2]=HEAP32[$25+4>>2]|0;HEAP32[$24+8>>2]=HEAP32[$25+8>>2]|0;HEAP32[$24+12>>2]=HEAP32[$25+12>>2]|0;
 $26 = (($7) + ($20<<2)|0);
 $27 = ((($5)) + 112|0);
 HEAP32[$27>>2] = $26;
 $28 = ((($0)) + 4|0);
 _Eval4InputsFloat($28,$3,$5);
 $29 = (($7) + ($23<<2)|0);
 HEAP32[$27>>2] = $29;
 _Eval4InputsFloat($28,$4,$5);
 $30 = ((($2)) + 12|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)==(0);
 if ($32) {
  STACKTOP = sp;return;
 }
 $33 = HEAP32[$30>>2]|0;
 $$050 = 0;
 while(1) {
  $34 = (($3) + ($$050<<2)|0);
  $35 = +HEAPF32[$34>>2];
  $36 = (($4) + ($$050<<2)|0);
  $37 = +HEAPF32[$36>>2];
  $38 = $37 - $35;
  $39 = $17 * $38;
  $40 = $35 + $39;
  $41 = (($1) + ($$050<<2)|0);
  HEAPF32[$41>>2] = $40;
  $42 = (($$050) + 1)|0;
  $43 = ($42>>>0)<($33>>>0);
  if ($43) {
   $$050 = $42;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _Eval6Inputs($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$042 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 640|0;
 $3 = sp + 376|0;
 $4 = sp + 120|0;
 $5 = sp;
 $6 = ((($2)) + 112|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP16[$0>>1]|0;
 $9 = $8&65535;
 $10 = ((($2)) + 48|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = Math_imul($9, $11)|0;
 $13 = (__cmsToFixedDomain($12)|0);
 $14 = $13 >> 16;
 $15 = $13 & 65535;
 $16 = ((($2)) + 100|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = Math_imul($17, $14)|0;
 $19 = ($8<<16>>16)!=(-1);
 $20 = $19&1;
 $21 = (($14) + ($20))|0;
 $22 = Math_imul($21, $17)|0;
 dest=$5; src=$2; stop=dest+120|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $23 = ((($5)) + 48|0);
 $24 = ((($2)) + 52|0);
 ;HEAP32[$23>>2]=HEAP32[$24>>2]|0;HEAP32[$23+4>>2]=HEAP32[$24+4>>2]|0;HEAP32[$23+8>>2]=HEAP32[$24+8>>2]|0;HEAP32[$23+12>>2]=HEAP32[$24+12>>2]|0;HEAP32[$23+16>>2]=HEAP32[$24+16>>2]|0;
 $25 = (($7) + ($18<<1)|0);
 $26 = ((($5)) + 112|0);
 HEAP32[$26>>2] = $25;
 $27 = ((($0)) + 2|0);
 _Eval5Inputs($27,$3,$5);
 $28 = (($7) + ($22<<1)|0);
 HEAP32[$26>>2] = $28;
 _Eval5Inputs($27,$4,$5);
 $29 = ((($2)) + 12|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)==(0);
 if ($31) {
  STACKTOP = sp;return;
 }
 $32 = HEAP32[$29>>2]|0;
 $$042 = 0;
 while(1) {
  $33 = (($3) + ($$042<<1)|0);
  $34 = HEAP16[$33>>1]|0;
  $35 = $34&65535;
  $36 = (($4) + ($$042<<1)|0);
  $37 = HEAP16[$36>>1]|0;
  $38 = $37&65535;
  $39 = (_LinearInterp($15,$35,$38)|0);
  $40 = (($1) + ($$042<<1)|0);
  HEAP16[$40>>1] = $39;
  $41 = (($$042) + 1)|0;
  $42 = ($41>>>0)<($32>>>0);
  if ($42) {
   $$042 = $41;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _Eval6InputsFloat($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$050 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0.0, $9 = 0.0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1152|0;
 $3 = sp + 632|0;
 $4 = sp + 120|0;
 $5 = sp;
 $6 = ((($2)) + 112|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = +HEAPF32[$0>>2];
 $9 = (+_fclamp($8));
 $10 = ((($2)) + 48|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (+($11>>>0));
 $13 = $9 * $12;
 $14 = $13;
 $15 = (__cmsQuickFloor_205($14)|0);
 $16 = (+($15|0));
 $17 = $13 - $16;
 $18 = ((($2)) + 100|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = Math_imul($19, $15)|0;
 $21 = !($9 >= 1.0);
 $22 = $21 ? $19 : 0;
 $23 = (($20) + ($22))|0;
 dest=$5; src=$2; stop=dest+120|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $24 = ((($5)) + 48|0);
 $25 = ((($2)) + 52|0);
 ;HEAP32[$24>>2]=HEAP32[$25>>2]|0;HEAP32[$24+4>>2]=HEAP32[$25+4>>2]|0;HEAP32[$24+8>>2]=HEAP32[$25+8>>2]|0;HEAP32[$24+12>>2]=HEAP32[$25+12>>2]|0;HEAP32[$24+16>>2]=HEAP32[$25+16>>2]|0;
 $26 = (($7) + ($20<<2)|0);
 $27 = ((($5)) + 112|0);
 HEAP32[$27>>2] = $26;
 $28 = ((($0)) + 4|0);
 _Eval5InputsFloat($28,$3,$5);
 $29 = (($7) + ($23<<2)|0);
 HEAP32[$27>>2] = $29;
 _Eval5InputsFloat($28,$4,$5);
 $30 = ((($2)) + 12|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)==(0);
 if ($32) {
  STACKTOP = sp;return;
 }
 $33 = HEAP32[$30>>2]|0;
 $$050 = 0;
 while(1) {
  $34 = (($3) + ($$050<<2)|0);
  $35 = +HEAPF32[$34>>2];
  $36 = (($4) + ($$050<<2)|0);
  $37 = +HEAPF32[$36>>2];
  $38 = $37 - $35;
  $39 = $17 * $38;
  $40 = $35 + $39;
  $41 = (($1) + ($$050<<2)|0);
  HEAPF32[$41>>2] = $40;
  $42 = (($$050) + 1)|0;
  $43 = ($42>>>0)<($33>>>0);
  if ($43) {
   $$050 = $42;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _Eval7Inputs($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$042 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 640|0;
 $3 = sp + 376|0;
 $4 = sp + 120|0;
 $5 = sp;
 $6 = ((($2)) + 112|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP16[$0>>1]|0;
 $9 = $8&65535;
 $10 = ((($2)) + 48|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = Math_imul($9, $11)|0;
 $13 = (__cmsToFixedDomain($12)|0);
 $14 = $13 >> 16;
 $15 = $13 & 65535;
 $16 = ((($2)) + 104|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = Math_imul($17, $14)|0;
 $19 = ($8<<16>>16)!=(-1);
 $20 = $19&1;
 $21 = (($14) + ($20))|0;
 $22 = Math_imul($21, $17)|0;
 dest=$5; src=$2; stop=dest+120|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $23 = ((($5)) + 48|0);
 $24 = ((($2)) + 52|0);
 ;HEAP32[$23>>2]=HEAP32[$24>>2]|0;HEAP32[$23+4>>2]=HEAP32[$24+4>>2]|0;HEAP32[$23+8>>2]=HEAP32[$24+8>>2]|0;HEAP32[$23+12>>2]=HEAP32[$24+12>>2]|0;HEAP32[$23+16>>2]=HEAP32[$24+16>>2]|0;HEAP32[$23+20>>2]=HEAP32[$24+20>>2]|0;
 $25 = (($7) + ($18<<1)|0);
 $26 = ((($5)) + 112|0);
 HEAP32[$26>>2] = $25;
 $27 = ((($0)) + 2|0);
 _Eval6Inputs($27,$3,$5);
 $28 = (($7) + ($22<<1)|0);
 HEAP32[$26>>2] = $28;
 _Eval6Inputs($27,$4,$5);
 $29 = ((($2)) + 12|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)==(0);
 if ($31) {
  STACKTOP = sp;return;
 }
 $32 = HEAP32[$29>>2]|0;
 $$042 = 0;
 while(1) {
  $33 = (($3) + ($$042<<1)|0);
  $34 = HEAP16[$33>>1]|0;
  $35 = $34&65535;
  $36 = (($4) + ($$042<<1)|0);
  $37 = HEAP16[$36>>1]|0;
  $38 = $37&65535;
  $39 = (_LinearInterp($15,$35,$38)|0);
  $40 = (($1) + ($$042<<1)|0);
  HEAP16[$40>>1] = $39;
  $41 = (($$042) + 1)|0;
  $42 = ($41>>>0)<($32>>>0);
  if ($42) {
   $$042 = $41;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _Eval7InputsFloat($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$050 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0.0, $9 = 0.0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1152|0;
 $3 = sp + 632|0;
 $4 = sp + 120|0;
 $5 = sp;
 $6 = ((($2)) + 112|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = +HEAPF32[$0>>2];
 $9 = (+_fclamp($8));
 $10 = ((($2)) + 48|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (+($11>>>0));
 $13 = $9 * $12;
 $14 = $13;
 $15 = (__cmsQuickFloor_205($14)|0);
 $16 = (+($15|0));
 $17 = $13 - $16;
 $18 = ((($2)) + 104|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = Math_imul($19, $15)|0;
 $21 = !($9 >= 1.0);
 $22 = $21 ? $19 : 0;
 $23 = (($20) + ($22))|0;
 dest=$5; src=$2; stop=dest+120|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $24 = ((($5)) + 48|0);
 $25 = ((($2)) + 52|0);
 ;HEAP32[$24>>2]=HEAP32[$25>>2]|0;HEAP32[$24+4>>2]=HEAP32[$25+4>>2]|0;HEAP32[$24+8>>2]=HEAP32[$25+8>>2]|0;HEAP32[$24+12>>2]=HEAP32[$25+12>>2]|0;HEAP32[$24+16>>2]=HEAP32[$25+16>>2]|0;HEAP32[$24+20>>2]=HEAP32[$25+20>>2]|0;
 $26 = (($7) + ($20<<2)|0);
 $27 = ((($5)) + 112|0);
 HEAP32[$27>>2] = $26;
 $28 = ((($0)) + 4|0);
 _Eval6InputsFloat($28,$3,$5);
 $29 = (($7) + ($23<<2)|0);
 HEAP32[$27>>2] = $29;
 _Eval6InputsFloat($28,$4,$5);
 $30 = ((($2)) + 12|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)==(0);
 if ($32) {
  STACKTOP = sp;return;
 }
 $33 = HEAP32[$30>>2]|0;
 $$050 = 0;
 while(1) {
  $34 = (($3) + ($$050<<2)|0);
  $35 = +HEAPF32[$34>>2];
  $36 = (($4) + ($$050<<2)|0);
  $37 = +HEAPF32[$36>>2];
  $38 = $37 - $35;
  $39 = $17 * $38;
  $40 = $35 + $39;
  $41 = (($1) + ($$050<<2)|0);
  HEAPF32[$41>>2] = $40;
  $42 = (($$050) + 1)|0;
  $43 = ($42>>>0)<($33>>>0);
  if ($43) {
   $$050 = $42;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _Eval8Inputs($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$042 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 640|0;
 $3 = sp + 376|0;
 $4 = sp + 120|0;
 $5 = sp;
 $6 = ((($2)) + 112|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP16[$0>>1]|0;
 $9 = $8&65535;
 $10 = ((($2)) + 48|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = Math_imul($9, $11)|0;
 $13 = (__cmsToFixedDomain($12)|0);
 $14 = $13 >> 16;
 $15 = $13 & 65535;
 $16 = ((($2)) + 108|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = Math_imul($17, $14)|0;
 $19 = ($8<<16>>16)!=(-1);
 $20 = $19&1;
 $21 = (($14) + ($20))|0;
 $22 = Math_imul($21, $17)|0;
 dest=$5; src=$2; stop=dest+120|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $23 = ((($5)) + 48|0);
 $24 = ((($2)) + 52|0);
 ;HEAP32[$23>>2]=HEAP32[$24>>2]|0;HEAP32[$23+4>>2]=HEAP32[$24+4>>2]|0;HEAP32[$23+8>>2]=HEAP32[$24+8>>2]|0;HEAP32[$23+12>>2]=HEAP32[$24+12>>2]|0;HEAP32[$23+16>>2]=HEAP32[$24+16>>2]|0;HEAP32[$23+20>>2]=HEAP32[$24+20>>2]|0;HEAP32[$23+24>>2]=HEAP32[$24+24>>2]|0;
 $25 = (($7) + ($18<<1)|0);
 $26 = ((($5)) + 112|0);
 HEAP32[$26>>2] = $25;
 $27 = ((($0)) + 2|0);
 _Eval7Inputs($27,$3,$5);
 $28 = (($7) + ($22<<1)|0);
 HEAP32[$26>>2] = $28;
 _Eval7Inputs($27,$4,$5);
 $29 = ((($2)) + 12|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)==(0);
 if ($31) {
  STACKTOP = sp;return;
 }
 $32 = HEAP32[$29>>2]|0;
 $$042 = 0;
 while(1) {
  $33 = (($3) + ($$042<<1)|0);
  $34 = HEAP16[$33>>1]|0;
  $35 = $34&65535;
  $36 = (($4) + ($$042<<1)|0);
  $37 = HEAP16[$36>>1]|0;
  $38 = $37&65535;
  $39 = (_LinearInterp($15,$35,$38)|0);
  $40 = (($1) + ($$042<<1)|0);
  HEAP16[$40>>1] = $39;
  $41 = (($$042) + 1)|0;
  $42 = ($41>>>0)<($32>>>0);
  if ($42) {
   $$042 = $41;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _Eval8InputsFloat($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$050 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0.0, $9 = 0.0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1152|0;
 $3 = sp + 632|0;
 $4 = sp + 120|0;
 $5 = sp;
 $6 = ((($2)) + 112|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = +HEAPF32[$0>>2];
 $9 = (+_fclamp($8));
 $10 = ((($2)) + 48|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (+($11>>>0));
 $13 = $9 * $12;
 $14 = $13;
 $15 = (__cmsQuickFloor_205($14)|0);
 $16 = (+($15|0));
 $17 = $13 - $16;
 $18 = ((($2)) + 108|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = Math_imul($19, $15)|0;
 $21 = !($9 >= 1.0);
 $22 = $21 ? $19 : 0;
 $23 = (($20) + ($22))|0;
 dest=$5; src=$2; stop=dest+120|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $24 = ((($5)) + 48|0);
 $25 = ((($2)) + 52|0);
 ;HEAP32[$24>>2]=HEAP32[$25>>2]|0;HEAP32[$24+4>>2]=HEAP32[$25+4>>2]|0;HEAP32[$24+8>>2]=HEAP32[$25+8>>2]|0;HEAP32[$24+12>>2]=HEAP32[$25+12>>2]|0;HEAP32[$24+16>>2]=HEAP32[$25+16>>2]|0;HEAP32[$24+20>>2]=HEAP32[$25+20>>2]|0;HEAP32[$24+24>>2]=HEAP32[$25+24>>2]|0;
 $26 = (($7) + ($20<<2)|0);
 $27 = ((($5)) + 112|0);
 HEAP32[$27>>2] = $26;
 $28 = ((($0)) + 4|0);
 _Eval7InputsFloat($28,$3,$5);
 $29 = (($7) + ($23<<2)|0);
 HEAP32[$27>>2] = $29;
 _Eval7InputsFloat($28,$4,$5);
 $30 = ((($2)) + 12|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)==(0);
 if ($32) {
  STACKTOP = sp;return;
 }
 $33 = HEAP32[$30>>2]|0;
 $$050 = 0;
 while(1) {
  $34 = (($3) + ($$050<<2)|0);
  $35 = +HEAPF32[$34>>2];
  $36 = (($4) + ($$050<<2)|0);
  $37 = +HEAPF32[$36>>2];
  $38 = $37 - $35;
  $39 = $17 * $38;
  $40 = $35 + $39;
  $41 = (($1) + ($$050<<2)|0);
  HEAPF32[$41>>2] = $40;
  $42 = (($$050) + 1)|0;
  $43 = ($42>>>0)<($33>>>0);
  if ($43) {
   $$050 = $42;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _fclamp($0) {
 $0 = +$0;
 var $$ = 0.0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0 < 9.9999997171806853E-10;
 if ($1) {
  return +0;
 } else {
  $2 = (___FLOAT_BITS($0)|0);
  $3 = $2 & 2147483647;
  $4 = ($3>>>0)>(2139095040);
  $5 = $0 > 1.0;
  $6 = $5 ? 1.0 : $0;
  $$ = $4 ? 0.0 : $6;
  return (+$$);
 }
 return +(0.0);
}
function __cmsQuickFloor_205($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0 + 103079215104.0;
 HEAPF64[tempDoublePtr>>3] = $1;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = $2 >> 16;
 return ($4|0);
}
function ___FLOAT_BITS($0) {
 $0 = +$0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (HEAPF32[tempDoublePtr>>2]=$0,HEAP32[tempDoublePtr>>2]|0);
 return ($1|0);
}
function __cmsToFixedDomain($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + 32767)|0;
 $2 = (($1|0) / 65535)&-1;
 $3 = (($2) + ($0))|0;
 return ($3|0);
}
function _LinearInterp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (($2) - ($1))|0;
 $4 = Math_imul($3, $0)|0;
 $5 = (($4) + 32768)|0;
 $6 = $5 >>> 16;
 $7 = (($6) + ($1))|0;
 $8 = $7&65535;
 return ($8|0);
}
function __cmsComputeInterpParamsEx($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$048 = 0, $$050 = 0, $$149 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond54 = 0, $load_initial = 0, $store_forwarded = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0;
 var $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $6 = ($2>>>0)>(8);
 if ($6) {
  HEAP32[$vararg_buffer>>2] = $2;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 8;
  _cmsSignalError($0,2,26988,$vararg_buffer);
  $$048 = 0;
  STACKTOP = sp;return ($$048|0);
 }
 $7 = (__cmsMallocZero($0,120)|0);
 $8 = ($7|0)==(0|0);
 if ($8) {
  $$048 = 0;
  STACKTOP = sp;return ($$048|0);
 }
 $9 = ((($7)) + 4|0);
 HEAP32[$9>>2] = $5;
 $10 = ((($7)) + 8|0);
 HEAP32[$10>>2] = $2;
 $11 = ((($7)) + 12|0);
 HEAP32[$11>>2] = $3;
 $12 = ((($7)) + 112|0);
 HEAP32[$12>>2] = $4;
 HEAP32[$7>>2] = $0;
 $13 = ($2|0)==(0);
 if ($13) {
  $14 = HEAP32[$11>>2]|0;
  $15 = ((($7)) + 80|0);
  HEAP32[$15>>2] = $14;
 } else {
  $16 = ((($7)) + 16|0);
  $17 = ((($7)) + 48|0);
  $$050 = 0;
  while(1) {
   $18 = (($1) + ($$050<<2)|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = (($16) + ($$050<<2)|0);
   HEAP32[$20>>2] = $19;
   $21 = HEAP32[$18>>2]|0;
   $22 = (($21) + -1)|0;
   $23 = (($17) + ($$050<<2)|0);
   HEAP32[$23>>2] = $22;
   $24 = (($$050) + 1)|0;
   $exitcond54 = ($24|0)==($2|0);
   if ($exitcond54) {
    break;
   } else {
    $$050 = $24;
   }
  }
  $25 = HEAP32[$11>>2]|0;
  $26 = ((($7)) + 80|0);
  HEAP32[$26>>2] = $25;
  $27 = ($2>>>0)>(1);
  if ($27) {
   $load_initial = HEAP32[$26>>2]|0;
   $$149 = 1;$store_forwarded = $load_initial;
   while(1) {
    $28 = (($2) - ($$149))|0;
    $29 = (($1) + ($28<<2)|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = Math_imul($30, $store_forwarded)|0;
    $32 = (($26) + ($$149<<2)|0);
    HEAP32[$32>>2] = $31;
    $33 = (($$149) + 1)|0;
    $exitcond = ($33|0)==($2|0);
    if ($exitcond) {
     break;
    } else {
     $$149 = $33;$store_forwarded = $31;
    }
   }
  }
 }
 $34 = (__cmsSetInterpolationRoutine($0,$7)|0);
 $35 = ($34|0)==(0);
 if (!($35)) {
  $$048 = $7;
  STACKTOP = sp;return ($$048|0);
 }
 HEAP32[$vararg_buffer2>>2] = $2;
 $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
 HEAP32[$vararg_ptr5>>2] = $3;
 _cmsSignalError($0,8,25709,$vararg_buffer2);
 __cmsFree($0,$7);
 $$048 = 0;
 STACKTOP = sp;return ($$048|0);
}
function __cmsComputeInterpParams($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $6 = sp;
 HEAP32[$6>>2] = $1;
 $7 = ((($6)) + 4|0);
 HEAP32[$7>>2] = $1;
 $8 = ((($6)) + 8|0);
 HEAP32[$8>>2] = $1;
 $9 = ((($6)) + 12|0);
 HEAP32[$9>>2] = $1;
 $10 = ((($6)) + 16|0);
 HEAP32[$10>>2] = $1;
 $11 = ((($6)) + 20|0);
 HEAP32[$11>>2] = $1;
 $12 = ((($6)) + 24|0);
 HEAP32[$12>>2] = $1;
 $13 = ((($6)) + 28|0);
 HEAP32[$13>>2] = $1;
 $14 = (__cmsComputeInterpParamsEx($0,$6,$2,$3,$4,$5)|0);
 STACKTOP = sp;return ($14|0);
}
function __cmsFreeInterpParams($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = HEAP32[$0>>2]|0;
 __cmsFree($2,$0);
 return;
}
function _cmsOpenIOhandlerFromNULL($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__cmsMallocZero($0,292)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = (__cmsMallocZero($0,4)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  __cmsFree($0,$1);
  $$0 = 0;
  return ($$0|0);
 } else {
  HEAP32[$3>>2] = 0;
  $5 = ((($1)) + 4|0);
  HEAP32[$5>>2] = $0;
  HEAP32[$1>>2] = $3;
  $6 = ((($1)) + 8|0);
  HEAP32[$6>>2] = 0;
  $7 = ((($1)) + 12|0);
  HEAP32[$7>>2] = 0;
  $8 = ((($1)) + 16|0);
  HEAP8[$8>>0] = 0;
  $9 = ((($1)) + 272|0);
  HEAP32[$9>>2] = 177;
  $10 = ((($1)) + 276|0);
  HEAP32[$10>>2] = 4;
  $11 = ((($1)) + 280|0);
  HEAP32[$11>>2] = 3;
  $12 = ((($1)) + 284|0);
  HEAP32[$12>>2] = 4;
  $13 = ((($1)) + 288|0);
  HEAP32[$13>>2] = 41;
  $$0 = $1;
  return ($$0|0);
 }
 return (0)|0;
}
function _NULLRead($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP32[$0>>2]|0;
 $5 = Math_imul($3, $2)|0;
 $6 = HEAP32[$4>>2]|0;
 $7 = (($6) + ($5))|0;
 HEAP32[$4>>2] = $7;
 return ($3|0);
}
function _NULLSeek($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 HEAP32[$2>>2] = $1;
 return 1;
}
function _NULLClose($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 __cmsFree($3,$1);
 $4 = HEAP32[$2>>2]|0;
 __cmsFree($4,$0);
 return 1;
}
function _NULLTell($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function _NULLWrite($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + ($1))|0;
 HEAP32[$3>>2] = $5;
 $6 = ((($0)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5>>>0)>($7>>>0);
 if (!($8)) {
  return 1;
 }
 HEAP32[$6>>2] = $5;
 return 1;
}
function _cmsOpenIOhandlerFromMem($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$060 = 0, $$1 = 0, $$sink = 0, $$sink67 = 0, $$sink70 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $4 = ($3|0)==(0|0);
 if ($4) {
  ___assert_fail((25753|0),(25780|0),243,(25808|0));
  // unreachable;
 }
 $5 = (__cmsMallocZero($0,292)|0);
 $6 = ($5|0)==(0|0);
 if ($6) {
  $$060 = 0;
  STACKTOP = sp;return ($$060|0);
 }
 $7 = HEAP8[$3>>0]|0;
 $8 = $7 << 24 >> 24;
 L7: do {
  switch ($8|0) {
  case 114:  {
   $9 = (__cmsMallocZero($0,16)|0);
   $10 = ($9|0)==(0|0);
   if ($10) {
    $$1 = $9;$29 = 0;
   } else {
    $11 = ($1|0)==(0|0);
    if ($11) {
     _cmsSignalError($0,5,25832,$vararg_buffer);
     $$1 = $9;$29 = $9;
     break L7;
    }
    $12 = (__cmsMalloc($0,$2)|0);
    HEAP32[$9>>2] = $12;
    $13 = ($12|0)==(0|0);
    if (!($13)) {
     _memmove(($12|0),($1|0),($2|0))|0;
     $$0 = $9;$$sink = $2;$$sink67 = 1;$$sink70 = $9;
     label = 14;
     break L7;
    }
    __cmsFree($0,$9);
    __cmsFree($0,$5);
    HEAP32[$vararg_buffer1>>2] = $2;
    _cmsSignalError($0,5,25872,$vararg_buffer1);
    $$060 = 0;
    STACKTOP = sp;return ($$060|0);
   }
   break;
  }
  case 119:  {
   $14 = (__cmsMallocZero($0,16)|0);
   $15 = ($14|0)==(0|0);
   if ($15) {
    $$1 = $14;$29 = 0;
   } else {
    HEAP32[$14>>2] = $1;
    $$0 = $14;$$sink = 0;$$sink67 = 0;$$sink70 = $14;
    label = 14;
   }
   break;
  }
  default: {
   HEAP32[$vararg_buffer3>>2] = $8;
   _cmsSignalError($0,8,25912,$vararg_buffer3);
   $$060 = 0;
   STACKTOP = sp;return ($$060|0);
  }
  }
 } while(0);
 if ((label|0) == 14) {
  $16 = ((($$sink70)) + 12|0);
  HEAP32[$16>>2] = $$sink67;
  $17 = ((($$sink70)) + 4|0);
  HEAP32[$17>>2] = $2;
  $18 = ((($$sink70)) + 8|0);
  HEAP32[$18>>2] = 0;
  $19 = ((($5)) + 12|0);
  HEAP32[$19>>2] = $$sink;
  $20 = ((($5)) + 4|0);
  HEAP32[$20>>2] = $0;
  HEAP32[$5>>2] = $$0;
  $21 = ((($5)) + 8|0);
  HEAP32[$21>>2] = 0;
  $22 = ((($5)) + 16|0);
  HEAP8[$22>>0] = 0;
  $23 = ((($5)) + 272|0);
  HEAP32[$23>>2] = 178;
  $24 = ((($5)) + 276|0);
  HEAP32[$24>>2] = 5;
  $25 = ((($5)) + 280|0);
  HEAP32[$25>>2] = 5;
  $26 = ((($5)) + 284|0);
  HEAP32[$26>>2] = 6;
  $27 = ((($5)) + 288|0);
  HEAP32[$27>>2] = 42;
  $$060 = $5;
  STACKTOP = sp;return ($$060|0);
 }
 $28 = ($$1|0)==(0|0);
 if (!($28)) {
  __cmsFree($0,$29);
 }
 __cmsFree($0,$5);
 $$060 = 0;
 STACKTOP = sp;return ($$060|0);
}
function _MemoryRead($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $4 = HEAP32[$0>>2]|0;
 $5 = Math_imul($3, $2)|0;
 $6 = ((($4)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + ($5))|0;
 $9 = ((($4)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8>>>0)>($10>>>0);
 if ($11) {
  $12 = (($10) - ($7))|0;
  $13 = ((($0)) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  HEAP32[$vararg_buffer>>2] = $12;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $5;
  _cmsSignalError($14,5,25978,$vararg_buffer);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $15 = HEAP32[$4>>2]|0;
  $16 = (($15) + ($7)|0);
  _memmove(($1|0),($16|0),($5|0))|0;
  $17 = HEAP32[$6>>2]|0;
  $18 = (($17) + ($5))|0;
  HEAP32[$6>>2] = $18;
  $$0 = $3;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _MemorySeek($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4>>>0)<($1>>>0);
 if ($5) {
  $6 = ((($0)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  _cmsSignalError($7,6,25937,$vararg_buffer);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $8 = ((($2)) + 8|0);
  HEAP32[$8>>2] = $1;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _MemoryClose($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if (!($4)) {
  $5 = HEAP32[$1>>2]|0;
  $6 = ($5|0)==(0|0);
  if (!($6)) {
   $7 = ((($0)) + 4|0);
   $8 = HEAP32[$7>>2]|0;
   __cmsFree($8,$5);
  }
 }
 $9 = ((($0)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 __cmsFree($10,$1);
 $11 = HEAP32[$9>>2]|0;
 __cmsFree($11,$0);
 return 1;
}
function _MemoryTell($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = ((($1)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $$0 = $4;
 return ($$0|0);
}
function _MemoryWrite($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = 0;
  return ($$0|0);
 }
 $5 = ((($3)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + ($1))|0;
 $8 = ((($3)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7>>>0)>($9>>>0);
 $11 = (($9) - ($6))|0;
 $$ = $10 ? $11 : $1;
 $12 = ($$|0)==(0);
 if ($12) {
  $$0 = 1;
  return ($$0|0);
 }
 $13 = HEAP32[$3>>2]|0;
 $14 = (($13) + ($6)|0);
 _memmove(($14|0),($2|0),($$|0))|0;
 $15 = HEAP32[$5>>2]|0;
 $16 = (($15) + ($$))|0;
 HEAP32[$5>>2] = $16;
 $17 = ((($0)) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($16>>>0)>($18>>>0);
 if (!($19)) {
  $$0 = 1;
  return ($$0|0);
 }
 HEAP32[$17>>2] = $16;
 $$0 = 1;
 return ($$0|0);
}
function _cmsOpenIOhandlerFromFile($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$052 = 0, $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $3 = ($1|0)==(0|0);
 if ($3) {
  ___assert_fail((26044|0),(25780|0),379,(26069|0));
  // unreachable;
 }
 $4 = ($2|0)==(0|0);
 if ($4) {
  ___assert_fail((25753|0),(25780|0),380,(26069|0));
  // unreachable;
 }
 $5 = (__cmsMallocZero($0,292)|0);
 $6 = ($5|0)==(0|0);
 if ($6) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = HEAP8[$2>>0]|0;
 $8 = $7 << 24 >> 24;
 switch ($8|0) {
 case 114:  {
  $9 = (_fopen($1,26094)|0);
  $10 = ($9|0)==(0|0);
  if ($10) {
   __cmsFree($0,$5);
   HEAP32[$vararg_buffer>>2] = $1;
   _cmsSignalError($0,1,26097,$vararg_buffer);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $11 = (_cmsfilelength($9)|0);
  $12 = ($11|0)<(0);
  if ($12) {
   (_fclose($9)|0);
   __cmsFree($0,$5);
   HEAP32[$vararg_buffer1>>2] = $1;
   _cmsSignalError($0,1,26117,$vararg_buffer1);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $$052 = $9;$$sink = $11;
  }
  break;
 }
 case 119:  {
  $13 = (_fopen($1,26146)|0);
  $14 = ($13|0)==(0|0);
  if ($14) {
   __cmsFree($0,$5);
   HEAP32[$vararg_buffer4>>2] = $1;
   _cmsSignalError($0,1,26149,$vararg_buffer4);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $$052 = $13;$$sink = 0;
  }
  break;
 }
 default: {
  __cmsFree($0,$5);
  $15 = HEAP8[$2>>0]|0;
  $16 = $15 << 24 >> 24;
  HEAP32[$vararg_buffer7>>2] = $16;
  _cmsSignalError($0,1,25912,$vararg_buffer7);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 }
 $17 = ((($5)) + 12|0);
 HEAP32[$17>>2] = $$sink;
 $18 = ((($5)) + 4|0);
 HEAP32[$18>>2] = $0;
 HEAP32[$5>>2] = $$052;
 $19 = ((($5)) + 8|0);
 HEAP32[$19>>2] = 0;
 $20 = ((($5)) + 16|0);
 (_strncpy($20,$1,255)|0);
 $21 = ((($5)) + 271|0);
 HEAP8[$21>>0] = 0;
 $22 = ((($5)) + 272|0);
 HEAP32[$22>>2] = 179;
 $23 = ((($5)) + 276|0);
 HEAP32[$23>>2] = 6;
 $24 = ((($5)) + 280|0);
 HEAP32[$24>>2] = 7;
 $25 = ((($5)) + 284|0);
 HEAP32[$25>>2] = 8;
 $26 = ((($5)) + 288|0);
 HEAP32[$26>>2] = 43;
 $$0 = $5;
 STACKTOP = sp;return ($$0|0);
}
function _FileRead($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $4 = HEAP32[$0>>2]|0;
 $5 = (_fread($1,$2,$3,$4)|0);
 $6 = ($5|0)==($3|0);
 if ($6) {
  $$0 = $5;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = Math_imul($3, $2)|0;
 $8 = Math_imul($5, $2)|0;
 $9 = ((($0)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 HEAP32[$vararg_buffer>>2] = $8;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $7;
 _cmsSignalError($10,1,26242,$vararg_buffer);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _FileSeek($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = HEAP32[$0>>2]|0;
 $3 = (_fseek($2,$1,0)|0);
 $4 = ($3|0)==(0);
 if ($4) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 _cmsSignalError($6,1,26206,$vararg_buffer);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _FileClose($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = (_fclose($1)|0);
 $3 = ($2|0)==(0);
 if (!($3)) {
  $$0 = 0;
  return ($$0|0);
 }
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 __cmsFree($5,$0);
 $$0 = 1;
 return ($$0|0);
}
function _FileTell($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $1 = HEAP32[$0>>2]|0;
 $2 = (_ftell($1)|0);
 $3 = ($2|0)==(-1);
 if (!($3)) {
  $$0 = $2;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 _cmsSignalError($5,1,26170,$vararg_buffer);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _FileWrite($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1|0)==(0);
 if ($3) {
  $$0 = 1;
  return ($$0|0);
 }
 $4 = ((($0)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + ($1))|0;
 HEAP32[$4>>2] = $6;
 $7 = HEAP32[$0>>2]|0;
 $8 = (_fwrite($2,$1,1,$7)|0);
 $9 = ($8|0)==(1);
 $10 = $9&1;
 $$0 = $10;
 return ($$0|0);
}
function _cmsCloseIOhandler($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 280|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (FUNCTION_TABLE_ii[$2 & 15]($0)|0);
 return ($3|0);
}
function _cmsCreateProfilePlaceholder($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 $2 = (_time((0|0))|0);
 HEAP32[$1>>2] = $2;
 $3 = (__cmsMallocZero($0,2928)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = ((($3)) + 4|0);
 HEAP32[$5>>2] = $0;
 $6 = ((($3)) + 116|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($3)) + 52|0);
 HEAP32[$7>>2] = 34603008;
 $8 = ((($3)) + 8|0);
 $9 = (_gmtime(($1|0))|0);
 _memmove(($8|0),($9|0),44)|0;
 $10 = (__cmsCreateMutex($0)|0);
 $11 = ((($3)) + 2924|0);
 HEAP32[$11>>2] = $10;
 $$0 = $3;
 STACKTOP = sp;return ($$0|0);
}
function _cmsGetProfileContextID($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
 } else {
  $2 = ((($0)) + 4|0);
  $3 = HEAP32[$2>>2]|0;
  $$0 = $3;
 }
 return ($$0|0);
}
function __cmsSearchTag($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$014 = 0, $$mux = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $brmerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 $$014 = $1;
 while(1) {
  $4 = (_SearchOneTag($0,$$014)|0);
  $5 = ($4|0)<(0);
  $brmerge = $5 | $3;
  $$mux = $5 ? -1 : $4;
  if ($brmerge) {
   $$0 = $$mux;
   label = 4;
   break;
  }
  $6 = (((($0)) + 520|0) + ($4<<2)|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(0);
  if ($8) {
   $$0 = $4;
   label = 4;
   break;
  } else {
   $$014 = $7;
  }
 }
 if ((label|0) == 4) {
  return ($$0|0);
 }
 return (0)|0;
}
function _SearchOneTag($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$07 = 0, $$08 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 116|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)>(0);
 if ($4) {
  $$08 = 0;
 } else {
  $$07 = -1;
  return ($$07|0);
 }
 while(1) {
  $5 = (((($0)) + 120|0) + ($$08<<2)|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==($1|0);
  if ($7) {
   $$07 = $$08;
   label = 4;
   break;
  }
  $8 = (($$08) + 1)|0;
  $9 = HEAP32[$2>>2]|0;
  $10 = ($8|0)<($9|0);
  if ($10) {
   $$08 = $8;
  } else {
   $$07 = -1;
   label = 4;
   break;
  }
 }
 if ((label|0) == 4) {
  return ($$07|0);
 }
 return (0)|0;
}
function _cmsIsTag($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$lobit = 0, $$lobit$not = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__cmsSearchTag($0,$1,0)|0);
 $$lobit = $2 >>> 31;
 $$lobit$not = $$lobit ^ 1;
 return ($$lobit$not|0);
}
function __cmsReadHeader($0) {
 $0 = $0|0;
 var $$ = 0, $$0 = 0, $$05254 = 0, $$05355 = 0, $$lcssa = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $vararg_buffer = 0;
 var $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0;
 $vararg_buffer1 = sp + 136|0;
 $vararg_buffer = sp + 128|0;
 $1 = sp + 144|0;
 $2 = sp;
 $3 = sp + 140|0;
 $4 = HEAP32[$0>>2]|0;
 $5 = ((($4)) + 272|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (FUNCTION_TABLE_iiiii[$6 & 255]($4,$2,128,1)|0);
 $8 = ($7|0)==(1);
 if (!($8)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $9 = ((($2)) + 36|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (__cmsAdjustEndianess32($10)|0);
 $12 = ($11|0)==(1633907568);
 if (!($12)) {
  $13 = ((($0)) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  _cmsSignalError($14,11,26296,$vararg_buffer);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = ((($2)) + 12|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (__cmsAdjustEndianess32($16)|0);
 $18 = ((($0)) + 56|0);
 HEAP32[$18>>2] = $17;
 $19 = ((($2)) + 16|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (__cmsAdjustEndianess32($20)|0);
 $22 = ((($0)) + 60|0);
 HEAP32[$22>>2] = $21;
 $23 = ((($2)) + 20|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (__cmsAdjustEndianess32($24)|0);
 $26 = ((($0)) + 64|0);
 HEAP32[$26>>2] = $25;
 $27 = ((($2)) + 64|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (__cmsAdjustEndianess32($28)|0);
 $30 = ((($0)) + 68|0);
 HEAP32[$30>>2] = $29;
 $31 = ((($2)) + 44|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (__cmsAdjustEndianess32($32)|0);
 $34 = ((($0)) + 72|0);
 HEAP32[$34>>2] = $33;
 $35 = ((($2)) + 48|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = (__cmsAdjustEndianess32($36)|0);
 $38 = ((($0)) + 76|0);
 HEAP32[$38>>2] = $37;
 $39 = ((($2)) + 52|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = (__cmsAdjustEndianess32($40)|0);
 $42 = ((($0)) + 80|0);
 HEAP32[$42>>2] = $41;
 $43 = ((($2)) + 80|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = (__cmsAdjustEndianess32($44)|0);
 $46 = ((($0)) + 96|0);
 HEAP32[$46>>2] = $45;
 $47 = ((($0)) + 88|0);
 $48 = ((($2)) + 56|0);
 __cmsAdjustEndianess64($47,$48);
 $49 = ((($2)) + 8|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = (__validatedVersion($50)|0);
 $52 = (__cmsAdjustEndianess32($51)|0);
 $53 = ((($0)) + 52|0);
 HEAP32[$53>>2] = $52;
 $54 = HEAP32[$2>>2]|0;
 $55 = (__cmsAdjustEndianess32($54)|0);
 $56 = HEAP32[$0>>2]|0;
 $57 = ((($56)) + 12|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = ($55>>>0)<($58>>>0);
 $$ = $59 ? $55 : $58;
 $60 = ((($2)) + 24|0);
 $61 = ((($0)) + 8|0);
 __cmsDecodeDateTimeNumber($60,$61);
 $62 = ((($0)) + 100|0);
 $63 = ((($2)) + 84|0);
 ;HEAP32[$62>>2]=HEAP32[$63>>2]|0;HEAP32[$62+4>>2]=HEAP32[$63+4>>2]|0;HEAP32[$62+8>>2]=HEAP32[$63+8>>2]|0;HEAP32[$62+12>>2]=HEAP32[$63+12>>2]|0;
 $64 = (__cmsReadUInt32Number($4,$3)|0);
 $65 = ($64|0)==(0);
 if ($65) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $66 = HEAP32[$3>>2]|0;
 $67 = ($66>>>0)>(100);
 if ($67) {
  $68 = ((($0)) + 4|0);
  $69 = HEAP32[$68>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $66;
  _cmsSignalError($69,2,26334,$vararg_buffer1);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $70 = ((($0)) + 116|0);
 HEAP32[$70>>2] = 0;
 $71 = ((($1)) + 4|0);
 $72 = ((($1)) + 8|0);
 $73 = HEAP32[$3>>2]|0;
 $74 = ($73|0)==(0);
 if ($74) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 } else {
  $$05355 = 0;
 }
 while(1) {
  $75 = (__cmsReadUInt32Number($4,$1)|0);
  $76 = ($75|0)==(0);
  if ($76) {
   $$0 = 0;
   label = 20;
   break;
  }
  $77 = (__cmsReadUInt32Number($4,$71)|0);
  $78 = ($77|0)==(0);
  if ($78) {
   $$0 = 0;
   label = 20;
   break;
  }
  $79 = (__cmsReadUInt32Number($4,$72)|0);
  $80 = ($79|0)==(0);
  if ($80) {
   $$0 = 0;
   label = 20;
   break;
  }
  $81 = HEAP32[$71>>2]|0;
  $82 = HEAP32[$72>>2]|0;
  $83 = (($82) + ($81))|0;
  $84 = ($83>>>0)>($$>>>0);
  $85 = ($83>>>0)<($81>>>0);
  $or$cond = $84 | $85;
  if (!($or$cond)) {
   $86 = HEAP32[$1>>2]|0;
   $87 = HEAP32[$70>>2]|0;
   $88 = (((($0)) + 120|0) + ($87<<2)|0);
   HEAP32[$88>>2] = $86;
   $89 = HEAP32[$70>>2]|0;
   $90 = (((($0)) + 1320|0) + ($89<<2)|0);
   HEAP32[$90>>2] = $81;
   $91 = HEAP32[$70>>2]|0;
   $92 = (((($0)) + 920|0) + ($91<<2)|0);
   HEAP32[$92>>2] = $82;
   $93 = HEAP32[$70>>2]|0;
   $94 = ($93|0)==(0);
   if ($94) {
    $$lcssa = 0;
   } else {
    $95 = HEAP32[$71>>2]|0;
    $96 = HEAP32[$72>>2]|0;
    $$05254 = 0;$104 = $93;
    while(1) {
     $97 = (((($0)) + 1320|0) + ($$05254<<2)|0);
     $98 = HEAP32[$97>>2]|0;
     $99 = ($98|0)==($95|0);
     if ($99) {
      $100 = (((($0)) + 920|0) + ($$05254<<2)|0);
      $101 = HEAP32[$100>>2]|0;
      $102 = ($101|0)==($96|0);
      if ($102) {
       $103 = (((($0)) + 520|0) + ($104<<2)|0);
       $105 = (((($0)) + 120|0) + ($$05254<<2)|0);
       $106 = HEAP32[$105>>2]|0;
       HEAP32[$103>>2] = $106;
      }
     }
     $107 = (($$05254) + 1)|0;
     $108 = HEAP32[$70>>2]|0;
     $109 = ($107>>>0)<($108>>>0);
     if ($109) {
      $$05254 = $107;$104 = $108;
     } else {
      $$lcssa = $108;
      break;
     }
    }
   }
   $110 = (($$lcssa) + 1)|0;
   HEAP32[$70>>2] = $110;
  }
  $111 = (($$05355) + 1)|0;
  $112 = HEAP32[$3>>2]|0;
  $113 = ($111>>>0)<($112>>>0);
  if ($113) {
   $$05355 = $111;
  } else {
   $$0 = 1;
   label = 20;
   break;
  }
 }
 if ((label|0) == 20) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function __validatedVersion($0) {
 $0 = $0|0;
 var $$011 = 0, $$14 = 0, $$op = 0, $$sroa$0$0$insert$ext = 0, $$sroa$0$0$insert$insert = 0, $$sroa$4$0$extract$shift = 0, $$sroa$4$0$insert$shift = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$sroa$4$0$extract$shift = $0 >>> 8;
 $1 = $0 & 254;
 $2 = ($1>>>0)>(9);
 $3 = $$sroa$4$0$extract$shift & 240;
 $4 = $$sroa$4$0$extract$shift & 15;
 $5 = ($3>>>0)<(144);
 $$011 = $5 ? $3 : 144;
 $6 = ($4>>>0)<(9);
 $$14 = $6 ? $4 : 9;
 $7 = $$011 | $$14;
 $$sroa$4$0$insert$shift = $7 << 8;
 $$op = $0 & 255;
 $$sroa$0$0$insert$ext = $2 ? 9 : $$op;
 $$sroa$0$0$insert$insert = $$sroa$4$0$insert$shift | $$sroa$0$0$insert$ext;
 return ($$sroa$0$0$insert$insert|0);
}
function __cmsWriteHeader($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$ = 0, $$0$lcssa = 0, $$03744 = 0, $$039 = 0, $$045 = 0, $$13841 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0;
 $2 = sp;
 $3 = sp + 128|0;
 $4 = (__cmsAdjustEndianess32($1)|0);
 HEAP32[$2>>2] = $4;
 $5 = (__cmsAdjustEndianess32(1818455411)|0);
 $6 = ((($2)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = ((($0)) + 52|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (__cmsAdjustEndianess32($8)|0);
 $10 = ((($2)) + 8|0);
 HEAP32[$10>>2] = $9;
 $11 = ((($0)) + 56|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (__cmsAdjustEndianess32($12)|0);
 $14 = ((($2)) + 12|0);
 HEAP32[$14>>2] = $13;
 $15 = ((($0)) + 60|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (__cmsAdjustEndianess32($16)|0);
 $18 = ((($2)) + 16|0);
 HEAP32[$18>>2] = $17;
 $19 = ((($0)) + 64|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (__cmsAdjustEndianess32($20)|0);
 $22 = ((($2)) + 20|0);
 HEAP32[$22>>2] = $21;
 $23 = ((($2)) + 24|0);
 $24 = ((($0)) + 8|0);
 __cmsEncodeDateTimeNumber($23,$24);
 $25 = (__cmsAdjustEndianess32(1633907568)|0);
 $26 = ((($2)) + 36|0);
 HEAP32[$26>>2] = $25;
 $27 = (__cmsAdjustEndianess32(1095782476)|0);
 $28 = ((($2)) + 40|0);
 HEAP32[$28>>2] = $27;
 $29 = ((($0)) + 72|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (__cmsAdjustEndianess32($30)|0);
 $32 = ((($2)) + 44|0);
 HEAP32[$32>>2] = $31;
 $33 = ((($0)) + 76|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = (__cmsAdjustEndianess32($34)|0);
 $36 = ((($2)) + 48|0);
 HEAP32[$36>>2] = $35;
 $37 = ((($0)) + 80|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = (__cmsAdjustEndianess32($38)|0);
 $40 = ((($2)) + 52|0);
 HEAP32[$40>>2] = $39;
 $41 = ((($2)) + 56|0);
 $42 = ((($0)) + 88|0);
 __cmsAdjustEndianess64($41,$42);
 $43 = ((($0)) + 68|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = (__cmsAdjustEndianess32($44)|0);
 $46 = ((($2)) + 64|0);
 HEAP32[$46>>2] = $45;
 $47 = (_cmsD50_XYZ()|0);
 $48 = +HEAPF64[$47>>3];
 $49 = (__cmsDoubleTo15Fixed16($48)|0);
 $50 = (__cmsAdjustEndianess32($49)|0);
 $51 = ((($2)) + 68|0);
 HEAP32[$51>>2] = $50;
 $52 = (_cmsD50_XYZ()|0);
 $53 = ((($52)) + 8|0);
 $54 = +HEAPF64[$53>>3];
 $55 = (__cmsDoubleTo15Fixed16($54)|0);
 $56 = (__cmsAdjustEndianess32($55)|0);
 $57 = ((($2)) + 72|0);
 HEAP32[$57>>2] = $56;
 $58 = (_cmsD50_XYZ()|0);
 $59 = ((($58)) + 16|0);
 $60 = +HEAPF64[$59>>3];
 $61 = (__cmsDoubleTo15Fixed16($60)|0);
 $62 = (__cmsAdjustEndianess32($61)|0);
 $63 = ((($2)) + 76|0);
 HEAP32[$63>>2] = $62;
 $64 = (__cmsAdjustEndianess32(1818455411)|0);
 $65 = ((($2)) + 80|0);
 HEAP32[$65>>2] = $64;
 $66 = ((($2)) + 100|0);
 ;HEAP32[$66>>2]=0|0;HEAP32[$66+4>>2]=0|0;HEAP32[$66+8>>2]=0|0;HEAP32[$66+12>>2]=0|0;HEAP32[$66+16>>2]=0|0;HEAP32[$66+20>>2]=0|0;HEAP32[$66+24>>2]=0|0;
 $67 = ((($2)) + 84|0);
 $68 = ((($0)) + 100|0);
 ;HEAP32[$67>>2]=HEAP32[$68>>2]|0;HEAP32[$67+4>>2]=HEAP32[$68+4>>2]|0;HEAP32[$67+8>>2]=HEAP32[$68+8>>2]|0;HEAP32[$67+12>>2]=HEAP32[$68+12>>2]|0;
 $69 = HEAP32[$0>>2]|0;
 $70 = ((($69)) + 288|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = (FUNCTION_TABLE_iiii[$71 & 63]($69,128,$2)|0);
 $73 = ($72|0)==(0);
 if ($73) {
  $$039 = 0;
  STACKTOP = sp;return ($$039|0);
 }
 $74 = ((($0)) + 116|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = ($75|0)==(0);
 if ($76) {
  $$0$lcssa = 0;
 } else {
  $77 = HEAP32[$74>>2]|0;
  $$03744 = 0;$$045 = 0;
  while(1) {
   $78 = (((($0)) + 120|0) + ($$03744<<2)|0);
   $79 = HEAP32[$78>>2]|0;
   $not$ = ($79|0)!=(0);
   $80 = $not$&1;
   $$0$ = (($80) + ($$045))|0;
   $81 = (($$03744) + 1)|0;
   $82 = ($81>>>0)<($77>>>0);
   if ($82) {
    $$03744 = $81;$$045 = $$0$;
   } else {
    $$0$lcssa = $$0$;
    break;
   }
  }
 }
 $83 = HEAP32[$0>>2]|0;
 $84 = (__cmsWriteUInt32Number($83,$$0$lcssa)|0);
 $85 = ($84|0)==(0);
 if ($85) {
  $$039 = 0;
  STACKTOP = sp;return ($$039|0);
 }
 $86 = HEAP32[$74>>2]|0;
 $87 = ($86|0)==(0);
 if ($87) {
  $$039 = 1;
  STACKTOP = sp;return ($$039|0);
 }
 $88 = ((($3)) + 4|0);
 $89 = ((($3)) + 8|0);
 $$13841 = 0;
 while(1) {
  $90 = (((($0)) + 120|0) + ($$13841<<2)|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = ($91|0)==(0);
  if (!($92)) {
   $93 = (__cmsAdjustEndianess32($91)|0);
   HEAP32[$3>>2] = $93;
   $94 = (((($0)) + 1320|0) + ($$13841<<2)|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = (__cmsAdjustEndianess32($95)|0);
   HEAP32[$88>>2] = $96;
   $97 = (((($0)) + 920|0) + ($$13841<<2)|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = (__cmsAdjustEndianess32($98)|0);
   HEAP32[$89>>2] = $99;
   $100 = HEAP32[$0>>2]|0;
   $101 = ((($100)) + 288|0);
   $102 = HEAP32[$101>>2]|0;
   $103 = (FUNCTION_TABLE_iiii[$102 & 63]($100,12,$3)|0);
   $104 = ($103|0)==(0);
   if ($104) {
    $$039 = 0;
    label = 11;
    break;
   }
  }
  $105 = (($$13841) + 1)|0;
  $106 = HEAP32[$74>>2]|0;
  $107 = ($105>>>0)<($106>>>0);
  if ($107) {
   $$13841 = $105;
  } else {
   $$039 = 1;
   label = 11;
   break;
  }
 }
 if ((label|0) == 11) {
  STACKTOP = sp;return ($$039|0);
 }
 return (0)|0;
}
function _cmsGetHeaderRenderingIntent($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 68|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function _cmsSetHeaderRenderingIntent($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 68|0);
 HEAP32[$2>>2] = $1;
 return;
}
function _cmsGetHeaderManufacturer($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function _cmsGetHeaderModel($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 80|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function _cmsGetHeaderAttributes($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 88|0);
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = $1;
 $10 = $9;
 HEAP32[$10>>2] = $5;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = $8;
 return;
}
function _cmsGetHeaderProfileID($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 100|0);
 _memmove(($1|0),($2|0),16)|0;
 return;
}
function _cmsGetPCS($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 64|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function _cmsSetPCS($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 64|0);
 HEAP32[$2>>2] = $1;
 return;
}
function _cmsGetColorSpace($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 60|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function _cmsSetColorSpace($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 60|0);
 HEAP32[$2>>2] = $1;
 return;
}
function _cmsGetDeviceClass($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 56|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function _cmsSetDeviceClass($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 56|0);
 HEAP32[$2>>2] = $1;
 return;
}
function _cmsGetEncodedICCversion($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 52|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function _cmsSetProfileVersion($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1 * 100.0;
 $3 = $2 + 0.5;
 $4 = (+Math_floor((+$3)));
 $5 = (~~(($4))>>>0);
 $6 = (_BaseToBase($5,10,16)|0);
 $7 = $6 << 16;
 $8 = ((($0)) + 52|0);
 HEAP32[$8>>2] = $7;
 return;
}
function _BaseToBase($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$01926 = 0, $$02024 = 0, $$02024$in = 0, $$02125 = 0, $$023 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $3 = sp;
 $4 = ($0|0)==(0);
 if ($4) {
  $$0$lcssa = 0;
  STACKTOP = sp;return ($$0$lcssa|0);
 } else {
  $$01926 = 0;$$02125 = $0;
 }
 while(1) {
  $6 = (($$02125>>>0) % ($1>>>0))&-1;
  $7 = $6&255;
  $8 = (($3) + ($$01926)|0);
  HEAP8[$8>>0] = $7;
  $9 = (($$02125>>>0) / ($1>>>0))&-1;
  $10 = (($$01926) + 1)|0;
  $11 = ($$02125>>>0)>=($1>>>0);
  $12 = ($10|0)<(100);
  $13 = $11 & $12;
  if ($13) {
   $$01926 = $10;$$02125 = $9;
  } else {
   break;
  }
 }
 $5 = ($$01926|0)>(-1);
 if ($5) {
  $$02024$in = $10;$$023 = 0;
 } else {
  $$0$lcssa = 0;
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 while(1) {
  $$02024 = (($$02024$in) + -1)|0;
  $14 = Math_imul($$023, $2)|0;
  $15 = (($3) + ($$02024)|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = $16 << 24 >> 24;
  $18 = (($17) + ($14))|0;
  $19 = ($$02024$in|0)>(1);
  if ($19) {
   $$02024$in = $$02024;$$023 = $18;
  } else {
   $$0$lcssa = $18;
   break;
  }
 }
 STACKTOP = sp;return ($$0$lcssa|0);
}
function _cmsGetProfileVersion($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 52|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 >>> 16;
 $4 = (_BaseToBase($3,16,10)|0);
 $5 = (+($4>>>0));
 $6 = $5 / 100.0;
 return (+$6);
}
function _cmsCloseProfile($0) {
 $0 = $0|0;
 var $$0 = 0, $$03739 = 0, $$038 = 0, $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = sp;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = ((($0)) + 2920|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  $$038 = 1;
 } else {
  HEAP32[$3>>2] = 0;
  $6 = HEAP32[$0>>2]|0;
  $7 = ((($6)) + 16|0);
  $8 = (_cmsSaveProfileToFile($0,$7)|0);
  $9 = $8 & 1;
  $$038 = $9;
 }
 $10 = ((($0)) + 116|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0);
 if (!($12)) {
  $13 = ((($0)) + 2120|0);
  $14 = ((($0)) + 2520|0);
  $15 = ((($0)) + 4|0);
  $16 = ((($0)) + 4|0);
  $17 = ((($1)) + 20|0);
  $18 = ((($0)) + 52|0);
  $19 = ((($1)) + 24|0);
  $20 = ((($1)) + 16|0);
  $$03739 = 0;
  while(1) {
   $21 = (($13) + ($$03739<<2)|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($22|0)==(0|0);
   do {
    if (!($23)) {
     $24 = (($14) + ($$03739<<2)|0);
     $25 = HEAP32[$24>>2]|0;
     $26 = ($25|0)==(0|0);
     if ($26) {
      $31 = HEAP32[$15>>2]|0;
      __cmsFree($31,$22);
      break;
     } else {
      ;HEAP32[$1>>2]=HEAP32[$25>>2]|0;HEAP32[$1+4>>2]=HEAP32[$25+4>>2]|0;HEAP32[$1+8>>2]=HEAP32[$25+8>>2]|0;HEAP32[$1+12>>2]=HEAP32[$25+12>>2]|0;HEAP32[$1+16>>2]=HEAP32[$25+16>>2]|0;
      $27 = HEAP32[$16>>2]|0;
      HEAP32[$17>>2] = $27;
      $28 = HEAP32[$18>>2]|0;
      HEAP32[$19>>2] = $28;
      $29 = HEAP32[$20>>2]|0;
      $30 = HEAP32[$21>>2]|0;
      FUNCTION_TABLE_vii[$29 & 63]($1,$30);
      break;
     }
    }
   } while(0);
   $32 = (($$03739) + 1)|0;
   $33 = HEAP32[$10>>2]|0;
   $34 = ($32>>>0)<($33>>>0);
   if ($34) {
    $$03739 = $32;
   } else {
    break;
   }
  }
 }
 $35 = HEAP32[$0>>2]|0;
 $36 = ($35|0)==(0|0);
 if ($36) {
  $$1 = $$038;
 } else {
  $37 = (_cmsCloseIOhandler($35)|0);
  $38 = $37 & $$038;
  $$1 = $38;
 }
 $39 = ((($0)) + 4|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ((($0)) + 2924|0);
 $42 = HEAP32[$41>>2]|0;
 __cmsDestroyMutex($40,$42);
 $43 = HEAP32[$39>>2]|0;
 __cmsFree($43,$0);
 $$0 = $$1;
 STACKTOP = sp;return ($$0|0);
}
function _cmsSaveProfileToFile($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_cmsGetProfileContextID($0)|0);
 $3 = (_cmsOpenIOhandlerFromFile($2,$1,26353)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = 0;
  return ($$0|0);
 }
 $5 = (_cmsSaveProfileToIOhandler($0,$3)|0);
 $6 = ($5|0)!=(0);
 $7 = $6&1;
 $8 = (_cmsCloseIOhandler($3)|0);
 $9 = $7 & $8;
 $10 = ($9|0)==(0);
 if (!($10)) {
  $$0 = $9;
  return ($$0|0);
 }
 (_remove($1)|0);
 $$0 = 0;
 return ($$0|0);
}
function _cmsSaveProfileToIOhandler($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2928|0;
 $2 = sp;
 $3 = ($0|0)==(0|0);
 if ($3) {
  ___assert_fail((26355|0),(25780|0),1323,(26380|0));
  // unreachable;
 }
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 2924|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (__cmsLockMutex($5,$7)|0);
 $9 = ($8|0)==(0);
 if ($9) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 _memcpy(($2|0),($0|0),2928)|0;
 $10 = (_cmsGetProfileContextID($0)|0);
 $11 = (_cmsOpenIOhandlerFromNULL($10)|0);
 HEAP32[$0>>2] = $11;
 $12 = ($11|0)==(0|0);
 if ($12) {
  $13 = HEAP32[$4>>2]|0;
  $14 = HEAP32[$6>>2]|0;
  __cmsUnlockMutex($13,$14);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = (__cmsWriteHeader($0,0)|0);
 $16 = ($15|0)==(0);
 do {
  if (!($16)) {
   $17 = (_SaveTags($0,$2)|0);
   $18 = ($17|0)==(0);
   if (!($18)) {
    $19 = ((($11)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($1|0)==(0|0);
    if (!($21)) {
     HEAP32[$0>>2] = $1;
     _SetLinks($0);
     $22 = (__cmsWriteHeader($0,$20)|0);
     $23 = ($22|0)==(0);
     if ($23) {
      break;
     }
     $24 = (_SaveTags($0,$2)|0);
     $25 = ($24|0)==(0);
     if ($25) {
      break;
     }
    }
    _memcpy(($0|0),($2|0),2928)|0;
    $26 = (_cmsCloseIOhandler($11)|0);
    $27 = ($26|0)==(0);
    $$ = $27 ? 0 : $20;
    $28 = HEAP32[$4>>2]|0;
    $29 = HEAP32[$6>>2]|0;
    __cmsUnlockMutex($28,$29);
    $$0 = $$;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 (_cmsCloseIOhandler($11)|0);
 _memcpy(($0|0),($2|0),2928)|0;
 $30 = HEAP32[$4>>2]|0;
 $31 = HEAP32[$6>>2]|0;
 __cmsUnlockMutex($30,$31);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _SaveTags($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0105111 = 0, $$0106 = 0, $$3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $not$ = 0, $or$cond = 0, $vararg_buffer = 0;
 var $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = sp + 12|0;
 $3 = sp + 40|0;
 $4 = HEAP32[$0>>2]|0;
 $5 = (+_cmsGetProfileVersion($0));
 $6 = ((($0)) + 116|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0);
 if ($8) {
  $$3 = 1;
  STACKTOP = sp;return ($$3|0);
 }
 $9 = ((($4)) + 8|0);
 $10 = ($1|0)==(0|0);
 $11 = ((($0)) + 4|0);
 $12 = ((($4)) + 288|0);
 $13 = ((($0)) + 4|0);
 $14 = ((($2)) + 20|0);
 $15 = ((($0)) + 52|0);
 $16 = ((($2)) + 24|0);
 $17 = ((($2)) + 8|0);
 $18 = ((($4)) + 288|0);
 $$0105111 = 0;
 L4: while(1) {
  $19 = (((($0)) + 120|0) + ($$0105111<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==(0);
  do {
   if (!($21)) {
    $22 = (((($0)) + 520|0) + ($$0105111<<2)|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ($23|0)==(0);
    if ($24) {
     $25 = HEAP32[$9>>2]|0;
     $26 = (((($0)) + 1320|0) + ($$0105111<<2)|0);
     HEAP32[$26>>2] = $25;
     $27 = (((($0)) + 2120|0) + ($$0105111<<2)|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = ($28|0)==(0|0);
     if ($29) {
      $30 = ($25|0)==(0);
      $or$cond = $10 | $30;
      if ($or$cond) {
       break;
      }
      $31 = (((($1)) + 920|0) + ($$0105111<<2)|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = (((($1)) + 1320|0) + ($$0105111<<2)|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = HEAP32[$1>>2]|0;
      $36 = ((($35)) + 276|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = (FUNCTION_TABLE_iii[$37 & 15]($35,$34)|0);
      $39 = ($38|0)==(0);
      if ($39) {
       $$3 = 0;
       label = 25;
       break L4;
      }
      $40 = HEAP32[$11>>2]|0;
      $41 = (__cmsMalloc($40,$32)|0);
      $42 = ($41|0)==(0|0);
      if ($42) {
       $$3 = 0;
       label = 25;
       break L4;
      }
      $43 = HEAP32[$1>>2]|0;
      $44 = ((($43)) + 272|0);
      $45 = HEAP32[$44>>2]|0;
      $46 = (FUNCTION_TABLE_iiiii[$45 & 255]($43,$41,$32,1)|0);
      $47 = ($46|0)==(1);
      if (!($47)) {
       $$3 = 0;
       label = 25;
       break L4;
      }
      $48 = HEAP32[$12>>2]|0;
      $49 = (FUNCTION_TABLE_iiii[$48 & 63]($4,$32,$41)|0);
      $50 = ($49|0)==(0);
      if ($50) {
       $$3 = 0;
       label = 25;
       break L4;
      }
      $51 = HEAP32[$11>>2]|0;
      __cmsFree($51,$41);
      $52 = HEAP32[$9>>2]|0;
      $53 = (($52) - ($25))|0;
      $54 = (((($0)) + 920|0) + ($$0105111<<2)|0);
      HEAP32[$54>>2] = $53;
      $55 = (__cmsWriteAlignment($4)|0);
      $not$ = ($55|0)==(0);
      if ($not$) {
       $$3 = 0;
       label = 25;
       break L4;
      } else {
       break;
      }
     }
     $56 = (((($0)) + 1720|0) + ($$0105111<<2)|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = ($57|0)==(0);
     if ($58) {
      $64 = HEAP32[$13>>2]|0;
      $65 = (__cmsGetTagDescriptor($64,$20)|0);
      $66 = ($65|0)==(0|0);
      if ($66) {
       break;
      }
      $67 = ((($65)) + 88|0);
      $68 = HEAP32[$67>>2]|0;
      $69 = ($68|0)==(0|0);
      if ($69) {
       $71 = ((($65)) + 8|0);
       $72 = HEAP32[$71>>2]|0;
       $$0106 = $72;
      } else {
       $70 = (FUNCTION_TABLE_idi[$68 & 7]($5,$28)|0);
       $$0106 = $70;
      }
      $73 = HEAP32[$13>>2]|0;
      $74 = (__cmsGetTagTypeHandler($73,$$0106)|0);
      $75 = ($74|0)==(0|0);
      if ($75) {
       $76 = HEAP32[$13>>2]|0;
       $77 = HEAP32[$19>>2]|0;
       HEAP32[$vararg_buffer>>2] = $77;
       _cmsSignalError($76,3,26406,$vararg_buffer);
       break;
      }
      $78 = HEAP32[$74>>2]|0;
      $79 = (__cmsWriteTypeBase($4,$78)|0);
      $80 = ($79|0)==(0);
      if ($80) {
       $$3 = 0;
       label = 25;
       break L4;
      }
      ;HEAP32[$2>>2]=HEAP32[$74>>2]|0;HEAP32[$2+4>>2]=HEAP32[$74+4>>2]|0;HEAP32[$2+8>>2]=HEAP32[$74+8>>2]|0;HEAP32[$2+12>>2]=HEAP32[$74+12>>2]|0;HEAP32[$2+16>>2]=HEAP32[$74+16>>2]|0;
      $81 = HEAP32[$13>>2]|0;
      HEAP32[$14>>2] = $81;
      $82 = HEAP32[$15>>2]|0;
      HEAP32[$16>>2] = $82;
      $83 = HEAP32[$17>>2]|0;
      $84 = HEAP32[$65>>2]|0;
      $85 = (FUNCTION_TABLE_iiiii[$83 & 255]($2,$4,$28,$84)|0);
      $86 = ($85|0)==(0);
      if ($86) {
       label = 22;
       break L4;
      }
     } else {
      $59 = HEAP32[$18>>2]|0;
      $60 = (((($0)) + 920|0) + ($$0105111<<2)|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = (FUNCTION_TABLE_iiii[$59 & 63]($4,$61,$28)|0);
      $63 = ($62|0)==(1);
      if (!($63)) {
       $$3 = 0;
       label = 25;
       break L4;
      }
     }
     $88 = HEAP32[$9>>2]|0;
     $89 = (($88) - ($25))|0;
     $90 = (((($0)) + 920|0) + ($$0105111<<2)|0);
     HEAP32[$90>>2] = $89;
     $91 = (__cmsWriteAlignment($4)|0);
     $92 = ($91|0)==(0);
     if ($92) {
      $$3 = 0;
      label = 25;
      break L4;
     }
    }
   }
  } while(0);
  $93 = (($$0105111) + 1)|0;
  $94 = HEAP32[$6>>2]|0;
  $95 = ($93>>>0)<($94>>>0);
  if ($95) {
   $$0105111 = $93;
  } else {
   $$3 = 1;
   label = 25;
   break;
  }
 }
 if ((label|0) == 22) {
  __cmsTagSignature2String($3,$78);
  $87 = HEAP32[$13>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $3;
  _cmsSignalError($87,7,26439,$vararg_buffer1);
  $$3 = 0;
  STACKTOP = sp;return ($$3|0);
 }
 else if ((label|0) == 25) {
  STACKTOP = sp;return ($$3|0);
 }
 return (0)|0;
}
function _SetLinks($0) {
 $0 = $0|0;
 var $$01 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 116|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  return;
 } else {
  $$01 = 0;
 }
 while(1) {
  $4 = (((($0)) + 520|0) + ($$01<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0);
  if (!($6)) {
   $7 = (__cmsSearchTag($0,$5,0)|0);
   $8 = ($7|0)>(-1);
   if ($8) {
    $9 = (((($0)) + 920|0) + ($$01<<2)|0);
    $10 = (((($0)) + 920|0) + ($7<<2)|0);
    $11 = (((($0)) + 1320|0) + ($$01<<2)|0);
    $12 = (((($0)) + 1320|0) + ($7<<2)|0);
    $13 = HEAP32[$12>>2]|0;
    HEAP32[$11>>2] = $13;
    $14 = HEAP32[$10>>2]|0;
    HEAP32[$9>>2] = $14;
   }
  }
  $15 = (($$01) + 1)|0;
  $16 = HEAP32[$1>>2]|0;
  $17 = ($15>>>0)<($16>>>0);
  if ($17) {
   $$01 = $15;
  } else {
   break;
  }
 }
 return;
}
function _cmsOpenProfileFromMemTHR($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_cmsCreateProfilePlaceholder($0)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = 0;
  return ($$0|0);
 }
 $5 = (_cmsOpenIOhandlerFromMem($0,$1,$2,26464)|0);
 HEAP32[$3>>2] = $5;
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  $7 = (__cmsReadHeader($3)|0);
  $8 = ($7|0)==(0);
  if (!($8)) {
   $$0 = $3;
   return ($$0|0);
  }
 }
 (_cmsCloseProfile($3)|0);
 $$0 = 0;
 return ($$0|0);
}
function _cmsOpenProfileFromMem($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_cmsOpenProfileFromMemTHR(0,$0,$1)|0);
 return ($2|0);
}
function _cmsReadTag($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = sp + 32|0;
 $3 = sp + 28|0;
 $4 = sp + 60|0;
 $5 = HEAP32[$0>>2]|0;
 $6 = ((($0)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($0)) + 2924|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (__cmsLockMutex($7,$9)|0);
 $11 = ($10|0)==(0);
 if ($11) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $12 = (__cmsSearchTag($0,$1,1)|0);
 $13 = ($12|0)<(0);
 do {
  if (!($13)) {
   $14 = ((($0)) + 2120|0);
   $15 = (($14) + ($12<<2)|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ($16|0)==(0|0);
   if (!($17)) {
    $18 = ((($0)) + 2520|0);
    $19 = (($18) + ($12<<2)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==(0|0);
    if ($21) {
     break;
    }
    $22 = HEAP32[$20>>2]|0;
    $23 = ($22|0)==(0);
    if ($23) {
     break;
    }
    $24 = HEAP32[$6>>2]|0;
    $25 = (__cmsGetTagDescriptor($24,$1)|0);
    $26 = ($25|0)==(0|0);
    if ($26) {
     break;
    }
    $27 = (_IsTypeSupported($25,$22)|0);
    $28 = ($27|0)==(0);
    if ($28) {
     break;
    }
    $29 = ((($0)) + 1720|0);
    $30 = (($29) + ($12<<2)|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = ($31|0)==(0);
    if (!($32)) {
     break;
    }
    $33 = HEAP32[$6>>2]|0;
    $34 = HEAP32[$8>>2]|0;
    __cmsUnlockMutex($33,$34);
    $35 = HEAP32[$15>>2]|0;
    $$0 = $35;
    STACKTOP = sp;return ($$0|0);
   }
   $36 = ((($0)) + 920|0);
   $37 = (($36) + ($12<<2)|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = ($38>>>0)<(8);
   if (!($39)) {
    $40 = ((($0)) + 1320|0);
    $41 = (($40) + ($12<<2)|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = ((($5)) + 276|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = (FUNCTION_TABLE_iii[$44 & 15]($5,$42)|0);
    $46 = ($45|0)==(0);
    if (!($46)) {
     $47 = HEAP32[$6>>2]|0;
     $48 = (__cmsGetTagDescriptor($47,$1)|0);
     $49 = ($48|0)==(0|0);
     if ($49) {
      __cmsTagSignature2String($4,$1);
      $50 = HEAP32[$6>>2]|0;
      HEAP32[$vararg_buffer>>2] = $4;
      _cmsSignalError($50,8,26466,$vararg_buffer);
      break;
     }
     $51 = (__cmsReadTypeBase($5)|0);
     $52 = ($51|0)==(0);
     if (!($52)) {
      $53 = (_IsTypeSupported($48,$51)|0);
      $54 = ($53|0)==(0);
      if (!($54)) {
       $55 = HEAP32[$6>>2]|0;
       $56 = (__cmsGetTagTypeHandler($55,$51)|0);
       $57 = ($56|0)==(0|0);
       if (!($57)) {
        $58 = (($38) + -8)|0;
        ;HEAP32[$2>>2]=HEAP32[$56>>2]|0;HEAP32[$2+4>>2]=HEAP32[$56+4>>2]|0;HEAP32[$2+8>>2]=HEAP32[$56+8>>2]|0;HEAP32[$2+12>>2]=HEAP32[$56+12>>2]|0;HEAP32[$2+16>>2]=HEAP32[$56+16>>2]|0;
        $59 = ((($0)) + 2520|0);
        $60 = (($59) + ($12<<2)|0);
        HEAP32[$60>>2] = $56;
        $61 = HEAP32[$6>>2]|0;
        $62 = ((($2)) + 20|0);
        HEAP32[$62>>2] = $61;
        $63 = ((($0)) + 52|0);
        $64 = HEAP32[$63>>2]|0;
        $65 = ((($2)) + 24|0);
        HEAP32[$65>>2] = $64;
        $66 = ((($2)) + 4|0);
        $67 = HEAP32[$66>>2]|0;
        $68 = (FUNCTION_TABLE_iiiii[$67 & 255]($2,$5,$3,$58)|0);
        HEAP32[$15>>2] = $68;
        $69 = ($68|0)==(0|0);
        if ($69) {
         __cmsTagSignature2String($4,$1);
         $70 = HEAP32[$6>>2]|0;
         HEAP32[$vararg_buffer1>>2] = $4;
         _cmsSignalError($70,12,26495,$vararg_buffer1);
         break;
        }
        $71 = HEAP32[$3>>2]|0;
        $72 = HEAP32[$48>>2]|0;
        $73 = ($71>>>0)<($72>>>0);
        if ($73) {
         __cmsTagSignature2String($4,$1);
         $74 = HEAP32[$6>>2]|0;
         $75 = HEAP32[$48>>2]|0;
         $76 = HEAP32[$3>>2]|0;
         HEAP32[$vararg_buffer4>>2] = $4;
         $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
         HEAP32[$vararg_ptr7>>2] = $75;
         $vararg_ptr8 = ((($vararg_buffer4)) + 8|0);
         HEAP32[$vararg_ptr8>>2] = $76;
         _cmsSignalError($74,12,26514,$vararg_buffer4);
        }
        $77 = HEAP32[$6>>2]|0;
        $78 = HEAP32[$8>>2]|0;
        __cmsUnlockMutex($77,$78);
        $79 = HEAP32[$15>>2]|0;
        $$0 = $79;
        STACKTOP = sp;return ($$0|0);
       }
      }
     }
    }
   }
  }
 } while(0);
 $80 = HEAP32[$6>>2]|0;
 $81 = HEAP32[$8>>2]|0;
 __cmsUnlockMutex($80,$81);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _IsTypeSupported($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$011 = 0, $$012 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3>>>0)<(20);
 $$ = $4 ? $3 : 20;
 $5 = ($$|0)==(0);
 if ($5) {
  $$011 = 0;
  return ($$011|0);
 } else {
  $$012 = 0;
 }
 while(1) {
  $8 = (((($0)) + 8|0) + ($$012<<2)|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==($1|0);
  $7 = (($$012) + 1)|0;
  if ($10) {
   $$011 = 1;
   label = 4;
   break;
  }
  $6 = ($7>>>0)<($$>>>0);
  if ($6) {
   $$012 = $7;
  } else {
   $$011 = 0;
   label = 4;
   break;
  }
 }
 if ((label|0) == 4) {
  return ($$011|0);
 }
 return (0)|0;
}
function __cmsGetTagTrueType($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__cmsSearchTag($0,$1,1)|0);
 $3 = ($2|0)<(0);
 if ($3) {
  $$0 = 0;
  return ($$0|0);
 }
 $4 = ((($0)) + 2520|0);
 $5 = (($4) + ($2<<2)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$6>>2]|0;
 $$0 = $7;
 return ($$0|0);
}
function _cmsWriteTag($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$062 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr12 = 0, $vararg_ptr4 = 0, $vararg_ptr8 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $vararg_buffer9 = sp + 24|0;
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $3 = sp + 36|0;
 $4 = sp + 32|0;
 $5 = sp + 69|0;
 $6 = sp + 64|0;
 $7 = ((($0)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 2924|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (__cmsLockMutex($8,$10)|0);
 $12 = ($11|0)==(0);
 if ($12) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $13 = ($2|0)==(0|0);
 do {
  if ($13) {
   $14 = (__cmsSearchTag($0,$1,0)|0);
   HEAP32[$4>>2] = $14;
   $15 = ($14|0)>(-1);
   if ($15) {
    __cmsDeleteTagByPos($0,$14);
    $16 = ((($0)) + 120|0);
    $17 = HEAP32[$4>>2]|0;
    $18 = (($16) + ($17<<2)|0);
    HEAP32[$18>>2] = 0;
    $19 = HEAP32[$7>>2]|0;
    $20 = HEAP32[$9>>2]|0;
    __cmsUnlockMutex($19,$20);
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $21 = (__cmsNewTag($0,$1,$4)|0);
   $22 = ($21|0)==(0);
   if (!($22)) {
    $23 = ((($0)) + 1720|0);
    $24 = HEAP32[$4>>2]|0;
    $25 = (($23) + ($24<<2)|0);
    HEAP32[$25>>2] = 0;
    $26 = ((($0)) + 520|0);
    $27 = (($26) + ($24<<2)|0);
    HEAP32[$27>>2] = 0;
    $28 = HEAP32[$7>>2]|0;
    $29 = (__cmsGetTagDescriptor($28,$1)|0);
    $30 = ($29|0)==(0|0);
    if ($30) {
     $31 = HEAP32[$7>>2]|0;
     HEAP32[$vararg_buffer>>2] = $1;
     _cmsSignalError($31,8,26569,$vararg_buffer);
     break;
    }
    $32 = ((($29)) + 88|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = ($33|0)==(0|0);
    if ($34) {
     $37 = ((($29)) + 8|0);
     $38 = HEAP32[$37>>2]|0;
     $$062 = $38;
    } else {
     $35 = (+_cmsGetProfileVersion($0));
     $36 = (FUNCTION_TABLE_idi[$33 & 7]($35,$2)|0);
     $$062 = $36;
    }
    $39 = (_IsTypeSupported($29,$$062)|0);
    $40 = ($39|0)==(0);
    if ($40) {
     __cmsTagSignature2String($5,$$062);
     __cmsTagSignature2String($6,$1);
     $41 = HEAP32[$7>>2]|0;
     HEAP32[$vararg_buffer1>>2] = $5;
     $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
     HEAP32[$vararg_ptr4>>2] = $6;
     _cmsSignalError($41,8,26590,$vararg_buffer1);
     break;
    }
    $42 = HEAP32[$7>>2]|0;
    $43 = (__cmsGetTagTypeHandler($42,$$062)|0);
    $44 = ($43|0)==(0|0);
    if ($44) {
     __cmsTagSignature2String($5,$$062);
     __cmsTagSignature2String($6,$1);
     $45 = HEAP32[$7>>2]|0;
     HEAP32[$vararg_buffer5>>2] = $5;
     $vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
     HEAP32[$vararg_ptr8>>2] = $6;
     _cmsSignalError($45,8,26590,$vararg_buffer5);
     break;
    }
    $46 = ((($0)) + 2520|0);
    $47 = HEAP32[$4>>2]|0;
    $48 = (($46) + ($47<<2)|0);
    HEAP32[$48>>2] = $43;
    $49 = ((($0)) + 120|0);
    $50 = (($49) + ($47<<2)|0);
    HEAP32[$50>>2] = $1;
    $51 = ((($0)) + 920|0);
    $52 = (($51) + ($47<<2)|0);
    HEAP32[$52>>2] = 0;
    $53 = ((($0)) + 1320|0);
    $54 = (($53) + ($47<<2)|0);
    HEAP32[$54>>2] = 0;
    ;HEAP32[$3>>2]=HEAP32[$43>>2]|0;HEAP32[$3+4>>2]=HEAP32[$43+4>>2]|0;HEAP32[$3+8>>2]=HEAP32[$43+8>>2]|0;HEAP32[$3+12>>2]=HEAP32[$43+12>>2]|0;HEAP32[$3+16>>2]=HEAP32[$43+16>>2]|0;
    $55 = HEAP32[$7>>2]|0;
    $56 = ((($3)) + 20|0);
    HEAP32[$56>>2] = $55;
    $57 = ((($0)) + 52|0);
    $58 = HEAP32[$57>>2]|0;
    $59 = ((($3)) + 24|0);
    HEAP32[$59>>2] = $58;
    $60 = ((($3)) + 12|0);
    $61 = HEAP32[$60>>2]|0;
    $62 = HEAP32[$29>>2]|0;
    $63 = (FUNCTION_TABLE_iiii[$61 & 63]($3,$2,$62)|0);
    $64 = ((($0)) + 2120|0);
    $65 = HEAP32[$4>>2]|0;
    $66 = (($64) + ($65<<2)|0);
    HEAP32[$66>>2] = $63;
    $67 = ($63|0)==(0|0);
    if ($67) {
     __cmsTagSignature2String($5,$$062);
     __cmsTagSignature2String($6,$1);
     $68 = HEAP32[$7>>2]|0;
     HEAP32[$vararg_buffer9>>2] = $5;
     $vararg_ptr12 = ((($vararg_buffer9)) + 4|0);
     HEAP32[$vararg_ptr12>>2] = $6;
     _cmsSignalError($68,12,26625,$vararg_buffer9);
     break;
    }
    $69 = HEAP32[$7>>2]|0;
    $70 = HEAP32[$9>>2]|0;
    __cmsUnlockMutex($69,$70);
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $71 = HEAP32[$7>>2]|0;
 $72 = HEAP32[$9>>2]|0;
 __cmsUnlockMutex($71,$72);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __cmsDeleteTagByPos($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $2 = sp;
 $3 = ($0|0)==(0|0);
 if ($3) {
  ___assert_fail((26668|0),(25780|0),592,(26688|0));
  // unreachable;
 }
 $4 = ($1|0)>(-1);
 if (!($4)) {
  ___assert_fail((26707|0),(25780|0),593,(26688|0));
  // unreachable;
 }
 $5 = (((($0)) + 2120|0) + ($1<<2)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $8 = (((($0)) + 1720|0) + ($1<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 if (!($10)) {
  $11 = ((($0)) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  __cmsFree($12,$6);
  STACKTOP = sp;return;
 }
 $13 = (((($0)) + 2520|0) + ($1<<2)|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(0|0);
 if ($15) {
  STACKTOP = sp;return;
 }
 ;HEAP32[$2>>2]=HEAP32[$14>>2]|0;HEAP32[$2+4>>2]=HEAP32[$14+4>>2]|0;HEAP32[$2+8>>2]=HEAP32[$14+8>>2]|0;HEAP32[$2+12>>2]=HEAP32[$14+12>>2]|0;HEAP32[$2+16>>2]=HEAP32[$14+16>>2]|0;
 $16 = ((($0)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($2)) + 20|0);
 HEAP32[$18>>2] = $17;
 $19 = ((($0)) + 52|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($2)) + 24|0);
 HEAP32[$21>>2] = $20;
 $22 = ((($2)) + 16|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = HEAP32[$5>>2]|0;
 FUNCTION_TABLE_vii[$23 & 63]($2,$24);
 HEAP32[$5>>2] = 0;
 STACKTOP = sp;return;
}
function __cmsNewTag($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $3 = (__cmsSearchTag($0,$1,0)|0);
 $4 = ($3|0)>(-1);
 if ($4) {
  __cmsDeleteTagByPos($0,$3);
  HEAP32[$2>>2] = $3;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = ((($0)) + 116|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6>>>0)>(99);
 if ($7) {
  $8 = ((($0)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  HEAP32[$vararg_buffer>>2] = 100;
  _cmsSignalError($9,2,26334,$vararg_buffer);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  HEAP32[$2>>2] = $6;
  $10 = HEAP32[$5>>2]|0;
  $11 = (($10) + 1)|0;
  HEAP32[$5>>2] = $11;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _cmsLinkTag($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $3 = sp;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 2924|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (__cmsLockMutex($5,$7)|0);
 $9 = ($8|0)==(0);
 if ($9) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = (__cmsNewTag($0,$1,$3)|0);
 $11 = ($10|0)==(0);
 if ($11) {
  $12 = HEAP32[$4>>2]|0;
  $13 = HEAP32[$6>>2]|0;
  __cmsUnlockMutex($12,$13);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $14 = ((($0)) + 1720|0);
  $15 = HEAP32[$3>>2]|0;
  $16 = (($14) + ($15<<2)|0);
  HEAP32[$16>>2] = 0;
  $17 = ((($0)) + 120|0);
  $18 = (($17) + ($15<<2)|0);
  HEAP32[$18>>2] = $1;
  $19 = ((($0)) + 520|0);
  $20 = (($19) + ($15<<2)|0);
  HEAP32[$20>>2] = $2;
  $21 = ((($0)) + 2120|0);
  $22 = (($21) + ($15<<2)|0);
  HEAP32[$22>>2] = 0;
  $23 = ((($0)) + 920|0);
  $24 = (($23) + ($15<<2)|0);
  HEAP32[$24>>2] = 0;
  $25 = ((($0)) + 1320|0);
  $26 = (($25) + ($15<<2)|0);
  HEAP32[$26>>2] = 0;
  $27 = HEAP32[$4>>2]|0;
  $28 = HEAP32[$6>>2]|0;
  __cmsUnlockMutex($27,$28);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function __cmsReadMediaWhitePoint($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  ___assert_fail((28126|0),(26716|0),68,(26744|0));
  // unreachable;
 }
 $3 = (_cmsReadTag($1,2004119668)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $5 = (_cmsD50_XYZ()|0);
  ;HEAP32[$0>>2]=HEAP32[$5>>2]|0;HEAP32[$0+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$5+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$5+12>>2]|0;HEAP32[$0+16>>2]=HEAP32[$5+16>>2]|0;HEAP32[$0+20>>2]=HEAP32[$5+20>>2]|0;
  return 1;
 }
 $6 = (_cmsGetEncodedICCversion($1)|0);
 $7 = ($6>>>0)<(67108864);
 if ($7) {
  $8 = (_cmsGetDeviceClass($1)|0);
  $9 = ($8|0)==(1835955314);
  if ($9) {
   $10 = (_cmsD50_XYZ()|0);
   ;HEAP32[$0>>2]=HEAP32[$10>>2]|0;HEAP32[$0+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$10+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$10+12>>2]|0;HEAP32[$0+16>>2]=HEAP32[$10+16>>2]|0;HEAP32[$0+20>>2]=HEAP32[$10+20>>2]|0;
   return 1;
  }
 }
 ;HEAP32[$0>>2]=HEAP32[$3>>2]|0;HEAP32[$0+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$3+12>>2]|0;HEAP32[$0+16>>2]=HEAP32[$3+16>>2]|0;HEAP32[$0+20>>2]=HEAP32[$3+20>>2]|0;
 return 1;
}
function __cmsReadCHAD($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  ___assert_fail((28126|0),(26716|0),98,(26768|0));
  // unreachable;
 }
 $3 = (_cmsReadTag($1,1667785060)|0);
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  dest=$0; src=$3; stop=dest+72|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  $$1 = 1;
  return ($$1|0);
 }
 __cmsMAT3identity($0);
 $5 = (_cmsGetEncodedICCversion($1)|0);
 $6 = ($5>>>0)<(67108864);
 if (!($6)) {
  $$1 = 1;
  return ($$1|0);
 }
 $7 = (_cmsGetDeviceClass($1)|0);
 $8 = ($7|0)==(1835955314);
 if (!($8)) {
  $$1 = 1;
  return ($$1|0);
 }
 $9 = (_cmsReadTag($1,2004119668)|0);
 $10 = ($9|0)==(0|0);
 if ($10) {
  __cmsMAT3identity($0);
  $$1 = 1;
  return ($$1|0);
 } else {
  $11 = (_cmsD50_XYZ()|0);
  $12 = (__cmsAdaptationMatrix($0,0,$9,$11)|0);
  $$1 = $12;
  return ($$1|0);
 }
 return (0)|0;
}
function __cmsReadInputLUT($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_cmsGetProfileContextID($0)|0);
 $3 = (_cmsGetDeviceClass($0)|0);
 $4 = ($3|0)==(1852662636);
 if ($4) {
  $5 = (_cmsReadTag($0,1852009522)|0);
  $6 = ($5|0)==(0|0);
  if ($6) {
   $$2 = 0;
   return ($$2|0);
  }
  $7 = (_cmsPipelineAlloc($2,0,0)|0);
  $8 = ($7|0)==(0|0);
  if ($8) {
   _cmsFreeNamedColorList($5);
   $$2 = 0;
   return ($$2|0);
  }
  $9 = (__cmsStageAllocNamedColor($5,1)|0);
  $10 = (_cmsPipelineInsertStage($7,0,$9)|0);
  $11 = ($10|0)==(0);
  if (!($11)) {
   $12 = (__cmsStageAllocLabV2ToV4($2)|0);
   $13 = (_cmsPipelineInsertStage($7,1,$12)|0);
   $14 = ($13|0)==(0);
   if (!($14)) {
    $$2 = $7;
    return ($$2|0);
   }
  }
  _cmsPipelineFree($7);
  $$2 = 0;
  return ($$2|0);
 }
 $15 = ($1>>>0)<(4);
 if ($15) {
  $16 = (13252 + ($1<<2)|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (13268 + ($1<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (_cmsIsTag($0,$19)|0);
  $21 = ($20|0)==(0);
  if (!($21)) {
   $22 = (__cmsReadFloatInputTag($0,$19)|0);
   $$2 = $22;
   return ($$2|0);
  }
  $23 = (_cmsIsTag($0,$17)|0);
  $24 = ($23|0)==(0);
  $$ = $24 ? 1093812784 : $17;
  $25 = (_cmsIsTag($0,$$)|0);
  $26 = ($25|0)==(0);
  if (!($26)) {
   $27 = (_cmsReadTag($0,$$)|0);
   $28 = ($27|0)==(0|0);
   if ($28) {
    $$2 = 0;
    return ($$2|0);
   }
   $29 = (__cmsGetTagTrueType($0,$$)|0);
   $30 = (_cmsPipelineDup($27)|0);
   $31 = ($29|0)==(1835430962);
   if (!($31)) {
    $$2 = $30;
    return ($$2|0);
   }
   $32 = (_cmsGetPCS($0)|0);
   $33 = ($32|0)==(1281450528);
   if (!($33)) {
    $$2 = $30;
    return ($$2|0);
   }
   $34 = (_cmsGetColorSpace($0)|0);
   $35 = ($34|0)==(1281450528);
   if ($35) {
    $36 = (__cmsStageAllocLabV4ToV2($2)|0);
    $37 = (_cmsPipelineInsertStage($30,0,$36)|0);
    $38 = ($37|0)==(0);
    if (!($38)) {
     label = 17;
    }
   } else {
    label = 17;
   }
   if ((label|0) == 17) {
    $39 = (__cmsStageAllocLabV2ToV4($2)|0);
    $40 = (_cmsPipelineInsertStage($30,1,$39)|0);
    $41 = ($40|0)==(0);
    if (!($41)) {
     $$2 = $30;
     return ($$2|0);
    }
   }
   _cmsPipelineFree($30);
   $$2 = 0;
   return ($$2|0);
  }
 }
 $42 = (_cmsGetColorSpace($0)|0);
 $43 = ($42|0)==(1196573017);
 if ($43) {
  $44 = (_BuildGrayInputMatrixPipeline($0)|0);
  $$2 = $44;
  return ($$2|0);
 } else {
  $45 = (_BuildRGBInputMatrixShaper($0)|0);
  $$2 = $45;
  return ($$2|0);
 }
 return (0)|0;
}
function __cmsReadFloatInputTag($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $switch$split12D = 0;
 var $switch$split2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_cmsGetProfileContextID($0)|0);
 $3 = (_cmsReadTag($0,$1)|0);
 $4 = (_cmsPipelineDup($3)|0);
 $5 = (_cmsGetColorSpace($0)|0);
 $6 = (_cmsGetPCS($0)|0);
 $7 = ($4|0)==(0|0);
 if ($7) {
  $$0 = 0;
  return ($$0|0);
 }
 $switch$split2D = ($5|0)<(1482250784);
 L4: do {
  if ($switch$split2D) {
   switch ($5|0) {
   case 1281450528:  {
    break;
   }
   default: {
    label = 5;
    break L4;
   }
   }
   $8 = (__cmsStageNormalizeToLabFloat($2)|0);
   $9 = (_cmsPipelineInsertStage($4,0,$8)|0);
   $10 = ($9|0)==(0);
   if (!($10)) {
    label = 5;
   }
  } else {
   switch ($5|0) {
   case 1482250784:  {
    break;
   }
   default: {
    label = 5;
    break L4;
   }
   }
   $11 = (__cmsStageNormalizeToXyzFloat($2)|0);
   $12 = (_cmsPipelineInsertStage($4,0,$11)|0);
   $13 = ($12|0)==(0);
   if (!($13)) {
    label = 5;
   }
  }
 } while(0);
 do {
  if ((label|0) == 5) {
   $switch$split12D = ($6|0)<(1482250784);
   if ($switch$split12D) {
    switch ($6|0) {
    case 1281450528:  {
     break;
    }
    default: {
     $$0 = $4;
     return ($$0|0);
    }
    }
    $14 = (__cmsStageNormalizeFromLabFloat($2)|0);
    $15 = (_cmsPipelineInsertStage($4,1,$14)|0);
    $16 = ($15|0)==(0);
    if ($16) {
     break;
    } else {
     $$0 = $4;
    }
    return ($$0|0);
   } else {
    switch ($6|0) {
    case 1482250784:  {
     break;
    }
    default: {
     $$0 = $4;
     return ($$0|0);
    }
    }
    $17 = (__cmsStageNormalizeFromXyzFloat($2)|0);
    $18 = (_cmsPipelineInsertStage($4,1,$17)|0);
    $19 = ($18|0)==(0);
    if ($19) {
     break;
    } else {
     $$0 = $4;
    }
    return ($$0|0);
   }
  }
 } while(0);
 _cmsPipelineFree($4);
 $$0 = 0;
 return ($$0|0);
}
function _BuildGrayInputMatrixPipeline($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = sp + 16|0;
 $2 = sp + 12|0;
 $3 = sp;
 $4 = (_cmsGetProfileContextID($0)|0);
 $5 = (_cmsReadTag($0,1800688195)|0);
 HEAP32[$1>>2] = $5;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = (_cmsPipelineAlloc($4,1,3)|0);
 $8 = ($7|0)==(0|0);
 do {
  if (!($8)) {
   $9 = (_cmsGetPCS($0)|0);
   $10 = ($9|0)==(1281450528);
   if (!($10)) {
    $22 = (_cmsStageAllocToneCurves($4,1,$1)|0);
    $23 = (_cmsPipelineInsertStage($7,1,$22)|0);
    $24 = ($23|0)==(0);
    if ($24) {
     break;
    }
    $25 = (_cmsStageAllocMatrix($4,3,1,32,0)|0);
    $26 = (_cmsPipelineInsertStage($7,1,$25)|0);
    $27 = ($26|0)==(0);
    if ($27) {
     break;
    } else {
     $$0 = $7;
    }
    STACKTOP = sp;return ($$0|0);
   }
   HEAP32[$2>>2] = -2139062144;
   $11 = (_cmsBuildTabulatedToneCurve16($4,2,$2)|0);
   $12 = ($11|0)==(0|0);
   if (!($12)) {
    $13 = HEAP32[$1>>2]|0;
    HEAP32[$3>>2] = $13;
    $14 = ((($3)) + 4|0);
    HEAP32[$14>>2] = $11;
    $15 = ((($3)) + 8|0);
    HEAP32[$15>>2] = $11;
    $16 = (_cmsStageAllocMatrix($4,3,1,8,0)|0);
    $17 = (_cmsPipelineInsertStage($7,1,$16)|0);
    $18 = ($17|0)==(0);
    if (!($18)) {
     $19 = (_cmsStageAllocToneCurves($4,3,$3)|0);
     $20 = (_cmsPipelineInsertStage($7,1,$19)|0);
     $21 = ($20|0)==(0);
     if (!($21)) {
      _cmsFreeToneCurve($11);
      $$0 = $7;
      STACKTOP = sp;return ($$0|0);
     }
    }
    _cmsFreeToneCurve($11);
   }
  }
 } while(0);
 $28 = HEAP32[$1>>2]|0;
 _cmsFreeToneCurve($28);
 _cmsPipelineFree($7);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _BuildRGBInputMatrixShaper($0) {
 $0 = $0|0;
 var $$030 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0.0;
 var $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0.0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond32 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $1 = sp;
 $2 = sp + 72|0;
 $3 = (_cmsGetProfileContextID($0)|0);
 $4 = (_ReadICCMatrixRGB2XYZ($1,$0)|0);
 $5 = ($4|0)==(0);
 if ($5) {
  $$030 = 0;
  STACKTOP = sp;return ($$030|0);
 }
 $19 = +HEAPF64[$1>>3];
 $20 = $19 * 0.50000762951094835;
 HEAPF64[$1>>3] = $20;
 $21 = ((($1)) + 8|0);
 $22 = +HEAPF64[$21>>3];
 $23 = $22 * 0.50000762951094835;
 HEAPF64[$21>>3] = $23;
 $24 = ((($1)) + 16|0);
 $25 = +HEAPF64[$24>>3];
 $26 = $25 * 0.50000762951094835;
 HEAPF64[$24>>3] = $26;
 $27 = ((($1)) + 24|0);
 $28 = +HEAPF64[$27>>3];
 $29 = $28 * 0.50000762951094835;
 HEAPF64[$27>>3] = $29;
 $30 = ((($1)) + 32|0);
 $31 = +HEAPF64[$30>>3];
 $32 = $31 * 0.50000762951094835;
 HEAPF64[$30>>3] = $32;
 $33 = ((($1)) + 40|0);
 $34 = +HEAPF64[$33>>3];
 $35 = $34 * 0.50000762951094835;
 HEAPF64[$33>>3] = $35;
 $36 = ((($1)) + 48|0);
 $37 = +HEAPF64[$36>>3];
 $38 = $37 * 0.50000762951094835;
 HEAPF64[$36>>3] = $38;
 $39 = ((($1)) + 56|0);
 $40 = +HEAPF64[$39>>3];
 $41 = $40 * 0.50000762951094835;
 HEAPF64[$39>>3] = $41;
 $42 = ((($1)) + 64|0);
 $43 = +HEAPF64[$42>>3];
 $44 = $43 * 0.50000762951094835;
 HEAPF64[$42>>3] = $44;
 $45 = (_cmsReadTag($0,1918128707)|0);
 HEAP32[$2>>2] = $45;
 $46 = (_cmsReadTag($0,1733579331)|0);
 $47 = ((($2)) + 4|0);
 HEAP32[$47>>2] = $46;
 $48 = (_cmsReadTag($0,1649693251)|0);
 $49 = ((($2)) + 8|0);
 HEAP32[$49>>2] = $48;
 $50 = HEAP32[$2>>2]|0;
 $51 = ($50|0)==(0|0);
 $52 = HEAP32[$47>>2]|0;
 $53 = ($52|0)==(0|0);
 $or$cond = $51 | $53;
 $54 = ($48|0)==(0|0);
 $or$cond32 = $54 | $or$cond;
 if ($or$cond32) {
  $$030 = 0;
  STACKTOP = sp;return ($$030|0);
 }
 $6 = (_cmsPipelineAlloc($3,3,3)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  $$030 = 0;
  STACKTOP = sp;return ($$030|0);
 }
 $8 = (_cmsStageAllocToneCurves($3,3,$2)|0);
 $9 = (_cmsPipelineInsertStage($6,1,$8)|0);
 $10 = ($9|0)==(0);
 if (!($10)) {
  $11 = (_cmsStageAllocMatrix($3,3,3,$1,0)|0);
  $12 = (_cmsPipelineInsertStage($6,1,$11)|0);
  $13 = ($12|0)==(0);
  if (!($13)) {
   $14 = (_cmsGetPCS($0)|0);
   $15 = ($14|0)==(1281450528);
   if (!($15)) {
    $$030 = $6;
    STACKTOP = sp;return ($$030|0);
   }
   $16 = (__cmsStageAllocXYZ2Lab($3)|0);
   $17 = (_cmsPipelineInsertStage($6,1,$16)|0);
   $18 = ($17|0)==(0);
   if (!($18)) {
    $$030 = $6;
    STACKTOP = sp;return ($$030|0);
   }
  }
 }
 _cmsPipelineFree($6);
 $$030 = 0;
 STACKTOP = sp;return ($$030|0);
}
function _ReadICCMatrixRGB2XYZ($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0.0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  ___assert_fail((26781|0),(26716|0),137,(26799|0));
  // unreachable;
 }
 $3 = (_cmsReadTag($1,1918392666)|0);
 $4 = (_cmsReadTag($1,1733843290)|0);
 $5 = (_cmsReadTag($1,1649957210)|0);
 $6 = ($3|0)==(0|0);
 $7 = ($4|0)==(0|0);
 $or$cond = $6 | $7;
 $8 = ($5|0)==(0|0);
 $or$cond3 = $or$cond | $8;
 if ($or$cond3) {
  $$0 = 0;
  return ($$0|0);
 }
 $9 = +HEAPF64[$3>>3];
 $10 = +HEAPF64[$4>>3];
 $11 = +HEAPF64[$5>>3];
 __cmsVEC3init($0,$9,$10,$11);
 $12 = ((($0)) + 24|0);
 $13 = ((($3)) + 8|0);
 $14 = +HEAPF64[$13>>3];
 $15 = ((($4)) + 8|0);
 $16 = +HEAPF64[$15>>3];
 $17 = ((($5)) + 8|0);
 $18 = +HEAPF64[$17>>3];
 __cmsVEC3init($12,$14,$16,$18);
 $19 = ((($0)) + 48|0);
 $20 = ((($3)) + 16|0);
 $21 = +HEAPF64[$20>>3];
 $22 = ((($4)) + 16|0);
 $23 = +HEAPF64[$22>>3];
 $24 = ((($5)) + 16|0);
 $25 = +HEAPF64[$24>>3];
 __cmsVEC3init($19,$21,$23,$25);
 $$0 = 1;
 return ($$0|0);
}
function __cmsReadOutputLUT($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_cmsGetProfileContextID($0)|0);
 $3 = ($1>>>0)<(4);
 if ($3) {
  $4 = (13284 + ($1<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (13300 + ($1<<2)|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (_cmsIsTag($0,$7)|0);
  $9 = ($8|0)==(0);
  if (!($9)) {
   $10 = (__cmsReadFloatOutputTag($0,$7)|0);
   $$1 = $10;
   return ($$1|0);
  }
  $11 = (_cmsIsTag($0,$5)|0);
  $12 = ($11|0)==(0);
  $$ = $12 ? 1110589744 : $5;
  $13 = (_cmsIsTag($0,$$)|0);
  $14 = ($13|0)==(0);
  if (!($14)) {
   $15 = (_cmsReadTag($0,$$)|0);
   $16 = ($15|0)==(0|0);
   if ($16) {
    $$1 = 0;
    return ($$1|0);
   }
   $17 = (__cmsGetTagTrueType($0,$$)|0);
   $18 = (_cmsPipelineDup($15)|0);
   $19 = ($18|0)==(0|0);
   if ($19) {
    $$1 = 0;
    return ($$1|0);
   }
   $20 = (_cmsGetPCS($0)|0);
   $21 = ($20|0)==(1281450528);
   if ($21) {
    _ChangeInterpolationToTrilinear($18);
   }
   $22 = ($17|0)==(1835430962);
   if (!($22)) {
    $$1 = $18;
    return ($$1|0);
   }
   $23 = (_cmsGetPCS($0)|0);
   $24 = ($23|0)==(1281450528);
   if (!($24)) {
    $$1 = $18;
    return ($$1|0);
   }
   $25 = (__cmsStageAllocLabV4ToV2($2)|0);
   $26 = (_cmsPipelineInsertStage($18,0,$25)|0);
   $27 = ($26|0)==(0);
   if (!($27)) {
    $28 = (_cmsGetColorSpace($0)|0);
    $29 = ($28|0)==(1281450528);
    if (!($29)) {
     $$1 = $18;
     return ($$1|0);
    }
    $30 = (__cmsStageAllocLabV2ToV4($2)|0);
    $31 = (_cmsPipelineInsertStage($18,1,$30)|0);
    $32 = ($31|0)==(0);
    if (!($32)) {
     $$1 = $18;
     return ($$1|0);
    }
   }
   _cmsPipelineFree($18);
   $$1 = 0;
   return ($$1|0);
  }
 }
 $33 = (_cmsGetColorSpace($0)|0);
 $34 = ($33|0)==(1196573017);
 if ($34) {
  $35 = (_BuildGrayOutputPipeline($0)|0);
  $$1 = $35;
  return ($$1|0);
 } else {
  $36 = (_BuildRGBOutputMatrixShaper($0)|0);
  $$1 = $36;
  return ($$1|0);
 }
 return (0)|0;
}
function __cmsReadFloatOutputTag($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $switch$split12D = 0;
 var $switch$split2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_cmsGetProfileContextID($0)|0);
 $3 = (_cmsReadTag($0,$1)|0);
 $4 = (_cmsPipelineDup($3)|0);
 $5 = (_cmsGetPCS($0)|0);
 $6 = (_cmsGetColorSpace($0)|0);
 $7 = ($4|0)==(0|0);
 if ($7) {
  $$0 = 0;
  return ($$0|0);
 }
 $switch$split2D = ($5|0)<(1482250784);
 L4: do {
  if ($switch$split2D) {
   switch ($5|0) {
   case 1281450528:  {
    break;
   }
   default: {
    label = 5;
    break L4;
   }
   }
   $8 = (__cmsStageNormalizeToLabFloat($2)|0);
   $9 = (_cmsPipelineInsertStage($4,0,$8)|0);
   $10 = ($9|0)==(0);
   if (!($10)) {
    label = 5;
   }
  } else {
   switch ($5|0) {
   case 1482250784:  {
    break;
   }
   default: {
    label = 5;
    break L4;
   }
   }
   $11 = (__cmsStageNormalizeToXyzFloat($2)|0);
   $12 = (_cmsPipelineInsertStage($4,0,$11)|0);
   $13 = ($12|0)==(0);
   if (!($13)) {
    label = 5;
   }
  }
 } while(0);
 do {
  if ((label|0) == 5) {
   $switch$split12D = ($6|0)<(1482250784);
   if ($switch$split12D) {
    switch ($6|0) {
    case 1281450528:  {
     break;
    }
    default: {
     $$0 = $4;
     return ($$0|0);
    }
    }
    $14 = (__cmsStageNormalizeFromLabFloat($2)|0);
    $15 = (_cmsPipelineInsertStage($4,1,$14)|0);
    $16 = ($15|0)==(0);
    if ($16) {
     break;
    } else {
     $$0 = $4;
    }
    return ($$0|0);
   } else {
    switch ($6|0) {
    case 1482250784:  {
     break;
    }
    default: {
     $$0 = $4;
     return ($$0|0);
    }
    }
    $17 = (__cmsStageNormalizeFromXyzFloat($2)|0);
    $18 = (_cmsPipelineInsertStage($4,1,$17)|0);
    $19 = ($18|0)==(0);
    if ($19) {
     break;
    } else {
     $$0 = $4;
    }
    return ($$0|0);
   }
  }
 } while(0);
 _cmsPipelineFree($4);
 $$0 = 0;
 return ($$0|0);
}
function _ChangeInterpolationToTrilinear($0) {
 $0 = $0|0;
 var $$011 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_cmsPipelineGetPtrToFirstStage($0)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = ((($0)) + 32|0);
 $$011 = $1;
 while(1) {
  $4 = (_cmsStageType($$011)|0);
  $5 = ($4|0)==(1668052340);
  if ($5) {
   $6 = ((($$011)) + 32|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ((($7)) + 4|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ((($9)) + 4|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = $11 | 256;
   HEAP32[$10>>2] = $12;
   $13 = HEAP32[$3>>2]|0;
   (__cmsSetInterpolationRoutine($13,$9)|0);
  }
  $14 = (_cmsStageNext($$011)|0);
  $15 = ($14|0)==(0|0);
  if ($15) {
   break;
  } else {
   $$011 = $14;
  }
 }
 return;
}
function _BuildGrayOutputPipeline($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 $2 = (_cmsGetProfileContextID($0)|0);
 $3 = (_cmsReadTag($0,1800688195)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (_cmsReverseToneCurve($3)|0);
 HEAP32[$1>>2] = $5;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = (_cmsPipelineAlloc($2,3,1)|0);
 $8 = ($7|0)==(0|0);
 if ($8) {
  $9 = HEAP32[$1>>2]|0;
  _cmsFreeToneCurve($9);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = (_cmsGetPCS($0)|0);
 $11 = ($10|0)==(1281450528);
 if ($11) {
  $12 = (_cmsStageAllocMatrix($2,1,3,56,0)|0);
  $13 = (_cmsPipelineInsertStage($7,1,$12)|0);
  $14 = ($13|0)==(0);
  if (!($14)) {
   label = 8;
  }
 } else {
  $15 = (_cmsStageAllocMatrix($2,1,3,80,0)|0);
  $16 = (_cmsPipelineInsertStage($7,1,$15)|0);
  $17 = ($16|0)==(0);
  if (!($17)) {
   label = 8;
  }
 }
 if ((label|0) == 8) {
  $18 = (_cmsStageAllocToneCurves($2,1,$1)|0);
  $19 = (_cmsPipelineInsertStage($7,1,$18)|0);
  $20 = ($19|0)==(0);
  if (!($20)) {
   $21 = HEAP32[$1>>2]|0;
   _cmsFreeToneCurve($21);
   $$0 = $7;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $22 = HEAP32[$1>>2]|0;
 _cmsFreeToneCurve($22);
 _cmsPipelineFree($7);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _BuildRGBOutputMatrixShaper($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0.0;
 var $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0;
 var $63 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond37 = 0, $or$cond39 = 0, $or$cond40 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0;
 $1 = sp + 144|0;
 $2 = sp + 72|0;
 $3 = sp;
 $4 = (_cmsGetProfileContextID($0)|0);
 $5 = (_ReadICCMatrixRGB2XYZ($2,$0)|0);
 $6 = ($5|0)==(0);
 if ($6) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = (__cmsMAT3inverse($2,$3)|0);
 $8 = ($7|0)==(0);
 if ($8) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $35 = +HEAPF64[$3>>3];
 $36 = $35 * 1.999969482421875;
 HEAPF64[$3>>3] = $36;
 $37 = ((($3)) + 8|0);
 $38 = +HEAPF64[$37>>3];
 $39 = $38 * 1.999969482421875;
 HEAPF64[$37>>3] = $39;
 $40 = ((($3)) + 16|0);
 $41 = +HEAPF64[$40>>3];
 $42 = $41 * 1.999969482421875;
 HEAPF64[$40>>3] = $42;
 $43 = ((($3)) + 24|0);
 $44 = +HEAPF64[$43>>3];
 $45 = $44 * 1.999969482421875;
 HEAPF64[$43>>3] = $45;
 $46 = ((($3)) + 32|0);
 $47 = +HEAPF64[$46>>3];
 $48 = $47 * 1.999969482421875;
 HEAPF64[$46>>3] = $48;
 $49 = ((($3)) + 40|0);
 $50 = +HEAPF64[$49>>3];
 $51 = $50 * 1.999969482421875;
 HEAPF64[$49>>3] = $51;
 $52 = ((($3)) + 48|0);
 $53 = +HEAPF64[$52>>3];
 $54 = $53 * 1.999969482421875;
 HEAPF64[$52>>3] = $54;
 $55 = ((($3)) + 56|0);
 $56 = +HEAPF64[$55>>3];
 $57 = $56 * 1.999969482421875;
 HEAPF64[$55>>3] = $57;
 $58 = ((($3)) + 64|0);
 $59 = +HEAPF64[$58>>3];
 $60 = $59 * 1.999969482421875;
 HEAPF64[$58>>3] = $60;
 $9 = (_cmsReadTag($0,1918128707)|0);
 $11 = (_cmsReadTag($0,1733579331)|0);
 $14 = (_cmsReadTag($0,1649693251)|0);
 $61 = ($9|0)==(0|0);
 $62 = ($11|0)==(0|0);
 $or$cond = $61 | $62;
 $63 = ($14|0)==(0|0);
 $or$cond37 = $or$cond | $63;
 if ($or$cond37) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = (_cmsReverseToneCurve($9)|0);
 HEAP32[$1>>2] = $10;
 $12 = (_cmsReverseToneCurve($11)|0);
 $13 = ((($1)) + 4|0);
 HEAP32[$13>>2] = $12;
 $15 = (_cmsReverseToneCurve($14)|0);
 $16 = ((($1)) + 8|0);
 HEAP32[$16>>2] = $15;
 $17 = HEAP32[$1>>2]|0;
 $18 = ($17|0)==(0|0);
 $19 = HEAP32[$13>>2]|0;
 $20 = ($19|0)==(0|0);
 $or$cond39 = $18 | $20;
 $21 = ($15|0)==(0|0);
 $or$cond40 = $21 | $or$cond39;
 if ($or$cond40) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $22 = (_cmsPipelineAlloc($4,3,3)|0);
 $23 = ($22|0)==(0|0);
 do {
  if (!($23)) {
   $24 = (_cmsGetPCS($0)|0);
   $25 = ($24|0)==(1281450528);
   if ($25) {
    $26 = (__cmsStageAllocLab2XYZ($4)|0);
    $27 = (_cmsPipelineInsertStage($22,1,$26)|0);
    $28 = ($27|0)==(0);
    if (!($28)) {
     label = 7;
    }
   } else {
    label = 7;
   }
   if ((label|0) == 7) {
    $29 = (_cmsStageAllocMatrix($4,3,3,$3,0)|0);
    $30 = (_cmsPipelineInsertStage($22,1,$29)|0);
    $31 = ($30|0)==(0);
    if (!($31)) {
     $32 = (_cmsStageAllocToneCurves($4,3,$1)|0);
     $33 = (_cmsPipelineInsertStage($22,1,$32)|0);
     $34 = ($33|0)==(0);
     if (!($34)) {
      break;
     }
    }
   }
   _cmsFreeToneCurveTriple($1);
   _cmsPipelineFree($22);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 _cmsFreeToneCurveTriple($1);
 $$0 = $22;
 STACKTOP = sp;return ($$0|0);
}
function __cmsReadDevicelinkLUT($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$058 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_cmsGetProfileContextID($0)|0);
 $3 = ($1>>>0)>(3);
 if ($3) {
  $$1 = 0;
  return ($$1|0);
 }
 $4 = (13252 + ($1<<2)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (13268 + ($1<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (_cmsGetDeviceClass($0)|0);
 $9 = ($8|0)==(1852662636);
 if ($9) {
  $10 = (_cmsReadTag($0,1852009522)|0);
  $11 = ($10|0)==(0|0);
  if ($11) {
   $$1 = 0;
   return ($$1|0);
  }
  $12 = (_cmsPipelineAlloc($2,0,0)|0);
  $13 = ($12|0)==(0|0);
  if (!($13)) {
   $14 = (__cmsStageAllocNamedColor($10,0)|0);
   $15 = (_cmsPipelineInsertStage($12,0,$14)|0);
   $16 = ($15|0)==(0);
   if (!($16)) {
    $17 = (_cmsGetColorSpace($0)|0);
    $18 = ($17|0)==(1281450528);
    if (!($18)) {
     $$1 = $12;
     return ($$1|0);
    }
    $19 = (__cmsStageAllocLabV2ToV4($2)|0);
    $20 = (_cmsPipelineInsertStage($12,1,$19)|0);
    $21 = ($20|0)==(0);
    if (!($21)) {
     $$1 = $12;
     return ($$1|0);
    }
   }
  }
  _cmsPipelineFree($12);
  _cmsFreeNamedColorList($10);
  $$1 = 0;
  return ($$1|0);
 }
 $22 = (_cmsIsTag($0,$7)|0);
 $23 = ($22|0)==(0);
 if (!($23)) {
  $24 = (__cmsReadFloatDevicelinkTag($0,$7)|0);
  $$1 = $24;
  return ($$1|0);
 }
 $25 = (_cmsIsTag($0,1144144432)|0);
 $26 = ($25|0)==(0);
 if (!($26)) {
  $27 = (_cmsReadTag($0,1144144432)|0);
  $28 = (_cmsPipelineDup($27)|0);
  $$1 = $28;
  return ($$1|0);
 }
 $29 = (_cmsIsTag($0,$5)|0);
 $30 = ($29|0)==(0);
 if ($30) {
  $31 = (_cmsIsTag($0,1093812784)|0);
  $32 = ($31|0)==(0);
  if ($32) {
   $$1 = 0;
   return ($$1|0);
  } else {
   $$058 = 1093812784;
  }
 } else {
  $$058 = $5;
 }
 $33 = (_cmsReadTag($0,$$058)|0);
 $34 = ($33|0)==(0|0);
 if ($34) {
  $$1 = 0;
  return ($$1|0);
 }
 $35 = (_cmsPipelineDup($33)|0);
 $36 = ($35|0)==(0|0);
 if ($36) {
  $$1 = 0;
  return ($$1|0);
 }
 $37 = (_cmsGetPCS($0)|0);
 $38 = ($37|0)==(1281450528);
 if ($38) {
  _ChangeInterpolationToTrilinear($35);
 }
 $39 = (__cmsGetTagTrueType($0,$$058)|0);
 $40 = ($39|0)==(1835430962);
 if (!($40)) {
  $$1 = $35;
  return ($$1|0);
 }
 $41 = (_cmsGetColorSpace($0)|0);
 $42 = ($41|0)==(1281450528);
 if ($42) {
  $43 = (__cmsStageAllocLabV4ToV2($2)|0);
  $44 = (_cmsPipelineInsertStage($35,0,$43)|0);
  $45 = ($44|0)==(0);
  if (!($45)) {
   label = 22;
  }
 } else {
  label = 22;
 }
 if ((label|0) == 22) {
  $46 = (_cmsGetPCS($0)|0);
  $47 = ($46|0)==(1281450528);
  if (!($47)) {
   $$1 = $35;
   return ($$1|0);
  }
  $48 = (__cmsStageAllocLabV2ToV4($2)|0);
  $49 = (_cmsPipelineInsertStage($35,1,$48)|0);
  $50 = ($49|0)==(0);
  if (!($50)) {
   $$1 = $35;
   return ($$1|0);
  }
 }
 _cmsPipelineFree($35);
 $$1 = 0;
 return ($$1|0);
}
function __cmsReadFloatDevicelinkTag($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $switch$split12D = 0;
 var $switch$split2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_cmsGetProfileContextID($0)|0);
 $3 = (_cmsReadTag($0,$1)|0);
 $4 = (_cmsPipelineDup($3)|0);
 $5 = (_cmsGetPCS($0)|0);
 $6 = (_cmsGetColorSpace($0)|0);
 $7 = ($4|0)==(0|0);
 if ($7) {
  $$0 = 0;
  return ($$0|0);
 }
 $switch$split2D = ($6|0)<(1482250784);
 L4: do {
  if ($switch$split2D) {
   switch ($6|0) {
   case 1281450528:  {
    break;
   }
   default: {
    label = 5;
    break L4;
   }
   }
   $8 = (__cmsStageNormalizeToLabFloat($2)|0);
   $9 = (_cmsPipelineInsertStage($4,0,$8)|0);
   $10 = ($9|0)==(0);
   if (!($10)) {
    label = 5;
   }
  } else {
   switch ($6|0) {
   case 1482250784:  {
    break;
   }
   default: {
    label = 5;
    break L4;
   }
   }
   $11 = (__cmsStageNormalizeToXyzFloat($2)|0);
   $12 = (_cmsPipelineInsertStage($4,0,$11)|0);
   $13 = ($12|0)==(0);
   if (!($13)) {
    label = 5;
   }
  }
 } while(0);
 do {
  if ((label|0) == 5) {
   $switch$split12D = ($5|0)<(1482250784);
   if ($switch$split12D) {
    switch ($5|0) {
    case 1281450528:  {
     break;
    }
    default: {
     $$0 = $4;
     return ($$0|0);
    }
    }
    $14 = (__cmsStageNormalizeFromLabFloat($2)|0);
    $15 = (_cmsPipelineInsertStage($4,1,$14)|0);
    $16 = ($15|0)==(0);
    if ($16) {
     break;
    } else {
     $$0 = $4;
    }
    return ($$0|0);
   } else {
    switch ($5|0) {
    case 1482250784:  {
     break;
    }
    default: {
     $$0 = $4;
     return ($$0|0);
    }
    }
    $17 = (__cmsStageNormalizeFromXyzFloat($2)|0);
    $18 = (_cmsPipelineInsertStage($4,1,$17)|0);
    $19 = ($18|0)==(0);
    if ($19) {
     break;
    } else {
     $$0 = $4;
    }
    return ($$0|0);
   }
  }
 } while(0);
 _cmsPipelineFree($4);
 $$0 = 0;
 return ($$0|0);
}
function _cmsIsMatrixShaper($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $switch$split2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_cmsGetColorSpace($0)|0);
 $switch$split2D = ($1|0)<(1380401696);
 if ($switch$split2D) {
  switch ($1|0) {
  case 1196573017:  {
   break;
  }
  default: {
   $$0 = 0;
   return ($$0|0);
  }
  }
  $2 = (_cmsIsTag($0,1800688195)|0);
  $$0 = $2;
  return ($$0|0);
 }
 switch ($1|0) {
 case 1380401696:  {
  break;
 }
 default: {
  $$0 = 0;
  return ($$0|0);
 }
 }
 $3 = (_cmsIsTag($0,1918392666)|0);
 $4 = ($3|0)==(0);
 if ($4) {
  $16 = 0;
 } else {
  $5 = (_cmsIsTag($0,1733843290)|0);
  $6 = ($5|0)==(0);
  if ($6) {
   $16 = 0;
  } else {
   $7 = (_cmsIsTag($0,1649957210)|0);
   $8 = ($7|0)==(0);
   if ($8) {
    $16 = 0;
   } else {
    $9 = (_cmsIsTag($0,1918128707)|0);
    $10 = ($9|0)==(0);
    if ($10) {
     $16 = 0;
    } else {
     $11 = (_cmsIsTag($0,1733579331)|0);
     $12 = ($11|0)==(0);
     if ($12) {
      $16 = 0;
     } else {
      $13 = (_cmsIsTag($0,1649693251)|0);
      $14 = ($13|0)!=(0);
      $16 = $14;
     }
    }
   }
  }
 }
 $15 = $16&1;
 $$0 = $15;
 return ($$0|0);
}
function _cmsIsCLUT($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$013 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $3 = (_cmsGetDeviceClass($0)|0);
 $4 = ($3|0)==(1818848875);
 if ($4) {
  $5 = (_cmsGetHeaderRenderingIntent($0)|0);
  $6 = ($5|0)==($1|0);
  $7 = $6&1;
  $$013 = $7;
  STACKTOP = sp;return ($$013|0);
 }
 switch ($2|0) {
 case 0:  {
  $$0 = 13252;
  break;
 }
 case 1:  {
  $$0 = 13284;
  break;
 }
 case 2:  {
  $8 = (_cmsIsIntentSupported($0,$1,0)|0);
  $9 = ($8|0)==(0);
  if ($9) {
   $13 = 0;
  } else {
   $10 = (_cmsIsIntentSupported($0,1,1)|0);
   $11 = ($10|0)!=(0);
   $13 = $11;
  }
  $12 = $13&1;
  $$013 = $12;
  STACKTOP = sp;return ($$013|0);
  break;
 }
 default: {
  $14 = (_cmsGetProfileContextID($0)|0);
  HEAP32[$vararg_buffer>>2] = $2;
  _cmsSignalError($14,2,26820,$vararg_buffer);
  $$013 = 0;
  STACKTOP = sp;return ($$013|0);
 }
 }
 $15 = (($$0) + ($1<<2)|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (_cmsIsTag($0,$16)|0);
 $$013 = $17;
 STACKTOP = sp;return ($$013|0);
}
function _cmsIsIntentSupported($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_cmsIsCLUT($0,$1,$2)|0);
 $4 = ($3|0)==(0);
 if (!($4)) {
  $$0 = 1;
  return ($$0|0);
 }
 $5 = (_cmsIsMatrixShaper($0)|0);
 $$0 = $5;
 return ($$0|0);
}
function __cmsCompileProfileSequence($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$04142 = 0, $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_cmsAllocProfileSequenceDescription($0,$1)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = 0;
  return ($$0|0);
 }
 $5 = ($1|0)==(0);
 if ($5) {
  $$0 = $3;
  return ($$0|0);
 }
 $6 = ((($3)) + 8|0);
 $$04142 = 0;
 while(1) {
  $7 = HEAP32[$6>>2]|0;
  $8 = (($2) + ($$04142<<2)|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (((($7) + (($$04142*48)|0)|0)) + 8|0);
  _cmsGetHeaderAttributes($9,$10);
  $11 = (((($7) + (($$04142*48)|0)|0)) + 20|0);
  _cmsGetHeaderProfileID($9,$11);
  $12 = (_cmsGetHeaderManufacturer($9)|0);
  $13 = (($7) + (($$04142*48)|0)|0);
  HEAP32[$13>>2] = $12;
  $14 = (_cmsGetHeaderModel($9)|0);
  $15 = (((($7) + (($$04142*48)|0)|0)) + 4|0);
  HEAP32[$15>>2] = $14;
  $16 = (_cmsReadTag($9,1952801640)|0);
  $17 = ($16|0)==(0|0);
  if ($17) {
   $$sink = 0;
  } else {
   $18 = HEAP32[$16>>2]|0;
   $$sink = $18;
  }
  $19 = (((($7) + (($$04142*48)|0)|0)) + 16|0);
  HEAP32[$19>>2] = $$sink;
  $20 = (_GetMLUFromProfile($9,1684893284)|0);
  $21 = (((($7) + (($$04142*48)|0)|0)) + 36|0);
  HEAP32[$21>>2] = $20;
  $22 = (_GetMLUFromProfile($9,1684890724)|0);
  $23 = (((($7) + (($$04142*48)|0)|0)) + 40|0);
  HEAP32[$23>>2] = $22;
  $24 = (_GetMLUFromProfile($9,1684370275)|0);
  $25 = (((($7) + (($$04142*48)|0)|0)) + 44|0);
  HEAP32[$25>>2] = $24;
  $26 = (($$04142) + 1)|0;
  $exitcond = ($26|0)==($1|0);
  if ($exitcond) {
   $$0 = $3;
   break;
  } else {
   $$04142 = $26;
  }
 }
 return ($$0|0);
}
function _GetMLUFromProfile($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_cmsReadTag($0,$1)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$0 = 0;
  return ($$0|0);
 }
 $4 = (_cmsMLUdup($2)|0);
 $$0 = $4;
 return ($$0|0);
}
function _GetInfo($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$04 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($1|0) {
 case 0:  {
  $$0 = 1684370275;
  label = 5;
  break;
 }
 case 1:  {
  $$0 = 1684893284;
  label = 5;
  break;
 }
 case 2:  {
  $$0 = 1684890724;
  label = 5;
  break;
 }
 case 3:  {
  $$0 = 1668313716;
  label = 5;
  break;
 }
 default: {
  $$04 = 0;
 }
 }
 if ((label|0) == 5) {
  $2 = (_cmsReadTag($0,$$0)|0);
  $$04 = $2;
 }
 return ($$04|0);
}
function _cmsGetProfileInfoASCII($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = (_GetInfo($0,$1)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  $$0 = 0;
  return ($$0|0);
 }
 $8 = (_cmsMLUgetASCII($6,$2,$3,$4,$5)|0);
 $$0 = $8;
 return ($$0|0);
}
function __cmsStageAllocPlaceholder($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $8 = (__cmsMallocZero($0,40)|0);
 $9 = ($8|0)==(0|0);
 if ($9) {
  $$0 = 0;
  return ($$0|0);
 }
 HEAP32[$8>>2] = $0;
 $10 = ((($8)) + 4|0);
 HEAP32[$10>>2] = $1;
 $11 = ((($8)) + 8|0);
 HEAP32[$11>>2] = $1;
 $12 = ((($8)) + 12|0);
 HEAP32[$12>>2] = $2;
 $13 = ((($8)) + 16|0);
 HEAP32[$13>>2] = $3;
 $14 = ((($8)) + 20|0);
 HEAP32[$14>>2] = $4;
 $15 = ((($8)) + 24|0);
 HEAP32[$15>>2] = $5;
 $16 = ((($8)) + 28|0);
 HEAP32[$16>>2] = $6;
 $17 = ((($8)) + 32|0);
 HEAP32[$17>>2] = $7;
 $$0 = $8;
 return ($$0|0);
}
function _cmsStageAllocIdentity($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__cmsStageAllocPlaceholder($0,1768189472,$1,$1,22,0,0,0)|0);
 return ($2|0);
}
function _EvaluateIdentity($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 << 2;
 _memmove(($1|0),($0|0),($5|0))|0;
 return;
}
function _cmsPipelineCheckAndRetreiveStages($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $$0 = 0, $$02633 = 0, $$02734 = 0, $$02734$in = 0, $$12831 = 0, $$12831$in = 0, $$130 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $exitcond = 0, $expanded = 0;
 var $expanded10 = 0, $expanded12 = 0, $expanded13 = 0, $expanded14 = 0, $expanded3 = 0, $expanded5 = 0, $expanded6 = 0, $expanded7 = 0, $expanded9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 $3 = (_cmsPipelineStageCount($0)|0);
 $4 = ($3|0)==($1|0);
 if (!($4)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$2>>2] = $varargs;
 $5 = ($1|0)==(0);
 if (!($5)) {
  $$02633 = 0;$$02734$in = $0;
  while(1) {
   $$02734 = HEAP32[$$02734$in>>2]|0;
   $arglist_current = HEAP32[$2>>2]|0;
   $6 = $arglist_current;
   $7 = ((0) + 4|0);
   $expanded3 = $7;
   $expanded = (($expanded3) - 1)|0;
   $8 = (($6) + ($expanded))|0;
   $9 = ((0) + 4|0);
   $expanded7 = $9;
   $expanded6 = (($expanded7) - 1)|0;
   $expanded5 = $expanded6 ^ -1;
   $10 = $8 & $expanded5;
   $11 = $10;
   $12 = HEAP32[$11>>2]|0;
   $arglist_next = ((($11)) + 4|0);
   HEAP32[$2>>2] = $arglist_next;
   $13 = ((($$02734)) + 4|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($14|0)==($12|0);
   if (!($15)) {
    label = 4;
    break;
   }
   $16 = ((($$02734)) + 36|0);
   $17 = (($$02633) + 1)|0;
   $18 = ($17>>>0)<($1>>>0);
   if ($18) {
    $$02633 = $17;$$02734$in = $16;
   } else {
    $$12831$in = $0;$$130 = 0;
    break;
   }
  }
  if ((label|0) == 4) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  while(1) {
   $$12831 = HEAP32[$$12831$in>>2]|0;
   $arglist_current2 = HEAP32[$2>>2]|0;
   $19 = $arglist_current2;
   $20 = ((0) + 4|0);
   $expanded10 = $20;
   $expanded9 = (($expanded10) - 1)|0;
   $21 = (($19) + ($expanded9))|0;
   $22 = ((0) + 4|0);
   $expanded14 = $22;
   $expanded13 = (($expanded14) - 1)|0;
   $expanded12 = $expanded13 ^ -1;
   $23 = $21 & $expanded12;
   $24 = $23;
   $25 = HEAP32[$24>>2]|0;
   $arglist_next3 = ((($24)) + 4|0);
   HEAP32[$2>>2] = $arglist_next3;
   $26 = ($25|0)==(0|0);
   if (!($26)) {
    HEAP32[$25>>2] = $$12831;
   }
   $27 = ((($$12831)) + 36|0);
   $28 = (($$130) + 1)|0;
   $exitcond = ($28|0)==($1|0);
   if ($exitcond) {
    break;
   } else {
    $$12831$in = $27;$$130 = $28;
   }
  }
 }
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _cmsPipelineStageCount($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$06 = 0, $$067 = 0, $$069 = 0, $$08 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$067 = HEAP32[$0>>2]|0;
 $1 = ($$067|0)==(0|0);
 if ($1) {
  $$0$lcssa = 0;
  return ($$0$lcssa|0);
 } else {
  $$069 = $$067;$$08 = 0;
 }
 while(1) {
  $2 = (($$08) + 1)|0;
  $3 = ((($$069)) + 36|0);
  $$06 = HEAP32[$3>>2]|0;
  $4 = ($$06|0)==(0|0);
  if ($4) {
   $$0$lcssa = $2;
   break;
  } else {
   $$069 = $$06;$$08 = $2;
  }
 }
 return ($$0$lcssa|0);
}
function __cmsStageGetPtrToCurveSet($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 32|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 return ($4|0);
}
function _cmsStageAllocToneCurves($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$03738 = 0, $$pn = 0, $$sink = 0, $$sink1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (__cmsStageAllocPlaceholder($0,1668707188,$1,$1,23,9,1,0)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = 0;
  return ($$0|0);
 }
 $5 = (__cmsMallocZero($0,8)|0);
 $6 = ($5|0)==(0|0);
 if ($6) {
  _cmsStageFree($3);
  $$0 = 0;
  return ($$0|0);
 }
 $7 = ((($3)) + 32|0);
 HEAP32[$7>>2] = $5;
 HEAP32[$5>>2] = $1;
 $8 = (__cmsCalloc($0,$1,4)|0);
 $9 = ((($5)) + 4|0);
 HEAP32[$9>>2] = $8;
 $10 = ($8|0)==(0|0);
 if ($10) {
  _cmsStageFree($3);
  $$0 = 0;
  return ($$0|0);
 }
 $11 = ($1|0)==(0);
 if ($11) {
  $$0 = $3;
  return ($$0|0);
 }
 $12 = ($2|0)==(0|0);
 $$03738 = 0;
 while(1) {
  if ($12) {
   $15 = (_cmsBuildGamma($0,1.0)|0);
   $$sink = $15;
  } else {
   $16 = (($2) + ($$03738<<2)|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (_cmsDupToneCurve($17)|0);
   $$sink = $18;
  }
  $$pn = HEAP32[$9>>2]|0;
  $$sink1 = (($$pn) + ($$03738<<2)|0);
  HEAP32[$$sink1>>2] = $$sink;
  $19 = HEAP32[$9>>2]|0;
  $20 = (($19) + ($$03738<<2)|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21|0)==(0|0);
  $14 = (($$03738) + 1)|0;
  if ($22) {
   break;
  }
  $13 = ($14>>>0)<($1>>>0);
  if ($13) {
   $$03738 = $14;
  } else {
   $$0 = $3;
   label = 14;
   break;
  }
 }
 if ((label|0) == 14) {
  return ($$0|0);
 }
 _cmsStageFree($3);
 $$0 = 0;
 return ($$0|0);
}
function _EvaluateCurves($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$015 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0|0);
 if ($3) {
  ___assert_fail((26846|0),(26866|0),174,(26915|0));
  // unreachable;
 }
 $4 = ((($2)) + 32|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  return;
 }
 $7 = ((($5)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if ($9) {
  return;
 }
 $10 = HEAP32[$5>>2]|0;
 $11 = ($10|0)==(0);
 if ($11) {
  return;
 } else {
  $$015 = 0;
 }
 while(1) {
  $12 = HEAP32[$7>>2]|0;
  $13 = (($12) + ($$015<<2)|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($0) + ($$015<<2)|0);
  $16 = +HEAPF32[$15>>2];
  $17 = (+_cmsEvalToneCurveFloat($14,$16));
  $18 = (($1) + ($$015<<2)|0);
  HEAPF32[$18>>2] = $17;
  $19 = (($$015) + 1)|0;
  $20 = HEAP32[$5>>2]|0;
  $21 = ($19>>>0)<($20>>>0);
  if ($21) {
   $$015 = $19;
  } else {
   break;
  }
 }
 return;
}
function _CurveSetDup($0) {
 $0 = $0|0;
 var $$036 = 0, $$041 = 0, $$140 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 32|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$0>>2]|0;
 $4 = (__cmsMallocZero($3,8)|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  $$036 = 0;
  return ($$036|0);
 }
 $6 = HEAP32[$2>>2]|0;
 HEAP32[$4>>2] = $6;
 $7 = HEAP32[$0>>2]|0;
 $8 = (__cmsCalloc($7,$6,4)|0);
 $9 = ((($4)) + 4|0);
 HEAP32[$9>>2] = $8;
 $10 = ($8|0)==(0|0);
 L4: do {
  if ($10) {
   $28 = $8;
  } else {
   $11 = HEAP32[$4>>2]|0;
   $12 = ($11|0)==(0);
   if ($12) {
    $$036 = $4;
    return ($$036|0);
   }
   $13 = ((($2)) + 4|0);
   $$041 = 0;
   while(1) {
    $17 = HEAP32[$13>>2]|0;
    $18 = (($17) + ($$041<<2)|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = (_cmsDupToneCurve($19)|0);
    $21 = HEAP32[$9>>2]|0;
    $22 = (($21) + ($$041<<2)|0);
    HEAP32[$22>>2] = $20;
    $23 = HEAP32[$9>>2]|0;
    $24 = (($23) + ($$041<<2)|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ($25|0)==(0|0);
    $16 = (($$041) + 1)|0;
    if ($26) {
     $28 = $23;
     break L4;
    }
    $14 = HEAP32[$4>>2]|0;
    $15 = ($16>>>0)<($14>>>0);
    if ($15) {
     $$041 = $16;
    } else {
     $$036 = $4;
     break;
    }
   }
   return ($$036|0);
  }
 } while(0);
 $27 = ($28|0)==(0|0);
 if (!($27)) {
  $29 = HEAP32[$4>>2]|0;
  $30 = ($29|0)==(0);
  if (!($30)) {
   $$140 = 0;
   while(1) {
    $31 = HEAP32[$9>>2]|0;
    $32 = (($31) + ($$140<<2)|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = ($33|0)==(0|0);
    if (!($34)) {
     _cmsFreeToneCurve($33);
    }
    $35 = (($$140) + 1)|0;
    $36 = HEAP32[$4>>2]|0;
    $37 = ($35>>>0)<($36>>>0);
    if ($37) {
     $$140 = $35;
    } else {
     break;
    }
   }
  }
 }
 $38 = HEAP32[$0>>2]|0;
 $39 = HEAP32[$9>>2]|0;
 __cmsFree($38,$39);
 $40 = HEAP32[$0>>2]|0;
 __cmsFree($40,$4);
 $$036 = 0;
 return ($$036|0);
}
function _CurveSetElemTypeFree($0) {
 $0 = $0|0;
 var $$017 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  ___assert_fail((26846|0),(26866|0),192,(26894|0));
  // unreachable;
 }
 $2 = ((($0)) + 32|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  return;
 }
 $5 = ((($3)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if (!($7)) {
  $8 = HEAP32[$3>>2]|0;
  $9 = ($8|0)==(0);
  if (!($9)) {
   $$017 = 0;
   while(1) {
    $10 = HEAP32[$5>>2]|0;
    $11 = (($10) + ($$017<<2)|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==(0|0);
    if (!($13)) {
     _cmsFreeToneCurve($12);
    }
    $14 = (($$017) + 1)|0;
    $15 = HEAP32[$3>>2]|0;
    $16 = ($14>>>0)<($15>>>0);
    if ($16) {
     $$017 = $14;
    } else {
     break;
    }
   }
  }
 }
 $17 = HEAP32[$0>>2]|0;
 $18 = HEAP32[$5>>2]|0;
 __cmsFree($17,$18);
 $19 = HEAP32[$0>>2]|0;
 __cmsFree($19,$3);
 return;
}
function _cmsStageFree($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 28|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  FUNCTION_TABLE_vi[$2 & 7]($0);
 }
 $4 = HEAP32[$0>>2]|0;
 __cmsFree($4,$0);
 return;
}
function __cmsStageAllocIdentityCurves($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_cmsStageAllocToneCurves($0,$1,0)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$0 = 0;
  return ($$0|0);
 }
 $4 = ((($2)) + 8|0);
 HEAP32[$4>>2] = 1768189472;
 $$0 = $2;
 return ($$0|0);
}
function _cmsStageAllocMatrix($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$05255 = 0, $$154 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond57 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = Math_imul($2, $1)|0;
 $6 = ($5|0)==(0);
 if ($6) {
  $$0 = 0;
  return ($$0|0);
 }
 $7 = (4294967295 / ($2>>>0))&-1;
 $8 = ($5>>>0)<($7>>>0);
 if (!($8)) {
  $$0 = 0;
  return ($$0|0);
 }
 $9 = (4294967295 / ($1>>>0))&-1;
 $10 = ($5>>>0)<($9>>>0);
 if (!($10)) {
  $$0 = 0;
  return ($$0|0);
 }
 $11 = ($5>>>0)<($1>>>0);
 $12 = ($5>>>0)<($2>>>0);
 $or$cond = $11 | $12;
 if ($or$cond) {
  $$0 = 0;
  return ($$0|0);
 }
 $13 = (__cmsStageAllocPlaceholder($0,1835103334,$2,$1,24,10,2,0)|0);
 $14 = ($13|0)==(0|0);
 if ($14) {
  $$0 = 0;
  return ($$0|0);
 }
 $15 = (__cmsMallocZero($0,8)|0);
 $16 = ($15|0)==(0|0);
 if ($16) {
  $$0 = 0;
  return ($$0|0);
 }
 $17 = (__cmsCalloc($0,$5,8)|0);
 HEAP32[$15>>2] = $17;
 $18 = ($17|0)==(0|0);
 if ($18) {
  _MatrixElemTypeFree($13);
  $$0 = 0;
  return ($$0|0);
 }
 $19 = HEAP32[$15>>2]|0;
 $$05255 = 0;
 while(1) {
  $20 = (($3) + ($$05255<<3)|0);
  $21 = +HEAPF64[$20>>3];
  $22 = (($19) + ($$05255<<3)|0);
  HEAPF64[$22>>3] = $21;
  $23 = (($$05255) + 1)|0;
  $exitcond57 = ($23|0)==($5|0);
  if ($exitcond57) {
   break;
  } else {
   $$05255 = $23;
  }
 }
 $24 = ($4|0)==(0|0);
 if (!($24)) {
  $25 = (__cmsCalloc($0,$1,8)|0);
  $26 = ((($15)) + 4|0);
  HEAP32[$26>>2] = $25;
  $27 = ($25|0)==(0|0);
  if ($27) {
   _MatrixElemTypeFree($13);
   $$0 = 0;
   return ($$0|0);
  }
  $28 = ($1|0)==(0);
  if (!($28)) {
   $29 = HEAP32[$26>>2]|0;
   $$154 = 0;
   while(1) {
    $30 = (($4) + ($$154<<3)|0);
    $31 = +HEAPF64[$30>>3];
    $32 = (($29) + ($$154<<3)|0);
    HEAPF64[$32>>3] = $31;
    $33 = (($$154) + 1)|0;
    $exitcond = ($33|0)==($1|0);
    if ($exitcond) {
     break;
    } else {
     $$154 = $33;
    }
   }
  }
 }
 $34 = ((($13)) + 32|0);
 HEAP32[$34>>2] = $15;
 $$0 = $13;
 return ($$0|0);
}
function _EvaluateMatrix($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0.0, $$02731 = 0, $$02829 = 0, $$030 = 0.0, $$1 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0;
 var $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 32|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($2)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 if ($7) {
  return;
 }
 $8 = ((($2)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 $11 = ((($4)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0|0);
 $14 = HEAP32[$5>>2]|0;
 $$02731 = 0;
 while(1) {
  if ($10) {
   $$0$lcssa = 0.0;
  } else {
   $15 = HEAP32[$4>>2]|0;
   $16 = HEAP32[$8>>2]|0;
   $$02829 = 0;$$030 = 0.0;$21 = $9;
   while(1) {
    $17 = (($0) + ($$02829<<2)|0);
    $18 = +HEAPF32[$17>>2];
    $19 = $18;
    $20 = Math_imul($21, $$02731)|0;
    $22 = (($20) + ($$02829))|0;
    $23 = (($15) + ($22<<3)|0);
    $24 = +HEAPF64[$23>>3];
    $25 = $19 * $24;
    $26 = $$030 + $25;
    $27 = (($$02829) + 1)|0;
    $28 = ($27>>>0)<($16>>>0);
    if ($28) {
     $$02829 = $27;$$030 = $26;$21 = $16;
    } else {
     $$0$lcssa = $26;
     break;
    }
   }
  }
  if ($13) {
   $$1 = $$0$lcssa;
  } else {
   $29 = (($12) + ($$02731<<3)|0);
   $30 = +HEAPF64[$29>>3];
   $31 = $$0$lcssa + $30;
   $$1 = $31;
  }
  $32 = $$1;
  $33 = (($1) + ($$02731<<2)|0);
  HEAPF32[$33>>2] = $32;
  $34 = (($$02731) + 1)|0;
  $35 = ($34>>>0)<($14>>>0);
  if ($35) {
   $$02731 = $34;
  } else {
   break;
  }
 }
 return;
}
function _MatrixElemDup($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 32|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$0>>2]|0;
 $4 = (__cmsMallocZero($3,8)|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  $$0 = 0;
  return ($$0|0);
 }
 $6 = ((($0)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($0)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$0>>2]|0;
 $11 = HEAP32[$2>>2]|0;
 $12 = $7 << 3;
 $13 = Math_imul($12, $9)|0;
 $14 = (__cmsDupMem($10,$11,$13)|0);
 HEAP32[$4>>2] = $14;
 $15 = ((($2)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)==(0|0);
 if ($17) {
  $$0 = $4;
  return ($$0|0);
 }
 $18 = HEAP32[$0>>2]|0;
 $19 = HEAP32[$8>>2]|0;
 $20 = $19 << 3;
 $21 = (__cmsDupMem($18,$16,$20)|0);
 $22 = ((($4)) + 4|0);
 HEAP32[$22>>2] = $21;
 $$0 = $4;
 return ($$0|0);
}
function _MatrixElemTypeFree($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 32|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  return;
 }
 $4 = HEAP32[$2>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $6 = HEAP32[$0>>2]|0;
  __cmsFree($6,$4);
 }
 $7 = ((($2)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if (!($9)) {
  $10 = HEAP32[$0>>2]|0;
  __cmsFree($10,$8);
 }
 $11 = HEAP32[$0>>2]|0;
 $12 = HEAP32[$1>>2]|0;
 __cmsFree($11,$12);
 return;
}
function _cmsStageAllocCLut16bitGranular($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$04647 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $5 = ($1|0)==(0|0);
 if ($5) {
  ___assert_fail((26930|0),(26866|0),560,(26957|0));
  // unreachable;
 }
 $6 = ($2>>>0)>(8);
 if ($6) {
  HEAP32[$vararg_buffer>>2] = $2;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 8;
  _cmsSignalError($0,2,26988,$vararg_buffer);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = (__cmsStageAllocPlaceholder($0,1668052340,$2,$3,25,11,3,0)|0);
 $8 = ($7|0)==(0|0);
 if ($8) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $9 = (__cmsMallocZero($0,16)|0);
 $10 = ($9|0)==(0|0);
 if ($10) {
  _cmsStageFree($7);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = ((($7)) + 32|0);
 HEAP32[$11>>2] = $9;
 $12 = (_CubeSize($1,$2)|0);
 $13 = Math_imul($12, $3)|0;
 $14 = ((($9)) + 8|0);
 HEAP32[$14>>2] = $13;
 $15 = ((($9)) + 12|0);
 HEAP32[$15>>2] = 0;
 $16 = ($13|0)==(0);
 if ($16) {
  _cmsStageFree($7);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $17 = (__cmsCalloc($0,$13,2)|0);
 HEAP32[$9>>2] = $17;
 $18 = ($17|0)==(0|0);
 if ($18) {
  _cmsStageFree($7);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $19 = ($4|0)==(0|0);
 if (!($19)) {
  $20 = HEAP32[$9>>2]|0;
  $$04647 = 0;
  while(1) {
   $21 = (($4) + ($$04647<<1)|0);
   $22 = HEAP16[$21>>1]|0;
   $23 = (($20) + ($$04647<<1)|0);
   HEAP16[$23>>1] = $22;
   $24 = (($$04647) + 1)|0;
   $exitcond = ($24|0)==($13|0);
   if ($exitcond) {
    break;
   } else {
    $$04647 = $24;
   }
  }
 }
 $25 = HEAP32[$9>>2]|0;
 $26 = (__cmsComputeInterpParamsEx($0,$1,$2,$3,$25,0)|0);
 $27 = ((($9)) + 4|0);
 HEAP32[$27>>2] = $26;
 $28 = ($26|0)==(0|0);
 if (!($28)) {
  $$0 = $7;
  STACKTOP = sp;return ($$0|0);
 }
 _cmsStageFree($7);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _EvaluateCLUTfloatIn16($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0;
 $3 = sp + 256|0;
 $4 = sp;
 $5 = ((($2)) + 32|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($2)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8>>>0)<(129);
 if (!($9)) {
  ___assert_fail((27064|0),(26866|0),456,(27093|0));
  // unreachable;
 }
 $10 = ((($2)) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11>>>0)<(129);
 if ($12) {
  _FromFloatTo16($0,$3,$8);
  $13 = ((($6)) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($14)) + 116|0);
  $16 = HEAP32[$15>>2]|0;
  FUNCTION_TABLE_viii[$16 & 63]($3,$4,$14);
  $17 = HEAP32[$10>>2]|0;
  _From16ToFloat($4,$1,$17);
  STACKTOP = sp;return;
 } else {
  ___assert_fail((27115|0),(26866|0),457,(27093|0));
  // unreachable;
 }
}
function _CLUTElemDup($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 32|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$0>>2]|0;
 $4 = (__cmsMallocZero($3,16)|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  $$0 = 0;
  return ($$0|0);
 }
 $6 = ((($2)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($4)) + 8|0);
 HEAP32[$8>>2] = $7;
 $9 = ((($2)) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($4)) + 12|0);
 HEAP32[$11>>2] = $10;
 $12 = HEAP32[$2>>2]|0;
 $13 = ($12|0)==(0|0);
 do {
  if ($13) {
   label = 6;
  } else {
   $14 = HEAP32[$9>>2]|0;
   $15 = ($14|0)==(0);
   $16 = HEAP32[$0>>2]|0;
   $17 = HEAP32[$6>>2]|0;
   if ($15) {
    $22 = $17 << 1;
    $23 = (__cmsDupMem($16,$12,$22)|0);
    HEAP32[$4>>2] = $23;
    $24 = ($23|0)==(0|0);
    if ($24) {
     break;
    } else {
     label = 6;
     break;
    }
   } else {
    $18 = HEAP32[$2>>2]|0;
    $19 = $17 << 2;
    $20 = (__cmsDupMem($16,$18,$19)|0);
    HEAP32[$4>>2] = $20;
    $21 = ($20|0)==(0|0);
    if ($21) {
     break;
    } else {
     label = 6;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 6) {
  $25 = HEAP32[$0>>2]|0;
  $26 = ((($2)) + 4|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ((($27)) + 16|0);
  $29 = ((($27)) + 8|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ((($27)) + 12|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = HEAP32[$4>>2]|0;
  $34 = ((($27)) + 4|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = (__cmsComputeInterpParamsEx($25,$28,$30,$32,$33,$35)|0);
  $37 = ((($4)) + 4|0);
  HEAP32[$37>>2] = $36;
  $38 = ($36|0)==(0|0);
  if (!($38)) {
   $$0 = $4;
   return ($$0|0);
  }
 }
 $39 = HEAP32[$4>>2]|0;
 $40 = ($39|0)==(0|0);
 if (!($40)) {
  $41 = HEAP32[$0>>2]|0;
  __cmsFree($41,$39);
 }
 $42 = HEAP32[$0>>2]|0;
 __cmsFree($42,$4);
 $$0 = 0;
 return ($$0|0);
}
function _CLutElemTypeFree($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 32|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  return;
 }
 $4 = HEAP32[$2>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $6 = HEAP32[$0>>2]|0;
  __cmsFree($6,$4);
 }
 $7 = ((($2)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 __cmsFreeInterpParams($8);
 $9 = HEAP32[$0>>2]|0;
 $10 = HEAP32[$1>>2]|0;
 __cmsFree($9,$10);
 return;
}
function _CubeSize($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$014 = 0, $$015 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  ___assert_fail((27034|0),(26866|0),471,(27055|0));
  // unreachable;
 } else {
  $$014 = 1;$$015 = $1;
 }
 while(1) {
  $3 = ($$015|0)==(0);
  if ($3) {
   $$0 = $$014;
   label = 6;
   break;
  }
  $4 = (($$015) + -1)|0;
  $5 = (($0) + ($4<<2)|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==(0);
  if ($7) {
   $$0 = 0;
   label = 6;
   break;
  }
  $8 = Math_imul($6, $$014)|0;
  $9 = (4294967295 / ($6>>>0))&-1;
  $10 = ($8>>>0)>($9>>>0);
  if ($10) {
   $$0 = 0;
   label = 6;
   break;
  } else {
   $$014 = $8;$$015 = $4;
  }
 }
 if ((label|0) == 6) {
  return ($$0|0);
 }
 return (0)|0;
}
function _FromFloatTo16($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$07 = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if ($3) {
  return;
 } else {
  $$07 = 0;
 }
 while(1) {
  $4 = (($0) + ($$07<<2)|0);
  $5 = +HEAPF32[$4>>2];
  $6 = $5;
  $7 = $6 * 65535.0;
  $8 = (__cmsQuickSaturateWord_284($7)|0);
  $9 = (($1) + ($$07<<1)|0);
  HEAP16[$9>>1] = $8;
  $10 = (($$07) + 1)|0;
  $exitcond = ($10|0)==($2|0);
  if ($exitcond) {
   break;
  } else {
   $$07 = $10;
  }
 }
 return;
}
function _From16ToFloat($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$07 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if ($3) {
  return;
 } else {
  $$07 = 0;
 }
 while(1) {
  $4 = (($0) + ($$07<<1)|0);
  $5 = HEAP16[$4>>1]|0;
  $6 = (+($5&65535));
  $7 = $6 / 65535.0;
  $8 = (($1) + ($$07<<2)|0);
  HEAPF32[$8>>2] = $7;
  $9 = (($$07) + 1)|0;
  $exitcond = ($9|0)==($2|0);
  if ($exitcond) {
   break;
  } else {
   $$07 = $9;
  }
 }
 return;
}
function __cmsQuickSaturateWord_284($0) {
 $0 = +$0;
 var $$0 = 0, $1 = 0.0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0 + 0.5;
 $2 = !($1 <= 0.0);
 if ($2) {
  $3 = !($1 >= 65535.0);
  if ($3) {
   $4 = (__cmsQuickFloorWord_285($1)|0);
   $$0 = $4;
  } else {
   $$0 = -1;
  }
 } else {
  $$0 = 0;
 }
 return ($$0|0);
}
function __cmsQuickFloorWord_285($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0 + -32767.0;
 $2 = (__cmsQuickFloor_286($1)|0);
 $3 = (($2) + 32767)|0;
 $4 = $3&65535;
 return ($4|0);
}
function __cmsQuickFloor_286($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0 + 103079215104.0;
 HEAPF64[tempDoublePtr>>3] = $1;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = $2 >> 16;
 return ($4|0);
}
function _cmsStageAllocCLut16bit($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $5 = sp;
 HEAP32[$5>>2] = $1;
 $6 = ((($5)) + 4|0);
 HEAP32[$6>>2] = $1;
 $7 = ((($5)) + 8|0);
 HEAP32[$7>>2] = $1;
 $8 = ((($5)) + 12|0);
 HEAP32[$8>>2] = $1;
 $9 = ((($5)) + 16|0);
 HEAP32[$9>>2] = $1;
 $10 = ((($5)) + 20|0);
 HEAP32[$10>>2] = $1;
 $11 = ((($5)) + 24|0);
 HEAP32[$11>>2] = $1;
 $12 = ((($5)) + 28|0);
 HEAP32[$12>>2] = $1;
 $13 = (_cmsStageAllocCLut16bitGranular($0,$5,$2,$3,$4)|0);
 STACKTOP = sp;return ($13|0);
}
function _cmsStageAllocCLutFloatGranular($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$04647 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $5 = ($1|0)==(0|0);
 if ($5) {
  ___assert_fail((26930|0),(26866|0),651,(27145|0));
  // unreachable;
 }
 $6 = ($2>>>0)>(8);
 if ($6) {
  HEAP32[$vararg_buffer>>2] = $2;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 8;
  _cmsSignalError($0,2,26988,$vararg_buffer);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = (__cmsStageAllocPlaceholder($0,1668052340,$2,$3,26,11,3,0)|0);
 $8 = ($7|0)==(0|0);
 if ($8) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $9 = (__cmsMallocZero($0,16)|0);
 $10 = ($9|0)==(0|0);
 if ($10) {
  _cmsStageFree($7);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = ((($7)) + 32|0);
 HEAP32[$11>>2] = $9;
 $12 = (_CubeSize($1,$2)|0);
 $13 = Math_imul($12, $3)|0;
 $14 = ((($9)) + 8|0);
 HEAP32[$14>>2] = $13;
 $15 = ((($9)) + 12|0);
 HEAP32[$15>>2] = 1;
 $16 = ($13|0)==(0);
 if ($16) {
  _cmsStageFree($7);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $17 = (__cmsCalloc($0,$13,4)|0);
 HEAP32[$9>>2] = $17;
 $18 = ($17|0)==(0|0);
 if ($18) {
  _cmsStageFree($7);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $19 = ($4|0)==(0|0);
 if (!($19)) {
  $20 = HEAP32[$9>>2]|0;
  $$04647 = 0;
  while(1) {
   $21 = (($4) + ($$04647<<2)|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = (($20) + ($$04647<<2)|0);
   HEAP32[$23>>2] = $22;
   $24 = (($$04647) + 1)|0;
   $exitcond = ($24|0)==($13|0);
   if ($exitcond) {
    break;
   } else {
    $$04647 = $24;
   }
  }
 }
 $25 = HEAP32[$9>>2]|0;
 $26 = (__cmsComputeInterpParamsEx($0,$1,$2,$3,$25,1)|0);
 $27 = ((($9)) + 4|0);
 HEAP32[$27>>2] = $26;
 $28 = ($26|0)==(0|0);
 if (!($28)) {
  $$0 = $7;
  STACKTOP = sp;return ($$0|0);
 }
 _cmsStageFree($7);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _EvaluateCLUTfloat($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 32|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 116|0);
 $8 = HEAP32[$7>>2]|0;
 FUNCTION_TABLE_viii[$8 & 63]($0,$1,$6);
 return;
}
function __cmsStageAllocIdentityCLut($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$011 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $2 = sp;
 $3 = sp + 8|0;
 HEAP32[$2>>2] = $1;
 HEAP32[$3>>2] = 2;
 $4 = ((($3)) + 4|0);
 HEAP32[$4>>2] = 2;
 $5 = ((($3)) + 8|0);
 HEAP32[$5>>2] = 2;
 $6 = ((($3)) + 12|0);
 HEAP32[$6>>2] = 2;
 $7 = ((($3)) + 16|0);
 HEAP32[$7>>2] = 2;
 $8 = ((($3)) + 20|0);
 HEAP32[$8>>2] = 2;
 $9 = ((($3)) + 24|0);
 HEAP32[$9>>2] = 2;
 $10 = ((($3)) + 28|0);
 HEAP32[$10>>2] = 2;
 $11 = HEAP32[$2>>2]|0;
 $12 = (_cmsStageAllocCLut16bitGranular($0,$3,$11,$11,0)|0);
 $13 = ($12|0)==(0|0);
 if ($13) {
  $$011 = 0;
  STACKTOP = sp;return ($$011|0);
 }
 $14 = (_cmsStageSampleCLut16bit($12,44,$2,0)|0);
 $15 = ($14|0)==(0);
 if ($15) {
  _cmsStageFree($12);
  $$011 = 0;
  STACKTOP = sp;return ($$011|0);
 } else {
  $16 = ((($12)) + 8|0);
  HEAP32[$16>>2] = 1768189472;
  $$011 = $12;
  STACKTOP = sp;return ($$011|0);
 }
 return (0)|0;
}
function _IdentitySampler($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$010 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)>(0);
 if ($4) {
  $$010 = 0;
 } else {
  return 1;
 }
 while(1) {
  $5 = (($0) + ($$010<<1)|0);
  $6 = HEAP16[$5>>1]|0;
  $7 = (($1) + ($$010<<1)|0);
  HEAP16[$7>>1] = $6;
  $8 = (($$010) + 1)|0;
  $exitcond = ($8|0)==($3|0);
  if ($exitcond) {
   break;
  } else {
   $$010 = $8;
  }
 }
 return 1;
}
function _cmsStageSampleCLut16bit($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$07089 = 0, $$07183 = 0, $$07183$in = 0, $$07288 = 0, $$07382 = 0, $$184 = 0, $$286 = 0, $$not = 0, $$not92 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $brmerge = 0, $brmerge93 = 0, $exitcond = 0, $exitcond94 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0;
 $4 = sp + 256|0;
 $5 = sp;
 $6 = ($0|0)==(0|0);
 if ($6) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = ((($0)) + 32|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if ($9) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = ((($8)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($11)) + 12|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($13) + -1)|0;
 $17 = ($16>>>0)>(7);
 $18 = (($15) + -1)|0;
 $19 = ($18>>>0)>(126);
 $20 = $17 | $19;
 if ($20) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $21 = ((($11)) + 16|0);
 dest=$4; stop=dest+18|0; do { HEAP16[dest>>1]=0|0; dest=dest+2|0; } while ((dest|0) < (stop|0));
 _memset(($5|0),0,256)|0;
 $22 = (_CubeSize($21,$13)|0);
 $23 = ($22|0)==(0);
 if ($23) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $24 = ($22|0)>(0);
 if (!($24)) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $25 = ($13|0)>(0);
 $26 = $3 & 16777216;
 $27 = ($26|0)==(0);
 $$not = ($15|0)<(1);
 $$not92 = ($15|0)<(1);
 $$07089 = 0;$$07288 = 0;
 while(1) {
  if ($25) {
   $$07183$in = $13;$$07382 = $$07089;
   while(1) {
    $$07183 = (($$07183$in) + -1)|0;
    $28 = (((($11)) + 16|0) + ($$07183<<2)|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = (($$07382>>>0) % ($29>>>0))&-1;
    $31 = (($$07382>>>0) / ($29>>>0))&-1;
    $32 = (+($30>>>0));
    $33 = (__cmsQuantizeVal($32,$29)|0);
    $34 = (($4) + ($$07183<<1)|0);
    HEAP16[$34>>1] = $33;
    $35 = ($$07183$in|0)>(1);
    if ($35) {
     $$07183$in = $$07183;$$07382 = $31;
    } else {
     break;
    }
   }
  }
  $36 = HEAP32[$8>>2]|0;
  $37 = ($36|0)==(0|0);
  $brmerge = $37 | $$not;
  if (!($brmerge)) {
   $$184 = 0;
   while(1) {
    $38 = (($$184) + ($$07288))|0;
    $39 = (($36) + ($38<<1)|0);
    $40 = HEAP16[$39>>1]|0;
    $41 = (($5) + ($$184<<1)|0);
    HEAP16[$41>>1] = $40;
    $42 = (($$184) + 1)|0;
    $exitcond = ($42|0)==($15|0);
    if ($exitcond) {
     break;
    } else {
     $$184 = $42;
    }
   }
  }
  $43 = (FUNCTION_TABLE_iiii[$1 & 63]($4,$5,$2)|0);
  $44 = ($43|0)==(0);
  if ($44) {
   $$0 = 0;
   label = 16;
   break;
  }
  if ($27) {
   $45 = HEAP32[$8>>2]|0;
   $46 = ($45|0)==(0|0);
   $brmerge93 = $46 | $$not92;
   if (!($brmerge93)) {
    $$286 = 0;
    while(1) {
     $47 = (($5) + ($$286<<1)|0);
     $48 = HEAP16[$47>>1]|0;
     $49 = (($$286) + ($$07288))|0;
     $50 = (($45) + ($49<<1)|0);
     HEAP16[$50>>1] = $48;
     $51 = (($$286) + 1)|0;
     $exitcond94 = ($51|0)==($15|0);
     if ($exitcond94) {
      break;
     } else {
      $$286 = $51;
     }
    }
   }
  }
  $52 = (($$07288) + ($15))|0;
  $53 = (($$07089) + 1)|0;
  $54 = ($53|0)<($22|0);
  if ($54) {
   $$07089 = $53;$$07288 = $52;
  } else {
   $$0 = 1;
   label = 16;
   break;
  }
 }
 if ((label|0) == 16) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function __cmsQuantizeVal($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $0 * 65535.0;
 $3 = (($1) + -1)|0;
 $4 = (+($3>>>0));
 $5 = $2 / $4;
 $6 = (__cmsQuickSaturateWord_284($5)|0);
 return ($6|0);
}
function _cmsSliceSpace16($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$03239 = 0, $$03337 = 0, $$03438 = 0, $$03438$in = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $4 = sp;
 $5 = ($0>>>0)>(15);
 L1: do {
  if ($5) {
   $$0 = 0;
  } else {
   $6 = (_CubeSize($1,$0)|0);
   $7 = ($6|0)==(0);
   if ($7) {
    $$0 = 0;
   } else {
    $8 = ($6|0)>(0);
    if ($8) {
     $9 = ($0|0)>(0);
     $$03239 = 0;
     while(1) {
      if ($9) {
       $$03337 = $$03239;$$03438$in = $0;
       while(1) {
        $$03438 = (($$03438$in) + -1)|0;
        $12 = (($1) + ($$03438<<2)|0);
        $13 = HEAP32[$12>>2]|0;
        $14 = (($$03337>>>0) % ($13>>>0))&-1;
        $15 = (($$03337>>>0) / ($13>>>0))&-1;
        $16 = (+($14>>>0));
        $17 = (__cmsQuantizeVal($16,$13)|0);
        $18 = (($4) + ($$03438<<1)|0);
        HEAP16[$18>>1] = $17;
        $19 = ($$03438$in|0)>(1);
        if ($19) {
         $$03337 = $15;$$03438$in = $$03438;
        } else {
         break;
        }
       }
      }
      $20 = (FUNCTION_TABLE_iiii[$2 & 63]($4,0,$3)|0);
      $21 = ($20|0)==(0);
      $11 = (($$03239) + 1)|0;
      if ($21) {
       $$0 = 0;
       break L1;
      }
      $10 = ($11|0)<($6|0);
      if ($10) {
       $$03239 = $11;
      } else {
       $$0 = 1;
       break;
      }
     }
    } else {
     $$0 = 1;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function __cmsStageAllocLab2XYZ($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__cmsStageAllocPlaceholder($0,2016570400,3,3,27,0,0,0)|0);
 return ($1|0);
}
function _EvaluateLab2XYZ($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0.0;
 var $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $3 = sp + 24|0;
 $4 = sp;
 $5 = +HEAPF32[$0>>2];
 $6 = $5;
 $7 = $6 * 100.0;
 HEAPF64[$3>>3] = $7;
 $8 = ((($0)) + 4|0);
 $9 = +HEAPF32[$8>>2];
 $10 = $9;
 $11 = $10 * 255.0;
 $12 = $11 + -128.0;
 $13 = ((($3)) + 8|0);
 HEAPF64[$13>>3] = $12;
 $14 = ((($0)) + 8|0);
 $15 = +HEAPF32[$14>>2];
 $16 = $15;
 $17 = $16 * 255.0;
 $18 = $17 + -128.0;
 $19 = ((($3)) + 16|0);
 HEAPF64[$19>>3] = $18;
 _cmsLab2XYZ(0,$4,$3);
 $20 = +HEAPF64[$4>>3];
 $21 = $20 / 1.999969482421875;
 $22 = $21;
 HEAPF32[$1>>2] = $22;
 $23 = ((($4)) + 8|0);
 $24 = +HEAPF64[$23>>3];
 $25 = $24 / 1.999969482421875;
 $26 = $25;
 $27 = ((($1)) + 4|0);
 HEAPF32[$27>>2] = $26;
 $28 = ((($4)) + 16|0);
 $29 = +HEAPF64[$28>>3];
 $30 = $29 / 1.999969482421875;
 $31 = $30;
 $32 = ((($1)) + 8|0);
 HEAPF32[$32>>2] = $31;
 STACKTOP = sp;return;
}
function __cmsStageAllocLabV2ToV4($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_cmsStageAllocMatrix($0,3,3,104,0)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  return ($1|0);
 }
 $3 = ((($1)) + 8|0);
 HEAP32[$3>>2] = 840971296;
 return ($1|0);
}
function __cmsStageAllocLabV4ToV2($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_cmsStageAllocMatrix($0,3,3,176,0)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  return ($1|0);
 }
 $3 = ((($1)) + 8|0);
 HEAP32[$3>>2] = 874525216;
 return ($1|0);
}
function __cmsStageNormalizeFromLabFloat($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_cmsStageAllocMatrix($0,3,3,248,320)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  return ($1|0);
 }
 $3 = ((($1)) + 8|0);
 HEAP32[$3>>2] = 1681026080;
 return ($1|0);
}
function __cmsStageNormalizeFromXyzFloat($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_cmsStageAllocMatrix($0,3,3,344,0)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  return ($1|0);
 }
 $3 = ((($1)) + 8|0);
 HEAP32[$3>>2] = 1681029152;
 return ($1|0);
}
function __cmsStageNormalizeToLabFloat($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_cmsStageAllocMatrix($0,3,3,416,488)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  return ($1|0);
 }
 $3 = ((($1)) + 8|0);
 HEAP32[$3>>2] = 1815241760;
 return ($1|0);
}
function __cmsStageNormalizeToXyzFloat($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_cmsStageAllocMatrix($0,3,3,512,0)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  return ($1|0);
 }
 $3 = ((($1)) + 8|0);
 HEAP32[$3>>2] = 2016568352;
 return ($1|0);
}
function __cmsStageClipNegatives($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__cmsStageAllocPlaceholder($0,1668050976,$1,$1,28,0,0,0)|0);
 return ($2|0);
}
function _Clipper($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$011 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  return;
 }
 $6 = HEAP32[$3>>2]|0;
 $$011 = 0;
 while(1) {
  $7 = (($0) + ($$011<<2)|0);
  $8 = +HEAPF32[$7>>2];
  $9 = $8 < 0.0;
  $10 = $9 ? 0.0 : $8;
  $11 = (($1) + ($$011<<2)|0);
  HEAPF32[$11>>2] = $10;
  $12 = (($$011) + 1)|0;
  $13 = ($12>>>0)<($6>>>0);
  if ($13) {
   $$011 = $12;
  } else {
   break;
  }
 }
 return;
}
function __cmsStageAllocXYZ2Lab($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__cmsStageAllocPlaceholder($0,1815246880,3,3,29,0,0,0)|0);
 return ($1|0);
}
function _EvaluateXYZ2Lab($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0.0;
 var $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $3 = sp + 24|0;
 $4 = sp;
 $5 = +HEAPF32[$0>>2];
 $6 = $5;
 $7 = $6 * 1.999969482421875;
 HEAPF64[$4>>3] = $7;
 $8 = ((($0)) + 4|0);
 $9 = +HEAPF32[$8>>2];
 $10 = $9;
 $11 = $10 * 1.999969482421875;
 $12 = ((($4)) + 8|0);
 HEAPF64[$12>>3] = $11;
 $13 = ((($0)) + 8|0);
 $14 = +HEAPF32[$13>>2];
 $15 = $14;
 $16 = $15 * 1.999969482421875;
 $17 = ((($4)) + 16|0);
 HEAPF64[$17>>3] = $16;
 _cmsXYZ2Lab(0,$3,$4);
 $18 = +HEAPF64[$3>>3];
 $19 = $18 / 100.0;
 $20 = $19;
 HEAPF32[$1>>2] = $20;
 $21 = ((($3)) + 8|0);
 $22 = +HEAPF64[$21>>3];
 $23 = $22 + 128.0;
 $24 = $23 / 255.0;
 $25 = $24;
 $26 = ((($1)) + 4|0);
 HEAPF32[$26>>2] = $25;
 $27 = ((($3)) + 16|0);
 $28 = +HEAPF64[$27>>3];
 $29 = $28 + 128.0;
 $30 = $29 / 255.0;
 $31 = $30;
 $32 = ((($1)) + 8|0);
 HEAPF32[$32>>2] = $31;
 STACKTOP = sp;return;
}
function _cmsStageInputChannels($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function _cmsStageOutputChannels($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function _cmsStageType($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function _cmsStageData($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 32|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function _cmsStageNext($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 36|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function _cmsStageDup($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($0)) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($0)) + 28|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (__cmsStageAllocPlaceholder($2,$4,$6,$8,$10,$12,$14,0)|0);
 $16 = ($15|0)==(0|0);
 if ($16) {
  $$0 = 0;
  return ($$0|0);
 }
 $17 = ((($0)) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($15)) + 8|0);
 HEAP32[$19>>2] = $18;
 $20 = HEAP32[$11>>2]|0;
 $21 = ($20|0)==(0|0);
 if ($21) {
  $25 = ((($15)) + 32|0);
  HEAP32[$25>>2] = 0;
  $$0 = $15;
  return ($$0|0);
 }
 $22 = (FUNCTION_TABLE_ii[$20 & 15]($0)|0);
 $23 = ((($15)) + 32|0);
 HEAP32[$23>>2] = $22;
 $24 = ($22|0)==(0|0);
 if (!($24)) {
  $$0 = $15;
  return ($$0|0);
 }
 _cmsStageFree($15);
 $$0 = 0;
 return ($$0|0);
}
function _cmsPipelineAlloc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $2 | $1;
 $4 = ($3>>>0)>(15);
 if ($4) {
  $$0 = 0;
  return ($$0|0);
 }
 $5 = (__cmsMallocZero($0,40)|0);
 $6 = ($5|0)==(0|0);
 if ($6) {
  $$0 = 0;
  return ($$0|0);
 }
 $7 = ((($5)) + 4|0);
 HEAP32[$7>>2] = $1;
 $8 = ((($5)) + 8|0);
 HEAP32[$8>>2] = $2;
 $9 = ((($5)) + 16|0);
 HEAP32[$9>>2] = 30;
 $10 = ((($5)) + 20|0);
 HEAP32[$10>>2] = 31;
 $11 = ((($5)) + 28|0);
 HEAP32[$11>>2] = 0;
 $12 = ((($5)) + 24|0);
 HEAP32[$12>>2] = 0;
 $13 = ((($5)) + 12|0);
 HEAP32[$13>>2] = $5;
 $14 = ((($5)) + 32|0);
 HEAP32[$14>>2] = $0;
 $15 = (_BlessLUT($5)|0);
 $16 = ($15|0)==(0);
 if (!($16)) {
  $$0 = $5;
  return ($$0|0);
 }
 __cmsFree($0,$5);
 $$0 = 0;
 return ($$0|0);
}
function __LUTeval16($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$021$lcssa = 0, $$02123 = 0, $$022 = 0, $$024 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1024|0;
 $3 = sp;
 $4 = ((($2)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 _From16ToFloat($0,$3,$5);
 $$022 = HEAP32[$2>>2]|0;
 $6 = ($$022|0)==(0|0);
 if ($6) {
  $$021$lcssa = 0;
 } else {
  $$02123 = 0;$$024 = $$022;
  while(1) {
   $7 = $$02123 ^ 1;
   $8 = ((($$024)) + 20|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = (($3) + ($$02123<<9)|0);
   $11 = (($3) + ($7<<9)|0);
   FUNCTION_TABLE_viii[$9 & 63]($10,$11,$$024);
   $12 = ((($$024)) + 36|0);
   $$0 = HEAP32[$12>>2]|0;
   $13 = ($$0|0)==(0|0);
   if ($13) {
    $$021$lcssa = $7;
    break;
   } else {
    $$02123 = $7;$$024 = $$0;
   }
  }
 }
 $14 = (($3) + ($$021$lcssa<<9)|0);
 $15 = ((($2)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 _FromFloatTo16($14,$1,$16);
 STACKTOP = sp;return;
}
function __LUTevalFloat($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$022$lcssa = 0, $$02224 = 0, $$023 = 0, $$025 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1024|0;
 $3 = sp;
 $4 = ((($2)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 << 2;
 _memcpy(($3|0),($0|0),($6|0))|0;
 $$023 = HEAP32[$2>>2]|0;
 $7 = ($$023|0)==(0|0);
 if ($7) {
  $$022$lcssa = 0;
 } else {
  $$02224 = 0;$$025 = $$023;
  while(1) {
   $8 = $$02224 ^ 1;
   $9 = ((($$025)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($3) + ($$02224<<9)|0);
   $12 = (($3) + ($8<<9)|0);
   FUNCTION_TABLE_viii[$10 & 63]($11,$12,$$025);
   $13 = ((($$025)) + 36|0);
   $$0 = HEAP32[$13>>2]|0;
   $14 = ($$0|0)==(0|0);
   if ($14) {
    $$022$lcssa = $8;
    break;
   } else {
    $$02224 = $8;$$025 = $$0;
   }
  }
 }
 $15 = (($3) + ($$022$lcssa<<9)|0);
 $16 = ((($2)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 << 2;
 _memcpy(($1|0),($15|0),($18|0))|0;
 STACKTOP = sp;return;
}
function _BlessLUT($0) {
 $0 = $0|0;
 var $$02631 = 0, $$027 = 0, $$027$in = 0, $$027$in29 = 0, $$02730 = 0, $$02732 = 0, $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$1 = 1;
  return ($$1|0);
 }
 $3 = (_cmsPipelineGetPtrToFirstStage($0)|0);
 $4 = (_cmsPipelineGetPtrToLastStage($0)|0);
 $5 = ($3|0)==(0|0);
 $6 = ($4|0)==(0|0);
 $or$cond = $5 | $6;
 if ($or$cond) {
  $$1 = 0;
  return ($$1|0);
 }
 $7 = ((($3)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 4|0);
 HEAP32[$9>>2] = $8;
 $10 = ((($4)) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($0)) + 8|0);
 HEAP32[$12>>2] = $11;
 $$027$in29 = ((($3)) + 36|0);
 $$02730 = HEAP32[$$027$in29>>2]|0;
 $13 = ($$02730|0)==(0|0);
 if ($13) {
  $$1 = 1;
  return ($$1|0);
 } else {
  $$02631 = $3;$$02732 = $$02730;
 }
 while(1) {
  $14 = ((($$02732)) + 12|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ((($$02631)) + 16|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($15|0)==($17|0);
  if (!($18)) {
   $$1 = 0;
   label = 6;
   break;
  }
  $19 = ((($$02631)) + 36|0);
  $20 = HEAP32[$19>>2]|0;
  $$027$in = ((($$02732)) + 36|0);
  $$027 = HEAP32[$$027$in>>2]|0;
  $21 = ($$027|0)==(0|0);
  if ($21) {
   $$1 = 1;
   label = 6;
   break;
  } else {
   $$02631 = $20;$$02732 = $$027;
  }
 }
 if ((label|0) == 6) {
  return ($$1|0);
 }
 return (0)|0;
}
function _cmsPipelineGetPtrToFirstStage($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function _cmsPipelineGetPtrToLastStage($0) {
 $0 = $0|0;
 var $$0 = 0, $$08 = 0, $$08$in = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = 0;$$08$in = $0;
 while(1) {
  $$08 = HEAP32[$$08$in>>2]|0;
  $1 = ($$08|0)==(0|0);
  $2 = ((($$08)) + 36|0);
  if ($1) {
   break;
  } else {
   $$0 = $$08;$$08$in = $2;
  }
 }
 return ($$0|0);
}
function _cmsPipelineInputChannels($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  ___assert_fail((27176|0),(26866|0),1407,(27196|0));
  // unreachable;
 } else {
  $2 = ((($0)) + 4|0);
  $3 = HEAP32[$2>>2]|0;
  return ($3|0);
 }
 return (0)|0;
}
function _cmsPipelineOutputChannels($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  ___assert_fail((27176|0),(26866|0),1413,(27221|0));
  // unreachable;
 } else {
  $2 = ((($0)) + 8|0);
  $3 = HEAP32[$2>>2]|0;
  return ($3|0);
 }
 return (0)|0;
}
function _cmsPipelineFree($0) {
 $0 = $0|0;
 var $$015 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = HEAP32[$0>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $$015 = $2;
  while(1) {
   $4 = ((($$015)) + 36|0);
   $5 = HEAP32[$4>>2]|0;
   _cmsStageFree($$015);
   $6 = ($5|0)==(0|0);
   if ($6) {
    break;
   } else {
    $$015 = $5;
   }
  }
 }
 $7 = ((($0)) + 24|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if (!($9)) {
  $10 = ((($0)) + 32|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($0)) + 12|0);
  $13 = HEAP32[$12>>2]|0;
  FUNCTION_TABLE_vii[$8 & 63]($11,$13);
 }
 $14 = ((($0)) + 32|0);
 $15 = HEAP32[$14>>2]|0;
 __cmsFree($15,$0);
 return;
}
function _cmsPipelineEval16($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0|0);
 if ($3) {
  ___assert_fail((27176|0),(26866|0),1441,(27247|0));
  // unreachable;
 } else {
  $4 = ((($2)) + 16|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($2)) + 12|0);
  $7 = HEAP32[$6>>2]|0;
  FUNCTION_TABLE_viii[$5 & 63]($0,$1,$7);
  return;
 }
}
function _cmsPipelineEvalFloat($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0|0);
 if ($3) {
  ___assert_fail((27176|0),(26866|0),1449,(27265|0));
  // unreachable;
 } else {
  $4 = ((($2)) + 20|0);
  $5 = HEAP32[$4>>2]|0;
  FUNCTION_TABLE_viii[$5 & 63]($0,$1,$2);
  return;
 }
}
function _cmsPipelineDup($0) {
 $0 = $0|0;
 var $$046 = 0, $$04649 = 0, $$04652 = 0, $$04750 = 0, $$048 = 0, $$051 = 0, $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$048 = 0;
  return ($$048|0);
 }
 $2 = ((($0)) + 32|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (_cmsPipelineAlloc($3,$5,$7)|0);
 $9 = ($8|0)==(0|0);
 if ($9) {
  $$048 = 0;
  return ($$048|0);
 }
 $$04649 = HEAP32[$0>>2]|0;
 $10 = ($$04649|0)==(0|0);
 L7: do {
  if (!($10)) {
   $$04652 = $$04649;$$04750 = 0;$$051 = 1;
   while(1) {
    $11 = (_cmsStageDup($$04652)|0);
    $12 = ($11|0)==(0|0);
    if ($12) {
     break;
    }
    $13 = ($$051|0)==(0);
    if ($13) {
     $14 = ($$04750|0)==(0|0);
     if (!($14)) {
      $15 = ((($$04750)) + 36|0);
      $$sink = $15;
      label = 10;
     }
    } else {
     $$sink = $8;
     label = 10;
    }
    if ((label|0) == 10) {
     label = 0;
     HEAP32[$$sink>>2] = $11;
    }
    $16 = ((($$04652)) + 36|0);
    $$046 = HEAP32[$16>>2]|0;
    $17 = ($$046|0)==(0|0);
    if ($17) {
     break L7;
    } else {
     $$04652 = $$046;$$04750 = $11;$$051 = 0;
    }
   }
   _cmsPipelineFree($8);
   $$048 = 0;
   return ($$048|0);
  }
 } while(0);
 $18 = ((($0)) + 16|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($8)) + 16|0);
 HEAP32[$20>>2] = $19;
 $21 = ((($0)) + 20|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($8)) + 20|0);
 HEAP32[$23>>2] = $22;
 $24 = ((($0)) + 28|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ((($8)) + 28|0);
 HEAP32[$26>>2] = $25;
 $27 = ((($0)) + 24|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ((($8)) + 24|0);
 HEAP32[$29>>2] = $28;
 $30 = HEAP32[$26>>2]|0;
 $31 = ($30|0)==(0|0);
 if (!($31)) {
  $32 = HEAP32[$2>>2]|0;
  $33 = ((($0)) + 12|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (FUNCTION_TABLE_iii[$30 & 15]($32,$34)|0);
  $36 = ((($8)) + 12|0);
  HEAP32[$36>>2] = $35;
 }
 $37 = ((($0)) + 36|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ((($8)) + 36|0);
 HEAP32[$39>>2] = $38;
 $40 = (_BlessLUT($8)|0);
 $41 = ($40|0)==(0);
 if (!($41)) {
  $$048 = $8;
  return ($$048|0);
 }
 $42 = HEAP32[$2>>2]|0;
 __cmsFree($42,$8);
 $$048 = 0;
 return ($$048|0);
}
function _cmsPipelineInsertStage($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$023 = 0, $$024 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0|0);
 $4 = ($2|0)==(0|0);
 $or$cond = $3 | $4;
 if ($or$cond) {
  $$023 = 0;
  return ($$023|0);
 }
 L4: do {
  switch ($1|0) {
  case 0:  {
   $5 = HEAP32[$0>>2]|0;
   $6 = ((($2)) + 36|0);
   HEAP32[$6>>2] = $5;
   HEAP32[$0>>2] = $2;
   break;
  }
  case 1:  {
   $7 = HEAP32[$0>>2]|0;
   $8 = ($7|0)==(0|0);
   if ($8) {
    HEAP32[$0>>2] = $2;
    break L4;
   } else {
    $$024 = $7;
   }
   while(1) {
    $9 = ((($$024)) + 36|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = ($10|0)==(0|0);
    if ($11) {
     break;
    } else {
     $$024 = $10;
    }
   }
   $12 = ((($$024)) + 36|0);
   HEAP32[$12>>2] = $2;
   $13 = ((($2)) + 36|0);
   HEAP32[$13>>2] = 0;
   break;
  }
  default: {
   $$023 = 0;
   return ($$023|0);
  }
  }
 } while(0);
 $14 = (_BlessLUT($0)|0);
 $$023 = $14;
 return ($$023|0);
}
function _cmsPipelineUnlinkStage($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$029 = 0, $$029$ph = 0, $$03033 = 0, $$03033$phi = 0, $$03132 = 0, $$sink = 0, $$sink$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $5 = ($2|0)==(0|0);
  if ($5) {
   return;
  }
  HEAP32[$2>>2] = 0;
  return;
 }
 switch ($1|0) {
 case 0:  {
  $6 = ((($3)) + 36|0);
  $7 = HEAP32[$6>>2]|0;
  HEAP32[$0>>2] = $7;
  $$029$ph = $3;$$sink$sink = $6;
  label = 8;
  break;
 }
 case 1:  {
  $$03033 = 0;$$03132 = $3;
  while(1) {
   $8 = ((($$03132)) + 36|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==(0|0);
   if ($10) {
    break;
   } else {
    $$03033$phi = $$03132;$$03132 = $9;$$03033 = $$03033$phi;
   }
  }
  $11 = ($$03033|0)!=(0|0);
  $12 = ((($$03033)) + 36|0);
  $$sink = $11 ? $12 : $0;
  $$029$ph = $$03132;$$sink$sink = $$sink;
  label = 8;
  break;
 }
 default: {
  $$029 = 0;
 }
 }
 if ((label|0) == 8) {
  HEAP32[$$sink$sink>>2] = 0;
  $$029 = $$029$ph;
 }
 $13 = ($2|0)==(0|0);
 if ($13) {
  _cmsStageFree($$029);
 } else {
  HEAP32[$2>>2] = $$029;
 }
 (_BlessLUT($0)|0);
 return;
}
function _cmsPipelineCat($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$012 = 0, $$013 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ($2|0)==(0|0);
 $4 = HEAP32[$1>>2]|0;
 $5 = ($4|0)==(0|0);
 $or$cond = $3 & $5;
 L1: do {
  if ($or$cond) {
   $6 = ((($1)) + 4|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ((($0)) + 4|0);
   HEAP32[$8>>2] = $7;
   $9 = ((($1)) + 8|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ((($0)) + 8|0);
   HEAP32[$11>>2] = $10;
  } else {
   $12 = ($4|0)==(0|0);
   if (!($12)) {
    $$013 = $4;
    while(1) {
     $13 = (_cmsStageDup($$013)|0);
     $14 = (_cmsPipelineInsertStage($0,1,$13)|0);
     $15 = ($14|0)==(0);
     if ($15) {
      $$012 = 0;
      break;
     }
     $16 = ((($$013)) + 36|0);
     $17 = HEAP32[$16>>2]|0;
     $18 = ($17|0)==(0|0);
     if ($18) {
      break L1;
     } else {
      $$013 = $17;
     }
    }
    return ($$012|0);
   }
  }
 } while(0);
 $19 = (_BlessLUT($0)|0);
 $$012 = $19;
 return ($$012|0);
}
function __cmsPipelineSetOptimizationParameters($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($0)) + 16|0);
 HEAP32[$5>>2] = $1;
 $6 = ((($0)) + 28|0);
 HEAP32[$6>>2] = $4;
 $7 = ((($0)) + 24|0);
 HEAP32[$7>>2] = $3;
 $8 = ((($0)) + 12|0);
 HEAP32[$8>>2] = $2;
 return;
}
function _cmsPipelineEvalReverseFloat($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$048 = 0, $$05058 = 0, $$059 = 0.0, $$256 = 0, $$off = 0, $$sink = 0.0, $$sink51 = 0.0, $$sink51$1 = 0.0, $$sink51$2 = 0.0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0;
 var $63 = 0.0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0;
 var $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0;
 var $exitcond = 0, $switch = 0, $umax = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0;
 $4 = sp + 168|0;
 $5 = sp + 152|0;
 $6 = sp + 136|0;
 $7 = sp + 120|0;
 $8 = sp + 96|0;
 $9 = sp + 72|0;
 $10 = sp;
 $11 = ((($3)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $$off = (($12) + -3)|0;
 $switch = ($$off>>>0)<(2);
 if (!($switch)) {
  $$048 = 0;
  STACKTOP = sp;return ($$048|0);
 }
 $13 = ((($3)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(3);
 if (!($15)) {
  $$048 = 0;
  STACKTOP = sp;return ($$048|0);
 }
 $16 = ($2|0)==(0|0);
 if ($16) {
  $17 = ((($5)) + 8|0);
  HEAPF32[$17>>2] = 0.30000001192092896;
  $18 = ((($5)) + 4|0);
  HEAPF32[$18>>2] = 0.30000001192092896;
  HEAPF32[$5>>2] = 0.30000001192092896;
 } else {
  ;HEAP32[$5>>2]=HEAP32[$2>>2]|0;HEAP32[$5+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$2+8>>2]|0;
 }
 $19 = HEAP32[$11>>2]|0;
 $20 = ($19|0)==(4);
 if ($20) {
  $21 = ((($0)) + 12|0);
  $22 = +HEAPF32[$21>>2];
  $$sink = $22;
 } else {
  $$sink = 0.0;
 }
 $23 = ((($5)) + 12|0);
 HEAPF32[$23>>2] = $$sink;
 $24 = ((($5)) + 4|0);
 $25 = ((($6)) + 4|0);
 $26 = ((($5)) + 8|0);
 $27 = ((($6)) + 8|0);
 $28 = ((($6)) + 12|0);
 $29 = ((($7)) + 4|0);
 $30 = ((($4)) + 4|0);
 $31 = ((($7)) + 8|0);
 $32 = ((($4)) + 8|0);
 $33 = ((($4)) + 4|0);
 $34 = ((($0)) + 4|0);
 $35 = ((($9)) + 8|0);
 $36 = ((($4)) + 8|0);
 $37 = ((($0)) + 8|0);
 $38 = ((($9)) + 16|0);
 $39 = ((($8)) + 8|0);
 $40 = ((($5)) + 4|0);
 $41 = ((($8)) + 16|0);
 $42 = ((($5)) + 8|0);
 $43 = ((($5)) + 4|0);
 $44 = ((($5)) + 8|0);
 $$05058 = 0;$$059 = 1.0E+20;
 while(1) {
  _cmsPipelineEvalFloat($5,$4,$3);
  $45 = (+_EuclideanDistance($4,$0));
  $46 = $45;
  $47 = !($46 >= $$059);
  if (!($47)) {
   $$048 = 1;
   label = 19;
   break;
  }
  $48 = HEAP32[$11>>2]|0;
  $49 = ($48|0)==(0);
  if (!($49)) {
   $50 = HEAP32[$11>>2]|0;
   $51 = ($50>>>0)>(1);
   $umax = $51 ? $50 : 1;
   $52 = $umax << 2;
   _memcpy(($1|0),($5|0),($52|0))|0;
  }
  $53 = !($45 <= 0.0);
  if ($53) {
   $$256 = 0;
  } else {
   $$048 = 1;
   label = 19;
   break;
  }
  while(1) {
   $54 = HEAP32[$5>>2]|0;
   HEAP32[$6>>2] = $54;
   $55 = HEAP32[$24>>2]|0;
   HEAP32[$25>>2] = $55;
   $56 = HEAP32[$26>>2]|0;
   HEAP32[$27>>2] = $56;
   $57 = HEAP32[$23>>2]|0;
   HEAP32[$28>>2] = $57;
   $58 = (($6) + ($$256<<2)|0);
   _IncDelta($58);
   _cmsPipelineEvalFloat($6,$7,$3);
   $59 = +HEAPF32[$7>>2];
   $60 = +HEAPF32[$4>>2];
   $61 = $59 - $60;
   $62 = $61 / 0.0010000000474974513;
   $63 = $62;
   $64 = (($10) + ($$256<<3)|0);
   HEAPF64[$64>>3] = $63;
   $65 = +HEAPF32[$29>>2];
   $66 = +HEAPF32[$30>>2];
   $67 = $65 - $66;
   $68 = $67 / 0.0010000000474974513;
   $69 = $68;
   $70 = (((($10)) + 24|0) + ($$256<<3)|0);
   HEAPF64[$70>>3] = $69;
   $71 = +HEAPF32[$31>>2];
   $72 = +HEAPF32[$32>>2];
   $73 = $71 - $72;
   $74 = $73 / 0.0010000000474974513;
   $75 = $74;
   $76 = (((($10)) + 48|0) + ($$256<<3)|0);
   HEAPF64[$76>>3] = $75;
   $77 = (($$256) + 1)|0;
   $exitcond = ($77|0)==(3);
   if ($exitcond) {
    break;
   } else {
    $$256 = $77;
   }
  }
  $78 = +HEAPF32[$4>>2];
  $79 = +HEAPF32[$0>>2];
  $80 = $78 - $79;
  $81 = $80;
  HEAPF64[$9>>3] = $81;
  $82 = +HEAPF32[$33>>2];
  $83 = +HEAPF32[$34>>2];
  $84 = $82 - $83;
  $85 = $84;
  HEAPF64[$35>>3] = $85;
  $86 = +HEAPF32[$36>>2];
  $87 = +HEAPF32[$37>>2];
  $88 = $86 - $87;
  $89 = $88;
  HEAPF64[$38>>3] = $89;
  $90 = (__cmsMAT3solve($8,$10,$9)|0);
  $91 = ($90|0)==(0);
  if ($91) {
   $$048 = 0;
   label = 19;
   break;
  }
  $92 = +HEAPF64[$8>>3];
  $93 = $92;
  $94 = +HEAPF32[$5>>2];
  $95 = $94 - $93;
  HEAPF32[$5>>2] = $95;
  $96 = +HEAPF64[$39>>3];
  $97 = $96;
  $98 = +HEAPF32[$40>>2];
  $99 = $98 - $97;
  HEAPF32[$40>>2] = $99;
  $100 = +HEAPF64[$41>>3];
  $101 = $100;
  $102 = +HEAPF32[$42>>2];
  $103 = $102 - $101;
  HEAPF32[$42>>2] = $103;
  $104 = +HEAPF32[$5>>2];
  $105 = $104 < 0.0;
  if ($105) {
   $$sink51 = 0.0;
   label = 17;
  } else {
   $106 = $104 > 1.0;
   if ($106) {
    $$sink51 = 1.0;
    label = 17;
   }
  }
  if ((label|0) == 17) {
   label = 0;
   HEAPF32[$5>>2] = $$sink51;
  }
  $107 = +HEAPF32[$43>>2];
  $108 = $107 < 0.0;
  if ($108) {
   $$sink51$1 = 0.0;
   label = 21;
  } else {
   $109 = $107 > 1.0;
   if ($109) {
    $$sink51$1 = 1.0;
    label = 21;
   }
  }
  if ((label|0) == 21) {
   label = 0;
   HEAPF32[$43>>2] = $$sink51$1;
  }
  $110 = +HEAPF32[$44>>2];
  $111 = $110 < 0.0;
  if ($111) {
   $$sink51$2 = 0.0;
   label = 24;
  } else {
   $112 = $110 > 1.0;
   if ($112) {
    $$sink51$2 = 1.0;
    label = 24;
   }
  }
  if ((label|0) == 24) {
   label = 0;
   HEAPF32[$44>>2] = $$sink51$2;
  }
  $113 = (($$05058) + 1)|0;
  $114 = ($113>>>0)<(30);
  if ($114) {
   $$05058 = $113;$$059 = $46;
  } else {
   $$048 = 1;
   label = 19;
   break;
  }
 }
 if ((label|0) == 19) {
  STACKTOP = sp;return ($$048|0);
 }
 return (0)|0;
}
function _EuclideanDistance($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, $sqrtf = 0.0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $2 = +HEAPF32[$1>>2];
 $3 = +HEAPF32[$0>>2];
 $4 = $2 - $3;
 $5 = $4 * $4;
 $6 = $5 + 0.0;
 $7 = ((($1)) + 4|0);
 $8 = +HEAPF32[$7>>2];
 $9 = ((($0)) + 4|0);
 $10 = +HEAPF32[$9>>2];
 $11 = $8 - $10;
 $12 = $11 * $11;
 $13 = $6 + $12;
 $14 = ((($1)) + 8|0);
 $15 = +HEAPF32[$14>>2];
 $16 = ((($0)) + 8|0);
 $17 = +HEAPF32[$16>>2];
 $18 = $15 - $17;
 $19 = $18 * $18;
 $20 = $13 + $19;
 $sqrtf = (+Math_sqrt((+$20)));
 return (+$sqrtf);
}
function _IncDelta($0) {
 $0 = $0|0;
 var $$sink = 0.0, $$sink$v = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = +HEAPF32[$0>>2];
 $2 = $1;
 $3 = $2 < 0.99899999995250255;
 $$sink$v = $3 ? 0.0010000000474974513 : -0.0010000000474974513;
 $$sink = $1 + $$sink$v;
 HEAPF32[$0>>2] = $$sink;
 return;
}
function __cmsVEC3init($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = +$1;
 $2 = +$2;
 $3 = +$3;
 var $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[$0>>3] = $1;
 $4 = ((($0)) + 8|0);
 HEAPF64[$4>>3] = $2;
 $5 = ((($0)) + 16|0);
 HEAPF64[$5>>3] = $3;
 return;
}
function __cmsMAT3identity($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __cmsVEC3init($0,1.0,0.0,0.0);
 $1 = ((($0)) + 24|0);
 __cmsVEC3init($1,0.0,1.0,0.0);
 $2 = ((($0)) + 48|0);
 __cmsVEC3init($2,0.0,0.0,1.0);
 return;
}
function __cmsMAT3isIdentity($0) {
 $0 = $0|0;
 var $$01216 = 0, $$013 = 0, $$015 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $1 = sp;
 __cmsMAT3identity($1);
 $$01216 = 0;
 L1: while(1) {
  $$015 = 0;
  while(1) {
   $4 = ((($0) + (($$01216*24)|0)|0) + ($$015<<3)|0);
   $5 = +HEAPF64[$4>>3];
   $6 = ((($1) + (($$01216*24)|0)|0) + ($$015<<3)|0);
   $7 = +HEAPF64[$6>>3];
   $8 = (_CloseEnough($5,$7)|0);
   $9 = ($8|0)==(0);
   $3 = (($$015) + 1)|0;
   if ($9) {
    $$013 = 0;
    label = 6;
    break L1;
   }
   $2 = ($3|0)<(3);
   if ($2) {
    $$015 = $3;
   } else {
    break;
   }
  }
  $10 = (($$01216) + 1)|0;
  $11 = ($10|0)<(3);
  if ($11) {
   $$01216 = $10;
  } else {
   $$013 = 1;
   label = 6;
   break;
  }
 }
 if ((label|0) == 6) {
  STACKTOP = sp;return ($$013|0);
 }
 return (0)|0;
}
function _CloseEnough($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1 - $0;
 $3 = (+Math_abs((+$2)));
 $4 = $3 < 1.5259021896696422E-5;
 $5 = $4&1;
 return ($5|0);
}
function __cmsMAT3per($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $100 = 0.0, $101 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0.0;
 var $28 = 0.0, $29 = 0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0;
 var $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0;
 var $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0;
 var $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $3 = +HEAPF64[$1>>3];
 $4 = +HEAPF64[$2>>3];
 $5 = $3 * $4;
 $6 = ((($1)) + 8|0);
 $7 = +HEAPF64[$6>>3];
 $8 = ((($2)) + 24|0);
 $9 = +HEAPF64[$8>>3];
 $10 = $7 * $9;
 $11 = $5 + $10;
 $12 = ((($1)) + 16|0);
 $13 = +HEAPF64[$12>>3];
 $14 = ((($2)) + 48|0);
 $15 = +HEAPF64[$14>>3];
 $16 = $13 * $15;
 $17 = $11 + $16;
 $18 = ((($2)) + 8|0);
 $19 = +HEAPF64[$18>>3];
 $20 = $3 * $19;
 $21 = ((($2)) + 32|0);
 $22 = +HEAPF64[$21>>3];
 $23 = $7 * $22;
 $24 = $20 + $23;
 $25 = ((($2)) + 56|0);
 $26 = +HEAPF64[$25>>3];
 $27 = $13 * $26;
 $28 = $24 + $27;
 $29 = ((($2)) + 16|0);
 $30 = +HEAPF64[$29>>3];
 $31 = $3 * $30;
 $32 = ((($2)) + 40|0);
 $33 = +HEAPF64[$32>>3];
 $34 = $7 * $33;
 $35 = $31 + $34;
 $36 = ((($2)) + 64|0);
 $37 = +HEAPF64[$36>>3];
 $38 = $13 * $37;
 $39 = $35 + $38;
 __cmsVEC3init($0,$17,$28,$39);
 $40 = ((($0)) + 24|0);
 $41 = ((($1)) + 24|0);
 $42 = +HEAPF64[$41>>3];
 $43 = +HEAPF64[$2>>3];
 $44 = $42 * $43;
 $45 = ((($1)) + 32|0);
 $46 = +HEAPF64[$45>>3];
 $47 = +HEAPF64[$8>>3];
 $48 = $46 * $47;
 $49 = $44 + $48;
 $50 = ((($1)) + 40|0);
 $51 = +HEAPF64[$50>>3];
 $52 = +HEAPF64[$14>>3];
 $53 = $51 * $52;
 $54 = $49 + $53;
 $55 = +HEAPF64[$18>>3];
 $56 = $42 * $55;
 $57 = +HEAPF64[$21>>3];
 $58 = $46 * $57;
 $59 = $56 + $58;
 $60 = +HEAPF64[$25>>3];
 $61 = $51 * $60;
 $62 = $59 + $61;
 $63 = +HEAPF64[$29>>3];
 $64 = $42 * $63;
 $65 = +HEAPF64[$32>>3];
 $66 = $46 * $65;
 $67 = $64 + $66;
 $68 = +HEAPF64[$36>>3];
 $69 = $51 * $68;
 $70 = $67 + $69;
 __cmsVEC3init($40,$54,$62,$70);
 $71 = ((($0)) + 48|0);
 $72 = ((($1)) + 48|0);
 $73 = +HEAPF64[$72>>3];
 $74 = +HEAPF64[$2>>3];
 $75 = $73 * $74;
 $76 = ((($1)) + 56|0);
 $77 = +HEAPF64[$76>>3];
 $78 = +HEAPF64[$8>>3];
 $79 = $77 * $78;
 $80 = $75 + $79;
 $81 = ((($1)) + 64|0);
 $82 = +HEAPF64[$81>>3];
 $83 = +HEAPF64[$14>>3];
 $84 = $82 * $83;
 $85 = $80 + $84;
 $86 = +HEAPF64[$18>>3];
 $87 = $73 * $86;
 $88 = +HEAPF64[$21>>3];
 $89 = $77 * $88;
 $90 = $87 + $89;
 $91 = +HEAPF64[$25>>3];
 $92 = $82 * $91;
 $93 = $90 + $92;
 $94 = +HEAPF64[$29>>3];
 $95 = $73 * $94;
 $96 = +HEAPF64[$32>>3];
 $97 = $77 * $96;
 $98 = $95 + $97;
 $99 = +HEAPF64[$36>>3];
 $100 = $82 * $99;
 $101 = $98 + $100;
 __cmsVEC3init($71,$85,$93,$101);
 return;
}
function __cmsMAT3inverse($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0.0;
 var $28 = 0.0, $29 = 0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0.0;
 var $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0.0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0;
 var $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0.0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0, $80 = 0.0, $81 = 0.0;
 var $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 32|0);
 $3 = +HEAPF64[$2>>3];
 $4 = ((($0)) + 64|0);
 $5 = +HEAPF64[$4>>3];
 $6 = $3 * $5;
 $7 = ((($0)) + 40|0);
 $8 = +HEAPF64[$7>>3];
 $9 = ((($0)) + 56|0);
 $10 = +HEAPF64[$9>>3];
 $11 = $8 * $10;
 $12 = $6 - $11;
 $13 = ((($0)) + 24|0);
 $14 = +HEAPF64[$13>>3];
 $15 = $5 * $14;
 $16 = ((($0)) + 48|0);
 $17 = +HEAPF64[$16>>3];
 $18 = $8 * $17;
 $19 = $18 - $15;
 $20 = $10 * $14;
 $21 = $3 * $17;
 $22 = $20 - $21;
 $23 = +HEAPF64[$0>>3];
 $24 = $12 * $23;
 $25 = ((($0)) + 8|0);
 $26 = +HEAPF64[$25>>3];
 $27 = $26 * $19;
 $28 = $24 + $27;
 $29 = ((($0)) + 16|0);
 $30 = +HEAPF64[$29>>3];
 $31 = $22 * $30;
 $32 = $28 + $31;
 $33 = (+Math_abs((+$32)));
 $34 = $33 < 1.0E-4;
 if ($34) {
  $$0 = 0;
  return ($$0|0);
 }
 $35 = $12 / $32;
 HEAPF64[$1>>3] = $35;
 $36 = +HEAPF64[$29>>3];
 $37 = +HEAPF64[$9>>3];
 $38 = $36 * $37;
 $39 = +HEAPF64[$25>>3];
 $40 = +HEAPF64[$4>>3];
 $41 = $39 * $40;
 $42 = $38 - $41;
 $43 = $42 / $32;
 $44 = ((($1)) + 8|0);
 HEAPF64[$44>>3] = $43;
 $45 = +HEAPF64[$25>>3];
 $46 = +HEAPF64[$7>>3];
 $47 = $45 * $46;
 $48 = +HEAPF64[$29>>3];
 $49 = +HEAPF64[$2>>3];
 $50 = $48 * $49;
 $51 = $47 - $50;
 $52 = $51 / $32;
 $53 = ((($1)) + 16|0);
 HEAPF64[$53>>3] = $52;
 $54 = $19 / $32;
 $55 = ((($1)) + 24|0);
 HEAPF64[$55>>3] = $54;
 $56 = +HEAPF64[$0>>3];
 $57 = +HEAPF64[$4>>3];
 $58 = $56 * $57;
 $59 = +HEAPF64[$29>>3];
 $60 = +HEAPF64[$16>>3];
 $61 = $59 * $60;
 $62 = $58 - $61;
 $63 = $62 / $32;
 $64 = ((($1)) + 32|0);
 HEAPF64[$64>>3] = $63;
 $65 = +HEAPF64[$29>>3];
 $66 = +HEAPF64[$13>>3];
 $67 = $65 * $66;
 $68 = +HEAPF64[$0>>3];
 $69 = +HEAPF64[$7>>3];
 $70 = $68 * $69;
 $71 = $67 - $70;
 $72 = $71 / $32;
 $73 = ((($1)) + 40|0);
 HEAPF64[$73>>3] = $72;
 $74 = $22 / $32;
 $75 = ((($1)) + 48|0);
 HEAPF64[$75>>3] = $74;
 $76 = +HEAPF64[$25>>3];
 $77 = +HEAPF64[$16>>3];
 $78 = $76 * $77;
 $79 = +HEAPF64[$0>>3];
 $80 = +HEAPF64[$9>>3];
 $81 = $79 * $80;
 $82 = $78 - $81;
 $83 = $82 / $32;
 $84 = ((($1)) + 56|0);
 HEAPF64[$84>>3] = $83;
 $85 = +HEAPF64[$0>>3];
 $86 = +HEAPF64[$2>>3];
 $87 = $85 * $86;
 $88 = +HEAPF64[$25>>3];
 $89 = +HEAPF64[$13>>3];
 $90 = $88 * $89;
 $91 = $87 - $90;
 $92 = $91 / $32;
 $93 = ((($1)) + 64|0);
 HEAPF64[$93>>3] = $92;
 $$0 = 1;
 return ($$0|0);
}
function __cmsMAT3solve($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0;
 $3 = sp + 72|0;
 $4 = sp;
 dest=$3; src=$1; stop=dest+72|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $5 = (__cmsMAT3inverse($3,$4)|0);
 $6 = ($5|0)==(0);
 if ($6) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 __cmsMAT3eval($0,$4,$2);
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function __cmsMAT3eval($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0.0;
 var $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0;
 var $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = +HEAPF64[$1>>3];
 $4 = +HEAPF64[$2>>3];
 $5 = $3 * $4;
 $6 = ((($1)) + 8|0);
 $7 = +HEAPF64[$6>>3];
 $8 = ((($2)) + 8|0);
 $9 = +HEAPF64[$8>>3];
 $10 = $7 * $9;
 $11 = $5 + $10;
 $12 = ((($1)) + 16|0);
 $13 = +HEAPF64[$12>>3];
 $14 = ((($2)) + 16|0);
 $15 = +HEAPF64[$14>>3];
 $16 = $13 * $15;
 $17 = $11 + $16;
 HEAPF64[$0>>3] = $17;
 $18 = ((($1)) + 24|0);
 $19 = +HEAPF64[$18>>3];
 $20 = +HEAPF64[$2>>3];
 $21 = $19 * $20;
 $22 = ((($1)) + 32|0);
 $23 = +HEAPF64[$22>>3];
 $24 = +HEAPF64[$8>>3];
 $25 = $23 * $24;
 $26 = $21 + $25;
 $27 = ((($1)) + 40|0);
 $28 = +HEAPF64[$27>>3];
 $29 = +HEAPF64[$14>>3];
 $30 = $28 * $29;
 $31 = $26 + $30;
 $32 = ((($0)) + 8|0);
 HEAPF64[$32>>3] = $31;
 $33 = ((($1)) + 48|0);
 $34 = +HEAPF64[$33>>3];
 $35 = +HEAPF64[$2>>3];
 $36 = $34 * $35;
 $37 = ((($1)) + 56|0);
 $38 = +HEAPF64[$37>>3];
 $39 = +HEAPF64[$8>>3];
 $40 = $38 * $39;
 $41 = $36 + $40;
 $42 = ((($1)) + 64|0);
 $43 = +HEAPF64[$42>>3];
 $44 = +HEAPF64[$14>>3];
 $45 = $43 * $44;
 $46 = $41 + $45;
 $47 = ((($0)) + 16|0);
 HEAPF64[$47>>3] = $46;
 return;
}
function _cmsMLUalloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0);
 $$ = $2 ? 2 : $1;
 $3 = (__cmsMallocZero($0,28)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = 0;
  return ($$0|0);
 }
 HEAP32[$3>>2] = $0;
 $5 = (__cmsCalloc($0,$$,12)|0);
 $6 = ((($3)) + 12|0);
 HEAP32[$6>>2] = $5;
 $7 = ($5|0)==(0|0);
 if ($7) {
  __cmsFree($0,$3);
  $$0 = 0;
  return ($$0|0);
 } else {
  $8 = ((($3)) + 4|0);
  HEAP32[$8>>2] = $$;
  $9 = ((($3)) + 8|0);
  HEAP32[$9>>2] = 0;
  $$0 = $3;
  return ($$0|0);
 }
 return (0)|0;
}
function _cmsMLUsetASCII($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$03334 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $4 = (_strlen($3)|0);
 $5 = (_strTo16($1)|0);
 $6 = (_strTo16($2)|0);
 $7 = ($0|0)==(0|0);
 if ($7) {
  $$0 = 0;
  return ($$0|0);
 }
 $8 = HEAP32[$0>>2]|0;
 $9 = (__cmsCalloc($8,$4,4)|0);
 $10 = ($9|0)==(0|0);
 if ($10) {
  $$0 = 0;
  return ($$0|0);
 }
 $11 = ($4|0)==(0);
 if (!($11)) {
  $$03334 = 0;
  while(1) {
   $12 = (($3) + ($$03334)|0);
   $13 = HEAP8[$12>>0]|0;
   $14 = $13 << 24 >> 24;
   $15 = (($9) + ($$03334<<2)|0);
   HEAP32[$15>>2] = $14;
   $16 = (($$03334) + 1)|0;
   $exitcond = ($16|0)==($4|0);
   if ($exitcond) {
    break;
   } else {
    $$03334 = $16;
   }
  }
 }
 $17 = $4 << 2;
 $18 = (_AddMLUBlock($0,$17,$9,$5,$6)|0);
 $19 = HEAP32[$0>>2]|0;
 __cmsFree($19,$9);
 $$0 = $18;
 return ($$0|0);
}
function _strTo16($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 $3 = $2 << 8;
 $4 = ((($0)) + 1|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = $3 | $6;
 $8 = $7&65535;
 return ($8|0);
}
function _AddMLUBlock($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ($0|0)==(0|0);
 if ($5) {
  $$0 = 0;
  return ($$0|0);
 }
 $6 = ((($0)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($0)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7>>>0)<($9>>>0);
 if (!($10)) {
  $11 = (_GrowMLUtable($0)|0);
  $12 = ($11|0)==(0);
  if ($12) {
   $$0 = 0;
   return ($$0|0);
  }
 }
 $13 = (_SearchMLUEntry($0,$3,$4)|0);
 $14 = ($13|0)>(-1);
 if ($14) {
  $$0 = 0;
  return ($$0|0);
 }
 $15 = ((($0)) + 16|0);
 $16 = ((($0)) + 20|0);
 while(1) {
  $17 = HEAP32[$15>>2]|0;
  $18 = HEAP32[$16>>2]|0;
  $19 = (($17) - ($18))|0;
  $20 = ($19>>>0)<($1>>>0);
  if (!($20)) {
   break;
  }
  $21 = (_GrowMLUpool($0)|0);
  $22 = ($21|0)==(0);
  if ($22) {
   $$0 = 0;
   label = 10;
   break;
  }
 }
 if ((label|0) == 10) {
  return ($$0|0);
 }
 $23 = ((($0)) + 24|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)==(0|0);
 if ($25) {
  $$0 = 0;
  return ($$0|0);
 }
 $26 = (($24) + ($18)|0);
 _memmove(($26|0),($2|0),($1|0))|0;
 $27 = HEAP32[$16>>2]|0;
 $28 = (($27) + ($1))|0;
 HEAP32[$16>>2] = $28;
 $29 = ((($0)) + 12|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = HEAP32[$6>>2]|0;
 $32 = (((($30) + (($31*12)|0)|0)) + 4|0);
 HEAP32[$32>>2] = $18;
 $33 = HEAP32[$29>>2]|0;
 $34 = HEAP32[$6>>2]|0;
 $35 = (((($33) + (($34*12)|0)|0)) + 8|0);
 HEAP32[$35>>2] = $1;
 $36 = HEAP32[$29>>2]|0;
 $37 = HEAP32[$6>>2]|0;
 $38 = (((($36) + (($37*12)|0)|0)) + 2|0);
 HEAP16[$38>>1] = $4;
 $39 = HEAP32[$29>>2]|0;
 $40 = HEAP32[$6>>2]|0;
 $41 = (($39) + (($40*12)|0)|0);
 HEAP16[$41>>1] = $3;
 $42 = HEAP32[$6>>2]|0;
 $43 = (($42) + 1)|0;
 HEAP32[$6>>2] = $43;
 $$0 = 1;
 return ($$0|0);
}
function _GrowMLUtable($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 << 1;
 $5 = $3 & 2147483647;
 $6 = ($5|0)==($3|0);
 if (!($6)) {
  $$0 = 0;
  return ($$0|0);
 }
 $7 = HEAP32[$0>>2]|0;
 $8 = ((($0)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($3*24)|0;
 $11 = (__cmsRealloc($7,$9,$10)|0);
 $12 = ($11|0)==(0|0);
 if ($12) {
  $$0 = 0;
  return ($$0|0);
 }
 HEAP32[$8>>2] = $11;
 HEAP32[$2>>2] = $4;
 $$0 = 1;
 return ($$0|0);
}
function _SearchMLUEntry($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$012 = 0, $$013 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0|0);
 if ($3) {
  $$012 = -1;
  return ($$012|0);
 }
 $4 = ((($0)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  $$012 = -1;
  return ($$012|0);
 }
 $7 = ((($0)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $$013 = 0;
 while(1) {
  $9 = (((($8) + (($$013*12)|0)|0)) + 2|0);
  $10 = HEAP16[$9>>1]|0;
  $11 = ($10<<16>>16)==($2<<16>>16);
  if ($11) {
   $12 = (($8) + (($$013*12)|0)|0);
   $13 = HEAP16[$12>>1]|0;
   $14 = ($13<<16>>16)==($1<<16>>16);
   if ($14) {
    $$012 = $$013;
    label = 7;
    break;
   }
  }
  $15 = (($$013) + 1)|0;
  $16 = HEAP32[$4>>2]|0;
  $17 = ($15>>>0)<($16>>>0);
  if ($17) {
   $$013 = $15;
  } else {
   $$012 = -1;
   label = 7;
   break;
  }
 }
 if ((label|0) == 7) {
  return ($$012|0);
 }
 return (0)|0;
}
function _GrowMLUpool($0) {
 $0 = $0|0;
 var $$0 = 0, $$016 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 $2 = ((($0)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 $5 = $3 << 1;
 $$016 = $4 ? 256 : $5;
 $6 = ($$016>>>0)<($3>>>0);
 if ($6) {
  $$0 = 0;
  return ($$0|0);
 }
 $7 = HEAP32[$0>>2]|0;
 $8 = ((($0)) + 24|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (__cmsRealloc($7,$9,$$016)|0);
 $11 = ($10|0)==(0|0);
 if ($11) {
  $$0 = 0;
  return ($$0|0);
 }
 HEAP32[$8>>2] = $10;
 HEAP32[$2>>2] = $$016;
 $$0 = 1;
 return ($$0|0);
}
function _cmsMLUsetWide($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($0|0)==(0|0);
 $5 = ($3|0)==(0|0);
 $or$cond = $4 | $5;
 if ($or$cond) {
  $$0 = 0;
  return ($$0|0);
 }
 $6 = (_strTo16($2)|0);
 $7 = (_strTo16($1)|0);
 $8 = (_mywcslen($3)|0);
 $9 = $8 << 2;
 $10 = (_AddMLUBlock($0,$9,$3,$7,$6)|0);
 $$0 = $10;
 return ($$0|0);
}
function _mywcslen($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $0;
 while(1) {
  $1 = HEAP32[$$0>>2]|0;
  $2 = ($1|0)==(0);
  $3 = ((($$0)) + 4|0);
  if ($2) {
   break;
  } else {
   $$0 = $3;
  }
 }
 $4 = $$0;
 $5 = $0;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 return ($7|0);
}
function _cmsMLUdup($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_cmsMLUalloc($2,$4)|0);
 $6 = ($5|0)==(0|0);
 if ($6) {
  $$0 = 0;
  return ($$0|0);
 }
 $7 = ((($5)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$3>>2]|0;
 $10 = ($8>>>0)<($9>>>0);
 do {
  if (!($10)) {
   $11 = ((($5)) + 12|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==(0|0);
   if (!($13)) {
    $14 = ((($0)) + 12|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ($15|0)==(0|0);
    if (!($16)) {
     $17 = ($9*12)|0;
     _memmove(($12|0),($15|0),($17|0))|0;
     $18 = HEAP32[$3>>2]|0;
     $19 = ((($5)) + 8|0);
     HEAP32[$19>>2] = $18;
     $20 = ((($0)) + 20|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($21|0)==(0);
     if ($22) {
      $23 = ((($5)) + 24|0);
      HEAP32[$23>>2] = 0;
     } else {
      $24 = HEAP32[$0>>2]|0;
      $25 = (__cmsMalloc($24,$21)|0);
      $26 = ((($5)) + 24|0);
      HEAP32[$26>>2] = $25;
      $27 = ($25|0)==(0|0);
      if ($27) {
       break;
      }
     }
     $28 = HEAP32[$20>>2]|0;
     $29 = ((($5)) + 16|0);
     HEAP32[$29>>2] = $28;
     $30 = ((($5)) + 24|0);
     $31 = HEAP32[$30>>2]|0;
     $32 = ($31|0)==(0|0);
     if (!($32)) {
      $33 = ((($0)) + 24|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = ($34|0)==(0|0);
      if (!($35)) {
       _memmove(($31|0),($34|0),($28|0))|0;
       $36 = HEAP32[$20>>2]|0;
       $37 = ((($5)) + 20|0);
       HEAP32[$37>>2] = $36;
       $$0 = $5;
       return ($$0|0);
      }
     }
    }
   }
  }
 } while(0);
 _cmsMLUfree($5);
 $$0 = 0;
 return ($$0|0);
}
function _cmsMLUfree($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  $5 = HEAP32[$0>>2]|0;
  __cmsFree($5,$3);
 }
 $6 = ((($0)) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if (!($8)) {
  $9 = HEAP32[$0>>2]|0;
  __cmsFree($9,$7);
 }
 $10 = HEAP32[$0>>2]|0;
 __cmsFree($10,$0);
 return;
}
function _cmsMLUgetASCII($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$0 = 0, $$03839 = 0, $$sink1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $5 = sp;
 HEAP32[$5>>2] = 0;
 $6 = ($0|0)==(0|0);
 if ($6) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = (_strTo16($2)|0);
 $8 = (_strTo16($1)|0);
 $9 = (__cmsMLUgetWide($0,$5,$8,$7,0,0)|0);
 $10 = ($9|0)==(0|0);
 if ($10) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = HEAP32[$5>>2]|0;
 $12 = $11 >>> 2;
 $13 = ($3|0)==(0|0);
 if ($13) {
  $14 = (($12) + 1)|0;
  $$0 = $14;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = ($4|0)==(0);
 if ($15) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $16 = (($12) + 1)|0;
 $17 = ($16>>>0)>($4>>>0);
 $18 = (($4) + -1)|0;
 $$ = $17 ? $18 : $12;
 $19 = ($$|0)==(0);
 if (!($19)) {
  $$03839 = 0;
  while(1) {
   $20 = (($9) + ($$03839<<2)|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = $21&255;
   $$sink1 = (($3) + ($$03839)|0);
   HEAP8[$$sink1>>0] = $22;
   $23 = (($$03839) + 1)|0;
   $24 = ($23>>>0)<($$>>>0);
   if ($24) {
    $$03839 = $23;
   } else {
    break;
   }
  }
 }
 $25 = (($3) + ($$)|0);
 HEAP8[$25>>0] = 0;
 $26 = (($$) + 1)|0;
 $$0 = $26;
 STACKTOP = sp;return ($$0|0);
}
function __cmsMLUgetWide($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$$0 = 0, $$0$lcssa = 0, $$043$$0 = 0, $$04350 = 0, $$044 = 0, $$051 = 0, $$2 = 0, $$lcssa46 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ($0|0)==(0|0);
 if ($6) {
  $$044 = 0;
  return ($$044|0);
 }
 $7 = ((($0)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0);
 if ($9) {
  $$044 = 0;
  return ($$044|0);
 }
 $10 = ((($0)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0);
 $13 = ((($0)) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 L7: do {
  if ($12) {
   $$0$lcssa = -1;$$lcssa46 = $14;
  } else {
   $$04350 = 0;$$051 = -1;$16 = $14;
   while(1) {
    $15 = (($16) + (($$04350*12)|0)|0);
    $17 = HEAP16[$15>>1]|0;
    $18 = ($17<<16>>16)==($2<<16>>16);
    if ($18) {
     $19 = ($$051|0)==(-1);
     $$043$$0 = $19 ? $$04350 : $$051;
     $20 = (((($16) + (($$04350*12)|0)|0)) + 2|0);
     $21 = HEAP16[$20>>1]|0;
     $22 = ($21<<16>>16)==($3<<16>>16);
     if ($22) {
      break;
     } else {
      $$2 = $$043$$0;
     }
    } else {
     $$2 = $$051;
    }
    $34 = (($$04350) + 1)|0;
    $35 = HEAP32[$10>>2]|0;
    $36 = ($34>>>0)<($35>>>0);
    $37 = HEAP32[$13>>2]|0;
    if ($36) {
     $$04350 = $34;$$051 = $$2;$16 = $37;
    } else {
     $$0$lcssa = $$2;$$lcssa46 = $37;
     break L7;
    }
   }
   $23 = ($4|0)==(0|0);
   if (!($23)) {
    HEAP16[$4>>1] = $17;
   }
   $24 = ($5|0)==(0|0);
   if (!($24)) {
    $25 = HEAP16[$20>>1]|0;
    HEAP16[$5>>1] = $25;
   }
   $26 = ($1|0)==(0|0);
   if (!($26)) {
    $27 = (((($16) + (($$04350*12)|0)|0)) + 8|0);
    $28 = HEAP32[$27>>2]|0;
    HEAP32[$1>>2] = $28;
   }
   $29 = ((($0)) + 24|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = (((($16) + (($$04350*12)|0)|0)) + 4|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = (($30) + ($32)|0);
   $$044 = $33;
   return ($$044|0);
  }
 } while(0);
 $38 = ($$0$lcssa|0)==(-1);
 $$$0 = $38 ? 0 : $$0$lcssa;
 $39 = ($4|0)==(0|0);
 if (!($39)) {
  $40 = (($$lcssa46) + (($$$0*12)|0)|0);
  $41 = HEAP16[$40>>1]|0;
  HEAP16[$4>>1] = $41;
 }
 $42 = ($5|0)==(0|0);
 if (!($42)) {
  $43 = (((($$lcssa46) + (($$$0*12)|0)|0)) + 2|0);
  $44 = HEAP16[$43>>1]|0;
  HEAP16[$5>>1] = $44;
 }
 $45 = ($1|0)==(0|0);
 if (!($45)) {
  $46 = (((($$lcssa46) + (($$$0*12)|0)|0)) + 8|0);
  $47 = HEAP32[$46>>2]|0;
  HEAP32[$1>>2] = $47;
 }
 $48 = ((($0)) + 24|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = (((($$lcssa46) + (($$$0*12)|0)|0)) + 4|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = (($49) + ($51)|0);
 $$044 = $52;
 return ($$044|0);
}
function _cmsMLUgetWide($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $5 = sp;
 HEAP32[$5>>2] = 0;
 $6 = ($0|0)==(0|0);
 do {
  if ($6) {
   $$0 = 0;
  } else {
   $7 = (_strTo16($2)|0);
   $8 = (_strTo16($1)|0);
   $9 = (__cmsMLUgetWide($0,$5,$8,$7,0,0)|0);
   $10 = ($9|0)==(0|0);
   if ($10) {
    $$0 = 0;
   } else {
    $11 = ($3|0)==(0|0);
    if ($11) {
     $12 = HEAP32[$5>>2]|0;
     $13 = (($12) + 4)|0;
     $$0 = $13;
     break;
    }
    $14 = ($4|0)==(0);
    if ($14) {
     $$0 = 0;
    } else {
     $15 = HEAP32[$5>>2]|0;
     $16 = (($15) + 4)|0;
     $17 = ($16>>>0)>($4>>>0);
     if ($17) {
      $18 = (($4) + -4)|0;
      HEAP32[$5>>2] = $18;
     }
     $19 = HEAP32[$5>>2]|0;
     _memmove(($3|0),($9|0),($19|0))|0;
     $20 = $19 >>> 2;
     $21 = (($3) + ($20<<2)|0);
     HEAP32[$21>>2] = 0;
     $22 = (($19) + 4)|0;
     $$0 = $22;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _cmsAllocNamedColorList($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = (__cmsMallocZero($0,88)|0);
 $6 = ($5|0)==(0|0);
 if ($6) {
  $$0 = 0;
  return ($$0|0);
 }
 $7 = ((($5)) + 80|0);
 HEAP32[$7>>2] = 0;
 HEAP32[$5>>2] = 0;
 $8 = ((($5)) + 84|0);
 HEAP32[$8>>2] = $0;
 $9 = ((($5)) + 4|0);
 while(1) {
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10>>>0)<($1>>>0);
  if (!($11)) {
   label = 6;
   break;
  }
  $12 = (_GrowNamedColorList($5)|0);
  $13 = ($12|0)==(0);
  if ($13) {
   label = 5;
   break;
  }
 }
 if ((label|0) == 5) {
  __cmsFree($0,$5);
  $$0 = 0;
  return ($$0|0);
 }
 else if ((label|0) == 6) {
  $14 = ((($5)) + 12|0);
  (_strncpy($14,$3,32)|0);
  $15 = ((($5)) + 45|0);
  (_strncpy($15,$4,32)|0);
  $16 = ((($5)) + 77|0);
  HEAP8[$16>>0] = 0;
  $17 = ((($5)) + 44|0);
  HEAP8[$17>>0] = 0;
  $18 = ((($5)) + 8|0);
  HEAP32[$18>>2] = $2;
  $$0 = $5;
  return ($$0|0);
 }
 return (0)|0;
}
function _GrowNamedColorList($0) {
 $0 = $0|0;
 var $$0 = 0, $$016 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 $5 = $3 << 1;
 $$016 = $4 ? 64 : $5;
 $6 = ($$016>>>0)>(102400);
 $7 = ((($0)) + 84|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 80|0);
 $10 = HEAP32[$9>>2]|0;
 if ($6) {
  __cmsFree($8,$10);
  HEAP32[$9>>2] = 0;
  $$0 = 0;
  return ($$0|0);
 }
 $11 = ($$016*294)|0;
 $12 = (__cmsRealloc($8,$10,$11)|0);
 $13 = ($12|0)==(0|0);
 if ($13) {
  $$0 = 0;
  return ($$0|0);
 }
 HEAP32[$9>>2] = $12;
 HEAP32[$2>>2] = $$016;
 $$0 = 1;
 return ($$0|0);
}
function _cmsFreeNamedColorList($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + 80|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  $5 = ((($0)) + 84|0);
  $6 = HEAP32[$5>>2]|0;
  __cmsFree($6,$3);
 }
 $7 = ((($0)) + 84|0);
 $8 = HEAP32[$7>>2]|0;
 __cmsFree($8,$0);
 return;
}
function _cmsDupNamedColorList($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 $2 = ((($0)) + 84|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$0>>2]|0;
 $5 = ((($0)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 12|0);
 $8 = ((($0)) + 45|0);
 $9 = (_cmsAllocNamedColorList($3,$4,$6,$7,$8)|0);
 $10 = ($9|0)==(0|0);
 if ($10) {
  $$0 = 0;
  return ($$0|0);
 }
 $11 = ((($9)) + 4|0);
 $12 = ((($0)) + 4|0);
 while(1) {
  $13 = HEAP32[$11>>2]|0;
  $14 = HEAP32[$12>>2]|0;
  $15 = ($13>>>0)<($14>>>0);
  if (!($15)) {
   break;
  }
  $16 = (_GrowNamedColorList($9)|0);
  $17 = ($16|0)==(0);
  if ($17) {
   $$0 = 0;
   label = 7;
   break;
  }
 }
 if ((label|0) == 7) {
  return ($$0|0);
 }
 $18 = ((($9)) + 12|0);
 _memmove(($18|0),($7|0),33)|0;
 $19 = ((($9)) + 45|0);
 _memmove(($19|0),($8|0),33)|0;
 $20 = HEAP32[$5>>2]|0;
 $21 = ((($9)) + 8|0);
 HEAP32[$21>>2] = $20;
 $22 = ((($9)) + 80|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ((($0)) + 80|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = HEAP32[$0>>2]|0;
 $27 = ($26*294)|0;
 _memmove(($23|0),($25|0),($27|0))|0;
 $28 = HEAP32[$0>>2]|0;
 HEAP32[$9>>2] = $28;
 $$0 = $9;
 return ($$0|0);
}
function _cmsAppendNamedColor($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$029 = 0, $$034 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($0|0)==(0|0);
 if ($4) {
  $$029 = 0;
  return ($$029|0);
 }
 $5 = HEAP32[$0>>2]|0;
 $6 = (($5) + 1)|0;
 $7 = ((($0)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($6>>>0)>($8>>>0);
 if ($9) {
  $10 = (_GrowNamedColorList($0)|0);
  $11 = ($10|0)==(0);
  if ($11) {
   $$029 = 0;
   return ($$029|0);
  }
 }
 $12 = ((($0)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0);
 if (!($14)) {
  $15 = ($3|0)==(0|0);
  $16 = ((($0)) + 80|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = HEAP32[$0>>2]|0;
  $19 = HEAP32[$12>>2]|0;
  $$034 = 0;
  while(1) {
   if ($15) {
    $24 = 0;
   } else {
    $20 = (($3) + ($$034<<1)|0);
    $21 = HEAP16[$20>>1]|0;
    $22 = $21&65535;
    $24 = $22;
   }
   $23 = $24&65535;
   $25 = ((((($17) + (($18*294)|0)|0)) + 262|0) + ($$034<<1)|0);
   HEAP16[$25>>1] = $23;
   $26 = (($$034) + 1)|0;
   $27 = ($26>>>0)<($19>>>0);
   if ($27) {
    $$034 = $26;
   } else {
    break;
   }
  }
 }
 $28 = ((($0)) + 80|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$0>>2]|0;
 $31 = ($2|0)==(0|0);
 if ($31) {
  $32 = (((($29) + (($30*294)|0)|0)) + 256|0);
  HEAP16[$32>>1] = 0;
  $33 = (((($29) + (($30*294)|0)|0)) + 258|0);
  HEAP16[$33>>1] = 0;
  $48 = 0;
 } else {
  $40 = HEAP16[$2>>1]|0;
  $41 = (((($29) + (($30*294)|0)|0)) + 256|0);
  HEAP16[$41>>1] = $40;
  $42 = ((($2)) + 2|0);
  $43 = HEAP16[$42>>1]|0;
  $44 = (((($29) + (($30*294)|0)|0)) + 258|0);
  HEAP16[$44>>1] = $43;
  $45 = ((($2)) + 4|0);
  $46 = HEAP16[$45>>1]|0;
  $48 = $46;
 }
 $47 = (((($29) + (($30*294)|0)|0)) + 260|0);
 HEAP16[$47>>1] = $48;
 $49 = ($1|0)==(0|0);
 $34 = (($29) + (($30*294)|0)|0);
 if ($49) {
  HEAP8[$34>>0] = 0;
 } else {
  (_strncpy($34,$1,255)|0);
  $35 = HEAP32[$28>>2]|0;
  $36 = HEAP32[$0>>2]|0;
  $37 = (((($35) + (($36*294)|0)|0)) + 255|0);
  HEAP8[$37>>0] = 0;
 }
 $38 = HEAP32[$0>>2]|0;
 $39 = (($38) + 1)|0;
 HEAP32[$0>>2] = $39;
 $$029 = 1;
 return ($$029|0);
}
function _cmsNamedColorCount($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
 } else {
  $2 = HEAP32[$0>>2]|0;
  $$0 = $2;
 }
 return ($$0|0);
}
function _cmsNamedColorInfo($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $7 = ($0|0)==(0|0);
 if ($7) {
  $$0 = 0;
  return ($$0|0);
 }
 $8 = (_cmsNamedColorCount($0)|0);
 $9 = ($8>>>0)>($1>>>0);
 if (!($9)) {
  $$0 = 0;
  return ($$0|0);
 }
 $10 = ($2|0)==(0|0);
 if (!($10)) {
  $11 = ((($0)) + 80|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (($12) + (($1*294)|0)|0);
  (_strcpy($2,$13)|0);
 }
 $14 = ($3|0)==(0|0);
 if (!($14)) {
  $15 = ((($0)) + 12|0);
  (_strcpy($3,$15)|0);
 }
 $16 = ($4|0)==(0|0);
 if (!($16)) {
  $17 = ((($0)) + 45|0);
  (_strcpy($4,$17)|0);
 }
 $18 = ($5|0)==(0|0);
 if (!($18)) {
  $19 = ((($0)) + 80|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (((($20) + (($1*294)|0)|0)) + 256|0);
  _memmove(($5|0),($21|0),6)|0;
 }
 $22 = ($6|0)==(0|0);
 if ($22) {
  $$0 = 1;
  return ($$0|0);
 }
 $23 = ((($0)) + 80|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (((($24) + (($1*294)|0)|0)) + 262|0);
 $26 = ((($0)) + 8|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $27 << 1;
 _memmove(($6|0),($25|0),($28|0))|0;
 $$0 = 1;
 return ($$0|0);
}
function __cmsStageAllocNamedColor($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 84|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1|0)!=(0);
 if ($4) {
  $9 = 3;
 } else {
  $5 = ((($0)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $9 = $6;
 }
 $7 = $4 ? 32 : 33;
 $8 = (_cmsDupNamedColorList($0)|0);
 $10 = (__cmsStageAllocPlaceholder($3,1852009504,1,$9,$7,12,4,$8)|0);
 return ($10|0);
}
function _EvalNamedColorPCS($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sink = 0.0, $$sink1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $3 = ((($2)) + 32|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = +HEAPF32[$0>>2];
 $6 = $5;
 $7 = $6 * 65535.0;
 $8 = (__cmsQuickSaturateWord_360($7)|0);
 $9 = $8&65535;
 $10 = HEAP32[$4>>2]|0;
 $11 = ($9>>>0)<($10>>>0);
 if ($11) {
  $16 = ((($4)) + 80|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (((($17) + (($9*294)|0)|0)) + 256|0);
  $19 = HEAP16[$18>>1]|0;
  $20 = (+($19&65535));
  $21 = $20 / 65535.0;
  $22 = $21;
  HEAPF32[$1>>2] = $22;
  $23 = (((($17) + (($9*294)|0)|0)) + 258|0);
  $24 = HEAP16[$23>>1]|0;
  $25 = (+($24&65535));
  $26 = $25 / 65535.0;
  $27 = $26;
  $28 = ((($1)) + 4|0);
  HEAPF32[$28>>2] = $27;
  $29 = (((($17) + (($9*294)|0)|0)) + 260|0);
  $30 = HEAP16[$29>>1]|0;
  $31 = (+($30&65535));
  $32 = $31 / 65535.0;
  $33 = $32;
  $34 = ((($1)) + 8|0);
  $$sink = $33;$$sink1 = $34;
  HEAPF32[$$sink1>>2] = $$sink;
  STACKTOP = sp;return;
 } else {
  $12 = ((($4)) + 84|0);
  $13 = HEAP32[$12>>2]|0;
  HEAP32[$vararg_buffer>>2] = $9;
  _cmsSignalError($13,2,27286,$vararg_buffer);
  $14 = ((($1)) + 8|0);
  HEAPF32[$14>>2] = 0.0;
  $15 = ((($1)) + 4|0);
  HEAPF32[$15>>2] = 0.0;
  $$sink = 0.0;$$sink1 = $1;
  HEAPF32[$$sink1>>2] = $$sink;
  STACKTOP = sp;return;
 }
}
function _EvalNamedColor($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$124 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $umax = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $3 = ((($2)) + 32|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = +HEAPF32[$0>>2];
 $6 = $5;
 $7 = $6 * 65535.0;
 $8 = (__cmsQuickSaturateWord_360($7)|0);
 $9 = $8&65535;
 $10 = HEAP32[$4>>2]|0;
 $11 = ($9>>>0)<($10>>>0);
 if (!($11)) {
  $18 = ((($4)) + 84|0);
  $19 = HEAP32[$18>>2]|0;
  HEAP32[$vararg_buffer>>2] = $9;
  _cmsSignalError($19,2,27286,$vararg_buffer);
  $20 = ((($4)) + 8|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21|0)==(0);
  if ($22) {
   STACKTOP = sp;return;
  }
  $31 = HEAP32[$20>>2]|0;
  $32 = ($31>>>0)>(1);
  $umax = $32 ? $31 : 1;
  $33 = $umax << 2;
  _memset(($1|0),0,($33|0))|0;
  STACKTOP = sp;return;
 }
 $12 = ((($4)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0);
 if ($14) {
  STACKTOP = sp;return;
 }
 $15 = ((($4)) + 80|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = HEAP32[$12>>2]|0;
 $$124 = 0;
 while(1) {
  $23 = ((((($16) + (($9*294)|0)|0)) + 262|0) + ($$124<<1)|0);
  $24 = HEAP16[$23>>1]|0;
  $25 = (+($24&65535));
  $26 = $25 / 65535.0;
  $27 = $26;
  $28 = (($1) + ($$124<<2)|0);
  HEAPF32[$28>>2] = $27;
  $29 = (($$124) + 1)|0;
  $30 = ($29>>>0)<($17>>>0);
  if ($30) {
   $$124 = $29;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _DupNamedColorList($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 32|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (_cmsDupNamedColorList($2)|0);
 return ($3|0);
}
function _FreeNamedColorList($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 32|0);
 $2 = HEAP32[$1>>2]|0;
 _cmsFreeNamedColorList($2);
 return;
}
function __cmsQuickSaturateWord_360($0) {
 $0 = +$0;
 var $$0 = 0, $1 = 0.0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0 + 0.5;
 $2 = !($1 <= 0.0);
 if ($2) {
  $3 = !($1 >= 65535.0);
  if ($3) {
   $4 = (__cmsQuickFloorWord_362($1)|0);
   $$0 = $4;
  } else {
   $$0 = -1;
  }
 } else {
  $$0 = 0;
 }
 return ($$0|0);
}
function __cmsQuickFloorWord_362($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0 + -32767.0;
 $2 = (__cmsQuickFloor_363($1)|0);
 $3 = (($2) + 32767)|0;
 $4 = $3&65535;
 return ($4|0);
}
function __cmsQuickFloor_363($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0 + 103079215104.0;
 HEAPF64[tempDoublePtr>>3] = $1;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = $2 >> 16;
 return ($4|0);
}
function _cmsAllocProfileSequenceDescription($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$026 = 0, $$027 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($1) + -1)|0;
 $3 = ($2>>>0)>(254);
 if ($3) {
  $$026 = 0;
  return ($$026|0);
 }
 $4 = (__cmsMallocZero($0,12)|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  $$026 = 0;
  return ($$026|0);
 }
 $6 = ((($4)) + 4|0);
 HEAP32[$6>>2] = $0;
 $7 = (__cmsCalloc($0,$1,48)|0);
 $8 = ((($4)) + 8|0);
 HEAP32[$8>>2] = $7;
 HEAP32[$4>>2] = $1;
 $9 = ($7|0)==(0|0);
 if ($9) {
  __cmsFree($0,$4);
  $$026 = 0;
  return ($$026|0);
 }
 $10 = HEAP32[$8>>2]|0;
 $$027 = 0;
 while(1) {
  $11 = (((($10) + (($$027*48)|0)|0)) + 36|0);
  HEAP32[$11>>2] = 0;
  $12 = (((($10) + (($$027*48)|0)|0)) + 40|0);
  HEAP32[$12>>2] = 0;
  $13 = (((($10) + (($$027*48)|0)|0)) + 44|0);
  HEAP32[$13>>2] = 0;
  $14 = (($$027) + 1)|0;
  $exitcond = ($14|0)==($1|0);
  if ($exitcond) {
   $$026 = $4;
   break;
  } else {
   $$027 = $14;
  }
 }
 return ($$026|0);
}
function _cmsFreeProfileSequenceDescription($0) {
 $0 = $0|0;
 var $$019 = 0, $$lcssa = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 if ($2) {
  $$lcssa = $4;
 } else {
  $$019 = 0;$6 = $4;
  while(1) {
   $5 = (((($6) + (($$019*48)|0)|0)) + 36|0);
   $7 = HEAP32[$5>>2]|0;
   $8 = ($7|0)==(0|0);
   if (!($8)) {
    _cmsMLUfree($7);
   }
   $9 = HEAP32[$3>>2]|0;
   $10 = (((($9) + (($$019*48)|0)|0)) + 40|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(0|0);
   if (!($12)) {
    _cmsMLUfree($11);
   }
   $13 = HEAP32[$3>>2]|0;
   $14 = (((($13) + (($$019*48)|0)|0)) + 44|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)==(0|0);
   if (!($16)) {
    _cmsMLUfree($15);
   }
   $17 = (($$019) + 1)|0;
   $18 = HEAP32[$0>>2]|0;
   $19 = ($17>>>0)<($18>>>0);
   $20 = HEAP32[$3>>2]|0;
   if ($19) {
    $$019 = $17;$6 = $20;
   } else {
    $$lcssa = $20;
    break;
   }
  }
 }
 $21 = ($$lcssa|0)==(0|0);
 if ($21) {
  $24 = ((($0)) + 4|0);
  $25 = HEAP32[$24>>2]|0;
  __cmsFree($25,$0);
  return;
 }
 $22 = ((($0)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 __cmsFree($23,$$lcssa);
 $24 = ((($0)) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 __cmsFree($25,$0);
 return;
}
function _cmsDupProfileSequenceDescription($0) {
 $0 = $0|0;
 var $$050 = 0, $$051 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$050 = 0;
  return ($$050|0);
 }
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (__cmsMalloc($3,12)|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  $$050 = 0;
  return ($$050|0);
 }
 $6 = HEAP32[$2>>2]|0;
 $7 = HEAP32[$0>>2]|0;
 $8 = (__cmsCalloc($6,$7,48)|0);
 $9 = ((($4)) + 8|0);
 HEAP32[$9>>2] = $8;
 $10 = ($8|0)==(0|0);
 if ($10) {
  _cmsFreeProfileSequenceDescription($4);
  $$050 = 0;
  return ($$050|0);
 }
 $11 = HEAP32[$2>>2]|0;
 $12 = ((($4)) + 4|0);
 HEAP32[$12>>2] = $11;
 $13 = HEAP32[$0>>2]|0;
 HEAP32[$4>>2] = $13;
 $14 = HEAP32[$0>>2]|0;
 $15 = ($14|0)==(0);
 if ($15) {
  $$050 = $4;
  return ($$050|0);
 }
 $16 = ((($0)) + 8|0);
 $$051 = 0;
 while(1) {
  $17 = HEAP32[$9>>2]|0;
  $18 = (((($17) + (($$051*48)|0)|0)) + 8|0);
  $19 = HEAP32[$16>>2]|0;
  $20 = (((($19) + (($$051*48)|0)|0)) + 8|0);
  $21 = $20;
  $22 = $21;
  $23 = HEAP32[$22>>2]|0;
  $24 = (($21) + 4)|0;
  $25 = $24;
  $26 = HEAP32[$25>>2]|0;
  $27 = $18;
  $28 = $27;
  HEAP32[$28>>2] = $23;
  $29 = (($27) + 4)|0;
  $30 = $29;
  HEAP32[$30>>2] = $26;
  $31 = HEAP32[$16>>2]|0;
  $32 = (($31) + (($$051*48)|0)|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = HEAP32[$9>>2]|0;
  $35 = (($34) + (($$051*48)|0)|0);
  HEAP32[$35>>2] = $33;
  $36 = HEAP32[$16>>2]|0;
  $37 = (((($36) + (($$051*48)|0)|0)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = HEAP32[$9>>2]|0;
  $40 = (((($39) + (($$051*48)|0)|0)) + 4|0);
  HEAP32[$40>>2] = $38;
  $41 = HEAP32[$9>>2]|0;
  $42 = (((($41) + (($$051*48)|0)|0)) + 20|0);
  $43 = HEAP32[$16>>2]|0;
  $44 = (((($43) + (($$051*48)|0)|0)) + 20|0);
  _memmove(($42|0),($44|0),16)|0;
  $45 = HEAP32[$16>>2]|0;
  $46 = (((($45) + (($$051*48)|0)|0)) + 16|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = HEAP32[$9>>2]|0;
  $49 = (((($48) + (($$051*48)|0)|0)) + 16|0);
  HEAP32[$49>>2] = $47;
  $50 = HEAP32[$16>>2]|0;
  $51 = (((($50) + (($$051*48)|0)|0)) + 36|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = (_cmsMLUdup($52)|0);
  $54 = HEAP32[$9>>2]|0;
  $55 = (((($54) + (($$051*48)|0)|0)) + 36|0);
  HEAP32[$55>>2] = $53;
  $56 = HEAP32[$16>>2]|0;
  $57 = (((($56) + (($$051*48)|0)|0)) + 40|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = (_cmsMLUdup($58)|0);
  $60 = HEAP32[$9>>2]|0;
  $61 = (((($60) + (($$051*48)|0)|0)) + 40|0);
  HEAP32[$61>>2] = $59;
  $62 = HEAP32[$16>>2]|0;
  $63 = (((($62) + (($$051*48)|0)|0)) + 44|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = (_cmsMLUdup($64)|0);
  $66 = HEAP32[$9>>2]|0;
  $67 = (((($66) + (($$051*48)|0)|0)) + 44|0);
  HEAP32[$67>>2] = $65;
  $68 = (($$051) + 1)|0;
  $69 = HEAP32[$0>>2]|0;
  $70 = ($68>>>0)<($69>>>0);
  if ($70) {
   $$051 = $68;
  } else {
   $$050 = $4;
   break;
  }
 }
 return ($$050|0);
}
function _cmsDictAlloc($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__cmsMallocZero($0,8)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = ((($1)) + 4|0);
 HEAP32[$3>>2] = $0;
 $$0 = $1;
 return ($$0|0);
}
function _cmsDictFree($0) {
 $0 = $0|0;
 var $$in = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  ___assert_fail((27308|0),(27329|0),866,(27359|0));
  // unreachable;
 }
 $2 = HEAP32[$0>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $24 = ((($0)) + 4|0);
  $25 = HEAP32[$24>>2]|0;
  __cmsFree($25,$0);
  return;
 }
 $4 = ((($0)) + 4|0);
 $5 = ((($0)) + 4|0);
 $6 = ((($0)) + 4|0);
 $$in = $2;
 while(1) {
  $7 = ((($$in)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(0|0);
  if (!($9)) {
   _cmsMLUfree($8);
  }
  $10 = ((($$in)) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(0|0);
  if (!($12)) {
   _cmsMLUfree($11);
  }
  $13 = ((($$in)) + 12|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)==(0|0);
  if (!($15)) {
   $16 = HEAP32[$6>>2]|0;
   __cmsFree($16,$14);
  }
  $17 = ((($$in)) + 16|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($18|0)==(0|0);
  if (!($19)) {
   $20 = HEAP32[$5>>2]|0;
   __cmsFree($20,$18);
  }
  $21 = HEAP32[$$in>>2]|0;
  $22 = HEAP32[$4>>2]|0;
  __cmsFree($22,$$in);
  $23 = ($21|0)==(0|0);
  if ($23) {
   break;
  } else {
   $$in = $21;
  }
 }
 $24 = ((($0)) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 __cmsFree($25,$0);
 return;
}
function _cmsDictAddEntry($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ($0|0)==(0|0);
 if ($5) {
  ___assert_fail((27308|0),(27329|0),902,(27371|0));
  // unreachable;
 }
 $6 = ($1|0)==(0|0);
 if ($6) {
  ___assert_fail((27387|0),(27329|0),903,(27371|0));
  // unreachable;
 }
 $7 = ((($0)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (__cmsMallocZero($8,20)|0);
 $10 = ($9|0)==(0|0);
 if ($10) {
  $$0 = 0;
  return ($$0|0);
 }
 $11 = (_cmsMLUdup($3)|0);
 $12 = ((($9)) + 4|0);
 HEAP32[$12>>2] = $11;
 $13 = (_cmsMLUdup($4)|0);
 $14 = ((($9)) + 8|0);
 HEAP32[$14>>2] = $13;
 $15 = HEAP32[$7>>2]|0;
 $16 = (_DupWcs($15,$1)|0);
 $17 = ((($9)) + 12|0);
 HEAP32[$17>>2] = $16;
 $18 = HEAP32[$7>>2]|0;
 $19 = (_DupWcs($18,$2)|0);
 $20 = ((($9)) + 16|0);
 HEAP32[$20>>2] = $19;
 $21 = HEAP32[$0>>2]|0;
 HEAP32[$9>>2] = $21;
 HEAP32[$0>>2] = $9;
 $$0 = 1;
 return ($$0|0);
}
function _DupWcs($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = (_mywcslen($1)|0);
 $4 = $3 << 2;
 $5 = (($4) + 4)|0;
 $6 = (__cmsDupMem($0,$1,$5)|0);
 $$0 = $6;
 return ($$0|0);
}
function _cmsDictDup($0) {
 $0 = $0|0;
 var $$0 = 0, $$019 = 0, $$020 = 0, $$021 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  ___assert_fail((27408|0),(27329|0),927,(27433|0));
  // unreachable;
 }
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_cmsDictAlloc($3)|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  $$019 = 0;
  return ($$019|0);
 }
 $$020 = HEAP32[$0>>2]|0;
 $6 = ($$020|0)==(0|0);
 if ($6) {
  $$019 = $4;
  return ($$019|0);
 } else {
  $$021 = $$020;
 }
 while(1) {
  $8 = ((($$021)) + 12|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($$021)) + 16|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($$021)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($$021)) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (_cmsDictAddEntry($4,$9,$11,$13,$15)|0);
  $17 = ($16|0)==(0);
  if ($17) {
   break;
  }
  $$0 = HEAP32[$$021>>2]|0;
  $7 = ($$0|0)==(0|0);
  if ($7) {
   $$019 = $4;
   label = 8;
   break;
  } else {
   $$021 = $$0;
  }
 }
 if ((label|0) == 8) {
  return ($$019|0);
 }
 _cmsDictFree($4);
 $$019 = 0;
 return ($$019|0);
}
function _cmsDictGetEntryList($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
 } else {
  $2 = HEAP32[$0>>2]|0;
  $$0 = $2;
 }
 return ($$0|0);
}
function _cmsDictNextEntry($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
 } else {
  $2 = HEAP32[$0>>2]|0;
  $$0 = $2;
 }
 return ($$0|0);
}
function __cmsOptimizePipeline($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$037 = 0, $$040 = 0, $$041 = 0, $$139 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = (__cmsContextGetClientChunk($0,12)|0);
 $7 = HEAP32[$5>>2]|0;
 $8 = $7 & 2;
 $9 = ($8|0)==(0);
 $10 = HEAP32[$1>>2]|0;
 if (!($9)) {
  (_PreOptimize($10)|0);
  $11 = (_OptimizeByResampling($1,$2,$3,$4,$5)|0);
  $$037 = $11;
  return ($$037|0);
 }
 $12 = HEAP32[$10>>2]|0;
 $13 = ($12|0)==(0|0);
 if ($13) {
  __cmsPipelineSetOptimizationParameters($10,34,$10,0,0);
  $$037 = 1;
  return ($$037|0);
 }
 $14 = (_PreOptimize($10)|0);
 $15 = HEAP32[$1>>2]|0;
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)==(0|0);
 if ($17) {
  __cmsPipelineSetOptimizationParameters($15,34,$15,0,0);
  $$037 = 1;
  return ($$037|0);
 }
 $18 = HEAP32[$5>>2]|0;
 $19 = $18 & 256;
 $20 = ($19|0)==(0);
 if (!($20)) {
  $$037 = 0;
  return ($$037|0);
 }
 $$040 = HEAP32[$6>>2]|0;
 $21 = ($$040|0)==(0|0);
 L16: do {
  if ($21) {
   $$139 = 13316;
  } else {
   $$041 = $$040;
   while(1) {
    $24 = HEAP32[$$041>>2]|0;
    $25 = (FUNCTION_TABLE_iiiiii[$24 & 15]($1,$2,$3,$4,$5)|0);
    $26 = ($25|0)==(0);
    if (!($26)) {
     $$037 = 1;
     break;
    }
    $22 = ((($$041)) + 4|0);
    $$0 = HEAP32[$22>>2]|0;
    $23 = ($$0|0)==(0|0);
    if ($23) {
     $$139 = 13316;
     break L16;
    } else {
     $$041 = $$0;
    }
   }
   return ($$037|0);
  }
 } while(0);
 while(1) {
  $27 = HEAP32[$$139>>2]|0;
  $28 = (FUNCTION_TABLE_iiiiii[$27 & 15]($1,$2,$3,$4,$5)|0);
  $29 = ($28|0)==(0);
  if (!($29)) {
   $$037 = 1;
   label = 13;
   break;
  }
  $30 = ((($$139)) + 4|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ($31|0)==(0|0);
  if ($32) {
   $$037 = $14;
   label = 13;
   break;
  } else {
   $$139 = $31;
  }
 }
 if ((label|0) == 13) {
  return ($$037|0);
 }
 return (0)|0;
}
function _PreOptimize($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = 0;
 while(1) {
  $1 = (__Remove1Op($0)|0);
  $2 = (__Remove2Op($0,1815246880,2016570400)|0);
  $3 = $2 | $1;
  $4 = (__Remove2Op($0,2016570400,1815246880)|0);
  $5 = $3 | $4;
  $6 = (__Remove2Op($0,874525216,840971296)|0);
  $7 = $5 | $6;
  $8 = (__Remove2Op($0,840971296,874525216)|0);
  $9 = $7 | $8;
  $10 = (__Remove2Op($0,1681026080,1815241760)|0);
  $11 = $9 | $10;
  $12 = (__Remove2Op($0,1681029152,2016568352)|0);
  $13 = $11 | $12;
  $14 = (__MultiplyMatrix($0)|0);
  $15 = $13 | $14;
  $16 = ($15|0)==(0);
  if ($16) {
   break;
  } else {
   $$0 = 1;
  }
 }
 return ($$0|0);
}
function _OptimizeByResampling($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$0 = 0, $$0109 = 0, $$0110 = 0, $$0111120 = 0, $$2 = 0, $$2116 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $5 = sp + 4|0;
 $6 = sp;
 HEAP32[$5>>2] = 0;
 HEAP32[$6>>2] = 0;
 $7 = HEAP32[$2>>2]|0;
 $8 = (__cmsFormatterIsFloat($7)|0);
 $9 = ($8|0)==(0);
 if (!($9)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = HEAP32[$3>>2]|0;
 $11 = (__cmsFormatterIsFloat($10)|0);
 $12 = ($11|0)==(0);
 if (!($12)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $13 = HEAP32[$2>>2]|0;
 $14 = $13 >>> 16;
 $15 = $14 & 31;
 $16 = (__cmsICCcolorSpace($15)|0);
 $17 = HEAP32[$3>>2]|0;
 $18 = $17 >>> 16;
 $19 = $18 & 31;
 $20 = (__cmsICCcolorSpace($19)|0);
 $21 = ($16|0)==(0);
 $22 = ($20|0)==(0);
 $or$cond = $21 | $22;
 if ($or$cond) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $23 = HEAP32[$4>>2]|0;
 $24 = (__cmsReasonableGridpointsByColorspace($16,$23)|0);
 $25 = HEAP32[$0>>2]|0;
 $26 = (_cmsPipelineStageCount($25)|0);
 $27 = ($26|0)==(0);
 $$ = $27 ? 2 : $24;
 $28 = HEAP32[$0>>2]|0;
 $29 = (_cmsPipelineGetPtrToFirstStage($28)|0);
 $30 = ($29|0)==(0|0);
 L10: do {
  if (!($30)) {
   $$0111120 = $29;
   while(1) {
    $31 = (_cmsStageType($$0111120)|0);
    $32 = ($31|0)==(1852009504);
    if ($32) {
     $$0 = 0;
     break;
    }
    $33 = (_cmsStageNext($$0111120)|0);
    $34 = ($33|0)==(0|0);
    if ($34) {
     break L10;
    } else {
     $$0111120 = $33;
    }
   }
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $35 = ((($28)) + 32|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ((($28)) + 4|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ((($28)) + 8|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = (_cmsPipelineAlloc($36,$38,$40)|0);
 $42 = ($41|0)==(0|0);
 if ($42) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $43 = HEAP32[$4>>2]|0;
 $44 = $43 & 16;
 $45 = ($44|0)==(0);
 if ($45) {
  $$2116 = 0;
  label = 14;
 } else {
  $46 = (_cmsPipelineGetPtrToFirstStage($28)|0);
  $47 = ($46|0)==(0|0);
  if ($47) {
   $$2116 = 0;
   label = 14;
  } else {
   $48 = ((($46)) + 4|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = ($49|0)==(1668707188);
   if ($50) {
    $51 = (_AllCurvesAreLinear($46)|0);
    $52 = ($51|0)==(0);
    if ($52) {
     $53 = (_cmsStageDup($46)|0);
     $54 = (_cmsPipelineInsertStage($41,0,$53)|0);
     $55 = ($54|0)==(0);
     if (!($55)) {
      _cmsPipelineUnlinkStage($28,0,$5);
      $$2116 = $53;
      label = 14;
     }
    } else {
     $$2116 = 0;
     label = 14;
    }
   } else {
    $$2116 = 0;
    label = 14;
   }
  }
 }
 do {
  if ((label|0) == 14) {
   $56 = HEAP32[$35>>2]|0;
   $57 = HEAP32[$37>>2]|0;
   $58 = HEAP32[$39>>2]|0;
   $59 = (_cmsStageAllocCLut16bit($56,$$,$57,$58,0)|0);
   $60 = ($59|0)==(0|0);
   if (!($60)) {
    $61 = (_cmsPipelineInsertStage($41,1,$59)|0);
    $62 = ($61|0)==(0);
    if (!($62)) {
     $63 = HEAP32[$4>>2]|0;
     $64 = $63 & 1;
     $65 = ($64|0)==(0);
     if ($65) {
      $$2 = 0;
     } else {
      $66 = (_cmsPipelineGetPtrToLastStage($28)|0);
      $67 = ($66|0)==(0|0);
      if ($67) {
       $$2 = 0;
      } else {
       $68 = (_cmsStageType($66)|0);
       $69 = ($68|0)==(1668707188);
       if ($69) {
        $70 = (_AllCurvesAreLinear($66)|0);
        $71 = ($70|0)==(0);
        if ($71) {
         $72 = (_cmsStageDup($66)|0);
         $73 = (_cmsPipelineInsertStage($41,1,$72)|0);
         $74 = ($73|0)==(0);
         if ($74) {
          break;
         }
         _cmsPipelineUnlinkStage($28,1,$6);
         $$2 = $72;
        } else {
         $$2 = 0;
        }
       } else {
        $$2 = 0;
       }
      }
     }
     $75 = (_cmsStageSampleCLut16bit($59,45,$28,0)|0);
     $76 = ($75|0)==(0);
     if (!($76)) {
      $85 = HEAP32[$5>>2]|0;
      $86 = ($85|0)==(0|0);
      if (!($86)) {
       _cmsStageFree($85);
      }
      $87 = HEAP32[$6>>2]|0;
      $88 = ($87|0)==(0|0);
      if (!($88)) {
       _cmsStageFree($87);
      }
      _cmsPipelineFree($28);
      $89 = ((($59)) + 32|0);
      $90 = HEAP32[$89>>2]|0;
      $91 = ($$2116|0)==(0|0);
      if ($91) {
       $$0110 = 0;
      } else {
       $92 = ((($$2116)) + 32|0);
       $93 = HEAP32[$92>>2]|0;
       $94 = ((($93)) + 4|0);
       $95 = HEAP32[$94>>2]|0;
       $$0110 = $95;
      }
      $96 = ($$2|0)==(0|0);
      if ($96) {
       $$0109 = 0;
      } else {
       $97 = ((($$2)) + 32|0);
       $98 = HEAP32[$97>>2]|0;
       $99 = ((($98)) + 4|0);
       $100 = HEAP32[$99>>2]|0;
       $$0109 = $100;
      }
      $101 = ($$0110|0)==(0|0);
      $102 = ($$0109|0)==(0|0);
      $or$cond3 = $101 & $102;
      $103 = ((($90)) + 4|0);
      $104 = HEAP32[$103>>2]|0;
      if ($or$cond3) {
       $105 = ((($104)) + 116|0);
       $106 = HEAP32[$105>>2]|0;
       __cmsPipelineSetOptimizationParameters($41,$106,$104,0,0);
      } else {
       $107 = ((($41)) + 32|0);
       $108 = HEAP32[$107>>2]|0;
       $109 = ((($41)) + 4|0);
       $110 = HEAP32[$109>>2]|0;
       $111 = ((($41)) + 8|0);
       $112 = HEAP32[$111>>2]|0;
       $113 = (_PrelinOpt16alloc($108,$104,$110,$$0110,$112,$$0109)|0);
       __cmsPipelineSetOptimizationParameters($41,35,$113,58,7);
      }
      $114 = ($1|0)==(3);
      if ($114) {
       $115 = HEAP32[$4>>2]|0;
       $116 = $115 | 4;
       HEAP32[$4>>2] = $116;
      }
      $117 = HEAP32[$4>>2]|0;
      $118 = $117 & 4;
      $119 = ($118|0)==(0);
      if ($119) {
       (_FixWhiteMisalignment($41,$16,$20)|0);
      }
      HEAP32[$0>>2] = $41;
      $$0 = 1;
      STACKTOP = sp;return ($$0|0);
     }
    }
   }
  }
 } while(0);
 $77 = HEAP32[$5>>2]|0;
 $78 = ($77|0)==(0|0);
 if (!($78)) {
  $79 = (_cmsPipelineInsertStage($28,0,$77)|0);
  $80 = ($79|0)==(0);
  if ($80) {
   ___assert_fail((28334|0),(27444|0),739,(27645|0));
   // unreachable;
  }
 }
 $81 = HEAP32[$6>>2]|0;
 $82 = ($81|0)==(0|0);
 if (!($82)) {
  $83 = (_cmsPipelineInsertStage($28,1,$81)|0);
  $84 = ($83|0)==(0);
  if ($84) {
   ___assert_fail((28334|0),(27444|0),744,(27645|0));
   // unreachable;
  }
 }
 _cmsPipelineFree($41);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _FastIdentity16($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$010 = 0, $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  return;
 }
 $6 = HEAP32[$3>>2]|0;
 $$010 = 0;
 while(1) {
  $7 = (($0) + ($$010<<1)|0);
  $8 = HEAP16[$7>>1]|0;
  $9 = (($1) + ($$010<<1)|0);
  HEAP16[$9>>1] = $8;
  $10 = (($$010) + 1)|0;
  $11 = ($10>>>0)<($6>>>0);
  if ($11) {
   $$010 = $10;
  } else {
   break;
  }
 }
 return;
}
function _OptimizeByJoiningCurves($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$0117 = 0, $$0118147 = 0, $$0120139 = 0, $$0125149 = 0, $$1119146 = 0, $$1121142 = 0, $$1128 = 0, $$1128132$ph = 0, $$2137 = 0, $$3136 = 0, $$ph = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $5 = sp + 64|0;
 $6 = sp;
 $7 = HEAP32[$0>>2]|0;
 $8 = HEAP32[$2>>2]|0;
 $9 = (__cmsFormatterIsFloat($8)|0);
 $10 = ($9|0)==(0);
 if (!($10)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = HEAP32[$3>>2]|0;
 $12 = (__cmsFormatterIsFloat($11)|0);
 $13 = ($12|0)==(0);
 if (!($13)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $14 = (_cmsPipelineGetPtrToFirstStage($7)|0);
 $15 = ($14|0)==(0|0);
 L7: do {
  if (!($15)) {
   $$0125149 = $14;
   while(1) {
    $16 = (_cmsStageType($$0125149)|0);
    $17 = ($16|0)==(1668707188);
    if (!($17)) {
     $$0 = 0;
     break;
    }
    $18 = (_cmsStageNext($$0125149)|0);
    $19 = ($18|0)==(0|0);
    if ($19) {
     break L7;
    } else {
     $$0125149 = $18;
    }
   }
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $20 = ((($7)) + 32|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ((($7)) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ((($7)) + 8|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (_cmsPipelineAlloc($21,$23,$25)|0);
 $27 = ($26|0)==(0|0);
 if ($27) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $28 = HEAP32[$20>>2]|0;
 $29 = HEAP32[$22>>2]|0;
 $30 = (__cmsCalloc($28,$29,4)|0);
 $31 = ($30|0)==(0|0);
 L16: do {
  if ($31) {
   $$1128 = $30;$125 = 0;
   label = 36;
  } else {
   $32 = HEAP32[$22>>2]|0;
   $33 = ($32|0)==(0);
   if (!($33)) {
    $$0118147 = 0;
    while(1) {
     $37 = HEAP32[$20>>2]|0;
     $38 = (_cmsBuildTabulatedToneCurve16($37,4096,0)|0);
     $39 = (($30) + ($$0118147<<2)|0);
     HEAP32[$39>>2] = $38;
     $40 = ($38|0)==(0|0);
     $36 = (($$0118147) + 1)|0;
     if ($40) {
      $$1128132$ph = $30;$$ph = $30;
      label = 37;
      break L16;
     }
     $34 = HEAP32[$22>>2]|0;
     $35 = ($36>>>0)<($34>>>0);
     if ($35) {
      $$0118147 = $36;
     } else {
      break;
     }
    }
   }
   $$1119146 = 0;
   while(1) {
    $41 = HEAP32[$22>>2]|0;
    $42 = ($41|0)==(0);
    if (!($42)) {
     $43 = (+($$1119146>>>0));
     $44 = $43 / 4095.0;
     $45 = $44;
     $46 = HEAP32[$22>>2]|0;
     $$0120139 = 0;
     while(1) {
      $47 = (($5) + ($$0120139<<2)|0);
      HEAPF32[$47>>2] = $45;
      $48 = (($$0120139) + 1)|0;
      $49 = ($48>>>0)<($46>>>0);
      if ($49) {
       $$0120139 = $48;
      } else {
       break;
      }
     }
    }
    _cmsPipelineEvalFloat($5,$6,$7);
    $50 = HEAP32[$22>>2]|0;
    $51 = ($50|0)==(0);
    if (!($51)) {
     $52 = HEAP32[$22>>2]|0;
     $$1121142 = 0;
     while(1) {
      $53 = (($6) + ($$1121142<<2)|0);
      $54 = +HEAPF32[$53>>2];
      $55 = $54;
      $56 = $55 * 65535.0;
      $57 = (__cmsQuickSaturateWord_375($56)|0);
      $58 = (($30) + ($$1121142<<2)|0);
      $59 = HEAP32[$58>>2]|0;
      $60 = ((($59)) + 24|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = (($61) + ($$1119146<<1)|0);
      HEAP16[$62>>1] = $57;
      $63 = (($$1121142) + 1)|0;
      $64 = ($63>>>0)<($52>>>0);
      if ($64) {
       $$1121142 = $63;
      } else {
       break;
      }
     }
    }
    $65 = (($$1119146) + 1)|0;
    $exitcond = ($65|0)==(4096);
    if ($exitcond) {
     break;
    } else {
     $$1119146 = $65;
    }
   }
   $66 = HEAP32[$20>>2]|0;
   $67 = HEAP32[$22>>2]|0;
   $68 = (_cmsStageAllocToneCurves($66,$67,$30)|0);
   $69 = ($68|0)==(0|0);
   if ($69) {
    $$1128 = $30;$125 = $30;
    label = 36;
   } else {
    $70 = HEAP32[$22>>2]|0;
    $71 = ($70|0)==(0);
    if (!($71)) {
     $$2137 = 0;
     while(1) {
      $72 = (($30) + ($$2137<<2)|0);
      $73 = HEAP32[$72>>2]|0;
      _cmsFreeToneCurve($73);
      HEAP32[$72>>2] = 0;
      $74 = (($$2137) + 1)|0;
      $75 = HEAP32[$22>>2]|0;
      $76 = ($74>>>0)<($75>>>0);
      if ($76) {
       $$2137 = $74;
      } else {
       break;
      }
     }
    }
    if ($31) {
     $$0117 = $30;
    } else {
     $77 = HEAP32[$20>>2]|0;
     __cmsFree($77,$30);
     $$0117 = 0;
    }
    $78 = (_AllCurvesAreLinear($68)|0);
    $79 = ($78|0)==(0);
    L44: do {
     if ($79) {
      $80 = (_cmsPipelineInsertStage($26,0,$68)|0);
      $81 = ($80|0)==(0);
      do {
       if ($81) {
        label = 34;
       } else {
        $82 = HEAP32[$2>>2]|0;
        $83 = (__cmsFormatterIs8bit($82)|0);
        $84 = ($83|0)==(0);
        if ($84) {
         $96 = (_cmsStageData($68)|0);
         $97 = ((($26)) + 32|0);
         $98 = HEAP32[$97>>2]|0;
         $99 = HEAP32[$96>>2]|0;
         $100 = ((($96)) + 4|0);
         $101 = HEAP32[$100>>2]|0;
         $102 = (_CurvesAlloc($98,$99,65536,$101)|0);
         $103 = ($102|0)==(0|0);
         if ($103) {
          label = 34;
          break;
         }
         $104 = HEAP32[$4>>2]|0;
         $105 = $104 | 64;
         HEAP32[$4>>2] = $105;
         __cmsPipelineSetOptimizationParameters($26,37,$102,59,8);
         break L44;
        } else {
         $85 = ((($68)) + 32|0);
         $86 = HEAP32[$85>>2]|0;
         $87 = ((($26)) + 32|0);
         $88 = HEAP32[$87>>2]|0;
         $89 = HEAP32[$86>>2]|0;
         $90 = ((($86)) + 4|0);
         $91 = HEAP32[$90>>2]|0;
         $92 = (_CurvesAlloc($88,$89,256,$91)|0);
         $93 = ($92|0)==(0|0);
         if ($93) {
          break;
         }
         $94 = HEAP32[$4>>2]|0;
         $95 = $94 | 64;
         HEAP32[$4>>2] = $95;
         __cmsPipelineSetOptimizationParameters($26,36,$92,59,8);
         break L44;
        }
       }
      } while(0);
      if ((label|0) == 34) {
       $114 = ($68|0)==(0|0);
       if ($114) {
        $$1128 = $$0117;$125 = 0;
        label = 36;
        break L16;
       }
      }
      _cmsStageFree($68);
      $$1128 = $$0117;$125 = 0;
      label = 36;
      break L16;
     } else {
      _cmsStageFree($68);
      $106 = ((($26)) + 32|0);
      $107 = HEAP32[$106>>2]|0;
      $108 = HEAP32[$22>>2]|0;
      $109 = (_cmsStageAllocIdentity($107,$108)|0);
      $110 = (_cmsPipelineInsertStage($26,0,$109)|0);
      $111 = ($110|0)==(0);
      if ($111) {
       $$1128 = $$0117;$125 = 0;
       label = 36;
       break L16;
      }
      $112 = HEAP32[$4>>2]|0;
      $113 = $112 | 64;
      HEAP32[$4>>2] = $113;
      __cmsPipelineSetOptimizationParameters($26,34,$26,0,0);
     }
    } while(0);
    _cmsPipelineFree($7);
    HEAP32[$0>>2] = $26;
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 if ((label|0) == 36) {
  $115 = ($$1128|0)==(0|0);
  if (!($115)) {
   $$1128132$ph = $$1128;$$ph = $125;
   label = 37;
  }
 }
 if ((label|0) == 37) {
  $116 = HEAP32[$22>>2]|0;
  $117 = ($116|0)==(0);
  if (!($117)) {
   $$3136 = 0;
   while(1) {
    $118 = (($$1128132$ph) + ($$3136<<2)|0);
    $119 = HEAP32[$118>>2]|0;
    $120 = ($119|0)==(0|0);
    if (!($120)) {
     _cmsFreeToneCurve($119);
    }
    $121 = (($$3136) + 1)|0;
    $122 = HEAP32[$22>>2]|0;
    $123 = ($121>>>0)<($122>>>0);
    if ($123) {
     $$3136 = $121;
    } else {
     break;
    }
   }
  }
  $124 = HEAP32[$20>>2]|0;
  __cmsFree($124,$$ph);
 }
 _cmsPipelineFree($26);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _OptimizeMatrixShaper($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$1 = 0, $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0;
 var $vararg_ptr13 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0;
 $vararg_buffer8 = sp + 104|0;
 $vararg_buffer = sp + 72|0;
 $5 = sp + 144|0;
 $6 = sp + 140|0;
 $7 = sp + 136|0;
 $8 = sp + 132|0;
 $9 = sp;
 $10 = sp + 128|0;
 $11 = HEAP32[$2>>2]|0;
 $12 = $11 & 120;
 $13 = ($12|0)==(24);
 if (!($13)) {
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 $14 = HEAP32[$3>>2]|0;
 $15 = $14 & 120;
 $16 = ($15|0)==(24);
 if (!($16)) {
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 $17 = (__cmsFormatterIs8bit($11)|0);
 $18 = ($17|0)==(0);
 if ($18) {
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 $19 = HEAP32[$0>>2]|0;
 HEAP32[$vararg_buffer>>2] = 1668707188;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 1835103334;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 1835103334;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = 1668707188;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $5;
 $vararg_ptr5 = ((($vararg_buffer)) + 20|0);
 HEAP32[$vararg_ptr5>>2] = $7;
 $vararg_ptr6 = ((($vararg_buffer)) + 24|0);
 HEAP32[$vararg_ptr6>>2] = $8;
 $vararg_ptr7 = ((($vararg_buffer)) + 28|0);
 HEAP32[$vararg_ptr7>>2] = $6;
 $20 = (_cmsPipelineCheckAndRetreiveStages($19,4,$vararg_buffer)|0);
 $21 = ($20|0)==(0);
 do {
  if ($21) {
   HEAP32[$vararg_buffer8>>2] = 1668707188;
   $vararg_ptr11 = ((($vararg_buffer8)) + 4|0);
   HEAP32[$vararg_ptr11>>2] = 1835103334;
   $vararg_ptr12 = ((($vararg_buffer8)) + 8|0);
   HEAP32[$vararg_ptr12>>2] = 1668707188;
   $vararg_ptr13 = ((($vararg_buffer8)) + 12|0);
   HEAP32[$vararg_ptr13>>2] = $5;
   $vararg_ptr14 = ((($vararg_buffer8)) + 16|0);
   HEAP32[$vararg_ptr14>>2] = $7;
   $vararg_ptr15 = ((($vararg_buffer8)) + 20|0);
   HEAP32[$vararg_ptr15>>2] = $6;
   $31 = (_cmsPipelineCheckAndRetreiveStages($19,3,$vararg_buffer8)|0);
   $32 = ($31|0)==(0);
   if ($32) {
    $$1 = 0;
    STACKTOP = sp;return ($$1|0);
   } else {
    $33 = HEAP32[$7>>2]|0;
    $34 = (_cmsStageData($33)|0);
    $35 = HEAP32[$34>>2]|0;
    dest=$9; src=$35; stop=dest+72|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
    $$sink = $34;
    break;
   }
  } else {
   $22 = HEAP32[$7>>2]|0;
   $23 = (_cmsStageData($22)|0);
   $24 = HEAP32[$8>>2]|0;
   $25 = (_cmsStageData($24)|0);
   $26 = ((($23)) + 4|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = ($27|0)==(0|0);
   if ($28) {
    $29 = HEAP32[$25>>2]|0;
    $30 = HEAP32[$23>>2]|0;
    __cmsMAT3per($9,$29,$30);
    $$sink = $25;
    break;
   } else {
    $$1 = 0;
    STACKTOP = sp;return ($$1|0);
   }
  }
 } while(0);
 $36 = ((($$sink)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = (__cmsMAT3isIdentity($9)|0);
 $39 = ($38|0)!=(0);
 $40 = ($37|0)==(0|0);
 $or$cond = $40 & $39;
 $41 = ((($19)) + 32|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ((($19)) + 4|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ((($19)) + 8|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = (_cmsPipelineAlloc($42,$44,$46)|0);
 HEAP32[$10>>2] = $47;
 $48 = ($47|0)==(0|0);
 if ($48) {
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 $49 = HEAP32[$5>>2]|0;
 $50 = (_cmsStageDup($49)|0);
 $51 = (_cmsPipelineInsertStage($47,0,$50)|0);
 $52 = ($51|0)==(0);
 do {
  if (!($52)) {
   if (!($or$cond)) {
    $53 = HEAP32[$10>>2]|0;
    $54 = ((($53)) + 32|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = (_cmsStageAllocMatrix($55,3,3,$9,$37)|0);
    $57 = (_cmsPipelineInsertStage($53,1,$56)|0);
    $58 = ($57|0)==(0);
    if ($58) {
     break;
    }
   }
   $59 = HEAP32[$10>>2]|0;
   $60 = HEAP32[$6>>2]|0;
   $61 = (_cmsStageDup($60)|0);
   $62 = (_cmsPipelineInsertStage($59,1,$61)|0);
   $63 = ($62|0)==(0);
   if (!($63)) {
    if ($or$cond) {
     (_OptimizeByJoiningCurves($10,$1,$2,$3,$4)|0);
    } else {
     $64 = HEAP32[$5>>2]|0;
     $65 = (_cmsStageData($64)|0);
     $66 = HEAP32[$6>>2]|0;
     $67 = (_cmsStageData($66)|0);
     $68 = HEAP32[$4>>2]|0;
     $69 = $68 | 64;
     HEAP32[$4>>2] = $69;
     $70 = HEAP32[$10>>2]|0;
     $71 = ((($65)) + 4|0);
     $72 = HEAP32[$71>>2]|0;
     $73 = ((($67)) + 4|0);
     $74 = HEAP32[$73>>2]|0;
     _SetMatShaper($70,$72,$9,$37,$74,$3);
    }
    _cmsPipelineFree($19);
    $75 = HEAP32[$10>>2]|0;
    HEAP32[$0>>2] = $75;
    $$1 = 1;
    STACKTOP = sp;return ($$1|0);
   }
  }
 } while(0);
 $76 = HEAP32[$10>>2]|0;
 _cmsPipelineFree($76);
 $$1 = 0;
 STACKTOP = sp;return ($$1|0);
}
function _OptimizeByComputingLinearization($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0176225 = 0, $$0179227 = 0, $$0181212 = 0, $$0188 = 0, $$0189230 = 0, $$0190 = 0, $$1177216 = 0, $$1180224 = 0, $$1182 = 0, $$2 = 0, $$2178220 = 0, $$3214 = 0, $$4213 = 0, $$5210 = 0, $$6207 = 0, $$7206 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $not$ = 0, $or$cond = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0;
 $5 = sp + 192|0;
 $6 = sp + 128|0;
 $7 = sp + 64|0;
 $8 = sp;
 $9 = HEAP32[$2>>2]|0;
 $10 = (__cmsFormatterIsFloat($9)|0);
 $11 = ($10|0)==(0);
 if (!($11)) {
  $$2 = 0;
  STACKTOP = sp;return ($$2|0);
 }
 $12 = HEAP32[$3>>2]|0;
 $13 = (__cmsFormatterIsFloat($12)|0);
 $14 = ($13|0)==(0);
 if (!($14)) {
  $$2 = 0;
  STACKTOP = sp;return ($$2|0);
 }
 $15 = HEAP32[$2>>2]|0;
 $16 = $15 & 2035712;
 $17 = ($16|0)==(262144);
 if (!($17)) {
  $$2 = 0;
  STACKTOP = sp;return ($$2|0);
 }
 $18 = HEAP32[$3>>2]|0;
 $19 = $18 & 2035712;
 $20 = ($19|0)==(262144);
 if (!($20)) {
  $$2 = 0;
  STACKTOP = sp;return ($$2|0);
 }
 $21 = (__cmsFormatterIs8bit($15)|0);
 $22 = ($21|0)==(0);
 if ($22) {
  $23 = HEAP32[$4>>2]|0;
  $24 = $23 & 16;
  $25 = ($24|0)==(0);
  if ($25) {
   $$2 = 0;
   STACKTOP = sp;return ($$2|0);
  }
 }
 $26 = HEAP32[$0>>2]|0;
 $27 = (_cmsPipelineGetPtrToFirstStage($26)|0);
 $28 = ($27|0)==(0|0);
 L17: do {
  if (!($28)) {
   $$0189230 = $27;
   while(1) {
    $29 = (_cmsStageType($$0189230)|0);
    $30 = ($29|0)==(1852009504);
    if ($30) {
     $$2 = 0;
     break;
    }
    $31 = (_cmsStageNext($$0189230)|0);
    $32 = ($31|0)==(0|0);
    if ($32) {
     break L17;
    } else {
     $$0189230 = $31;
    }
   }
   STACKTOP = sp;return ($$2|0);
  }
 } while(0);
 $33 = HEAP32[$2>>2]|0;
 $34 = $33 >>> 16;
 $35 = $34 & 31;
 $36 = (__cmsICCcolorSpace($35)|0);
 $37 = HEAP32[$3>>2]|0;
 $38 = $37 >>> 16;
 $39 = $38 & 31;
 $40 = (__cmsICCcolorSpace($39)|0);
 $41 = ($36|0)==(0);
 $42 = ($40|0)==(0);
 $or$cond = $41 | $42;
 if ($or$cond) {
  $$2 = 0;
  STACKTOP = sp;return ($$2|0);
 }
 $43 = HEAP32[$4>>2]|0;
 $44 = (__cmsReasonableGridpointsByColorspace($36,$43)|0);
 dest=$5; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 dest=$6; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $45 = (_cmsPipelineGetPtrToLastStage($26)|0);
 $46 = (_cmsStageType($45)|0);
 $47 = ($46|0)==(1668707188);
 L26: do {
  if ($47) {
   $48 = (_cmsStageData($45)|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = ($49|0)==(0);
   if ($50) {
    label = 15;
   } else {
    $51 = ((($48)) + 4|0);
    $52 = HEAP32[$51>>2]|0;
    $$0179227 = 0;
    while(1) {
     $60 = (($52) + ($$0179227<<2)|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = (_IsDegenerated($61)|0);
     $63 = ($62|0)==(0);
     $55 = (($$0179227) + 1)|0;
     if (!($63)) {
      $$0188 = 0;$$0190 = 0;
      break L26;
     }
     $53 = HEAP32[$48>>2]|0;
     $54 = ($55>>>0)<($53>>>0);
     if ($54) {
      $$0179227 = $55;
     } else {
      label = 15;
      break;
     }
    }
   }
  } else {
   label = 15;
  }
 } while(0);
 L32: do {
  if ((label|0) == 15) {
   $56 = ((($26)) + 4|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = ($57|0)==(0);
   if (!($58)) {
    $59 = ((($26)) + 32|0);
    $$0176225 = 0;
    while(1) {
     $67 = HEAP32[$59>>2]|0;
     $68 = (_cmsBuildTabulatedToneCurve16($67,4096,0)|0);
     $69 = (($5) + ($$0176225<<2)|0);
     HEAP32[$69>>2] = $68;
     $70 = ($68|0)==(0|0);
     $66 = (($$0176225) + 1)|0;
     if ($70) {
      $$0188 = 0;$$0190 = 0;
      break L32;
     }
     $64 = HEAP32[$56>>2]|0;
     $65 = ($66>>>0)<($64>>>0);
     if ($65) {
      $$0176225 = $66;
     } else {
      break;
     }
    }
   }
   $$1180224 = 0;
   while(1) {
    $73 = (+($$1180224>>>0));
    $74 = $73 / 4095.0;
    $75 = $74;
    $76 = HEAP32[$56>>2]|0;
    $77 = ($76|0)==(0);
    if (!($77)) {
     $78 = HEAP32[$56>>2]|0;
     $$1177216 = 0;
     while(1) {
      $79 = (($7) + ($$1177216<<2)|0);
      HEAPF32[$79>>2] = $75;
      $80 = (($$1177216) + 1)|0;
      $81 = ($80>>>0)<($78>>>0);
      if ($81) {
       $$1177216 = $80;
      } else {
       break;
      }
     }
    }
    _cmsPipelineEvalFloat($7,$8,$26);
    $82 = HEAP32[$56>>2]|0;
    $83 = ($82|0)==(0);
    if (!($83)) {
     $84 = HEAP32[$56>>2]|0;
     $$2178220 = 0;
     while(1) {
      $85 = (($8) + ($$2178220<<2)|0);
      $86 = +HEAPF32[$85>>2];
      $87 = $86;
      $88 = $87 * 65535.0;
      $89 = (__cmsQuickSaturateWord_375($88)|0);
      $90 = (($5) + ($$2178220<<2)|0);
      $91 = HEAP32[$90>>2]|0;
      $92 = ((($91)) + 24|0);
      $93 = HEAP32[$92>>2]|0;
      $94 = (($93) + ($$1180224<<1)|0);
      HEAP16[$94>>1] = $89;
      $95 = (($$2178220) + 1)|0;
      $96 = ($95>>>0)<($84>>>0);
      if ($96) {
       $$2178220 = $95;
      } else {
       break;
      }
     }
    }
    $97 = (($$1180224) + 1)|0;
    $exitcond = ($97|0)==(4096);
    if ($exitcond) {
     break;
    } else {
     $$1180224 = $97;
    }
   }
   $71 = HEAP32[$56>>2]|0;
   $72 = ($71|0)==(0);
   if ($72) {
    $$0181212 = 1;$$4213 = 0;
   } else {
    $$3214 = 0;
    while(1) {
     $98 = (($5) + ($$3214<<2)|0);
     $99 = HEAP32[$98>>2]|0;
     _SlopeLimiting($99);
     $100 = (($$3214) + 1)|0;
     $101 = HEAP32[$56>>2]|0;
     $102 = ($100>>>0)<($101>>>0);
     if ($102) {
      $$3214 = $100;
     } else {
      $$0181212 = 1;$$4213 = 0;
      break;
     }
    }
   }
   while(1) {
    $103 = HEAP32[$56>>2]|0;
    $104 = ($$4213>>>0)<($103>>>0);
    if (!($104)) {
     break;
    }
    $107 = (($5) + ($$4213<<2)|0);
    $108 = HEAP32[$107>>2]|0;
    (_cmsIsToneCurveLinear($108)|0);
    $109 = HEAP32[$107>>2]|0;
    $110 = (_cmsIsToneCurveMonotonic($109)|0);
    $111 = ($110|0)==(0);
    $$1182 = $111 ? 0 : $$0181212;
    $112 = HEAP32[$107>>2]|0;
    $113 = (_IsDegenerated($112)|0);
    $114 = (($$4213) + 1)|0;
    $115 = ($$1182|0)==(0);
    $not$ = ($113|0)!=(0);
    $116 = $115 | $not$;
    if ($116) {
     $$0188 = 0;$$0190 = 0;
     break L32;
    } else {
     $$0181212 = $$1182;$$4213 = $114;
    }
   }
   $105 = HEAP32[$56>>2]|0;
   $106 = ($105|0)==(0);
   if (!($106)) {
    $$5210 = 0;
    while(1) {
     $120 = (($5) + ($$5210<<2)|0);
     $121 = HEAP32[$120>>2]|0;
     $122 = (_cmsReverseToneCurveEx(4096,$121)|0);
     $123 = (($6) + ($$5210<<2)|0);
     HEAP32[$123>>2] = $122;
     $124 = ($122|0)==(0|0);
     $119 = (($$5210) + 1)|0;
     if ($124) {
      $$0188 = 0;$$0190 = 0;
      break L32;
     }
     $117 = HEAP32[$56>>2]|0;
     $118 = ($119>>>0)<($117>>>0);
     if ($118) {
      $$5210 = $119;
     } else {
      break;
     }
    }
   }
   $125 = (_cmsPipelineDup($26)|0);
   $126 = ($125|0)==(0|0);
   if ($126) {
    $$0188 = 0;$$0190 = 0;
   } else {
    $127 = ((($26)) + 32|0);
    $128 = HEAP32[$127>>2]|0;
    $129 = HEAP32[$56>>2]|0;
    $130 = (_cmsStageAllocToneCurves($128,$129,$6)|0);
    $131 = (_cmsPipelineInsertStage($125,0,$130)|0);
    $132 = ($131|0)==(0);
    if ($132) {
     $$0188 = 0;$$0190 = $125;
    } else {
     $133 = HEAP32[$127>>2]|0;
     $134 = HEAP32[$56>>2]|0;
     $135 = ((($26)) + 8|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = (_cmsPipelineAlloc($133,$134,$136)|0);
     $138 = ($137|0)==(0|0);
     if ($138) {
      $$0188 = 0;$$0190 = $125;
     } else {
      $139 = HEAP32[$127>>2]|0;
      $140 = HEAP32[$56>>2]|0;
      $141 = (_cmsStageAllocToneCurves($139,$140,$5)|0);
      $142 = (_cmsPipelineInsertStage($137,0,$141)|0);
      $143 = ($142|0)==(0);
      if ($143) {
       $$0188 = $137;$$0190 = $125;
      } else {
       $144 = HEAP32[$127>>2]|0;
       $145 = HEAP32[$56>>2]|0;
       $146 = HEAP32[$135>>2]|0;
       $147 = (_cmsStageAllocCLut16bit($144,$44,$145,$146,0)|0);
       $148 = (_cmsPipelineInsertStage($137,1,$147)|0);
       $149 = ($148|0)==(0);
       if ($149) {
        $$0188 = $137;$$0190 = $125;
       } else {
        $150 = (_cmsStageSampleCLut16bit($147,45,$125,0)|0);
        $151 = ($150|0)==(0);
        if ($151) {
         $$0188 = $137;$$0190 = $125;
        } else {
         $152 = HEAP32[$56>>2]|0;
         $153 = ($152|0)==(0);
         if (!($153)) {
          $$6207 = 0;
          while(1) {
           $154 = (($5) + ($$6207<<2)|0);
           $155 = HEAP32[$154>>2]|0;
           $156 = ($155|0)==(0|0);
           if (!($156)) {
            _cmsFreeToneCurve($155);
           }
           $157 = (($6) + ($$6207<<2)|0);
           $158 = HEAP32[$157>>2]|0;
           $159 = ($158|0)==(0|0);
           if (!($159)) {
            _cmsFreeToneCurve($158);
           }
           $160 = (($$6207) + 1)|0;
           $161 = HEAP32[$56>>2]|0;
           $162 = ($160>>>0)<($161>>>0);
           if ($162) {
            $$6207 = $160;
           } else {
            break;
           }
          }
         }
         _cmsPipelineFree($125);
         $163 = (__cmsStageGetPtrToCurveSet($141)|0);
         $164 = ((($147)) + 32|0);
         $165 = HEAP32[$164>>2]|0;
         $166 = HEAP32[$2>>2]|0;
         $167 = (__cmsFormatterIs8bit($166)|0);
         $168 = ($167|0)==(0);
         $169 = ((($137)) + 32|0);
         $170 = HEAP32[$169>>2]|0;
         $171 = ((($165)) + 4|0);
         $172 = HEAP32[$171>>2]|0;
         do {
          if ($168) {
           $175 = (_PrelinOpt16alloc($170,$172,3,$163,3,0)|0);
           $176 = ($175|0)==(0|0);
           if ($176) {
            $$2 = 0;
            STACKTOP = sp;return ($$2|0);
           } else {
            __cmsPipelineSetOptimizationParameters($137,35,$175,58,7);
            break;
           }
          } else {
           $173 = (_PrelinOpt8alloc($170,$172,$163)|0);
           $174 = ($173|0)==(0|0);
           if ($174) {
            $$2 = 0;
            STACKTOP = sp;return ($$2|0);
           } else {
            __cmsPipelineSetOptimizationParameters($137,38,$173,60,9);
            break;
           }
          }
         } while(0);
         $177 = ($1|0)==(3);
         if ($177) {
          $178 = HEAP32[$4>>2]|0;
          $179 = $178 | 4;
          HEAP32[$4>>2] = $179;
         }
         $180 = HEAP32[$4>>2]|0;
         $181 = $180 & 4;
         $182 = ($181|0)==(0);
         do {
          if ($182) {
           $183 = (_FixWhiteMisalignment($137,$36,$40)|0);
           $184 = ($183|0)==(0);
           if ($184) {
            $$2 = 0;
           } else {
            break;
           }
           STACKTOP = sp;return ($$2|0);
          }
         } while(0);
         _cmsPipelineFree($26);
         HEAP32[$0>>2] = $137;
         $$2 = 1;
         STACKTOP = sp;return ($$2|0);
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 $185 = ((($26)) + 4|0);
 $186 = HEAP32[$185>>2]|0;
 $187 = ($186|0)==(0);
 if (!($187)) {
  $$7206 = 0;
  while(1) {
   $188 = (($5) + ($$7206<<2)|0);
   $189 = HEAP32[$188>>2]|0;
   $190 = ($189|0)==(0|0);
   if (!($190)) {
    _cmsFreeToneCurve($189);
   }
   $191 = (($6) + ($$7206<<2)|0);
   $192 = HEAP32[$191>>2]|0;
   $193 = ($192|0)==(0|0);
   if (!($193)) {
    _cmsFreeToneCurve($192);
   }
   $194 = (($$7206) + 1)|0;
   $195 = HEAP32[$185>>2]|0;
   $196 = ($194>>>0)<($195>>>0);
   if ($196) {
    $$7206 = $194;
   } else {
    break;
   }
  }
 }
 $197 = ($$0190|0)==(0|0);
 if (!($197)) {
  _cmsPipelineFree($$0190);
 }
 $198 = ($$0188|0)==(0|0);
 if ($198) {
  $$2 = 0;
  STACKTOP = sp;return ($$2|0);
 }
 _cmsPipelineFree($$0188);
 $$2 = 0;
 STACKTOP = sp;return ($$2|0);
}
function _IsDegenerated($0) {
 $0 = $0|0;
 var $$$ = 0, $$$025 = 0, $$024$lcssa34 = 0, $$02430 = 0, $$025$lcssa33 = 0, $$02529 = 0, $$02728 = 0, $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $narrow = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  $$024$lcssa34 = 0;$$025$lcssa33 = 0;
 } else {
  $4 = ((($0)) + 24|0);
  $5 = HEAP32[$4>>2]|0;
  $$02430 = 0;$$02529 = 0;$$02728 = 0;
  while(1) {
   $6 = (($5) + ($$02728<<1)|0);
   $7 = HEAP16[$6>>1]|0;
   $8 = ($7<<16>>16)==(0);
   $9 = $8&1;
   $$$025 = (($9) + ($$02529))|0;
   $10 = ($7<<16>>16)==(-1);
   $11 = $10&1;
   $$1 = (($11) + ($$02430))|0;
   $12 = (($$02728) + 1)|0;
   $exitcond = ($12|0)==($2|0);
   if ($exitcond) {
    break;
   } else {
    $$02430 = $$1;$$02529 = $$$025;$$02728 = $12;
   }
  }
  $13 = ($$$025|0)==(1);
  $14 = ($$1|0)==(1);
  $or$cond = $13 & $14;
  if ($or$cond) {
   return 0;
  } else {
   $$024$lcssa34 = $$1;$$025$lcssa33 = $$$025;
  }
 }
 $15 = (($2>>>0) / 20)&-1;
 $16 = ($$025$lcssa33>>>0)>($15>>>0);
 $17 = ($$024$lcssa34>>>0)>($15>>>0);
 $narrow = $16 | $17;
 $$$ = $narrow&1;
 return ($$$|0);
}
function __cmsQuickSaturateWord_375($0) {
 $0 = +$0;
 var $$0 = 0, $1 = 0.0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0 + 0.5;
 $2 = !($1 <= 0.0);
 if ($2) {
  $3 = !($1 >= 65535.0);
  if ($3) {
   $4 = (__cmsQuickFloorWord_381($1)|0);
   $$0 = $4;
  } else {
   $$0 = -1;
  }
 } else {
  $$0 = 0;
 }
 return ($$0|0);
}
function _SlopeLimiting($0) {
 $0 = $0|0;
 var $$ = 0.0, $$055 = 0, $$154 = 0, $$53 = 0.0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0;
 var $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (+($2>>>0));
 $4 = $3 * 0.02;
 $5 = $4 + 0.5;
 $6 = (+Math_floor((+$5)));
 $7 = (~~(($6)));
 $8 = (($2) - ($7))|0;
 $9 = (($8) + -1)|0;
 $10 = (_cmsIsToneCurveDescending($0)|0);
 $11 = ($10|0)==(0);
 $$ = $11 ? 65535.0 : 0.0;
 $$53 = $11 ? 0.0 : 65535.0;
 $12 = ((($0)) + 24|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + ($7<<1)|0);
 $15 = HEAP16[$14>>1]|0;
 $16 = (+($15&65535));
 $17 = $16 - $$53;
 $18 = (+($7|0));
 $19 = $17 / $18;
 $20 = $18 * $19;
 $21 = $16 - $20;
 $22 = ($7|0)>(0);
 if ($22) {
  $23 = HEAP32[$12>>2]|0;
  $$055 = 0;
  while(1) {
   $24 = (+($$055|0));
   $25 = $19 * $24;
   $26 = $21 + $25;
   $27 = (__cmsQuickSaturateWord_375($26)|0);
   $28 = (($23) + ($$055<<1)|0);
   HEAP16[$28>>1] = $27;
   $29 = (($$055) + 1)|0;
   $exitcond = ($29|0)==($7|0);
   if ($exitcond) {
    break;
   } else {
    $$055 = $29;
   }
  }
 }
 $30 = HEAP32[$12>>2]|0;
 $31 = (($30) + ($9<<1)|0);
 $32 = HEAP16[$31>>1]|0;
 $33 = (+($32&65535));
 $34 = $$ - $33;
 $35 = $34 / $18;
 $36 = (+($9|0));
 $37 = $36 * $35;
 $38 = $33 - $37;
 $39 = HEAP32[$1>>2]|0;
 $40 = ($8|0)>($39|0);
 if ($40) {
  return;
 }
 $41 = HEAP32[$12>>2]|0;
 $42 = HEAP32[$1>>2]|0;
 $$154 = $9;
 while(1) {
  $43 = (+($$154|0));
  $44 = $35 * $43;
  $45 = $38 + $44;
  $46 = (__cmsQuickSaturateWord_375($45)|0);
  $47 = (($41) + ($$154<<1)|0);
  HEAP16[$47>>1] = $46;
  $48 = (($$154) + 1)|0;
  $49 = ($48|0)<($42|0);
  if ($49) {
   $$154 = $48;
  } else {
   break;
  }
 }
 return;
}
function _XFormSampler16($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$019 = 0, $$118 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0.0;
 var $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $3 = sp + 64|0;
 $4 = sp;
 $5 = ((($2)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6>>>0)<(16);
 if (!($7)) {
  ___assert_fail((27573|0),(27444|0),415,(27601|0));
  // unreachable;
 }
 $8 = ((($2)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9>>>0)<(16);
 if (!($10)) {
  ___assert_fail((27616|0),(27444|0),416,(27601|0));
  // unreachable;
 }
 $11 = HEAP32[$5>>2]|0;
 $12 = ($11|0)==(0);
 if (!($12)) {
  $13 = HEAP32[$5>>2]|0;
  $$019 = 0;
  while(1) {
   $14 = (($0) + ($$019<<1)|0);
   $15 = HEAP16[$14>>1]|0;
   $16 = (+($15&65535));
   $17 = $16 / 65535.0;
   $18 = $17;
   $19 = (($3) + ($$019<<2)|0);
   HEAPF32[$19>>2] = $18;
   $20 = (($$019) + 1)|0;
   $21 = ($20>>>0)<($13>>>0);
   if ($21) {
    $$019 = $20;
   } else {
    break;
   }
  }
 }
 _cmsPipelineEvalFloat($3,$4,$2);
 $22 = HEAP32[$8>>2]|0;
 $23 = ($22|0)==(0);
 if ($23) {
  STACKTOP = sp;return 1;
 }
 $24 = HEAP32[$8>>2]|0;
 $$118 = 0;
 while(1) {
  $25 = (($4) + ($$118<<2)|0);
  $26 = +HEAPF32[$25>>2];
  $27 = $26;
  $28 = $27 * 65535.0;
  $29 = (__cmsQuickSaturateWord_375($28)|0);
  $30 = (($1) + ($$118<<1)|0);
  HEAP16[$30>>1] = $29;
  $31 = (($$118) + 1)|0;
  $32 = ($31>>>0)<($24>>>0);
  if ($32) {
   $$118 = $31;
  } else {
   break;
  }
 }
 STACKTOP = sp;return 1;
}
function _PrelinOpt8alloc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$06263 = 0, $$sink = 0, $$sroa$0$0 = 0, $$sroa$5$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (__cmsMallocZero($0,4616)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = 0;
  return ($$0|0);
 }
 $5 = ($2|0)==(0|0);
 $6 = ((($1)) + 48|0);
 $7 = ((($1)) + 52|0);
 $8 = ((($1)) + 56|0);
 $9 = ((($1)) + 88|0);
 $10 = ((($3)) + 1544|0);
 $11 = ((($1)) + 84|0);
 $12 = ((($3)) + 2568|0);
 $13 = ((($1)) + 80|0);
 $14 = ((($3)) + 3592|0);
 $15 = ((($3)) + 8|0);
 $16 = ((($3)) + 520|0);
 $17 = ((($3)) + 1032|0);
 $18 = ((($2)) + 4|0);
 $19 = ((($2)) + 8|0);
 $$06263 = 0;
 while(1) {
  $20 = $$06263 << 8;
  $21 = $20 | $$06263;
  $22 = $21&65535;
  if ($5) {
   $$sink = $22;$$sroa$0$0 = $22;$$sroa$5$0 = $22;
  } else {
   $23 = HEAP32[$2>>2]|0;
   $24 = (_cmsEvalToneCurve16($23,$22)|0);
   $25 = HEAP32[$18>>2]|0;
   $26 = (_cmsEvalToneCurve16($25,$22)|0);
   $27 = HEAP32[$19>>2]|0;
   $28 = (_cmsEvalToneCurve16($27,$22)|0);
   $$sink = $28;$$sroa$0$0 = $24;$$sroa$5$0 = $26;
  }
  $29 = $$sroa$0$0&65535;
  $30 = HEAP32[$6>>2]|0;
  $31 = Math_imul($30, $29)|0;
  $32 = (__cmsToFixedDomain_378($31)|0);
  $33 = $$sroa$5$0&65535;
  $34 = HEAP32[$7>>2]|0;
  $35 = Math_imul($34, $33)|0;
  $36 = (__cmsToFixedDomain_378($35)|0);
  $37 = $$sink&65535;
  $38 = HEAP32[$8>>2]|0;
  $39 = Math_imul($38, $37)|0;
  $40 = (__cmsToFixedDomain_378($39)|0);
  $41 = HEAP32[$9>>2]|0;
  $42 = $32 >> 16;
  $43 = Math_imul($41, $42)|0;
  $44 = (($10) + ($$06263<<2)|0);
  HEAP32[$44>>2] = $43;
  $45 = HEAP32[$11>>2]|0;
  $46 = $36 >> 16;
  $47 = Math_imul($45, $46)|0;
  $48 = (($12) + ($$06263<<2)|0);
  HEAP32[$48>>2] = $47;
  $49 = HEAP32[$13>>2]|0;
  $50 = $40 >> 16;
  $51 = Math_imul($49, $50)|0;
  $52 = (($14) + ($$06263<<2)|0);
  HEAP32[$52>>2] = $51;
  $53 = $32&65535;
  $54 = (($15) + ($$06263<<1)|0);
  HEAP16[$54>>1] = $53;
  $55 = $36&65535;
  $56 = (($16) + ($$06263<<1)|0);
  HEAP16[$56>>1] = $55;
  $57 = $40&65535;
  $58 = (($17) + ($$06263<<1)|0);
  HEAP16[$58>>1] = $57;
  $59 = (($$06263) + 1)|0;
  $exitcond = ($59|0)==(256);
  if ($exitcond) {
   break;
  } else {
   $$06263 = $59;
  }
 }
 HEAP32[$3>>2] = $0;
 $60 = ((($3)) + 4|0);
 HEAP32[$60>>2] = $1;
 $$0 = $3;
 return ($$0|0);
}
function _PrelinEval8($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0263 = 0, $$0264 = 0, $$0265277 = 0, $$not = 0, $$not266 = 0, $$not268 = 0, $$not270 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $brmerge = 0, $brmerge272 = 0, $brmerge274 = 0, $brmerge276 = 0, $exitcond = 0, $or$cond = 0, $or$cond267 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($4)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($4)) + 112|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP16[$0>>1]|0;
 $10 = ($9&65535) >>> 8;
 $11 = $10&65535;
 $12 = ((($0)) + 2|0);
 $13 = HEAP16[$12>>1]|0;
 $14 = ($13&65535) >>> 8;
 $15 = $14&65535;
 $16 = ((($0)) + 4|0);
 $17 = HEAP16[$16>>1]|0;
 $18 = ($17&65535) >>> 8;
 $19 = $18&65535;
 $20 = ((($2)) + 1544|0);
 $21 = (($20) + ($11<<2)|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($2)) + 2568|0);
 $24 = (($23) + ($15<<2)|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ((($2)) + 3592|0);
 $27 = (($26) + ($19<<2)|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ((($2)) + 8|0);
 $30 = (($29) + ($11<<1)|0);
 $31 = HEAP16[$30>>1]|0;
 $32 = $31&65535;
 $33 = ((($2)) + 520|0);
 $34 = (($33) + ($15<<1)|0);
 $35 = HEAP16[$34>>1]|0;
 $36 = $35&65535;
 $37 = ((($2)) + 1032|0);
 $38 = (($37) + ($19<<1)|0);
 $39 = HEAP16[$38>>1]|0;
 $40 = $39&65535;
 $41 = ($31<<16>>16)==(0);
 if ($41) {
  $45 = 0;
 } else {
  $42 = ((($4)) + 88|0);
  $43 = HEAP32[$42>>2]|0;
  $45 = $43;
 }
 $44 = (($45) + ($22))|0;
 $46 = ($35<<16>>16)==(0);
 if ($46) {
  $50 = 0;
 } else {
  $47 = ((($4)) + 84|0);
  $48 = HEAP32[$47>>2]|0;
  $50 = $48;
 }
 $49 = (($50) + ($25))|0;
 $51 = ($39<<16>>16)==(0);
 if ($51) {
  $55 = 0;
 } else {
  $52 = ((($4)) + 80|0);
  $53 = HEAP32[$52>>2]|0;
  $55 = $53;
 }
 $54 = (($55) + ($28))|0;
 $56 = ($6|0)>(0);
 if (!($56)) {
  return;
 }
 $57 = (($25) + ($22))|0;
 $58 = (($57) + ($28))|0;
 $$not = ($31&65535)<($35&65535);
 $59 = ($35&65535)<($39&65535);
 $or$cond = $$not | $59;
 $$not266 = ($31&65535)<($39&65535);
 $60 = ($39&65535)<($35&65535);
 $or$cond267 = $$not266 | $60;
 $$not268 = ($39&65535)<($31&65535);
 $brmerge = $$not | $$not268;
 $$not270 = ($35&65535)<($31&65535);
 $brmerge272 = $$not270 | $$not266;
 $brmerge274 = $59 | $$not268;
 $brmerge276 = $$not270 | $60;
 $61 = (($49) + ($44))|0;
 $62 = (($61) + ($54))|0;
 $63 = (($49) + ($22))|0;
 $64 = (($63) + ($54))|0;
 $65 = (($54) + ($57))|0;
 $66 = (($49) + ($44))|0;
 $67 = (($66) + ($54))|0;
 $68 = (($49) + ($22))|0;
 $69 = (($54) + ($68))|0;
 $70 = (($68) + ($28))|0;
 $71 = (($49) + ($44))|0;
 $72 = (($71) + ($28))|0;
 $73 = (($28) + ($22))|0;
 $74 = (($73) + ($49))|0;
 $75 = (($54) + ($71))|0;
 $76 = (($44) + ($25))|0;
 $77 = (($76) + ($54))|0;
 $78 = (($54) + ($57))|0;
 $79 = (($49) + ($44))|0;
 $80 = (($79) + ($54))|0;
 $81 = (($44) + ($25))|0;
 $82 = (($81) + ($28))|0;
 $83 = (($49) + ($44))|0;
 $84 = (($83) + ($54))|0;
 $85 = (($54) + ($81))|0;
 $86 = (($28) + ($25))|0;
 $87 = (($86) + ($44))|0;
 $88 = (($49) + ($44))|0;
 $89 = (($88) + ($28))|0;
 $90 = (($54) + ($88))|0;
 $$0265277 = 0;
 while(1) {
  $91 = (($58) + ($$0265277))|0;
  $92 = (($8) + ($91<<1)|0);
  $93 = HEAP16[$92>>1]|0;
  $94 = $93&65535;
  do {
   if ($or$cond) {
    if (!($or$cond267)) {
     $110 = (($82) + ($$0265277))|0;
     $111 = (($8) + ($110<<1)|0);
     $112 = HEAP16[$111>>1]|0;
     $113 = $112&65535;
     $114 = (($113) - ($94))|0;
     $115 = (($84) + ($$0265277))|0;
     $116 = (($8) + ($115<<1)|0);
     $117 = HEAP16[$116>>1]|0;
     $118 = $117&65535;
     $119 = (($85) + ($$0265277))|0;
     $120 = (($8) + ($119<<1)|0);
     $121 = HEAP16[$120>>1]|0;
     $122 = $121&65535;
     $123 = (($118) - ($122))|0;
     $124 = (($122) - ($113))|0;
     $$0 = $114;$$0263 = $123;$$0264 = $124;
     break;
    }
    if (!($brmerge)) {
     $125 = (($77) + ($$0265277))|0;
     $126 = (($8) + ($125<<1)|0);
     $127 = HEAP16[$126>>1]|0;
     $128 = $127&65535;
     $129 = (($78) + ($$0265277))|0;
     $130 = (($8) + ($129<<1)|0);
     $131 = HEAP16[$130>>1]|0;
     $132 = $131&65535;
     $133 = (($128) - ($132))|0;
     $134 = (($80) + ($$0265277))|0;
     $135 = (($8) + ($134<<1)|0);
     $136 = HEAP16[$135>>1]|0;
     $137 = $136&65535;
     $138 = (($137) - ($128))|0;
     $139 = (($132) - ($94))|0;
     $$0 = $133;$$0263 = $138;$$0264 = $139;
     break;
    }
    if (!($brmerge272)) {
     $140 = (($72) + ($$0265277))|0;
     $141 = (($8) + ($140<<1)|0);
     $142 = HEAP16[$141>>1]|0;
     $143 = $142&65535;
     $144 = (($74) + ($$0265277))|0;
     $145 = (($8) + ($144<<1)|0);
     $146 = HEAP16[$145>>1]|0;
     $147 = $146&65535;
     $148 = (($143) - ($147))|0;
     $149 = (($147) - ($94))|0;
     $150 = (($75) + ($$0265277))|0;
     $151 = (($8) + ($150<<1)|0);
     $152 = HEAP16[$151>>1]|0;
     $153 = $152&65535;
     $154 = (($153) - ($143))|0;
     $$0 = $148;$$0263 = $149;$$0264 = $154;
     break;
    }
    if (!($brmerge274)) {
     $155 = (($67) + ($$0265277))|0;
     $156 = (($8) + ($155<<1)|0);
     $157 = HEAP16[$156>>1]|0;
     $158 = $157&65535;
     $159 = (($69) + ($$0265277))|0;
     $160 = (($8) + ($159<<1)|0);
     $161 = HEAP16[$160>>1]|0;
     $162 = $161&65535;
     $163 = (($158) - ($162))|0;
     $164 = (($70) + ($$0265277))|0;
     $165 = (($8) + ($164<<1)|0);
     $166 = HEAP16[$165>>1]|0;
     $167 = $166&65535;
     $168 = (($167) - ($94))|0;
     $169 = (($162) - ($167))|0;
     $$0 = $163;$$0263 = $168;$$0264 = $169;
     break;
    }
    if ($brmerge276) {
     $$0 = 0;$$0263 = 0;$$0264 = 0;
    } else {
     $170 = (($62) + ($$0265277))|0;
     $171 = (($8) + ($170<<1)|0);
     $172 = HEAP16[$171>>1]|0;
     $173 = $172&65535;
     $174 = (($64) + ($$0265277))|0;
     $175 = (($8) + ($174<<1)|0);
     $176 = HEAP16[$175>>1]|0;
     $177 = $176&65535;
     $178 = (($173) - ($177))|0;
     $179 = (($65) + ($$0265277))|0;
     $180 = (($8) + ($179<<1)|0);
     $181 = HEAP16[$180>>1]|0;
     $182 = $181&65535;
     $183 = (($177) - ($182))|0;
     $184 = (($182) - ($94))|0;
     $$0 = $178;$$0263 = $183;$$0264 = $184;
    }
   } else {
    $95 = (($87) + ($$0265277))|0;
    $96 = (($8) + ($95<<1)|0);
    $97 = HEAP16[$96>>1]|0;
    $98 = $97&65535;
    $99 = (($98) - ($94))|0;
    $100 = (($89) + ($$0265277))|0;
    $101 = (($8) + ($100<<1)|0);
    $102 = HEAP16[$101>>1]|0;
    $103 = $102&65535;
    $104 = (($103) - ($98))|0;
    $105 = (($90) + ($$0265277))|0;
    $106 = (($8) + ($105<<1)|0);
    $107 = HEAP16[$106>>1]|0;
    $108 = $107&65535;
    $109 = (($108) - ($103))|0;
    $$0 = $99;$$0263 = $104;$$0264 = $109;
   }
  } while(0);
  $185 = Math_imul($$0, $32)|0;
  $186 = Math_imul($$0263, $36)|0;
  $187 = Math_imul($$0264, $40)|0;
  $188 = (($187) + 32769)|0;
  $189 = (($188) + ($186))|0;
  $190 = (($189) + ($185))|0;
  $191 = $190 >> 16;
  $192 = (($191) + ($190))|0;
  $193 = $192 >>> 16;
  $194 = (($193) + ($94))|0;
  $195 = $194&65535;
  $196 = (($1) + ($$0265277<<1)|0);
  HEAP16[$196>>1] = $195;
  $197 = (($$0265277) + 1)|0;
  $exitcond = ($197|0)==($6|0);
  if ($exitcond) {
   break;
  } else {
   $$0265277 = $197;
  }
 }
 return;
}
function _Prelin8free($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __cmsFree($0,$1);
 return;
}
function _Prelin8dup($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__cmsDupMem($0,$1,4616)|0);
 return ($2|0);
}
function _PrelinOpt16alloc($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$05558 = 0, $$157 = 0, $$pn = 0, $$pn56$in = 0, $$sink = 0, $$sink1 = 0, $$sink2 = 0, $$sink3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond60 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = (__cmsMallocZero($0,92)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  $$0 = 0;
  return ($$0|0);
 }
 $8 = ((($6)) + 4|0);
 HEAP32[$8>>2] = $2;
 $9 = ((($6)) + 8|0);
 HEAP32[$9>>2] = $4;
 $10 = ($2|0)==(0);
 if (!($10)) {
  $11 = ($3|0)==(0|0);
  $12 = ((($6)) + 44|0);
  $$pn56$in = ((($6)) + 12|0);
  $13 = ((($6)) + 44|0);
  $$05558 = 0;
  while(1) {
   if ($11) {
    $14 = (($12) + ($$05558<<2)|0);
    HEAP32[$14>>2] = 0;
    $$sink = 39;
   } else {
    $15 = (($3) + ($$05558<<2)|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = HEAP32[$16>>2]|0;
    $18 = (($13) + ($$05558<<2)|0);
    HEAP32[$18>>2] = $17;
    $19 = ((($17)) + 116|0);
    $20 = HEAP32[$19>>2]|0;
    $$sink = $20;
   }
   $$sink1 = (($$pn56$in) + ($$05558<<2)|0);
   HEAP32[$$sink1>>2] = $$sink;
   $21 = (($$05558) + 1)|0;
   $exitcond60 = ($21|0)==($2|0);
   if ($exitcond60) {
    break;
   } else {
    $$05558 = $21;
   }
  }
 }
 $22 = ((($6)) + 80|0);
 HEAP32[$22>>2] = $1;
 $23 = ((($1)) + 116|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ((($6)) + 76|0);
 HEAP32[$25>>2] = $24;
 $26 = (__cmsCalloc($0,$4,4)|0);
 $27 = ((($6)) + 84|0);
 HEAP32[$27>>2] = $26;
 $28 = (__cmsCalloc($0,$4,4)|0);
 $29 = ((($6)) + 88|0);
 HEAP32[$29>>2] = $28;
 $30 = ($4|0)==(0);
 if ($30) {
  $$0 = $6;
  return ($$0|0);
 }
 $31 = ($5|0)==(0|0);
 $$157 = 0;
 while(1) {
  $32 = HEAP32[$29>>2]|0;
  if ($31) {
   $33 = (($32) + ($$157<<2)|0);
   HEAP32[$33>>2] = 0;
   $$sink2 = 39;
  } else {
   $34 = (($5) + ($$157<<2)|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = HEAP32[$35>>2]|0;
   $37 = (($32) + ($$157<<2)|0);
   HEAP32[$37>>2] = $36;
   $38 = HEAP32[$29>>2]|0;
   $39 = (($38) + ($$157<<2)|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = ((($40)) + 116|0);
   $42 = HEAP32[$41>>2]|0;
   $$sink2 = $42;
  }
  $$pn = HEAP32[$27>>2]|0;
  $$sink3 = (($$pn) + ($$157<<2)|0);
  HEAP32[$$sink3>>2] = $$sink2;
  $43 = (($$157) + 1)|0;
  $exitcond = ($43|0)==($4|0);
  if ($exitcond) {
   $$0 = $6;
   break;
  } else {
   $$157 = $43;
  }
 }
 return ($$0|0);
}
function _PrelinEval16($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$025 = 0, $$124 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $3 = sp + 32|0;
 $4 = sp;
 $5 = ((($2)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 if (!($7)) {
  $8 = ((($2)) + 12|0);
  $9 = ((($2)) + 44|0);
  $$025 = 0;
  while(1) {
   $10 = (($8) + ($$025<<2)|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (($0) + ($$025<<1)|0);
   $13 = (($3) + ($$025<<1)|0);
   $14 = (($9) + ($$025<<2)|0);
   $15 = HEAP32[$14>>2]|0;
   FUNCTION_TABLE_viii[$11 & 63]($12,$13,$15);
   $16 = (($$025) + 1)|0;
   $17 = HEAP32[$5>>2]|0;
   $18 = ($16>>>0)<($17>>>0);
   if ($18) {
    $$025 = $16;
   } else {
    break;
   }
  }
 }
 $19 = ((($2)) + 76|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($2)) + 80|0);
 $22 = HEAP32[$21>>2]|0;
 FUNCTION_TABLE_viii[$20 & 63]($3,$4,$22);
 $23 = ((($2)) + 8|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)==(0);
 if ($25) {
  STACKTOP = sp;return;
 }
 $26 = ((($2)) + 84|0);
 $27 = ((($2)) + 88|0);
 $$124 = 0;
 while(1) {
  $28 = HEAP32[$26>>2]|0;
  $29 = (($28) + ($$124<<2)|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (($4) + ($$124<<1)|0);
  $32 = (($1) + ($$124<<1)|0);
  $33 = HEAP32[$27>>2]|0;
  $34 = (($33) + ($$124<<2)|0);
  $35 = HEAP32[$34>>2]|0;
  FUNCTION_TABLE_viii[$30 & 63]($31,$32,$35);
  $36 = (($$124) + 1)|0;
  $37 = HEAP32[$23>>2]|0;
  $38 = ($36>>>0)<($37>>>0);
  if ($38) {
   $$124 = $36;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _PrelinOpt16free($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 84|0);
 $3 = HEAP32[$2>>2]|0;
 __cmsFree($0,$3);
 $4 = ((($1)) + 88|0);
 $5 = HEAP32[$4>>2]|0;
 __cmsFree($0,$5);
 __cmsFree($0,$1);
 return;
}
function _Prelin16dup($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__cmsDupMem($0,$1,92)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$0 = 0;
  return ($$0|0);
 }
 $4 = ((($1)) + 84|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($1)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 << 2;
 $9 = (__cmsDupMem($0,$5,$8)|0);
 $10 = ((($2)) + 84|0);
 HEAP32[$10>>2] = $9;
 $11 = ((($1)) + 88|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[$6>>2]|0;
 $14 = $13 << 2;
 $15 = (__cmsDupMem($0,$12,$14)|0);
 $16 = ((($2)) + 88|0);
 HEAP32[$16>>2] = $15;
 $$0 = $2;
 return ($$0|0);
}
function _FixWhiteMisalignment($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$04151 = 0, $$247 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $umax = 0, $umax55 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer18 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr17 = 0, $vararg_ptr2 = 0, $vararg_ptr21 = 0;
 var $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0;
 $vararg_buffer18 = sp + 56|0;
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer = sp;
 $3 = sp + 88|0;
 $4 = sp + 84|0;
 $5 = sp + 160|0;
 $6 = sp + 128|0;
 $7 = sp + 96|0;
 $8 = sp + 80|0;
 $9 = sp + 76|0;
 $10 = sp + 72|0;
 $11 = sp + 68|0;
 $12 = sp + 64|0;
 HEAP32[$10>>2] = 0;
 HEAP32[$11>>2] = 0;
 HEAP32[$12>>2] = 0;
 $13 = (__cmsEndPointsBySpace($1,$3,0,$9)|0);
 $14 = ($13|0)==(0);
 if ($14) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = (__cmsEndPointsBySpace($2,$4,0,$8)|0);
 $16 = ($15|0)==(0);
 if ($16) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $17 = ((($0)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = HEAP32[$9>>2]|0;
 $20 = ($18|0)==($19|0);
 if (!($20)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $21 = ((($0)) + 8|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = HEAP32[$8>>2]|0;
 $24 = ($22|0)==($23|0);
 if (!($24)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $25 = HEAP32[$3>>2]|0;
 _cmsPipelineEval16($25,$7,$0);
 $26 = HEAP32[$8>>2]|0;
 $27 = HEAP32[$4>>2]|0;
 $28 = (_WhitesAreEqual($26,$27,$7)|0);
 $29 = ($28|0)==(0);
 if (!($29)) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$vararg_buffer>>2] = 1668707188;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 1668052340;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 1668707188;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $10;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $11;
 $vararg_ptr5 = ((($vararg_buffer)) + 20|0);
 HEAP32[$vararg_ptr5>>2] = $12;
 $30 = (_cmsPipelineCheckAndRetreiveStages($0,3,$vararg_buffer)|0);
 $31 = ($30|0)==(0);
 if ($31) {
  HEAP32[$vararg_buffer6>>2] = 1668707188;
  $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
  HEAP32[$vararg_ptr9>>2] = 1668052340;
  $vararg_ptr10 = ((($vararg_buffer6)) + 8|0);
  HEAP32[$vararg_ptr10>>2] = $10;
  $vararg_ptr11 = ((($vararg_buffer6)) + 12|0);
  HEAP32[$vararg_ptr11>>2] = $11;
  $32 = (_cmsPipelineCheckAndRetreiveStages($0,2,$vararg_buffer6)|0);
  $33 = ($32|0)==(0);
  if ($33) {
   HEAP32[$vararg_buffer12>>2] = 1668052340;
   $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
   HEAP32[$vararg_ptr15>>2] = 1668707188;
   $vararg_ptr16 = ((($vararg_buffer12)) + 8|0);
   HEAP32[$vararg_ptr16>>2] = $11;
   $vararg_ptr17 = ((($vararg_buffer12)) + 12|0);
   HEAP32[$vararg_ptr17>>2] = $12;
   $34 = (_cmsPipelineCheckAndRetreiveStages($0,2,$vararg_buffer12)|0);
   $35 = ($34|0)==(0);
   if ($35) {
    HEAP32[$vararg_buffer18>>2] = 1668052340;
    $vararg_ptr21 = ((($vararg_buffer18)) + 4|0);
    HEAP32[$vararg_ptr21>>2] = $11;
    $36 = (_cmsPipelineCheckAndRetreiveStages($0,1,$vararg_buffer18)|0);
    $37 = ($36|0)==(0);
    if ($37) {
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
    }
   }
  }
 }
 $38 = HEAP32[$10>>2]|0;
 $39 = ($38|0)==(0|0);
 if ($39) {
  $40 = HEAP32[$9>>2]|0;
  $41 = ($40|0)==(0);
  if (!($41)) {
   $55 = HEAP32[$3>>2]|0;
   $56 = HEAP32[$9>>2]|0;
   $57 = ($56>>>0)>(1);
   $umax55 = $57 ? $56 : 1;
   $58 = $umax55 << 1;
   _memcpy(($5|0),($55|0),($58|0))|0;
  }
 } else {
  $42 = (__cmsStageGetPtrToCurveSet($38)|0);
  $43 = HEAP32[$9>>2]|0;
  $44 = ($43|0)==(0);
  if (!($44)) {
   $$04151 = 0;
   while(1) {
    $45 = (($42) + ($$04151<<2)|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = HEAP32[$3>>2]|0;
    $48 = (($47) + ($$04151<<1)|0);
    $49 = HEAP16[$48>>1]|0;
    $50 = (_cmsEvalToneCurve16($46,$49)|0);
    $51 = (($5) + ($$04151<<1)|0);
    HEAP16[$51>>1] = $50;
    $52 = (($$04151) + 1)|0;
    $53 = HEAP32[$9>>2]|0;
    $54 = ($52>>>0)<($53>>>0);
    if ($54) {
     $$04151 = $52;
    } else {
     break;
    }
   }
  }
 }
 $59 = HEAP32[$12>>2]|0;
 $60 = ($59|0)==(0|0);
 if ($60) {
  $61 = HEAP32[$8>>2]|0;
  $62 = ($61|0)==(0);
  if (!($62)) {
   $79 = HEAP32[$4>>2]|0;
   $80 = HEAP32[$8>>2]|0;
   $81 = ($80>>>0)>(1);
   $umax = $81 ? $80 : 1;
   $82 = $umax << 1;
   _memcpy(($6|0),($79|0),($82|0))|0;
  }
 } else {
  $63 = (__cmsStageGetPtrToCurveSet($59)|0);
  $64 = HEAP32[$8>>2]|0;
  $65 = ($64|0)==(0);
  if (!($65)) {
   $$247 = 0;
   while(1) {
    $66 = (($63) + ($$247<<2)|0);
    $67 = HEAP32[$66>>2]|0;
    $68 = (_cmsReverseToneCurve($67)|0);
    $69 = ($68|0)==(0|0);
    $70 = HEAP32[$4>>2]|0;
    $71 = (($70) + ($$247<<1)|0);
    $72 = HEAP16[$71>>1]|0;
    if ($69) {
     $73 = (($6) + ($$247<<1)|0);
     HEAP16[$73>>1] = $72;
    } else {
     $74 = (_cmsEvalToneCurve16($68,$72)|0);
     $75 = (($6) + ($$247<<1)|0);
     HEAP16[$75>>1] = $74;
     _cmsFreeToneCurve($68);
    }
    $76 = (($$247) + 1)|0;
    $77 = HEAP32[$8>>2]|0;
    $78 = ($76>>>0)<($77>>>0);
    if ($78) {
     $$247 = $76;
    } else {
     break;
    }
   }
  }
 }
 $83 = HEAP32[$11>>2]|0;
 $84 = HEAP32[$8>>2]|0;
 $85 = HEAP32[$9>>2]|0;
 _PatchLUT($83,$5,$6,$84,$85);
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _WhitesAreEqual($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$012 = 0, $$013 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ispos = 0, $neg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0);
 if ($3) {
  $$012 = 1;
  return ($$012|0);
 } else {
  $$013 = 0;
 }
 while(1) {
  $6 = (($1) + ($$013<<1)|0);
  $7 = HEAP16[$6>>1]|0;
  $8 = $7&65535;
  $9 = (($2) + ($$013<<1)|0);
  $10 = HEAP16[$9>>1]|0;
  $11 = $10&65535;
  $12 = (($8) - ($11))|0;
  $ispos = ($12|0)>(-1);
  $neg = (0 - ($12))|0;
  $13 = $ispos ? $12 : $neg;
  $14 = ($13|0)>(61440);
  if ($14) {
   $$012 = 1;
   label = 5;
   break;
  }
  $15 = ($7<<16>>16)==($10<<16>>16);
  $5 = (($$013) + 1)|0;
  if (!($15)) {
   $$012 = 0;
   label = 5;
   break;
  }
  $4 = ($5>>>0)<($0>>>0);
  if ($4) {
   $$013 = $5;
  } else {
   $$012 = 1;
   label = 5;
   break;
  }
 }
 if ((label|0) == 5) {
  return ($$012|0);
 }
 return (0)|0;
}
function _PatchLUT($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$0961 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0, $104 = 0.0, $105 = 0, $106 = 0.0, $107 = 0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0.0, $113 = 0, $114 = 0.0, $115 = 0.0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0, $132 = 0.0, $133 = 0.0;
 var $134 = 0.0, $135 = 0.0, $136 = 0, $137 = 0.0, $138 = 0.0, $139 = 0, $14 = 0.0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $16 = 0;
 var $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0;
 var $37 = 0, $38 = 0.0, $39 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0.0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0.0;
 var $56 = 0.0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0, $91 = 0.0;
 var $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0, $98 = 0, $99 = 0.0, $exitcond = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $5 = ((($0)) + 32|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(1668052340);
 if (!($11)) {
  $12 = HEAP32[$0>>2]|0;
  _cmsSignalError($12,3,27472,$vararg_buffer);
  STACKTOP = sp;return;
 }
 L5: do {
  switch ($4|0) {
  case 4:  {
   $13 = HEAP16[$1>>1]|0;
   $14 = (+($13&65535));
   $15 = ((($8)) + 48|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (+($16>>>0));
   $18 = $14 * $17;
   $19 = $18 / 65535.0;
   $20 = ((($1)) + 2|0);
   $21 = HEAP16[$20>>1]|0;
   $22 = (+($21&65535));
   $23 = ((($8)) + 52|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (+($24>>>0));
   $26 = $22 * $25;
   $27 = $26 / 65535.0;
   $28 = ((($1)) + 4|0);
   $29 = HEAP16[$28>>1]|0;
   $30 = (+($29&65535));
   $31 = ((($8)) + 56|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = (+($32>>>0));
   $34 = $30 * $33;
   $35 = $34 / 65535.0;
   $36 = ((($1)) + 6|0);
   $37 = HEAP16[$36>>1]|0;
   $38 = (+($37&65535));
   $39 = ((($8)) + 60|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = (+($40>>>0));
   $42 = $38 * $41;
   $43 = $42 / 65535.0;
   $44 = (+Math_floor((+$19)));
   $45 = (~~(($44)));
   $46 = (+Math_floor((+$27)));
   $47 = (~~(($46)));
   $48 = (+Math_floor((+$35)));
   $49 = (~~(($48)));
   $50 = (+Math_floor((+$43)));
   $51 = (~~(($50)));
   $52 = (+($45|0));
   $53 = $19 - $52;
   $54 = $53 != 0.0;
   if ($54) {
    STACKTOP = sp;return;
   }
   $55 = (+($47|0));
   $56 = $27 - $55;
   $57 = $56 != 0.0;
   if ($57) {
    STACKTOP = sp;return;
   }
   $58 = (+($49|0));
   $59 = $35 - $58;
   $60 = $59 != 0.0;
   if ($60) {
    STACKTOP = sp;return;
   }
   $61 = (+($51|0));
   $62 = $43 - $61;
   $63 = $62 != 0.0;
   if ($63) {
    STACKTOP = sp;return;
   } else {
    $64 = ((($8)) + 92|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = Math_imul($65, $45)|0;
    $67 = ((($8)) + 88|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = Math_imul($68, $47)|0;
    $70 = (($69) + ($66))|0;
    $71 = ((($8)) + 84|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = Math_imul($72, $49)|0;
    $74 = (($70) + ($73))|0;
    $75 = ((($8)) + 80|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = Math_imul($76, $51)|0;
    $78 = (($74) + ($77))|0;
    $$0 = $78;
    break L5;
   }
   break;
  }
  case 3:  {
   $79 = HEAP16[$1>>1]|0;
   $80 = (+($79&65535));
   $81 = ((($8)) + 48|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = (+($82>>>0));
   $84 = $80 * $83;
   $85 = $84 / 65535.0;
   $86 = ((($1)) + 2|0);
   $87 = HEAP16[$86>>1]|0;
   $88 = (+($87&65535));
   $89 = ((($8)) + 52|0);
   $90 = HEAP32[$89>>2]|0;
   $91 = (+($90>>>0));
   $92 = $88 * $91;
   $93 = $92 / 65535.0;
   $94 = ((($1)) + 4|0);
   $95 = HEAP16[$94>>1]|0;
   $96 = (+($95&65535));
   $97 = ((($8)) + 56|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = (+($98>>>0));
   $100 = $96 * $99;
   $101 = $100 / 65535.0;
   $102 = (+Math_floor((+$85)));
   $103 = (~~(($102)));
   $104 = (+Math_floor((+$93)));
   $105 = (~~(($104)));
   $106 = (+Math_floor((+$101)));
   $107 = (~~(($106)));
   $108 = (+($103|0));
   $109 = $85 - $108;
   $110 = $109 != 0.0;
   if ($110) {
    STACKTOP = sp;return;
   }
   $111 = (+($105|0));
   $112 = $93 - $111;
   $113 = $112 != 0.0;
   if ($113) {
    STACKTOP = sp;return;
   }
   $114 = (+($107|0));
   $115 = $101 - $114;
   $116 = $115 != 0.0;
   if ($116) {
    STACKTOP = sp;return;
   } else {
    $117 = ((($8)) + 88|0);
    $118 = HEAP32[$117>>2]|0;
    $119 = Math_imul($118, $103)|0;
    $120 = ((($8)) + 84|0);
    $121 = HEAP32[$120>>2]|0;
    $122 = Math_imul($121, $105)|0;
    $123 = (($122) + ($119))|0;
    $124 = ((($8)) + 80|0);
    $125 = HEAP32[$124>>2]|0;
    $126 = Math_imul($125, $107)|0;
    $127 = (($123) + ($126))|0;
    $$0 = $127;
    break L5;
   }
   break;
  }
  case 1:  {
   $128 = HEAP16[$1>>1]|0;
   $129 = (+($128&65535));
   $130 = ((($8)) + 48|0);
   $131 = HEAP32[$130>>2]|0;
   $132 = (+($131>>>0));
   $133 = $129 * $132;
   $134 = $133 / 65535.0;
   $135 = (+Math_floor((+$134)));
   $136 = (~~(($135)));
   $137 = (+($136|0));
   $138 = $134 - $137;
   $139 = $138 != 0.0;
   if ($139) {
    STACKTOP = sp;return;
   } else {
    $140 = ((($8)) + 80|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = Math_imul($141, $136)|0;
    $$0 = $142;
    break L5;
   }
   break;
  }
  default: {
   $143 = HEAP32[$0>>2]|0;
   HEAP32[$vararg_buffer1>>2] = $4;
   _cmsSignalError($143,3,27520,$vararg_buffer1);
   STACKTOP = sp;return;
  }
  }
 } while(0);
 $144 = ($3|0)>(0);
 if (!($144)) {
  STACKTOP = sp;return;
 }
 $145 = HEAP32[$6>>2]|0;
 $$0961 = 0;
 while(1) {
  $146 = (($2) + ($$0961<<1)|0);
  $147 = HEAP16[$146>>1]|0;
  $148 = (($$0961) + ($$0))|0;
  $149 = (($145) + ($148<<1)|0);
  HEAP16[$149>>1] = $147;
  $150 = (($$0961) + 1)|0;
  $exitcond = ($150|0)==($3|0);
  if ($exitcond) {
   break;
  } else {
   $$0961 = $150;
  }
 }
 STACKTOP = sp;return;
}
function _Eval16nop1D($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP16[$0>>1]|0;
 HEAP16[$1>>1] = $3;
 return;
}
function __cmsToFixedDomain_378($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + 32767)|0;
 $2 = (($1|0) / 65535)&-1;
 $3 = (($2) + ($0))|0;
 return ($3|0);
}
function __cmsQuickFloorWord_381($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0 + -32767.0;
 $2 = (__cmsQuickFloor_382($1)|0);
 $3 = (($2) + 32767)|0;
 $4 = $3&65535;
 return ($4|0);
}
function __cmsQuickFloor_382($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0 + 103079215104.0;
 HEAPF64[tempDoublePtr>>3] = $1;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = $2 >> 16;
 return ($4|0);
}
function _SetMatShaper($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$pn$in = 0, $$sink$2 = 0, $$sink1$1 = 0, $$sink1$110 = 0, $$sink1$2 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0;
 var $33 = 0.0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0;
 var $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = HEAP32[$5>>2]|0;
 $7 = (__cmsFormatterIs8bit($6)|0);
 $8 = ((($0)) + 32|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (__cmsMalloc($9,101436)|0);
 $11 = ($10|0)==(0|0);
 if ($11) {
  return;
 }
 $12 = HEAP32[$8>>2]|0;
 HEAP32[$10>>2] = $12;
 $13 = ((($10)) + 4|0);
 $14 = HEAP32[$1>>2]|0;
 _FillFirstShaper($13,$14);
 $15 = ((($10)) + 1028|0);
 $16 = ((($1)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 _FillFirstShaper($15,$17);
 $18 = ((($10)) + 2052|0);
 $19 = ((($1)) + 8|0);
 $20 = HEAP32[$19>>2]|0;
 _FillFirstShaper($18,$20);
 $21 = ((($10)) + 3124|0);
 $22 = HEAP32[$4>>2]|0;
 _FillSecondShaper($21,$22,$7);
 $23 = ((($10)) + 35894|0);
 $24 = ((($4)) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 _FillSecondShaper($23,$25,$7);
 $26 = ((($10)) + 68664|0);
 $27 = ((($4)) + 8|0);
 $28 = HEAP32[$27>>2]|0;
 _FillSecondShaper($26,$28,$7);
 $29 = ((($10)) + 3076|0);
 $30 = +HEAPF64[$2>>3];
 $31 = $30 * 16384.0;
 $32 = $31 + 0.5;
 $33 = (+Math_floor((+$32)));
 $34 = (~~(($33)));
 HEAP32[$29>>2] = $34;
 $35 = ((($2)) + 8|0);
 $36 = +HEAPF64[$35>>3];
 $37 = $36 * 16384.0;
 $38 = $37 + 0.5;
 $39 = (+Math_floor((+$38)));
 $40 = (~~(($39)));
 $41 = ((($10)) + 3080|0);
 HEAP32[$41>>2] = $40;
 $42 = ((($2)) + 16|0);
 $43 = +HEAPF64[$42>>3];
 $44 = $43 * 16384.0;
 $45 = $44 + 0.5;
 $46 = (+Math_floor((+$45)));
 $47 = (~~(($46)));
 $48 = ((($10)) + 3084|0);
 HEAP32[$48>>2] = $47;
 $49 = ((($2)) + 24|0);
 $50 = +HEAPF64[$49>>3];
 $51 = $50 * 16384.0;
 $52 = $51 + 0.5;
 $53 = (+Math_floor((+$52)));
 $54 = (~~(($53)));
 $55 = ((($10)) + 3088|0);
 HEAP32[$55>>2] = $54;
 $56 = ((($2)) + 32|0);
 $57 = +HEAPF64[$56>>3];
 $58 = $57 * 16384.0;
 $59 = $58 + 0.5;
 $60 = (+Math_floor((+$59)));
 $61 = (~~(($60)));
 $62 = ((($10)) + 3092|0);
 HEAP32[$62>>2] = $61;
 $63 = ((($2)) + 40|0);
 $64 = +HEAPF64[$63>>3];
 $65 = $64 * 16384.0;
 $66 = $65 + 0.5;
 $67 = (+Math_floor((+$66)));
 $68 = (~~(($67)));
 $69 = ((($10)) + 3096|0);
 HEAP32[$69>>2] = $68;
 $70 = ((($2)) + 48|0);
 $71 = +HEAPF64[$70>>3];
 $72 = $71 * 16384.0;
 $73 = $72 + 0.5;
 $74 = (+Math_floor((+$73)));
 $75 = (~~(($74)));
 $76 = ((($10)) + 3100|0);
 HEAP32[$76>>2] = $75;
 $77 = ((($2)) + 56|0);
 $78 = +HEAPF64[$77>>3];
 $79 = $78 * 16384.0;
 $80 = $79 + 0.5;
 $81 = (+Math_floor((+$80)));
 $82 = (~~(($81)));
 $83 = ((($10)) + 3104|0);
 HEAP32[$83>>2] = $82;
 $84 = ((($2)) + 64|0);
 $85 = +HEAPF64[$84>>3];
 $86 = $85 * 16384.0;
 $87 = $86 + 0.5;
 $88 = (+Math_floor((+$87)));
 $89 = (~~(($88)));
 $90 = ((($10)) + 3108|0);
 HEAP32[$90>>2] = $89;
 $91 = ($3|0)==(0|0);
 $$pn$in = ((($10)) + 3112|0);
 if ($91) {
  HEAP32[$$pn$in>>2] = 0;
  $$sink1$110 = ((($10)) + 3116|0);
  HEAP32[$$sink1$110>>2] = 0;
  $$sink$2 = 0;
 } else {
  $94 = +HEAPF64[$3>>3];
  $95 = $94 * 16384.0;
  $96 = $95 + 0.5;
  $97 = (+Math_floor((+$96)));
  $98 = (~~(($97)));
  HEAP32[$$pn$in>>2] = $98;
  $99 = ((($3)) + 8|0);
  $100 = +HEAPF64[$99>>3];
  $101 = $100 * 16384.0;
  $102 = $101 + 0.5;
  $103 = (+Math_floor((+$102)));
  $104 = (~~(($103)));
  $$sink1$1 = ((($10)) + 3116|0);
  HEAP32[$$sink1$1>>2] = $104;
  $105 = ((($3)) + 16|0);
  $106 = +HEAPF64[$105>>3];
  $107 = $106 * 16384.0;
  $108 = $107 + 0.5;
  $109 = (+Math_floor((+$108)));
  $110 = (~~(($109)));
  $$sink$2 = $110;
 }
 $$sink1$2 = ((($10)) + 3120|0);
 HEAP32[$$sink1$2>>2] = $$sink$2;
 $111 = ($7|0)==(0);
 if (!($111)) {
  $92 = HEAP32[$5>>2]|0;
  $93 = $92 | 2097152;
  HEAP32[$5>>2] = $93;
 }
 __cmsPipelineSetOptimizationParameters($0,40,$10,61,10);
 return;
}
function _FillFirstShaper($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$016 = 0, $$sink = 0, $$sink1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$016 = 0;
 while(1) {
  $2 = (+($$016|0));
  $3 = $2 / 255.0;
  $4 = $3;
  $5 = (+_cmsEvalToneCurveFloat($1,$4));
  $6 = $5 < 131072.0;
  if ($6) {
   $7 = $5;
   $8 = $7 * 16384.0;
   $9 = $8 + 0.5;
   $10 = (+Math_floor((+$9)));
   $11 = (~~(($10)));
   $$sink = $11;
  } else {
   $$sink = 2147483647;
  }
  $$sink1 = (($0) + ($$016<<2)|0);
  HEAP32[$$sink1>>2] = $$sink;
  $12 = (($$016) + 1)|0;
  $exitcond = ($12|0)==(256);
  if ($exitcond) {
   break;
  } else {
   $$016 = $12;
  }
 }
 return;
}
function _FillSecondShaper($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$023 = 0.0, $$025 = 0, $$1 = 0.0, $$sink = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0;
 var $7 = 0.0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 $$025 = 0;
 while(1) {
  $4 = (+($$025|0));
  $5 = $4 * 6.103515625E-5;
  $6 = $5;
  $7 = (+_cmsEvalToneCurveFloat($1,$6));
  $8 = $7 < 0.0;
  $$023 = $8 ? 0.0 : $7;
  $9 = $$023 > 1.0;
  $$1 = $9 ? 1.0 : $$023;
  $10 = $$1;
  $11 = $10 * 65535.0;
  $12 = (__cmsQuickSaturateWord_375($11)|0);
  $13 = $12&65535;
  $14 = ($13*65281)|0;
  $15 = (($14) + 8388608)|0;
  $16 = $15 >>> 24;
  $17 = $16 << 8;
  $18 = $17 | $16;
  $19 = $18&65535;
  $$sink = $3 ? $12 : $19;
  $20 = (($0) + ($$025<<1)|0);
  HEAP16[$20>>1] = $$sink;
  $21 = (($$025) + 1)|0;
  $exitcond = ($21|0)==(16385);
  if ($exitcond) {
   break;
  } else {
   $$025 = $21;
  }
 }
 return;
}
function _MatShaperEval16($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP16[$0>>1]|0;
 $4 = $3 & 255;
 $5 = $4&65535;
 $6 = ((($0)) + 2|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7 & 255;
 $9 = $8&65535;
 $10 = ((($0)) + 4|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = $11 & 255;
 $13 = $12&65535;
 $14 = ((($2)) + 4|0);
 $15 = (($14) + ($5<<2)|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($2)) + 1028|0);
 $18 = (($17) + ($9<<2)|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($2)) + 2052|0);
 $21 = (($20) + ($13<<2)|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($2)) + 3076|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = Math_imul($24, $16)|0;
 $26 = ((($2)) + 3080|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = Math_imul($27, $19)|0;
 $29 = ((($2)) + 3084|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = Math_imul($30, $22)|0;
 $32 = ((($2)) + 3112|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (($25) + 8192)|0;
 $35 = (($34) + ($28))|0;
 $36 = (($35) + ($31))|0;
 $37 = (($36) + ($33))|0;
 $38 = $37 >> 14;
 $39 = ((($2)) + 3088|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = Math_imul($40, $16)|0;
 $42 = ((($2)) + 3092|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = Math_imul($43, $19)|0;
 $45 = ((($2)) + 3096|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = Math_imul($46, $22)|0;
 $48 = ((($2)) + 3116|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = (($41) + 8192)|0;
 $51 = (($50) + ($44))|0;
 $52 = (($51) + ($47))|0;
 $53 = (($52) + ($49))|0;
 $54 = $53 >> 14;
 $55 = ((($2)) + 3100|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = Math_imul($56, $16)|0;
 $58 = ((($2)) + 3104|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = Math_imul($59, $19)|0;
 $61 = ((($2)) + 3108|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = Math_imul($62, $22)|0;
 $64 = ((($2)) + 3120|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = (($57) + 8192)|0;
 $67 = (($66) + ($60))|0;
 $68 = (($67) + ($63))|0;
 $69 = (($68) + ($65))|0;
 $70 = $69 >> 14;
 $71 = ($38|0)<(0);
 $72 = ($38|0)<(16384);
 $73 = $72 ? $38 : 16384;
 $74 = $71 ? 0 : $73;
 $75 = ($54|0)<(0);
 $76 = ($54|0)<(16384);
 $77 = $76 ? $54 : 16384;
 $78 = $75 ? 0 : $77;
 $79 = ($70|0)<(0);
 $80 = ($70|0)<(16384);
 $81 = $80 ? $70 : 16384;
 $82 = $79 ? 0 : $81;
 $83 = ((($2)) + 3124|0);
 $84 = (($83) + ($74<<1)|0);
 $85 = HEAP16[$84>>1]|0;
 HEAP16[$1>>1] = $85;
 $86 = ((($2)) + 35894|0);
 $87 = (($86) + ($78<<1)|0);
 $88 = HEAP16[$87>>1]|0;
 $89 = ((($1)) + 2|0);
 HEAP16[$89>>1] = $88;
 $90 = ((($2)) + 68664|0);
 $91 = (($90) + ($82<<1)|0);
 $92 = HEAP16[$91>>1]|0;
 $93 = ((($1)) + 4|0);
 HEAP16[$93>>1] = $92;
 return;
}
function _FreeMatShaper($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 __cmsFree($0,$1);
 return;
}
function _DupMatShaper($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__cmsDupMem($0,$1,101436)|0);
 return ($2|0);
}
function _AllCurvesAreLinear($0) {
 $0 = $0|0;
 var $$0 = 0, $$01314 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__cmsStageGetPtrToCurveSet($0)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = (_cmsStageOutputChannels($0)|0);
 $4 = ($3|0)==(0);
 if ($4) {
  $$0 = 1;
  return ($$0|0);
 } else {
  $$01314 = 0;
 }
 while(1) {
  $7 = (($1) + ($$01314<<2)|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (_cmsIsToneCurveLinear($8)|0);
  $10 = ($9|0)==(0);
  $6 = (($$01314) + 1)|0;
  if ($10) {
   $$0 = 0;
   label = 5;
   break;
  }
  $5 = ($6>>>0)<($3>>>0);
  if ($5) {
   $$01314 = $6;
  } else {
   $$0 = 1;
   label = 5;
   break;
  }
 }
 if ((label|0) == 5) {
  return ($$0|0);
 }
 return (0)|0;
}
function _CurvesAlloc($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$05563 = 0, $$05668 = 0, $$166 = 0, $$264 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond75 = 0, $exitcond76 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (__cmsMallocZero($0,16)|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  $$0 = 0;
  return ($$0|0);
 }
 $6 = ((($4)) + 4|0);
 HEAP32[$6>>2] = $1;
 $7 = ((($4)) + 8|0);
 HEAP32[$7>>2] = $2;
 $8 = (__cmsCalloc($0,$1,4)|0);
 $9 = ((($4)) + 12|0);
 HEAP32[$9>>2] = $8;
 $10 = ($8|0)==(0|0);
 if ($10) {
  __cmsFree($0,$4);
  $$0 = 0;
  return ($$0|0);
 }
 $11 = ($1|0)==(0);
 if ($11) {
  $$0 = $4;
  return ($$0|0);
 } else {
  $$05668 = 0;
 }
 while(1) {
  $12 = (__cmsCalloc($0,$2,2)|0);
  $13 = HEAP32[$9>>2]|0;
  $14 = (($13) + ($$05668<<2)|0);
  HEAP32[$14>>2] = $12;
  $15 = HEAP32[$9>>2]|0;
  $16 = (($15) + ($$05668<<2)|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)==(0|0);
  if ($18) {
   break;
  }
  switch ($2|0) {
  case 256:  {
   $27 = (($3) + ($$05668<<2)|0);
   $$166 = 0;
   while(1) {
    $28 = HEAP32[$27>>2]|0;
    $29 = $$166 << 8;
    $30 = $29 | $$166;
    $31 = $30&65535;
    $32 = (_cmsEvalToneCurve16($28,$31)|0);
    $33 = HEAP32[$9>>2]|0;
    $34 = (($33) + ($$05668<<2)|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = (($35) + ($$166<<1)|0);
    HEAP16[$36>>1] = $32;
    $37 = (($$166) + 1)|0;
    $exitcond76 = ($37|0)==($2|0);
    if ($exitcond76) {
     break;
    } else {
     $$166 = $37;
    }
   }
   break;
  }
  case 0:  {
   break;
  }
  default: {
   $26 = (($3) + ($$05668<<2)|0);
   $$264 = 0;
   while(1) {
    $38 = HEAP32[$26>>2]|0;
    $39 = $$264&65535;
    $40 = (_cmsEvalToneCurve16($38,$39)|0);
    $41 = HEAP32[$9>>2]|0;
    $42 = (($41) + ($$05668<<2)|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = (($43) + ($$264<<1)|0);
    HEAP16[$44>>1] = $40;
    $45 = (($$264) + 1)|0;
    $exitcond75 = ($45|0)==($2|0);
    if ($exitcond75) {
     break;
    } else {
     $$264 = $45;
    }
   }
  }
  }
  $46 = (($$05668) + 1)|0;
  $47 = ($46>>>0)<($1>>>0);
  if ($47) {
   $$05668 = $46;
  } else {
   $$0 = $4;
   label = 15;
   break;
  }
 }
 if ((label|0) == 15) {
  return ($$0|0);
 }
 $19 = ($$05668|0)==(0);
 $20 = HEAP32[$9>>2]|0;
 if ($19) {
  $$lcssa = $20;
 } else {
  $$05563 = 0;$22 = $20;
  while(1) {
   $21 = (($22) + ($$05563<<2)|0);
   $23 = HEAP32[$21>>2]|0;
   __cmsFree($0,$23);
   $24 = (($$05563) + 1)|0;
   $25 = HEAP32[$9>>2]|0;
   $exitcond = ($24|0)==($$05668|0);
   if ($exitcond) {
    $$lcssa = $25;
    break;
   } else {
    $$05563 = $24;$22 = $25;
   }
  }
 }
 __cmsFree($0,$$lcssa);
 __cmsFree($0,$4);
 $$0 = 0;
 return ($$0|0);
}
function _FastEvaluateCurves8($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$015 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  return;
 }
 $6 = ((($2)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$3>>2]|0;
 $$015 = 0;
 while(1) {
  $9 = (($0) + ($$015<<1)|0);
  $10 = HEAP16[$9>>1]|0;
  $11 = $10&65535;
  $12 = $11 >>> 8;
  $13 = (($7) + ($$015<<2)|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + ($12<<1)|0);
  $16 = HEAP16[$15>>1]|0;
  $17 = (($1) + ($$015<<1)|0);
  HEAP16[$17>>1] = $16;
  $18 = (($$015) + 1)|0;
  $19 = ($18>>>0)<($8>>>0);
  if ($19) {
   $$015 = $18;
  } else {
   break;
  }
 }
 return;
}
function _CurvesFree($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$011 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 $5 = ((($1)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 if ($4) {
  $$lcssa = $6;
  __cmsFree($0,$$lcssa);
  __cmsFree($0,$1);
  return;
 } else {
  $$011 = 0;$8 = $6;
 }
 while(1) {
  $7 = (($8) + ($$011<<2)|0);
  $9 = HEAP32[$7>>2]|0;
  __cmsFree($0,$9);
  $10 = (($$011) + 1)|0;
  $11 = HEAP32[$2>>2]|0;
  $12 = ($10>>>0)<($11>>>0);
  $13 = HEAP32[$5>>2]|0;
  if ($12) {
   $$011 = $10;$8 = $13;
  } else {
   $$lcssa = $13;
   break;
  }
 }
 __cmsFree($0,$$lcssa);
 __cmsFree($0,$1);
 return;
}
function _CurvesDup($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$020 = 0, $$021 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__cmsDupMem($0,$1,16)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$020 = 0;
  return ($$020|0);
 }
 $4 = ((($2)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($2)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 << 2;
 $9 = (__cmsDupMem($0,$5,$8)|0);
 HEAP32[$4>>2] = $9;
 $10 = HEAP32[$6>>2]|0;
 $11 = ($10|0)==(0);
 if ($11) {
  $$020 = $2;
  return ($$020|0);
 }
 $12 = ((($2)) + 8|0);
 $$021 = 0;
 while(1) {
  $13 = HEAP32[$4>>2]|0;
  $14 = (($13) + ($$021<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = HEAP32[$12>>2]|0;
  $17 = $16 << 1;
  $18 = (__cmsDupMem($0,$15,$17)|0);
  $19 = HEAP32[$4>>2]|0;
  $20 = (($19) + ($$021<<2)|0);
  HEAP32[$20>>2] = $18;
  $21 = (($$021) + 1)|0;
  $22 = HEAP32[$6>>2]|0;
  $23 = ($21>>>0)<($22>>>0);
  if ($23) {
   $$021 = $21;
  } else {
   $$020 = $2;
   break;
  }
 }
 return ($$020|0);
}
function _FastEvaluateCurves16($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$012 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  return;
 }
 $6 = ((($2)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$3>>2]|0;
 $$012 = 0;
 while(1) {
  $9 = (($7) + ($$012<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($0) + ($$012<<1)|0);
  $12 = HEAP16[$11>>1]|0;
  $13 = $12&65535;
  $14 = (($10) + ($13<<1)|0);
  $15 = HEAP16[$14>>1]|0;
  $16 = (($1) + ($$012<<1)|0);
  HEAP16[$16>>1] = $15;
  $17 = (($$012) + 1)|0;
  $18 = ($17>>>0)<($8>>>0);
  if ($18) {
   $$012 = $17;
  } else {
   break;
  }
 }
 return;
}
function __Remove1Op($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$0$ph6 = 0, $$03 = 0, $$08$ph5 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0$lcssa = 0;
  return ($$0$lcssa|0);
 } else {
  $$0$ph6 = 0;$$08$ph5 = $0;$12 = $1;
 }
 L3: while(1) {
  $$03 = $$0$ph6;$4 = $12;
  while(1) {
   $3 = ((($4)) + 8|0);
   $5 = HEAP32[$3>>2]|0;
   $6 = ($5|0)==(1768189472);
   if (!($6)) {
    break;
   }
   __RemoveElement($$08$ph5);
   $7 = HEAP32[$$08$ph5>>2]|0;
   $8 = ($7|0)==(0|0);
   if ($8) {
    $$0$lcssa = 1;
    label = 6;
    break L3;
   } else {
    $$03 = 1;$4 = $7;
   }
  }
  $9 = ((($4)) + 36|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0|0);
  if ($11) {
   $$0$lcssa = $$03;
   label = 6;
   break;
  } else {
   $$0$ph6 = $$03;$$08$ph5 = $9;$12 = $10;
  }
 }
 if ((label|0) == 6) {
  return ($$0$lcssa|0);
 }
 return (0)|0;
}
function __Remove2Op($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$ph28 = 0, $$020 = 0, $$021$ph27 = 0, $$023 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$020 = 0;
  return ($$020|0);
 }
 $5 = HEAP32[$0>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $$020 = 0;
  return ($$020|0);
 } else {
  $$0$ph28 = 0;$$021$ph27 = $0;$21 = $5;
 }
 L6: while(1) {
  $$023 = $$0$ph28;$10 = $21;
  while(1) {
   $8 = ((($10)) + 36|0);
   $11 = HEAP32[$8>>2]|0;
   $12 = ($11|0)==(0|0);
   if ($12) {
    $$020 = $$023;
    label = 9;
    break L6;
   }
   $13 = ((($10)) + 8|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($14|0)==($1|0);
   if (!($15)) {
    break;
   }
   $16 = ((($11)) + 8|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)==($2|0);
   if (!($18)) {
    break;
   }
   __RemoveElement($8);
   __RemoveElement($$021$ph27);
   $19 = HEAP32[$$021$ph27>>2]|0;
   $20 = ($19|0)==(0|0);
   if ($20) {
    $$020 = 1;
    label = 9;
    break L6;
   } else {
    $$023 = 1;$10 = $19;
   }
  }
  $7 = HEAP32[$8>>2]|0;
  $9 = ($7|0)==(0|0);
  if ($9) {
   $$020 = $$023;
   label = 9;
   break;
  } else {
   $$0$ph28 = $$023;$$021$ph27 = $8;$21 = $7;
  }
 }
 if ((label|0) == 9) {
  return ($$020|0);
 }
 return (0)|0;
}
function __MultiplyMatrix($0) {
 $0 = $0|0;
 var $$046$ph64 = 0, $$04659 = 0, $$047$ph63 = 0, $$4 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $1 = sp;
 $2 = HEAP32[$0>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$4 = 0;
  STACKTOP = sp;return ($$4|0);
 }
 $4 = HEAP32[$0>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $$4 = 0;
  STACKTOP = sp;return ($$4|0);
 }
 $6 = ((($0)) + 32|0);
 $$046$ph64 = $0;$$047$ph63 = 0;$55 = $4;
 L7: while(1) {
  $$04659 = $$046$ph64;$8 = $55;
  while(1) {
   $7 = ((($8)) + 36|0);
   $9 = HEAP32[$7>>2]|0;
   $10 = ($9|0)==(0|0);
   if ($10) {
    $$4 = $$047$ph63;
    label = 20;
    break L7;
   }
   $11 = ((($8)) + 8|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==(1835103334);
   if ($13) {
    $14 = ((($9)) + 8|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ($15|0)==(1835103334);
    if ($16) {
     break;
    }
   }
   $51 = HEAP32[$$04659>>2]|0;
   $52 = ((($51)) + 36|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = ($53|0)==(0|0);
   if ($54) {
    $$4 = $$047$ph63;
    label = 20;
    break L7;
   } else {
    $$04659 = $52;$8 = $53;
   }
  }
  $17 = (_cmsStageData($8)|0);
  $18 = HEAP32[$7>>2]|0;
  $19 = (_cmsStageData($18)|0);
  $20 = ((($17)) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21|0)==(0|0);
  if (!($22)) {
   label = 17;
   break;
  }
  $23 = ((($19)) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($24|0)==(0|0);
  if (!($25)) {
   label = 17;
   break;
  }
  $26 = HEAP32[$$04659>>2]|0;
  $27 = (_cmsStageInputChannels($26)|0);
  $28 = ($27|0)==(3);
  if (!($28)) {
   label = 17;
   break;
  }
  $29 = HEAP32[$$04659>>2]|0;
  $30 = (_cmsStageOutputChannels($29)|0);
  $31 = ($30|0)==(3);
  if (!($31)) {
   label = 17;
   break;
  }
  $32 = HEAP32[$7>>2]|0;
  $33 = (_cmsStageInputChannels($32)|0);
  $34 = ($33|0)==(3);
  if (!($34)) {
   label = 17;
   break;
  }
  $35 = HEAP32[$7>>2]|0;
  $36 = (_cmsStageOutputChannels($35)|0);
  $37 = ($36|0)==(3);
  if (!($37)) {
   label = 17;
   break;
  }
  $38 = HEAP32[$19>>2]|0;
  $39 = HEAP32[$17>>2]|0;
  __cmsMAT3per($1,$38,$39);
  $40 = HEAP32[$7>>2]|0;
  $41 = ((($40)) + 36|0);
  $42 = HEAP32[$41>>2]|0;
  __RemoveElement($7);
  __RemoveElement($$04659);
  $43 = (_isFloatMatrixIdentity($1)|0);
  $44 = ($43|0)==(0);
  if ($44) {
   $45 = HEAP32[$6>>2]|0;
   $46 = (_cmsStageAllocMatrix($45,3,3,$1,0)|0);
   $47 = ($46|0)==(0|0);
   if ($47) {
    label = 17;
    break;
   }
   $48 = ((($46)) + 36|0);
   HEAP32[$48>>2] = $42;
   HEAP32[$$04659>>2] = $46;
  }
  $49 = HEAP32[$$04659>>2]|0;
  $50 = ($49|0)==(0|0);
  if ($50) {
   $$4 = 1;
   label = 20;
   break;
  } else {
   $$046$ph64 = $$04659;$$047$ph63 = 1;$55 = $49;
  }
 }
 if ((label|0) == 17) {
  $$4 = 0;
  STACKTOP = sp;return ($$4|0);
 }
 else if ((label|0) == 20) {
  STACKTOP = sp;return ($$4|0);
 }
 return (0)|0;
}
function __RemoveElement($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 36|0);
 $3 = HEAP32[$2>>2]|0;
 HEAP32[$0>>2] = $3;
 _cmsStageFree($1);
 return;
}
function _isFloatMatrixIdentity($0) {
 $0 = $0|0;
 var $$01216 = 0, $$013 = 0, $$015 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $1 = sp;
 __cmsMAT3identity($1);
 $$01216 = 0;
 L1: while(1) {
  $$015 = 0;
  while(1) {
   $4 = ((($0) + (($$01216*24)|0)|0) + ($$015<<3)|0);
   $5 = +HEAPF64[$4>>3];
   $6 = ((($1) + (($$01216*24)|0)|0) + ($$015<<3)|0);
   $7 = +HEAPF64[$6>>3];
   $8 = (_CloseEnoughFloat($5,$7)|0);
   $9 = ($8|0)==(0);
   $3 = (($$015) + 1)|0;
   if ($9) {
    $$013 = 0;
    label = 6;
    break L1;
   }
   $2 = ($3|0)<(3);
   if ($2) {
    $$015 = $3;
   } else {
    break;
   }
  }
  $10 = (($$01216) + 1)|0;
  $11 = ($10|0)<(3);
  if ($11) {
   $$01216 = $10;
  } else {
   $$013 = 1;
   label = 6;
   break;
  }
 }
 if ((label|0) == 6) {
  STACKTOP = sp;return ($$013|0);
 }
 return (0)|0;
}
function _CloseEnoughFloat($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1 - $0;
 $3 = (+Math_abs((+$2)));
 $4 = $3 < 9.9999997473787516E-6;
 $5 = $4&1;
 return ($5|0);
}
function __cmsGetFormatter($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$014 = 0, $$01415 = 0, $$01416 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $5 = sp;
 $6 = (__cmsContextGetClientChunk($1,7)|0);
 $$01415 = HEAP32[$6>>2]|0;
 $7 = ($$01415|0)==(0|0);
 L1: do {
  if (!($7)) {
   $$01416 = $$01415;
   while(1) {
    $8 = HEAP32[$$01416>>2]|0;
    FUNCTION_TABLE_viiii[$8 & 0]($5,$2,$3,$4);
    $9 = HEAP32[$5>>2]|0;
    $10 = ($9|0)==(0|0);
    if (!($10)) {
     break;
    }
    $12 = ((($$01416)) + 4|0);
    $$014 = HEAP32[$12>>2]|0;
    $13 = ($$014|0)==(0|0);
    if ($13) {
     break L1;
    } else {
     $$01416 = $$014;
    }
   }
   $11 = HEAP32[$5>>2]|0;
   HEAP32[$0>>2] = $11;
   STACKTOP = sp;return;
  }
 } while(0);
 $14 = ($3|0)==(0);
 if ($14) {
  __cmsGetStockInputFormatter($0,$2,$4);
  STACKTOP = sp;return;
 } else {
  __cmsGetStockOutputFormatter($0,$2,$4);
  STACKTOP = sp;return;
 }
}
function __cmsGetStockInputFormatter($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$034 = 0, $$135$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 L1: do {
  switch ($2|0) {
  case 0:  {
   $$034 = 0;
   while(1) {
    $3 = (((14092 + (($$034*12)|0)|0)) + 4|0);
    $4 = HEAP32[$3>>2]|0;
    $5 = $4 ^ -1;
    $6 = $5 & $1;
    $7 = (14092 + (($$034*12)|0)|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = ($6|0)==($8|0);
    if ($9) {
     break;
    }
    $12 = (($$034) + 1)|0;
    $13 = ($12>>>0)<(43);
    if ($13) {
     $$034 = $12;
    } else {
     break L1;
    }
   }
   $10 = (((14092 + (($$034*12)|0)|0)) + 8|0);
   $11 = HEAP32[$10>>2]|0;
   HEAP32[$0>>2] = $11;
   return;
   break;
  }
  case 1:  {
   $14 = $1 & -4993;
   $15 = ($14|0)==(4849688);
   if ($15) {
    $$135$lcssa = 0;
   } else {
    $18 = $1 & -4993;
    $19 = ($18|0)==(4849692);
    if ($19) {
     $$135$lcssa = 1;
    } else {
     $20 = $1 & -4993;
     $21 = ($20|0)==(4784152);
     if ($21) {
      $$135$lcssa = 2;
     } else {
      $22 = $1 & -4993;
      $23 = ($22|0)==(4784156);
      if ($23) {
       $$135$lcssa = 3;
      } else {
       $24 = $1 & -2054137;
       $25 = ($24|0)==(4194308);
       if ($25) {
        $$135$lcssa = 4;
       } else {
        $26 = $1 & -2054137;
        $27 = ($26|0)==(4194304);
        if ($27) {
         $$135$lcssa = 5;
        } else {
         $28 = $1 & -2054137;
         $29 = ($28|0)==(4194306);
         if ($29) {
          $$135$lcssa = 6;
         } else {
          break L1;
         }
        }
       }
      }
     }
    }
   }
   $16 = (((14608 + (($$135$lcssa*12)|0)|0)) + 8|0);
   $17 = HEAP32[$16>>2]|0;
   HEAP32[$0>>2] = $17;
   return;
   break;
  }
  default: {
  }
  }
 } while(0);
 HEAP32[$0>>2] = 0;
 return;
}
function __cmsGetStockOutputFormatter($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$02835 = 0, $$12936$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1 & -2097153;
 L1: do {
  switch ($2|0) {
  case 0:  {
   $$02835 = 0;
   while(1) {
    $4 = (((13348 + (($$02835*12)|0)|0)) + 4|0);
    $5 = HEAP32[$4>>2]|0;
    $6 = $5 ^ -1;
    $7 = $3 & $6;
    $8 = (13348 + (($$02835*12)|0)|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = ($7|0)==($9|0);
    if ($10) {
     break;
    }
    $13 = (($$02835) + 1)|0;
    $14 = ($13>>>0)<(55);
    if ($14) {
     $$02835 = $13;
    } else {
     break L1;
    }
   }
   $11 = (((13348 + (($$02835*12)|0)|0)) + 8|0);
   $12 = HEAP32[$11>>2]|0;
   HEAP32[$0>>2] = $12;
   return;
   break;
  }
  case 1:  {
   $15 = $1 & -2102145;
   $16 = ($15|0)==(4849692);
   if ($16) {
    $$12936$lcssa = 0;
   } else {
    $19 = $1 & -2102145;
    $20 = ($19|0)==(4784156);
    if ($20) {
     $$12936$lcssa = 1;
    } else {
     $21 = $1 & -2102145;
     $22 = ($21|0)==(4849688);
     if ($22) {
      $$12936$lcssa = 2;
     } else {
      $23 = $1 & -2102145;
      $24 = ($23|0)==(4784152);
      if ($24) {
       $$12936$lcssa = 3;
      } else {
       $25 = $1 & -4159481;
       $26 = ($25|0)==(4194308);
       if ($26) {
        $$12936$lcssa = 4;
       } else {
        $27 = $1 & -4159481;
        $28 = ($27|0)==(4194304);
        if ($28) {
         $$12936$lcssa = 5;
        } else {
         $29 = $1 & -4155385;
         $30 = ($29|0)==(4194306);
         if ($30) {
          $$12936$lcssa = 6;
         } else {
          break L1;
         }
        }
       }
      }
     }
    }
   }
   $17 = (((14008 + (($$12936$lcssa*12)|0)|0)) + 8|0);
   $18 = HEAP32[$17>>2]|0;
   HEAP32[$0>>2] = $18;
   return;
   break;
  }
  default: {
  }
  }
 } while(0);
 HEAP32[$0>>2] = 0;
 return;
}
function _PackLabFloatFromFloat($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$sink = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0;
 var $29 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 4096;
 $7 = ($6|0)==(0);
 if ($7) {
  $27 = +HEAPF32[$1>>2];
  $28 = $27 * 100.0;
  HEAPF32[$2>>2] = $28;
  $29 = ((($1)) + 4|0);
  $30 = +HEAPF32[$29>>2];
  $31 = $30;
  $32 = $31 * 255.0;
  $33 = $32 + -128.0;
  $34 = $33;
  $35 = ((($2)) + 4|0);
  HEAPF32[$35>>2] = $34;
  $36 = ((($1)) + 8|0);
  $37 = +HEAPF32[$36>>2];
  $38 = $37;
  $39 = $38 * 255.0;
  $40 = $39 + -128.0;
  $41 = $40;
  $42 = ((($2)) + 8|0);
  HEAPF32[$42>>2] = $41;
  $43 = $5 >>> 5;
  $44 = $43 & 28;
  $45 = (($44) + 12)|0;
  $$sink = $45;
  $46 = (($2) + ($$sink)|0);
  return ($46|0);
 } else {
  $8 = (_PixelSize($5)|0);
  $9 = (($3>>>0) / ($8>>>0))&-1;
  $10 = +HEAPF32[$1>>2];
  $11 = $10 * 100.0;
  HEAPF32[$2>>2] = $11;
  $12 = ((($1)) + 4|0);
  $13 = +HEAPF32[$12>>2];
  $14 = $13;
  $15 = $14 * 255.0;
  $16 = $15 + -128.0;
  $17 = $16;
  $18 = (($2) + ($9<<2)|0);
  HEAPF32[$18>>2] = $17;
  $19 = ((($1)) + 8|0);
  $20 = +HEAPF32[$19>>2];
  $21 = $20;
  $22 = $21 * 255.0;
  $23 = $22 + -128.0;
  $24 = $23;
  $25 = $9 << 1;
  $26 = (($2) + ($25<<2)|0);
  HEAPF32[$26>>2] = $24;
  $$sink = 4;
  $46 = (($2) + ($$sink)|0);
  return ($46|0);
 }
 return (0)|0;
}
function _PackXYZFloatFromFloat($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$sink = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0.0;
 var $29 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 4096;
 $7 = ($6|0)==(0);
 if ($7) {
  $21 = +HEAPF32[$1>>2];
  $22 = $21 * 1.999969482421875;
  HEAPF32[$2>>2] = $22;
  $23 = ((($1)) + 4|0);
  $24 = +HEAPF32[$23>>2];
  $25 = $24 * 1.999969482421875;
  $26 = ((($2)) + 4|0);
  HEAPF32[$26>>2] = $25;
  $27 = ((($1)) + 8|0);
  $28 = +HEAPF32[$27>>2];
  $29 = $28 * 1.999969482421875;
  $30 = ((($2)) + 8|0);
  HEAPF32[$30>>2] = $29;
  $31 = $5 >>> 5;
  $32 = $31 & 28;
  $33 = (($32) + 12)|0;
  $$sink = $33;
  $34 = (($2) + ($$sink)|0);
  return ($34|0);
 } else {
  $8 = (_PixelSize($5)|0);
  $9 = (($3>>>0) / ($8>>>0))&-1;
  $10 = +HEAPF32[$1>>2];
  $11 = $10 * 1.999969482421875;
  HEAPF32[$2>>2] = $11;
  $12 = ((($1)) + 4|0);
  $13 = +HEAPF32[$12>>2];
  $14 = $13 * 1.999969482421875;
  $15 = (($2) + ($9<<2)|0);
  HEAPF32[$15>>2] = $14;
  $16 = ((($1)) + 8|0);
  $17 = +HEAPF32[$16>>2];
  $18 = $17 * 1.999969482421875;
  $19 = $9 << 1;
  $20 = (($2) + ($19<<2)|0);
  HEAPF32[$20>>2] = $18;
  $$sink = 4;
  $34 = (($2) + ($$sink)|0);
  return ($34|0);
 }
 return (0)|0;
}
function _PackLabDoubleFromFloat($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$sink = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0;
 var $29 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 4096;
 $7 = ($6|0)==(0);
 if ($7) {
  $26 = +HEAPF32[$1>>2];
  $27 = $26;
  $28 = $27 * 100.0;
  HEAPF64[$2>>3] = $28;
  $29 = ((($1)) + 4|0);
  $30 = +HEAPF32[$29>>2];
  $31 = $30;
  $32 = $31 * 255.0;
  $33 = $32 + -128.0;
  $34 = ((($2)) + 8|0);
  HEAPF64[$34>>3] = $33;
  $35 = ((($1)) + 8|0);
  $36 = +HEAPF32[$35>>2];
  $37 = $36;
  $38 = $37 * 255.0;
  $39 = $38 + -128.0;
  $40 = ((($2)) + 16|0);
  HEAPF64[$40>>3] = $39;
  $41 = $5 >>> 4;
  $42 = $41 & 56;
  $43 = (($42) + 24)|0;
  $$sink = $43;
  $44 = (($2) + ($$sink)|0);
  return ($44|0);
 } else {
  $8 = (_PixelSize($5)|0);
  $9 = (($3>>>0) / ($8>>>0))&-1;
  $10 = +HEAPF32[$1>>2];
  $11 = $10;
  $12 = $11 * 100.0;
  HEAPF64[$2>>3] = $12;
  $13 = ((($1)) + 4|0);
  $14 = +HEAPF32[$13>>2];
  $15 = $14;
  $16 = $15 * 255.0;
  $17 = $16 + -128.0;
  $18 = (($2) + ($9<<3)|0);
  HEAPF64[$18>>3] = $17;
  $19 = ((($1)) + 8|0);
  $20 = +HEAPF32[$19>>2];
  $21 = $20;
  $22 = $21 * 255.0;
  $23 = $22 + -128.0;
  $24 = $9 << 1;
  $25 = (($2) + ($24<<3)|0);
  HEAPF64[$25>>3] = $23;
  $$sink = 8;
  $44 = (($2) + ($$sink)|0);
  return ($44|0);
 }
 return (0)|0;
}
function _PackXYZDoubleFromFloat($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$sink = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0.0;
 var $29 = 0.0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 4096;
 $7 = ($6|0)==(0);
 if ($7) {
  $24 = +HEAPF32[$1>>2];
  $25 = $24;
  $26 = $25 * 1.999969482421875;
  HEAPF64[$2>>3] = $26;
  $27 = ((($1)) + 4|0);
  $28 = +HEAPF32[$27>>2];
  $29 = $28;
  $30 = $29 * 1.999969482421875;
  $31 = ((($2)) + 8|0);
  HEAPF64[$31>>3] = $30;
  $32 = ((($1)) + 8|0);
  $33 = +HEAPF32[$32>>2];
  $34 = $33;
  $35 = $34 * 1.999969482421875;
  $36 = ((($2)) + 16|0);
  HEAPF64[$36>>3] = $35;
  $37 = $5 >>> 4;
  $38 = $37 & 56;
  $39 = (($38) + 24)|0;
  $$sink = $39;
  $40 = (($2) + ($$sink)|0);
  return ($40|0);
 } else {
  $8 = (_PixelSize($5)|0);
  $9 = (($3>>>0) / ($8>>>0))&-1;
  $10 = +HEAPF32[$1>>2];
  $11 = $10;
  $12 = $11 * 1.999969482421875;
  HEAPF64[$2>>3] = $12;
  $13 = ((($1)) + 4|0);
  $14 = +HEAPF32[$13>>2];
  $15 = $14;
  $16 = $15 * 1.999969482421875;
  $17 = (($2) + ($9<<3)|0);
  HEAPF64[$17>>3] = $16;
  $18 = ((($1)) + 8|0);
  $19 = +HEAPF32[$18>>2];
  $20 = $19;
  $21 = $20 * 1.999969482421875;
  $22 = $9 << 1;
  $23 = (($2) + ($22<<3)|0);
  HEAPF64[$23>>3] = $21;
  $$sink = 8;
  $40 = (($2) + ($$sink)|0);
  return ($40|0);
 }
 return (0)|0;
}
function _PackFloatsFromFloat($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$07275 = 0, $$073$lcssa = 0.0, $$74 = 0.0, $$sink = 0, $$sink1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $or$cond = 0, $phitmp$le = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 >>> 3;
 $7 = $6 & 15;
 $8 = $5 >>> 10;
 $9 = $8 & 1;
 $10 = $5 >>> 7;
 $11 = $10 & 7;
 $12 = $5 >>> 14;
 $13 = $12 & 1;
 $14 = (_IsInkSpace($5)|0);
 $15 = ($14|0)!=(0);
 $16 = $15 ? 100.0 : 1.0;
 $17 = ($9|0)==($13|0);
 $$ = $17 ? 0 : $11;
 $18 = ($7|0)==(0);
 if ($18) {
  $$073$lcssa = 0.0;
 } else {
  $19 = (_PixelSize($5)|0);
  $20 = (($3>>>0) / ($19>>>0))&-1;
  $21 = $5 & 4096;
  $22 = $5 & 8192;
  $23 = ($9|0)==(0);
  $24 = (($7) + -1)|0;
  $25 = ($22|0)==(0);
  $26 = ($21|0)!=(0);
  $27 = $26 ? $20 : 1;
  $$07275 = 0;
  while(1) {
   $28 = (($24) - ($$07275))|0;
   $29 = $23 ? $$07275 : $28;
   $30 = (($1) + ($29<<2)|0);
   $31 = +HEAPF32[$30>>2];
   $32 = $31;
   $33 = $16 * $32;
   $34 = $16 - $33;
   $$74 = $25 ? $33 : $34;
   $35 = $$74;
   $36 = (($$07275) + ($$))|0;
   $$sink1 = Math_imul($36, $27)|0;
   $37 = (($2) + ($$sink1<<2)|0);
   HEAPF32[$37>>2] = $35;
   $38 = (($$07275) + 1)|0;
   $exitcond = ($38|0)==($7|0);
   if ($exitcond) {
    break;
   } else {
    $$07275 = $38;
   }
  }
  $phitmp$le = $$74;
  $$073$lcssa = $phitmp$le;
 }
 $39 = ($11|0)==(0);
 $40 = ($13|0)!=(0);
 $or$cond = $39 & $40;
 if (!($or$cond)) {
  $44 = HEAP32[$4>>2]|0;
  $45 = $44 & 4096;
  $46 = ($45|0)==(0);
  $47 = (($7) + ($11))|0;
  $48 = $47 << 2;
  $$sink = $46 ? $48 : 4;
  $49 = (($2) + ($$sink)|0);
  return ($49|0);
 }
 $41 = $7 << 2;
 $42 = (($41) + -4)|0;
 $43 = ((($2)) + 4|0);
 _memmove(($43|0),($2|0),($42|0))|0;
 HEAPF32[$2>>2] = $$073$lcssa;
 $44 = HEAP32[$4>>2]|0;
 $45 = $44 & 4096;
 $46 = ($45|0)==(0);
 $47 = (($7) + ($11))|0;
 $48 = $47 << 2;
 $$sink = $46 ? $48 : 4;
 $49 = (($2) + ($$sink)|0);
 return ($49|0);
}
function _PackDoublesFromFloat($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$07275 = 0, $$073$lcssa = 0.0, $$74 = 0.0, $$sink = 0, $$sink1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 >>> 3;
 $7 = $6 & 15;
 $8 = $5 >>> 10;
 $9 = $8 & 1;
 $10 = $5 >>> 7;
 $11 = $10 & 7;
 $12 = $5 >>> 14;
 $13 = $12 & 1;
 $14 = (_IsInkSpace($5)|0);
 $15 = ($14|0)!=(0);
 $16 = $15 ? 100.0 : 1.0;
 $17 = ($9|0)==($13|0);
 $$ = $17 ? 0 : $11;
 $18 = ($7|0)==(0);
 if ($18) {
  $$073$lcssa = 0.0;
 } else {
  $19 = (_PixelSize($5)|0);
  $20 = (($3>>>0) / ($19>>>0))&-1;
  $21 = $5 & 4096;
  $22 = $5 & 8192;
  $23 = ($9|0)==(0);
  $24 = (($7) + -1)|0;
  $25 = ($22|0)==(0);
  $26 = ($21|0)!=(0);
  $27 = $26 ? $20 : 1;
  $$07275 = 0;
  while(1) {
   $28 = (($24) - ($$07275))|0;
   $29 = $23 ? $$07275 : $28;
   $30 = (($1) + ($29<<2)|0);
   $31 = +HEAPF32[$30>>2];
   $32 = $31;
   $33 = $16 * $32;
   $34 = $16 - $33;
   $$74 = $25 ? $33 : $34;
   $35 = (($$07275) + ($$))|0;
   $$sink1 = Math_imul($35, $27)|0;
   $36 = (($2) + ($$sink1<<3)|0);
   HEAPF64[$36>>3] = $$74;
   $37 = (($$07275) + 1)|0;
   $exitcond = ($37|0)==($7|0);
   if ($exitcond) {
    $$073$lcssa = $$74;
    break;
   } else {
    $$07275 = $37;
   }
  }
 }
 $38 = ($11|0)==(0);
 $39 = ($13|0)!=(0);
 $or$cond = $38 & $39;
 if (!($or$cond)) {
  $43 = HEAP32[$4>>2]|0;
  $44 = $43 & 4096;
  $45 = ($44|0)==(0);
  $46 = (($7) + ($11))|0;
  $47 = $46 << 3;
  $$sink = $45 ? $47 : 8;
  $48 = (($2) + ($$sink)|0);
  return ($48|0);
 }
 $40 = $7 << 3;
 $41 = (($40) + -8)|0;
 $42 = ((($2)) + 8|0);
 _memmove(($42|0),($2|0),($41|0))|0;
 HEAPF64[$2>>3] = $$073$lcssa;
 $43 = HEAP32[$4>>2]|0;
 $44 = $43 & 4096;
 $45 = ($44|0)==(0);
 $46 = (($7) + ($11))|0;
 $47 = $46 << 3;
 $$sink = $45 ? $47 : 8;
 $48 = (($2) + ($$sink)|0);
 return ($48|0);
}
function _PackHalfFromFloat($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$07275 = 0, $$073$lcssa = 0.0, $$74 = 0.0, $$sink = 0, $$sink1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 >>> 3;
 $7 = $6 & 15;
 $8 = $5 >>> 10;
 $9 = $8 & 1;
 $10 = $5 >>> 7;
 $11 = $10 & 7;
 $12 = $5 >>> 14;
 $13 = $12 & 1;
 $14 = (_IsInkSpace($5)|0);
 $15 = ($14|0)!=(0);
 $16 = $15 ? 100.0 : 1.0;
 $17 = ($9|0)==($13|0);
 $$ = $17 ? 0 : $11;
 $18 = ($7|0)==(0);
 if ($18) {
  $$073$lcssa = 0.0;
 } else {
  $19 = (_PixelSize($5)|0);
  $20 = (($3>>>0) / ($19>>>0))&-1;
  $21 = $5 & 4096;
  $22 = $5 & 8192;
  $23 = ($9|0)==(0);
  $24 = (($7) + -1)|0;
  $25 = ($22|0)==(0);
  $26 = ($21|0)!=(0);
  $27 = $26 ? $20 : 1;
  $$07275 = 0;
  while(1) {
   $28 = (($24) - ($$07275))|0;
   $29 = $23 ? $$07275 : $28;
   $30 = (($1) + ($29<<2)|0);
   $31 = +HEAPF32[$30>>2];
   $32 = $16 * $31;
   $33 = $16 - $32;
   $$74 = $25 ? $32 : $33;
   $34 = (__cmsFloat2Half($$74)|0);
   $35 = (($$07275) + ($$))|0;
   $$sink1 = Math_imul($35, $27)|0;
   $36 = (($2) + ($$sink1<<1)|0);
   HEAP16[$36>>1] = $34;
   $37 = (($$07275) + 1)|0;
   $exitcond = ($37|0)==($7|0);
   if ($exitcond) {
    $$073$lcssa = $$74;
    break;
   } else {
    $$07275 = $37;
   }
  }
 }
 $38 = ($11|0)==(0);
 $39 = ($13|0)!=(0);
 $or$cond = $38 & $39;
 if (!($or$cond)) {
  $44 = HEAP32[$4>>2]|0;
  $45 = $44 & 4096;
  $46 = ($45|0)==(0);
  $47 = (($7) + ($11))|0;
  $48 = $47 << 1;
  $$sink = $46 ? $48 : 2;
  $49 = (($2) + ($$sink)|0);
  return ($49|0);
 }
 $40 = $7 << 1;
 $41 = (($40) + -2)|0;
 $42 = ((($2)) + 2|0);
 _memmove(($42|0),($2|0),($41|0))|0;
 $43 = (__cmsFloat2Half($$073$lcssa)|0);
 HEAP16[$2>>1] = $43;
 $44 = HEAP32[$4>>2]|0;
 $45 = $44 & 4096;
 $46 = ($45|0)==(0);
 $47 = (($7) + ($11))|0;
 $48 = $47 << 1;
 $$sink = $46 ? $48 : 2;
 $49 = (($2) + ($$sink)|0);
 return ($49|0);
}
function _IsInkSpace($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $trunc = 0, $trunc$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0 >>> 16;
 $trunc = $1&255;
 $trunc$clear = $trunc & 31;
 switch ($trunc$clear<<24>>24) {
 case 29: case 28: case 27: case 26: case 25: case 24: case 23: case 22: case 21: case 20: case 19: case 6: case 5:  {
  $$0 = 1;
  break;
 }
 default: {
  $$0 = 0;
 }
 }
 return ($$0|0);
}
function _PixelSize($0) {
 $0 = $0|0;
 var $$ = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0 & 7;
 $2 = ($1|0)==(0);
 $$ = $2 ? 8 : $1;
 return ($$|0);
}
function _PackLabDoubleFrom16($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $4 = sp;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 4096;
 $8 = ($7|0)==(0);
 if ($8) {
  _cmsLabEncoded2Float($2,$1);
  $18 = HEAP32[$5>>2]|0;
  $19 = $18 >>> 4;
  $20 = $19 & 56;
  $21 = (($20) + 24)|0;
  $22 = (($2) + ($21)|0);
  $$0 = $22;
  STACKTOP = sp;return ($$0|0);
 } else {
  _cmsLabEncoded2Float($4,$1);
  $9 = +HEAPF64[$4>>3];
  HEAPF64[$2>>3] = $9;
  $10 = ((($4)) + 8|0);
  $11 = +HEAPF64[$10>>3];
  $12 = (($2) + ($3<<3)|0);
  HEAPF64[$12>>3] = $11;
  $13 = ((($4)) + 16|0);
  $14 = +HEAPF64[$13>>3];
  $15 = $3 << 1;
  $16 = (($2) + ($15<<3)|0);
  HEAPF64[$16>>3] = $14;
  $17 = ((($2)) + 8|0);
  $$0 = $17;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _PackXYZDoubleFrom16($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $4 = sp;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 4096;
 $8 = ($7|0)==(0);
 if ($8) {
  _cmsXYZEncoded2Float($2,$1);
  $21 = HEAP32[$5>>2]|0;
  $22 = $21 >>> 4;
  $23 = $22 & 56;
  $24 = (($23) + 24)|0;
  $25 = (($2) + ($24)|0);
  $$0 = $25;
  STACKTOP = sp;return ($$0|0);
 } else {
  _cmsXYZEncoded2Float($4,$1);
  $9 = HEAP32[$5>>2]|0;
  $10 = (_PixelSize($9)|0);
  $11 = (($3>>>0) / ($10>>>0))&-1;
  $12 = +HEAPF64[$4>>3];
  HEAPF64[$2>>3] = $12;
  $13 = ((($4)) + 8|0);
  $14 = +HEAPF64[$13>>3];
  $15 = (($2) + ($11<<3)|0);
  HEAPF64[$15>>3] = $14;
  $16 = ((($4)) + 16|0);
  $17 = +HEAPF64[$16>>3];
  $18 = $11 << 1;
  $19 = (($2) + ($18<<3)|0);
  HEAPF64[$19>>3] = $17;
  $20 = ((($2)) + 8|0);
  $$0 = $20;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _PackLabFloatFrom16($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$sink = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0;
 var $29 = 0.0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $4 = sp;
 _cmsLabEncoded2Float($4,$1);
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 4096;
 $8 = ($7|0)==(0);
 if ($8) {
  $22 = +HEAPF64[$4>>3];
  $23 = $22;
  HEAPF32[$2>>2] = $23;
  $24 = ((($4)) + 8|0);
  $25 = +HEAPF64[$24>>3];
  $26 = $25;
  $27 = ((($2)) + 4|0);
  HEAPF32[$27>>2] = $26;
  $28 = ((($4)) + 16|0);
  $29 = +HEAPF64[$28>>3];
  $30 = $29;
  $31 = ((($2)) + 8|0);
  HEAPF32[$31>>2] = $30;
  $32 = HEAP32[$5>>2]|0;
  $33 = $32 >>> 5;
  $34 = $33 & 28;
  $35 = (($34) + 12)|0;
  $$sink = $35;
  $36 = (($2) + ($$sink)|0);
  STACKTOP = sp;return ($36|0);
 } else {
  $9 = (_PixelSize($6)|0);
  $10 = (($3>>>0) / ($9>>>0))&-1;
  $11 = +HEAPF64[$4>>3];
  $12 = $11;
  HEAPF32[$2>>2] = $12;
  $13 = ((($4)) + 8|0);
  $14 = +HEAPF64[$13>>3];
  $15 = $14;
  $16 = (($2) + ($10<<2)|0);
  HEAPF32[$16>>2] = $15;
  $17 = ((($4)) + 16|0);
  $18 = +HEAPF64[$17>>3];
  $19 = $18;
  $20 = $10 << 1;
  $21 = (($2) + ($20<<2)|0);
  HEAPF32[$21>>2] = $19;
  $$sink = 4;
  $36 = (($2) + ($$sink)|0);
  STACKTOP = sp;return ($36|0);
 }
 return (0)|0;
}
function _PackXYZFloatFrom16($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0.0;
 var $29 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $4 = sp;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 4096;
 $8 = ($7|0)==(0);
 if ($8) {
  _cmsXYZEncoded2Float($4,$1);
  $24 = +HEAPF64[$4>>3];
  $25 = $24;
  HEAPF32[$2>>2] = $25;
  $26 = ((($4)) + 8|0);
  $27 = +HEAPF64[$26>>3];
  $28 = $27;
  $29 = ((($2)) + 4|0);
  HEAPF32[$29>>2] = $28;
  $30 = ((($4)) + 16|0);
  $31 = +HEAPF64[$30>>3];
  $32 = $31;
  $33 = ((($2)) + 8|0);
  HEAPF32[$33>>2] = $32;
  $34 = HEAP32[$5>>2]|0;
  $35 = $34 >>> 5;
  $36 = $35 & 28;
  $37 = (($36) + 12)|0;
  $38 = (($2) + ($37)|0);
  $$0 = $38;
  STACKTOP = sp;return ($$0|0);
 } else {
  _cmsXYZEncoded2Float($4,$1);
  $9 = HEAP32[$5>>2]|0;
  $10 = (_PixelSize($9)|0);
  $11 = (($3>>>0) / ($10>>>0))&-1;
  $12 = +HEAPF64[$4>>3];
  $13 = $12;
  HEAPF32[$2>>2] = $13;
  $14 = ((($4)) + 8|0);
  $15 = +HEAPF64[$14>>3];
  $16 = $15;
  $17 = (($2) + ($11<<2)|0);
  HEAPF32[$17>>2] = $16;
  $18 = ((($4)) + 16|0);
  $19 = +HEAPF64[$18>>3];
  $20 = $19;
  $21 = $11 << 1;
  $22 = (($2) + ($21<<2)|0);
  HEAPF32[$22>>2] = $20;
  $23 = ((($2)) + 4|0);
  $$0 = $23;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _PackDoubleFrom16($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$07275 = 0, $$073$lcssa = 0.0, $$74 = 0.0, $$sink = 0, $$sink1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 >>> 3;
 $7 = $6 & 15;
 $8 = $5 >>> 10;
 $9 = $8 & 1;
 $10 = $5 >>> 7;
 $11 = $10 & 7;
 $12 = $5 >>> 14;
 $13 = $12 & 1;
 $14 = (_IsInkSpace($5)|0);
 $15 = ($14|0)!=(0);
 $16 = $15 ? 655.35000000000002 : 65535.0;
 $17 = ($9|0)==($13|0);
 $$ = $17 ? 0 : $11;
 $18 = ($7|0)==(0);
 if ($18) {
  $$073$lcssa = 0.0;
 } else {
  $19 = (_PixelSize($5)|0);
  $20 = (($3>>>0) / ($19>>>0))&-1;
  $21 = $5 & 4096;
  $22 = $5 & 8192;
  $23 = ($9|0)==(0);
  $24 = (($7) + -1)|0;
  $25 = ($22|0)==(0);
  $26 = ($21|0)!=(0);
  $27 = $26 ? $20 : 1;
  $$07275 = 0;
  while(1) {
   $28 = (($24) - ($$07275))|0;
   $29 = $23 ? $$07275 : $28;
   $30 = (($1) + ($29<<1)|0);
   $31 = HEAP16[$30>>1]|0;
   $32 = (+($31&65535));
   $33 = $32 / $16;
   $34 = $16 - $33;
   $$74 = $25 ? $33 : $34;
   $35 = (($$07275) + ($$))|0;
   $$sink1 = Math_imul($35, $27)|0;
   $36 = (($2) + ($$sink1<<3)|0);
   HEAPF64[$36>>3] = $$74;
   $37 = (($$07275) + 1)|0;
   $exitcond = ($37|0)==($7|0);
   if ($exitcond) {
    $$073$lcssa = $$74;
    break;
   } else {
    $$07275 = $37;
   }
  }
 }
 $38 = ($11|0)==(0);
 $39 = ($13|0)!=(0);
 $or$cond = $38 & $39;
 if (!($or$cond)) {
  $43 = HEAP32[$4>>2]|0;
  $44 = $43 & 4096;
  $45 = ($44|0)==(0);
  $46 = (($7) + ($11))|0;
  $47 = $46 << 3;
  $$sink = $45 ? $47 : 8;
  $48 = (($2) + ($$sink)|0);
  return ($48|0);
 }
 $40 = $7 << 3;
 $41 = (($40) + -8)|0;
 $42 = ((($2)) + 8|0);
 _memmove(($42|0),($2|0),($41|0))|0;
 HEAPF64[$2>>3] = $$073$lcssa;
 $43 = HEAP32[$4>>2]|0;
 $44 = $43 & 4096;
 $45 = ($44|0)==(0);
 $46 = (($7) + ($11))|0;
 $47 = $46 << 3;
 $$sink = $45 ? $47 : 8;
 $48 = (($2) + ($$sink)|0);
 return ($48|0);
}
function _PackFloatFrom16($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$07275 = 0, $$073$lcssa = 0.0, $$74 = 0.0, $$sink = 0, $$sink1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $or$cond = 0, $phitmp$le = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 >>> 3;
 $7 = $6 & 15;
 $8 = $5 >>> 10;
 $9 = $8 & 1;
 $10 = $5 >>> 7;
 $11 = $10 & 7;
 $12 = $5 >>> 14;
 $13 = $12 & 1;
 $14 = (_IsInkSpace($5)|0);
 $15 = ($14|0)!=(0);
 $16 = $15 ? 655.35000000000002 : 65535.0;
 $17 = ($9|0)==($13|0);
 $$ = $17 ? 0 : $11;
 $18 = ($7|0)==(0);
 if ($18) {
  $$073$lcssa = 0.0;
 } else {
  $19 = (_PixelSize($5)|0);
  $20 = (($3>>>0) / ($19>>>0))&-1;
  $21 = $5 & 4096;
  $22 = $5 & 8192;
  $23 = ($9|0)==(0);
  $24 = (($7) + -1)|0;
  $25 = ($22|0)==(0);
  $26 = ($21|0)!=(0);
  $27 = $26 ? $20 : 1;
  $$07275 = 0;
  while(1) {
   $28 = (($24) - ($$07275))|0;
   $29 = $23 ? $$07275 : $28;
   $30 = (($1) + ($29<<1)|0);
   $31 = HEAP16[$30>>1]|0;
   $32 = (+($31&65535));
   $33 = $32 / $16;
   $34 = $16 - $33;
   $$74 = $25 ? $33 : $34;
   $35 = $$74;
   $36 = (($$07275) + ($$))|0;
   $$sink1 = Math_imul($36, $27)|0;
   $37 = (($2) + ($$sink1<<2)|0);
   HEAPF32[$37>>2] = $35;
   $38 = (($$07275) + 1)|0;
   $exitcond = ($38|0)==($7|0);
   if ($exitcond) {
    break;
   } else {
    $$07275 = $38;
   }
  }
  $phitmp$le = $$74;
  $$073$lcssa = $phitmp$le;
 }
 $39 = ($11|0)==(0);
 $40 = ($13|0)!=(0);
 $or$cond = $39 & $40;
 if (!($or$cond)) {
  $44 = HEAP32[$4>>2]|0;
  $45 = $44 & 4096;
  $46 = ($45|0)==(0);
  $47 = (($7) + ($11))|0;
  $48 = $47 << 2;
  $$sink = $46 ? $48 : 4;
  $49 = (($2) + ($$sink)|0);
  return ($49|0);
 }
 $41 = $7 << 2;
 $42 = (($41) + -4)|0;
 $43 = ((($2)) + 4|0);
 _memmove(($43|0),($2|0),($42|0))|0;
 HEAPF32[$2>>2] = $$073$lcssa;
 $44 = HEAP32[$4>>2]|0;
 $45 = $44 & 4096;
 $46 = ($45|0)==(0);
 $47 = (($7) + ($11))|0;
 $48 = $47 << 2;
 $$sink = $46 ? $48 : 4;
 $49 = (($2) + ($$sink)|0);
 return ($49|0);
}
function _PackHalfFrom16($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$07275 = 0, $$073$lcssa = 0.0, $$74 = 0.0, $$sink = 0, $$sink1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 >>> 3;
 $7 = $6 & 15;
 $8 = $5 >>> 10;
 $9 = $8 & 1;
 $10 = $5 >>> 7;
 $11 = $10 & 7;
 $12 = $5 >>> 14;
 $13 = $12 & 1;
 $14 = (_IsInkSpace($5)|0);
 $15 = ($14|0)!=(0);
 $16 = $15 ? 655.3499755859375 : 65535.0;
 $17 = ($9|0)==($13|0);
 $$ = $17 ? 0 : $11;
 $18 = ($7|0)==(0);
 if ($18) {
  $$073$lcssa = 0.0;
 } else {
  $19 = (_PixelSize($5)|0);
  $20 = (($3>>>0) / ($19>>>0))&-1;
  $21 = $5 & 4096;
  $22 = $5 & 8192;
  $23 = ($9|0)==(0);
  $24 = (($7) + -1)|0;
  $25 = ($22|0)==(0);
  $26 = ($21|0)!=(0);
  $27 = $26 ? $20 : 1;
  $$07275 = 0;
  while(1) {
   $28 = (($24) - ($$07275))|0;
   $29 = $23 ? $$07275 : $28;
   $30 = (($1) + ($29<<1)|0);
   $31 = HEAP16[$30>>1]|0;
   $32 = (+($31&65535));
   $33 = $32 / $16;
   $34 = $16 - $33;
   $$74 = $25 ? $33 : $34;
   $35 = (__cmsFloat2Half($$74)|0);
   $36 = (($$07275) + ($$))|0;
   $$sink1 = Math_imul($36, $27)|0;
   $37 = (($2) + ($$sink1<<1)|0);
   HEAP16[$37>>1] = $35;
   $38 = (($$07275) + 1)|0;
   $exitcond = ($38|0)==($7|0);
   if ($exitcond) {
    $$073$lcssa = $$74;
    break;
   } else {
    $$07275 = $38;
   }
  }
 }
 $39 = ($11|0)==(0);
 $40 = ($13|0)!=(0);
 $or$cond = $39 & $40;
 if (!($or$cond)) {
  $45 = HEAP32[$4>>2]|0;
  $46 = $45 & 4096;
  $47 = ($46|0)==(0);
  $48 = (($7) + ($11))|0;
  $49 = $48 << 1;
  $$sink = $47 ? $49 : 2;
  $50 = (($2) + ($$sink)|0);
  return ($50|0);
 }
 $41 = $7 << 1;
 $42 = (($41) + -2)|0;
 $43 = ((($2)) + 2|0);
 _memmove(($43|0),($2|0),($42|0))|0;
 $44 = (__cmsFloat2Half($$073$lcssa)|0);
 HEAP16[$2>>1] = $44;
 $45 = HEAP32[$4>>2]|0;
 $46 = $45 & 4096;
 $47 = ($46|0)==(0);
 $48 = (($7) + ($11))|0;
 $49 = $48 << 1;
 $$sink = $47 ? $49 : 2;
 $50 = (($2) + ($$sink)|0);
 return ($50|0);
}
function _Pack1Byte($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP16[$1>>1]|0;
 $5 = $4&65535;
 $6 = ($5*65281)|0;
 $7 = (($6) + 8388608)|0;
 $8 = $7 >>> 24;
 $9 = $8&255;
 $10 = ((($2)) + 1|0);
 HEAP8[$2>>0] = $9;
 return ($10|0);
}
function _Pack1ByteSkip1($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP16[$1>>1]|0;
 $5 = $4&65535;
 $6 = ($5*65281)|0;
 $7 = (($6) + 8388608)|0;
 $8 = $7 >>> 24;
 $9 = $8&255;
 HEAP8[$2>>0] = $9;
 $10 = ((($2)) + 2|0);
 return ($10|0);
}
function _Pack1ByteSkip1SwapFirst($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($2)) + 1|0);
 $5 = HEAP16[$1>>1]|0;
 $6 = $5&65535;
 $7 = ($6*65281)|0;
 $8 = (($7) + 8388608)|0;
 $9 = $8 >>> 24;
 $10 = $9&255;
 $11 = ((($2)) + 2|0);
 HEAP8[$4>>0] = $10;
 return ($11|0);
}
function _Pack1ByteReversed($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP16[$1>>1]|0;
 $5 = $4 ^ -1;
 $6 = $5&65535;
 $7 = ($6*65281)|0;
 $8 = (($7) + 8388608)|0;
 $9 = $8 >>> 24;
 $10 = $9&255;
 $11 = ((($2)) + 1|0);
 HEAP8[$2>>0] = $10;
 return ($11|0);
}
function _PackLabV2_8($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP16[$1>>1]|0;
 $5 = (_FomLabV4ToLabV2($4)|0);
 $6 = $5&65535;
 $7 = ($6*65281)|0;
 $8 = (($7) + 8388608)|0;
 $9 = $8 >>> 24;
 $10 = $9&255;
 $11 = ((($2)) + 1|0);
 HEAP8[$2>>0] = $10;
 $12 = ((($1)) + 2|0);
 $13 = HEAP16[$12>>1]|0;
 $14 = (_FomLabV4ToLabV2($13)|0);
 $15 = $14&65535;
 $16 = ($15*65281)|0;
 $17 = (($16) + 8388608)|0;
 $18 = $17 >>> 24;
 $19 = $18&255;
 $20 = ((($2)) + 2|0);
 HEAP8[$11>>0] = $19;
 $21 = ((($1)) + 4|0);
 $22 = HEAP16[$21>>1]|0;
 $23 = (_FomLabV4ToLabV2($22)|0);
 $24 = $23&65535;
 $25 = ($24*65281)|0;
 $26 = (($25) + 8388608)|0;
 $27 = $26 >>> 24;
 $28 = $27&255;
 $29 = ((($2)) + 3|0);
 HEAP8[$20>>0] = $28;
 return ($29|0);
}
function _PackALabV2_8($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($2)) + 1|0);
 $5 = HEAP16[$1>>1]|0;
 $6 = (_FomLabV4ToLabV2($5)|0);
 $7 = $6&65535;
 $8 = ($7*65281)|0;
 $9 = (($8) + 8388608)|0;
 $10 = $9 >>> 24;
 $11 = $10&255;
 $12 = ((($2)) + 2|0);
 HEAP8[$4>>0] = $11;
 $13 = ((($1)) + 2|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = (_FomLabV4ToLabV2($14)|0);
 $16 = $15&65535;
 $17 = ($16*65281)|0;
 $18 = (($17) + 8388608)|0;
 $19 = $18 >>> 24;
 $20 = $19&255;
 $21 = ((($2)) + 3|0);
 HEAP8[$12>>0] = $20;
 $22 = ((($1)) + 4|0);
 $23 = HEAP16[$22>>1]|0;
 $24 = (_FomLabV4ToLabV2($23)|0);
 $25 = $24&65535;
 $26 = ($25*65281)|0;
 $27 = (($26) + 8388608)|0;
 $28 = $27 >>> 24;
 $29 = $28&255;
 $30 = ((($2)) + 4|0);
 HEAP8[$21>>0] = $29;
 return ($30|0);
}
function _PackLabV2_16($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP16[$1>>1]|0;
 $5 = (_FomLabV4ToLabV2($4)|0);
 HEAP16[$2>>1] = $5;
 $6 = ((($2)) + 2|0);
 $7 = ((($1)) + 2|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = (_FomLabV4ToLabV2($8)|0);
 HEAP16[$6>>1] = $9;
 $10 = ((($2)) + 4|0);
 $11 = ((($1)) + 4|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = (_FomLabV4ToLabV2($12)|0);
 HEAP16[$10>>1] = $13;
 $14 = ((($2)) + 6|0);
 return ($14|0);
}
function _Pack3BytesOptimized($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP16[$1>>1]|0;
 $5 = $4&255;
 $6 = ((($2)) + 1|0);
 HEAP8[$2>>0] = $5;
 $7 = ((($1)) + 2|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = $8&255;
 $10 = ((($2)) + 2|0);
 HEAP8[$6>>0] = $9;
 $11 = ((($1)) + 4|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = $12&255;
 $14 = ((($2)) + 3|0);
 HEAP8[$10>>0] = $13;
 return ($14|0);
}
function _Pack3BytesAndSkip1Optimized($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP16[$1>>1]|0;
 $5 = $4&255;
 $6 = ((($2)) + 1|0);
 HEAP8[$2>>0] = $5;
 $7 = ((($1)) + 2|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = $8&255;
 $10 = ((($2)) + 2|0);
 HEAP8[$6>>0] = $9;
 $11 = ((($1)) + 4|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = $12&255;
 HEAP8[$10>>0] = $13;
 $14 = ((($2)) + 4|0);
 return ($14|0);
}
function _Pack3BytesAndSkip1SwapFirstOptimized($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($2)) + 1|0);
 $5 = HEAP16[$1>>1]|0;
 $6 = $5&255;
 $7 = ((($2)) + 2|0);
 HEAP8[$4>>0] = $6;
 $8 = ((($1)) + 2|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = $9&255;
 $11 = ((($2)) + 3|0);
 HEAP8[$7>>0] = $10;
 $12 = ((($1)) + 4|0);
 $13 = HEAP16[$12>>1]|0;
 $14 = $13&255;
 $15 = ((($2)) + 4|0);
 HEAP8[$11>>0] = $14;
 return ($15|0);
}
function _Pack3BytesAndSkip1SwapSwapFirstOptimized($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 4|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = $5&255;
 $7 = ((($2)) + 1|0);
 HEAP8[$2>>0] = $6;
 $8 = ((($1)) + 2|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = $9&255;
 $11 = ((($2)) + 2|0);
 HEAP8[$7>>0] = $10;
 $12 = HEAP16[$1>>1]|0;
 $13 = $12&255;
 HEAP8[$11>>0] = $13;
 $14 = ((($2)) + 4|0);
 return ($14|0);
}
function _Pack3BytesAndSkip1SwapOptimized($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($2)) + 1|0);
 $5 = ((($1)) + 4|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = $6&255;
 $8 = ((($2)) + 2|0);
 HEAP8[$4>>0] = $7;
 $9 = ((($1)) + 2|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = $10&255;
 $12 = ((($2)) + 3|0);
 HEAP8[$8>>0] = $11;
 $13 = HEAP16[$1>>1]|0;
 $14 = $13&255;
 $15 = ((($2)) + 4|0);
 HEAP8[$12>>0] = $14;
 return ($15|0);
}
function _Pack3BytesSwapOptimized($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 4|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = $5&255;
 $7 = ((($2)) + 1|0);
 HEAP8[$2>>0] = $6;
 $8 = ((($1)) + 2|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = $9&255;
 $11 = ((($2)) + 2|0);
 HEAP8[$7>>0] = $10;
 $12 = HEAP16[$1>>1]|0;
 $13 = $12&255;
 $14 = ((($2)) + 3|0);
 HEAP8[$11>>0] = $13;
 return ($14|0);
}
function _Pack3Bytes($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP16[$1>>1]|0;
 $5 = $4&65535;
 $6 = ($5*65281)|0;
 $7 = (($6) + 8388608)|0;
 $8 = $7 >>> 24;
 $9 = $8&255;
 $10 = ((($2)) + 1|0);
 HEAP8[$2>>0] = $9;
 $11 = ((($1)) + 2|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = $12&65535;
 $14 = ($13*65281)|0;
 $15 = (($14) + 8388608)|0;
 $16 = $15 >>> 24;
 $17 = $16&255;
 $18 = ((($2)) + 2|0);
 HEAP8[$10>>0] = $17;
 $19 = ((($1)) + 4|0);
 $20 = HEAP16[$19>>1]|0;
 $21 = $20&65535;
 $22 = ($21*65281)|0;
 $23 = (($22) + 8388608)|0;
 $24 = $23 >>> 24;
 $25 = $24&255;
 $26 = ((($2)) + 3|0);
 HEAP8[$18>>0] = $25;
 return ($26|0);
}
function _Pack3BytesAndSkip1($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP16[$1>>1]|0;
 $5 = $4&65535;
 $6 = ($5*65281)|0;
 $7 = (($6) + 8388608)|0;
 $8 = $7 >>> 24;
 $9 = $8&255;
 $10 = ((($2)) + 1|0);
 HEAP8[$2>>0] = $9;
 $11 = ((($1)) + 2|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = $12&65535;
 $14 = ($13*65281)|0;
 $15 = (($14) + 8388608)|0;
 $16 = $15 >>> 24;
 $17 = $16&255;
 $18 = ((($2)) + 2|0);
 HEAP8[$10>>0] = $17;
 $19 = ((($1)) + 4|0);
 $20 = HEAP16[$19>>1]|0;
 $21 = $20&65535;
 $22 = ($21*65281)|0;
 $23 = (($22) + 8388608)|0;
 $24 = $23 >>> 24;
 $25 = $24&255;
 HEAP8[$18>>0] = $25;
 $26 = ((($2)) + 4|0);
 return ($26|0);
}
function _Pack3BytesAndSkip1SwapFirst($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($2)) + 1|0);
 $5 = HEAP16[$1>>1]|0;
 $6 = $5&65535;
 $7 = ($6*65281)|0;
 $8 = (($7) + 8388608)|0;
 $9 = $8 >>> 24;
 $10 = $9&255;
 $11 = ((($2)) + 2|0);
 HEAP8[$4>>0] = $10;
 $12 = ((($1)) + 2|0);
 $13 = HEAP16[$12>>1]|0;
 $14 = $13&65535;
 $15 = ($14*65281)|0;
 $16 = (($15) + 8388608)|0;
 $17 = $16 >>> 24;
 $18 = $17&255;
 $19 = ((($2)) + 3|0);
 HEAP8[$11>>0] = $18;
 $20 = ((($1)) + 4|0);
 $21 = HEAP16[$20>>1]|0;
 $22 = $21&65535;
 $23 = ($22*65281)|0;
 $24 = (($23) + 8388608)|0;
 $25 = $24 >>> 24;
 $26 = $25&255;
 $27 = ((($2)) + 4|0);
 HEAP8[$19>>0] = $26;
 return ($27|0);
}
function _Pack3BytesAndSkip1SwapSwapFirst($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 4|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = $5&65535;
 $7 = ($6*65281)|0;
 $8 = (($7) + 8388608)|0;
 $9 = $8 >>> 24;
 $10 = $9&255;
 $11 = ((($2)) + 1|0);
 HEAP8[$2>>0] = $10;
 $12 = ((($1)) + 2|0);
 $13 = HEAP16[$12>>1]|0;
 $14 = $13&65535;
 $15 = ($14*65281)|0;
 $16 = (($15) + 8388608)|0;
 $17 = $16 >>> 24;
 $18 = $17&255;
 $19 = ((($2)) + 2|0);
 HEAP8[$11>>0] = $18;
 $20 = HEAP16[$1>>1]|0;
 $21 = $20&65535;
 $22 = ($21*65281)|0;
 $23 = (($22) + 8388608)|0;
 $24 = $23 >>> 24;
 $25 = $24&255;
 HEAP8[$19>>0] = $25;
 $26 = ((($2)) + 4|0);
 return ($26|0);
}
function _Pack3BytesAndSkip1Swap($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($2)) + 1|0);
 $5 = ((($1)) + 4|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = $6&65535;
 $8 = ($7*65281)|0;
 $9 = (($8) + 8388608)|0;
 $10 = $9 >>> 24;
 $11 = $10&255;
 $12 = ((($2)) + 2|0);
 HEAP8[$4>>0] = $11;
 $13 = ((($1)) + 2|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14&65535;
 $16 = ($15*65281)|0;
 $17 = (($16) + 8388608)|0;
 $18 = $17 >>> 24;
 $19 = $18&255;
 $20 = ((($2)) + 3|0);
 HEAP8[$12>>0] = $19;
 $21 = HEAP16[$1>>1]|0;
 $22 = $21&65535;
 $23 = ($22*65281)|0;
 $24 = (($23) + 8388608)|0;
 $25 = $24 >>> 24;
 $26 = $25&255;
 $27 = ((($2)) + 4|0);
 HEAP8[$20>>0] = $26;
 return ($27|0);
}
function _Pack3BytesSwap($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 4|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = $5&65535;
 $7 = ($6*65281)|0;
 $8 = (($7) + 8388608)|0;
 $9 = $8 >>> 24;
 $10 = $9&255;
 $11 = ((($2)) + 1|0);
 HEAP8[$2>>0] = $10;
 $12 = ((($1)) + 2|0);
 $13 = HEAP16[$12>>1]|0;
 $14 = $13&65535;
 $15 = ($14*65281)|0;
 $16 = (($15) + 8388608)|0;
 $17 = $16 >>> 24;
 $18 = $17&255;
 $19 = ((($2)) + 2|0);
 HEAP8[$11>>0] = $18;
 $20 = HEAP16[$1>>1]|0;
 $21 = $20&65535;
 $22 = ($21*65281)|0;
 $23 = (($22) + 8388608)|0;
 $24 = $23 >>> 24;
 $25 = $24&255;
 $26 = ((($2)) + 3|0);
 HEAP8[$19>>0] = $25;
 return ($26|0);
}
function _Pack6Bytes($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP16[$1>>1]|0;
 $5 = $4&65535;
 $6 = ($5*65281)|0;
 $7 = (($6) + 8388608)|0;
 $8 = $7 >>> 24;
 $9 = $8&255;
 $10 = ((($2)) + 1|0);
 HEAP8[$2>>0] = $9;
 $11 = ((($1)) + 2|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = $12&65535;
 $14 = ($13*65281)|0;
 $15 = (($14) + 8388608)|0;
 $16 = $15 >>> 24;
 $17 = $16&255;
 $18 = ((($2)) + 2|0);
 HEAP8[$10>>0] = $17;
 $19 = ((($1)) + 4|0);
 $20 = HEAP16[$19>>1]|0;
 $21 = $20&65535;
 $22 = ($21*65281)|0;
 $23 = (($22) + 8388608)|0;
 $24 = $23 >>> 24;
 $25 = $24&255;
 $26 = ((($2)) + 3|0);
 HEAP8[$18>>0] = $25;
 $27 = ((($1)) + 6|0);
 $28 = HEAP16[$27>>1]|0;
 $29 = $28&65535;
 $30 = ($29*65281)|0;
 $31 = (($30) + 8388608)|0;
 $32 = $31 >>> 24;
 $33 = $32&255;
 $34 = ((($2)) + 4|0);
 HEAP8[$26>>0] = $33;
 $35 = ((($1)) + 8|0);
 $36 = HEAP16[$35>>1]|0;
 $37 = $36&65535;
 $38 = ($37*65281)|0;
 $39 = (($38) + 8388608)|0;
 $40 = $39 >>> 24;
 $41 = $40&255;
 $42 = ((($2)) + 5|0);
 HEAP8[$34>>0] = $41;
 $43 = ((($1)) + 10|0);
 $44 = HEAP16[$43>>1]|0;
 $45 = $44&65535;
 $46 = ($45*65281)|0;
 $47 = (($46) + 8388608)|0;
 $48 = $47 >>> 24;
 $49 = $48&255;
 $50 = ((($2)) + 6|0);
 HEAP8[$42>>0] = $49;
 return ($50|0);
}
function _Pack6BytesSwap($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 10|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = $5&65535;
 $7 = ($6*65281)|0;
 $8 = (($7) + 8388608)|0;
 $9 = $8 >>> 24;
 $10 = $9&255;
 $11 = ((($2)) + 1|0);
 HEAP8[$2>>0] = $10;
 $12 = ((($1)) + 8|0);
 $13 = HEAP16[$12>>1]|0;
 $14 = $13&65535;
 $15 = ($14*65281)|0;
 $16 = (($15) + 8388608)|0;
 $17 = $16 >>> 24;
 $18 = $17&255;
 $19 = ((($2)) + 2|0);
 HEAP8[$11>>0] = $18;
 $20 = ((($1)) + 6|0);
 $21 = HEAP16[$20>>1]|0;
 $22 = $21&65535;
 $23 = ($22*65281)|0;
 $24 = (($23) + 8388608)|0;
 $25 = $24 >>> 24;
 $26 = $25&255;
 $27 = ((($2)) + 3|0);
 HEAP8[$19>>0] = $26;
 $28 = ((($1)) + 4|0);
 $29 = HEAP16[$28>>1]|0;
 $30 = $29&65535;
 $31 = ($30*65281)|0;
 $32 = (($31) + 8388608)|0;
 $33 = $32 >>> 24;
 $34 = $33&255;
 $35 = ((($2)) + 4|0);
 HEAP8[$27>>0] = $34;
 $36 = ((($1)) + 2|0);
 $37 = HEAP16[$36>>1]|0;
 $38 = $37&65535;
 $39 = ($38*65281)|0;
 $40 = (($39) + 8388608)|0;
 $41 = $40 >>> 24;
 $42 = $41&255;
 $43 = ((($2)) + 5|0);
 HEAP8[$35>>0] = $42;
 $44 = HEAP16[$1>>1]|0;
 $45 = $44&65535;
 $46 = ($45*65281)|0;
 $47 = (($46) + 8388608)|0;
 $48 = $47 >>> 24;
 $49 = $48&255;
 $50 = ((($2)) + 6|0);
 HEAP8[$43>>0] = $49;
 return ($50|0);
}
function _Pack4Bytes($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP16[$1>>1]|0;
 $5 = $4&65535;
 $6 = ($5*65281)|0;
 $7 = (($6) + 8388608)|0;
 $8 = $7 >>> 24;
 $9 = $8&255;
 $10 = ((($2)) + 1|0);
 HEAP8[$2>>0] = $9;
 $11 = ((($1)) + 2|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = $12&65535;
 $14 = ($13*65281)|0;
 $15 = (($14) + 8388608)|0;
 $16 = $15 >>> 24;
 $17 = $16&255;
 $18 = ((($2)) + 2|0);
 HEAP8[$10>>0] = $17;
 $19 = ((($1)) + 4|0);
 $20 = HEAP16[$19>>1]|0;
 $21 = $20&65535;
 $22 = ($21*65281)|0;
 $23 = (($22) + 8388608)|0;
 $24 = $23 >>> 24;
 $25 = $24&255;
 $26 = ((($2)) + 3|0);
 HEAP8[$18>>0] = $25;
 $27 = ((($1)) + 6|0);
 $28 = HEAP16[$27>>1]|0;
 $29 = $28&65535;
 $30 = ($29*65281)|0;
 $31 = (($30) + 8388608)|0;
 $32 = $31 >>> 24;
 $33 = $32&255;
 $34 = ((($2)) + 4|0);
 HEAP8[$26>>0] = $33;
 return ($34|0);
}
function _Pack4BytesReverse($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP16[$1>>1]|0;
 $5 = $4&65535;
 $6 = ($5*65281)|0;
 $7 = (($6) + 8388608)|0;
 $8 = $7 >>> 24;
 $9 = $8 ^ 255;
 $10 = $9&255;
 $11 = ((($2)) + 1|0);
 HEAP8[$2>>0] = $10;
 $12 = ((($1)) + 2|0);
 $13 = HEAP16[$12>>1]|0;
 $14 = $13&65535;
 $15 = ($14*65281)|0;
 $16 = (($15) + 8388608)|0;
 $17 = $16 >>> 24;
 $18 = $17 ^ 255;
 $19 = $18&255;
 $20 = ((($2)) + 2|0);
 HEAP8[$11>>0] = $19;
 $21 = ((($1)) + 4|0);
 $22 = HEAP16[$21>>1]|0;
 $23 = $22&65535;
 $24 = ($23*65281)|0;
 $25 = (($24) + 8388608)|0;
 $26 = $25 >>> 24;
 $27 = $26 ^ 255;
 $28 = $27&255;
 $29 = ((($2)) + 3|0);
 HEAP8[$20>>0] = $28;
 $30 = ((($1)) + 6|0);
 $31 = HEAP16[$30>>1]|0;
 $32 = $31&65535;
 $33 = ($32*65281)|0;
 $34 = (($33) + 8388608)|0;
 $35 = $34 >>> 24;
 $36 = $35 ^ 255;
 $37 = $36&255;
 $38 = ((($2)) + 4|0);
 HEAP8[$29>>0] = $37;
 return ($38|0);
}
function _Pack4BytesSwapFirst($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 6|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = $5&65535;
 $7 = ($6*65281)|0;
 $8 = (($7) + 8388608)|0;
 $9 = $8 >>> 24;
 $10 = $9&255;
 $11 = ((($2)) + 1|0);
 HEAP8[$2>>0] = $10;
 $12 = HEAP16[$1>>1]|0;
 $13 = $12&65535;
 $14 = ($13*65281)|0;
 $15 = (($14) + 8388608)|0;
 $16 = $15 >>> 24;
 $17 = $16&255;
 $18 = ((($2)) + 2|0);
 HEAP8[$11>>0] = $17;
 $19 = ((($1)) + 2|0);
 $20 = HEAP16[$19>>1]|0;
 $21 = $20&65535;
 $22 = ($21*65281)|0;
 $23 = (($22) + 8388608)|0;
 $24 = $23 >>> 24;
 $25 = $24&255;
 $26 = ((($2)) + 3|0);
 HEAP8[$18>>0] = $25;
 $27 = ((($1)) + 4|0);
 $28 = HEAP16[$27>>1]|0;
 $29 = $28&65535;
 $30 = ($29*65281)|0;
 $31 = (($30) + 8388608)|0;
 $32 = $31 >>> 24;
 $33 = $32&255;
 $34 = ((($2)) + 4|0);
 HEAP8[$26>>0] = $33;
 return ($34|0);
}
function _Pack4BytesSwap($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 6|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = $5&65535;
 $7 = ($6*65281)|0;
 $8 = (($7) + 8388608)|0;
 $9 = $8 >>> 24;
 $10 = $9&255;
 $11 = ((($2)) + 1|0);
 HEAP8[$2>>0] = $10;
 $12 = ((($1)) + 4|0);
 $13 = HEAP16[$12>>1]|0;
 $14 = $13&65535;
 $15 = ($14*65281)|0;
 $16 = (($15) + 8388608)|0;
 $17 = $16 >>> 24;
 $18 = $17&255;
 $19 = ((($2)) + 2|0);
 HEAP8[$11>>0] = $18;
 $20 = ((($1)) + 2|0);
 $21 = HEAP16[$20>>1]|0;
 $22 = $21&65535;
 $23 = ($22*65281)|0;
 $24 = (($23) + 8388608)|0;
 $25 = $24 >>> 24;
 $26 = $25&255;
 $27 = ((($2)) + 3|0);
 HEAP8[$19>>0] = $26;
 $28 = HEAP16[$1>>1]|0;
 $29 = $28&65535;
 $30 = ($29*65281)|0;
 $31 = (($30) + 8388608)|0;
 $32 = $31 >>> 24;
 $33 = $32&255;
 $34 = ((($2)) + 4|0);
 HEAP8[$27>>0] = $33;
 return ($34|0);
}
function _Pack4BytesSwapSwapFirst($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 4|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = $5&65535;
 $7 = ($6*65281)|0;
 $8 = (($7) + 8388608)|0;
 $9 = $8 >>> 24;
 $10 = $9&255;
 $11 = ((($2)) + 1|0);
 HEAP8[$2>>0] = $10;
 $12 = ((($1)) + 2|0);
 $13 = HEAP16[$12>>1]|0;
 $14 = $13&65535;
 $15 = ($14*65281)|0;
 $16 = (($15) + 8388608)|0;
 $17 = $16 >>> 24;
 $18 = $17&255;
 $19 = ((($2)) + 2|0);
 HEAP8[$11>>0] = $18;
 $20 = HEAP16[$1>>1]|0;
 $21 = $20&65535;
 $22 = ($21*65281)|0;
 $23 = (($22) + 8388608)|0;
 $24 = $23 >>> 24;
 $25 = $24&255;
 $26 = ((($2)) + 3|0);
 HEAP8[$19>>0] = $25;
 $27 = ((($1)) + 6|0);
 $28 = HEAP16[$27>>1]|0;
 $29 = $28&65535;
 $30 = ($29*65281)|0;
 $31 = (($30) + 8388608)|0;
 $32 = $31 >>> 24;
 $33 = $32&255;
 $34 = ((($2)) + 4|0);
 HEAP8[$26>>0] = $33;
 return ($34|0);
}
function _PackAnyBytes($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$05256 = 0, $$053$lcssa = 0, $$1$ = 0, $$1$lcssa = 0, $$154 = 0, $$157 = 0, $$55 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $exitcond = 0, $or$cond = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 >>> 3;
 $7 = $6 & 15;
 $8 = $5 >>> 10;
 $9 = $8 & 1;
 $10 = $5 >>> 7;
 $11 = $10 & 7;
 $12 = $5 >>> 14;
 $13 = $12 & 1;
 $14 = ($9|0)!=($13|0);
 $15 = (($2) + ($11)|0);
 $$ = $14 ? $15 : $2;
 $16 = ($7|0)==(0);
 if ($16) {
  $$053$lcssa = 0;$$1$lcssa = $$;
 } else {
  $17 = $5 & 8192;
  $18 = ($9|0)==(0);
  $19 = (($7) + -1)|0;
  $20 = ($17|0)==(0);
  $$05256 = 0;$$157 = $$;
  while(1) {
   $21 = (($19) - ($$05256))|0;
   $22 = $18 ? $$05256 : $21;
   $23 = (($1) + ($22<<1)|0);
   $24 = HEAP16[$23>>1]|0;
   $25 = $24&65535;
   $26 = ($25*65281)|0;
   $27 = (($26) + 8388608)|0;
   $28 = $27 >>> 24;
   $29 = $28 ^ 255;
   $$55 = $20 ? $28 : $29;
   $$154 = $$55&255;
   $30 = ((($$157)) + 1|0);
   HEAP8[$$157>>0] = $$154;
   $31 = (($$05256) + 1)|0;
   $exitcond = ($31|0)==($7|0);
   if ($exitcond) {
    break;
   } else {
    $$05256 = $31;$$157 = $30;
   }
  }
  $scevgep = (($$) + ($7)|0);
  $$053$lcssa = $$154;$$1$lcssa = $scevgep;
 }
 $32 = (($$1$lcssa) + ($11)|0);
 $$1$ = $14 ? $$1$lcssa : $32;
 $33 = ($11|0)==(0);
 $34 = ($13|0)!=(0);
 $or$cond = $33 & $34;
 if (!($or$cond)) {
  return ($$1$|0);
 }
 $35 = (($7) + -1)|0;
 $36 = ((($2)) + 1|0);
 _memmove(($36|0),($2|0),($35|0))|0;
 HEAP8[$2>>0] = $$053$lcssa;
 return ($$1$|0);
}
function _PackPlanarBytes($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$03739 = 0, $$140 = 0, $$38 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 >>> 3;
 $7 = $6 & 15;
 $8 = $5 >>> 10;
 $9 = $8 & 1;
 $10 = ($7|0)==(0);
 if ($10) {
  $34 = ((($2)) + 1|0);
  return ($34|0);
 }
 $11 = $5 >>> 14;
 $12 = $11 & 1;
 $13 = ($9|0)==($12|0);
 $14 = $5 >>> 7;
 $15 = $14 & 7;
 $16 = Math_imul($15, $3)|0;
 $17 = (($2) + ($16)|0);
 $$38 = $13 ? $2 : $17;
 $18 = $5 & 8192;
 $19 = ($9|0)==(0);
 $20 = (($7) + -1)|0;
 $21 = ($18|0)==(0);
 $$03739 = 0;$$140 = $$38;
 while(1) {
  $22 = (($20) - ($$03739))|0;
  $23 = $19 ? $$03739 : $22;
  $24 = (($1) + ($23<<1)|0);
  $25 = HEAP16[$24>>1]|0;
  $26 = $25&65535;
  $27 = ($26*65281)|0;
  $28 = (($27) + 8388608)|0;
  $29 = $28 >>> 24;
  $30 = $29 ^ 255;
  $$ = $21 ? $29 : $30;
  $31 = $$&255;
  HEAP8[$$140>>0] = $31;
  $32 = (($$140) + ($3)|0);
  $33 = (($$03739) + 1)|0;
  $exitcond = ($33|0)==($7|0);
  if ($exitcond) {
   break;
  } else {
   $$03739 = $33;$$140 = $32;
  }
 }
 $34 = ((($2)) + 1|0);
 return ($34|0);
}
function _Pack1Word($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP16[$1>>1]|0;
 HEAP16[$2>>1] = $4;
 $5 = ((($2)) + 2|0);
 return ($5|0);
}
function _Pack1WordSkip1($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP16[$1>>1]|0;
 HEAP16[$2>>1] = $4;
 $5 = ((($2)) + 4|0);
 return ($5|0);
}
function _Pack1WordSkip1SwapFirst($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($2)) + 2|0);
 $5 = HEAP16[$1>>1]|0;
 HEAP16[$4>>1] = $5;
 $6 = ((($2)) + 4|0);
 return ($6|0);
}
function _Pack1WordReversed($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP16[$1>>1]|0;
 $5 = $4 ^ -1;
 HEAP16[$2>>1] = $5;
 $6 = ((($2)) + 2|0);
 return ($6|0);
}
function _Pack1WordBigEndian($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $rev = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP16[$1>>1]|0;
 $rev = (_llvm_bswap_i16(($4|0))|0);
 HEAP16[$2>>1] = $rev;
 $5 = ((($2)) + 2|0);
 return ($5|0);
}
function _Pack3Words($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP16[$1>>1]|0;
 HEAP16[$2>>1] = $4;
 $5 = ((($2)) + 2|0);
 $6 = ((($1)) + 2|0);
 $7 = HEAP16[$6>>1]|0;
 HEAP16[$5>>1] = $7;
 $8 = ((($2)) + 4|0);
 $9 = ((($1)) + 4|0);
 $10 = HEAP16[$9>>1]|0;
 HEAP16[$8>>1] = $10;
 $11 = ((($2)) + 6|0);
 return ($11|0);
}
function _Pack3WordsSwap($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 4|0);
 $5 = HEAP16[$4>>1]|0;
 HEAP16[$2>>1] = $5;
 $6 = ((($2)) + 2|0);
 $7 = ((($1)) + 2|0);
 $8 = HEAP16[$7>>1]|0;
 HEAP16[$6>>1] = $8;
 $9 = ((($2)) + 4|0);
 $10 = HEAP16[$1>>1]|0;
 HEAP16[$9>>1] = $10;
 $11 = ((($2)) + 6|0);
 return ($11|0);
}
function _Pack3WordsBigEndian($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $rev = 0, $rev13 = 0, $rev14 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP16[$1>>1]|0;
 $rev = (_llvm_bswap_i16(($4|0))|0);
 HEAP16[$2>>1] = $rev;
 $5 = ((($2)) + 2|0);
 $6 = ((($1)) + 2|0);
 $7 = HEAP16[$6>>1]|0;
 $rev13 = (_llvm_bswap_i16(($7|0))|0);
 HEAP16[$5>>1] = $rev13;
 $8 = ((($2)) + 4|0);
 $9 = ((($1)) + 4|0);
 $10 = HEAP16[$9>>1]|0;
 $rev14 = (_llvm_bswap_i16(($10|0))|0);
 HEAP16[$8>>1] = $rev14;
 $11 = ((($2)) + 6|0);
 return ($11|0);
}
function _Pack3WordsAndSkip1($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP16[$1>>1]|0;
 HEAP16[$2>>1] = $4;
 $5 = ((($2)) + 2|0);
 $6 = ((($1)) + 2|0);
 $7 = HEAP16[$6>>1]|0;
 HEAP16[$5>>1] = $7;
 $8 = ((($2)) + 4|0);
 $9 = ((($1)) + 4|0);
 $10 = HEAP16[$9>>1]|0;
 HEAP16[$8>>1] = $10;
 $11 = ((($2)) + 8|0);
 return ($11|0);
}
function _Pack3WordsAndSkip1Swap($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($2)) + 2|0);
 $5 = ((($1)) + 4|0);
 $6 = HEAP16[$5>>1]|0;
 HEAP16[$4>>1] = $6;
 $7 = ((($2)) + 4|0);
 $8 = ((($1)) + 2|0);
 $9 = HEAP16[$8>>1]|0;
 HEAP16[$7>>1] = $9;
 $10 = ((($2)) + 6|0);
 $11 = HEAP16[$1>>1]|0;
 HEAP16[$10>>1] = $11;
 $12 = ((($2)) + 8|0);
 return ($12|0);
}
function _Pack3WordsAndSkip1SwapFirst($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($2)) + 2|0);
 $5 = HEAP16[$1>>1]|0;
 HEAP16[$4>>1] = $5;
 $6 = ((($2)) + 4|0);
 $7 = ((($1)) + 2|0);
 $8 = HEAP16[$7>>1]|0;
 HEAP16[$6>>1] = $8;
 $9 = ((($2)) + 6|0);
 $10 = ((($1)) + 4|0);
 $11 = HEAP16[$10>>1]|0;
 HEAP16[$9>>1] = $11;
 $12 = ((($2)) + 8|0);
 return ($12|0);
}
function _Pack3WordsAndSkip1SwapSwapFirst($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 4|0);
 $5 = HEAP16[$4>>1]|0;
 HEAP16[$2>>1] = $5;
 $6 = ((($2)) + 2|0);
 $7 = ((($1)) + 2|0);
 $8 = HEAP16[$7>>1]|0;
 HEAP16[$6>>1] = $8;
 $9 = ((($2)) + 4|0);
 $10 = HEAP16[$1>>1]|0;
 HEAP16[$9>>1] = $10;
 $11 = ((($2)) + 8|0);
 return ($11|0);
}
function _Pack4Words($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP16[$1>>1]|0;
 HEAP16[$2>>1] = $4;
 $5 = ((($2)) + 2|0);
 $6 = ((($1)) + 2|0);
 $7 = HEAP16[$6>>1]|0;
 HEAP16[$5>>1] = $7;
 $8 = ((($2)) + 4|0);
 $9 = ((($1)) + 4|0);
 $10 = HEAP16[$9>>1]|0;
 HEAP16[$8>>1] = $10;
 $11 = ((($2)) + 6|0);
 $12 = ((($1)) + 6|0);
 $13 = HEAP16[$12>>1]|0;
 HEAP16[$11>>1] = $13;
 $14 = ((($2)) + 8|0);
 return ($14|0);
}
function _Pack4WordsReverse($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP16[$1>>1]|0;
 $5 = $4 ^ -1;
 HEAP16[$2>>1] = $5;
 $6 = ((($2)) + 2|0);
 $7 = ((($1)) + 2|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = $8 ^ -1;
 HEAP16[$6>>1] = $9;
 $10 = ((($2)) + 4|0);
 $11 = ((($1)) + 4|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = $12 ^ -1;
 HEAP16[$10>>1] = $13;
 $14 = ((($2)) + 6|0);
 $15 = ((($1)) + 6|0);
 $16 = HEAP16[$15>>1]|0;
 $17 = $16 ^ -1;
 HEAP16[$14>>1] = $17;
 $18 = ((($2)) + 8|0);
 return ($18|0);
}
function _Pack4WordsSwap($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 6|0);
 $5 = HEAP16[$4>>1]|0;
 HEAP16[$2>>1] = $5;
 $6 = ((($2)) + 2|0);
 $7 = ((($1)) + 4|0);
 $8 = HEAP16[$7>>1]|0;
 HEAP16[$6>>1] = $8;
 $9 = ((($2)) + 4|0);
 $10 = ((($1)) + 2|0);
 $11 = HEAP16[$10>>1]|0;
 HEAP16[$9>>1] = $11;
 $12 = ((($2)) + 6|0);
 $13 = HEAP16[$1>>1]|0;
 HEAP16[$12>>1] = $13;
 $14 = ((($2)) + 8|0);
 return ($14|0);
}
function _Pack4WordsBigEndian($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $rev = 0, $rev17 = 0, $rev18 = 0, $rev19 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP16[$1>>1]|0;
 $rev = (_llvm_bswap_i16(($4|0))|0);
 HEAP16[$2>>1] = $rev;
 $5 = ((($2)) + 2|0);
 $6 = ((($1)) + 2|0);
 $7 = HEAP16[$6>>1]|0;
 $rev17 = (_llvm_bswap_i16(($7|0))|0);
 HEAP16[$5>>1] = $rev17;
 $8 = ((($2)) + 4|0);
 $9 = ((($1)) + 4|0);
 $10 = HEAP16[$9>>1]|0;
 $rev18 = (_llvm_bswap_i16(($10|0))|0);
 HEAP16[$8>>1] = $rev18;
 $11 = ((($2)) + 6|0);
 $12 = ((($1)) + 6|0);
 $13 = HEAP16[$12>>1]|0;
 $rev19 = (_llvm_bswap_i16(($13|0))|0);
 HEAP16[$11>>1] = $rev19;
 $14 = ((($2)) + 8|0);
 return ($14|0);
}
function _Pack6Words($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP16[$1>>1]|0;
 HEAP16[$2>>1] = $4;
 $5 = ((($2)) + 2|0);
 $6 = ((($1)) + 2|0);
 $7 = HEAP16[$6>>1]|0;
 HEAP16[$5>>1] = $7;
 $8 = ((($2)) + 4|0);
 $9 = ((($1)) + 4|0);
 $10 = HEAP16[$9>>1]|0;
 HEAP16[$8>>1] = $10;
 $11 = ((($2)) + 6|0);
 $12 = ((($1)) + 6|0);
 $13 = HEAP16[$12>>1]|0;
 HEAP16[$11>>1] = $13;
 $14 = ((($2)) + 8|0);
 $15 = ((($1)) + 8|0);
 $16 = HEAP16[$15>>1]|0;
 HEAP16[$14>>1] = $16;
 $17 = ((($2)) + 10|0);
 $18 = ((($1)) + 10|0);
 $19 = HEAP16[$18>>1]|0;
 HEAP16[$17>>1] = $19;
 $20 = ((($2)) + 12|0);
 return ($20|0);
}
function _Pack6WordsSwap($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 10|0);
 $5 = HEAP16[$4>>1]|0;
 HEAP16[$2>>1] = $5;
 $6 = ((($2)) + 2|0);
 $7 = ((($1)) + 8|0);
 $8 = HEAP16[$7>>1]|0;
 HEAP16[$6>>1] = $8;
 $9 = ((($2)) + 4|0);
 $10 = ((($1)) + 6|0);
 $11 = HEAP16[$10>>1]|0;
 HEAP16[$9>>1] = $11;
 $12 = ((($2)) + 6|0);
 $13 = ((($1)) + 4|0);
 $14 = HEAP16[$13>>1]|0;
 HEAP16[$12>>1] = $14;
 $15 = ((($2)) + 8|0);
 $16 = ((($1)) + 2|0);
 $17 = HEAP16[$16>>1]|0;
 HEAP16[$15>>1] = $17;
 $18 = ((($2)) + 10|0);
 $19 = HEAP16[$1>>1]|0;
 HEAP16[$18>>1] = $19;
 $20 = ((($2)) + 12|0);
 return ($20|0);
}
function _PackPlanarWords($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$04445 = 0, $$143 = 0, $$146 = 0, $$rev = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $rev = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 >>> 3;
 $7 = $6 & 15;
 $8 = $5 & 1024;
 $9 = ($8|0)!=(0);
 $10 = ($7|0)==(0);
 if ($10) {
  $26 = ((($2)) + 2|0);
  return ($26|0);
 }
 $11 = $5 >>> 7;
 $12 = $11 & 7;
 $13 = Math_imul($12, $3)|0;
 $14 = (($2) + ($13)|0);
 $$ = $9 ? $14 : $2;
 $15 = $5 & 2048;
 $16 = (($7) + -1)|0;
 $17 = ($15|0)==(0);
 $18 = $5 << 18;
 $sext = $18 >> 31;
 $19 = $sext&65535;
 $$04445 = 0;$$146 = $$;
 while(1) {
  $20 = (($16) - ($$04445))|0;
  $21 = $9 ? $20 : $$04445;
  $22 = (($1) + ($21<<1)|0);
  $23 = HEAP16[$22>>1]|0;
  $rev = (_llvm_bswap_i16(($23|0))|0);
  $$rev = $17 ? $23 : $rev;
  $$143 = $$rev ^ $19;
  HEAP16[$$146>>1] = $$143;
  $24 = (($$146) + ($3)|0);
  $25 = (($$04445) + 1)|0;
  $exitcond = ($25|0)==($7|0);
  if ($exitcond) {
   break;
  } else {
   $$04445 = $25;$$146 = $24;
  }
 }
 $26 = ((($2)) + 2|0);
 return ($26|0);
}
function _PackAnyWords($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$06165 = 0, $$062$lcssa = 0, $$1$lcssa = 0, $$166 = 0, $$2 = 0, $$264 = 0, $$rev = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $exitcond = 0, $or$cond = 0, $rev = 0, $scevgep = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 >>> 3;
 $7 = $6 & 15;
 $8 = $5 >>> 10;
 $9 = $8 & 1;
 $10 = $5 >>> 7;
 $11 = $10 & 7;
 $12 = $5 >>> 14;
 $13 = $12 & 1;
 $14 = ($9|0)!=($13|0);
 $15 = $11 << 1;
 $16 = (($2) + ($15)|0);
 $$0 = $14 ? $16 : $2;
 $17 = ($7|0)==(0);
 if ($17) {
  $$062$lcssa = 0;$$1$lcssa = $$0;
 } else {
  $18 = $5 & 2048;
  $19 = ($9|0)==(0);
  $20 = (($7) + -1)|0;
  $21 = ($18|0)==(0);
  $22 = $5 << 18;
  $sext = $22 >> 31;
  $23 = $sext&65535;
  $24 = $7 << 1;
  $$06165 = 0;$$166 = $$0;
  while(1) {
   $25 = (($20) - ($$06165))|0;
   $26 = $19 ? $$06165 : $25;
   $27 = (($1) + ($26<<1)|0);
   $28 = HEAP16[$27>>1]|0;
   $rev = (_llvm_bswap_i16(($28|0))|0);
   $$rev = $21 ? $28 : $rev;
   $$264 = $$rev ^ $23;
   HEAP16[$$166>>1] = $$264;
   $29 = ((($$166)) + 2|0);
   $30 = (($$06165) + 1)|0;
   $exitcond = ($30|0)==($7|0);
   if ($exitcond) {
    break;
   } else {
    $$06165 = $30;$$166 = $29;
   }
  }
  $scevgep = (($$0) + ($24)|0);
  $$062$lcssa = $$264;$$1$lcssa = $scevgep;
 }
 $31 = (($$1$lcssa) + ($15)|0);
 $$2 = $14 ? $$1$lcssa : $31;
 $32 = ($11|0)==(0);
 $33 = ($13|0)!=(0);
 $or$cond = $32 & $33;
 if (!($or$cond)) {
  return ($$2|0);
 }
 $34 = $7 << 1;
 $35 = (($34) + -2)|0;
 $36 = ((($2)) + 2|0);
 _memmove(($36|0),($2|0),($35|0))|0;
 HEAP16[$2>>1] = $$062$lcssa;
 return ($$2|0);
}
function _FomLabV4ToLabV2($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0&65535;
 $2 = $1 << 8;
 $3 = $2 | 128;
 $4 = (($3>>>0) / 257)&-1;
 $5 = $4&65535;
 return ($5|0);
}
function _UnrollLabDoubleToFloat($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$sink = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0;
 var $29 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP32[$0>>2]|0;
 $5 = $4 & 4096;
 $6 = ($5|0)==(0);
 if ($6) {
  $25 = +HEAPF64[$2>>3];
  $26 = $25 / 100.0;
  $27 = $26;
  HEAPF32[$1>>2] = $27;
  $28 = ((($2)) + 8|0);
  $29 = +HEAPF64[$28>>3];
  $30 = $29 + 128.0;
  $31 = $30 / 255.0;
  $32 = $31;
  $33 = ((($1)) + 4|0);
  HEAPF32[$33>>2] = $32;
  $34 = ((($2)) + 16|0);
  $35 = +HEAPF64[$34>>3];
  $36 = $35 + 128.0;
  $37 = $36 / 255.0;
  $38 = $37;
  $39 = ((($1)) + 8|0);
  HEAPF32[$39>>2] = $38;
  $40 = $4 >>> 4;
  $41 = $40 & 56;
  $42 = (($41) + 24)|0;
  $$sink = $42;
  $43 = (($2) + ($$sink)|0);
  return ($43|0);
 } else {
  $7 = (_PixelSize($4)|0);
  $8 = (($3>>>0) / ($7>>>0))&-1;
  $9 = +HEAPF64[$2>>3];
  $10 = $9 / 100.0;
  $11 = $10;
  HEAPF32[$1>>2] = $11;
  $12 = (($2) + ($8<<3)|0);
  $13 = +HEAPF64[$12>>3];
  $14 = $13 + 128.0;
  $15 = $14 / 255.0;
  $16 = $15;
  $17 = ((($1)) + 4|0);
  HEAPF32[$17>>2] = $16;
  $18 = $8 << 1;
  $19 = (($2) + ($18<<3)|0);
  $20 = +HEAPF64[$19>>3];
  $21 = $20 + 128.0;
  $22 = $21 / 255.0;
  $23 = $22;
  $24 = ((($1)) + 8|0);
  HEAPF32[$24>>2] = $23;
  $$sink = 8;
  $43 = (($2) + ($$sink)|0);
  return ($43|0);
 }
 return (0)|0;
}
function _UnrollLabFloatToFloat($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$sink = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0;
 var $29 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP32[$0>>2]|0;
 $5 = $4 & 4096;
 $6 = ($5|0)==(0);
 if ($6) {
  $22 = +HEAPF32[$2>>2];
  $23 = $22 / 100.0;
  HEAPF32[$1>>2] = $23;
  $24 = ((($2)) + 4|0);
  $25 = +HEAPF32[$24>>2];
  $26 = $25 + 128.0;
  $27 = $26 / 255.0;
  $28 = ((($1)) + 4|0);
  HEAPF32[$28>>2] = $27;
  $29 = ((($2)) + 8|0);
  $30 = +HEAPF32[$29>>2];
  $31 = $30 + 128.0;
  $32 = $31 / 255.0;
  $33 = ((($1)) + 8|0);
  HEAPF32[$33>>2] = $32;
  $34 = $4 >>> 5;
  $35 = $34 & 28;
  $36 = (($35) + 12)|0;
  $$sink = $36;
  $37 = (($2) + ($$sink)|0);
  return ($37|0);
 } else {
  $7 = (_PixelSize($4)|0);
  $8 = (($3>>>0) / ($7>>>0))&-1;
  $9 = +HEAPF32[$2>>2];
  $10 = $9 / 100.0;
  HEAPF32[$1>>2] = $10;
  $11 = (($2) + ($8<<2)|0);
  $12 = +HEAPF32[$11>>2];
  $13 = $12 + 128.0;
  $14 = $13 / 255.0;
  $15 = ((($1)) + 4|0);
  HEAPF32[$15>>2] = $14;
  $16 = $8 << 1;
  $17 = (($2) + ($16<<2)|0);
  $18 = +HEAPF32[$17>>2];
  $19 = $18 + 128.0;
  $20 = $19 / 255.0;
  $21 = ((($1)) + 8|0);
  HEAPF32[$21>>2] = $20;
  $$sink = 4;
  $37 = (($2) + ($$sink)|0);
  return ($37|0);
 }
 return (0)|0;
}
function _UnrollXYZDoubleToFloat($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$sink = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0.0;
 var $29 = 0.0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP32[$0>>2]|0;
 $5 = $4 & 4096;
 $6 = ($5|0)==(0);
 if ($6) {
  $23 = +HEAPF64[$2>>3];
  $24 = $23 / 1.999969482421875;
  $25 = $24;
  HEAPF32[$1>>2] = $25;
  $26 = ((($2)) + 8|0);
  $27 = +HEAPF64[$26>>3];
  $28 = $27 / 1.999969482421875;
  $29 = $28;
  $30 = ((($1)) + 4|0);
  HEAPF32[$30>>2] = $29;
  $31 = ((($2)) + 16|0);
  $32 = +HEAPF64[$31>>3];
  $33 = $32 / 1.999969482421875;
  $34 = $33;
  $35 = ((($1)) + 8|0);
  HEAPF32[$35>>2] = $34;
  $36 = $4 >>> 4;
  $37 = $36 & 56;
  $38 = (($37) + 24)|0;
  $$sink = $38;
  $39 = (($2) + ($$sink)|0);
  return ($39|0);
 } else {
  $7 = (_PixelSize($4)|0);
  $8 = (($3>>>0) / ($7>>>0))&-1;
  $9 = +HEAPF64[$2>>3];
  $10 = $9 / 1.999969482421875;
  $11 = $10;
  HEAPF32[$1>>2] = $11;
  $12 = (($2) + ($8<<3)|0);
  $13 = +HEAPF64[$12>>3];
  $14 = $13 / 1.999969482421875;
  $15 = $14;
  $16 = ((($1)) + 4|0);
  HEAPF32[$16>>2] = $15;
  $17 = $8 << 1;
  $18 = (($2) + ($17<<3)|0);
  $19 = +HEAPF64[$18>>3];
  $20 = $19 / 1.999969482421875;
  $21 = $20;
  $22 = ((($1)) + 8|0);
  HEAPF32[$22>>2] = $21;
  $$sink = 8;
  $39 = (($2) + ($$sink)|0);
  return ($39|0);
 }
 return (0)|0;
}
function _UnrollXYZFloatToFloat($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$sink = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP32[$0>>2]|0;
 $5 = $4 & 4096;
 $6 = ($5|0)==(0);
 if ($6) {
  $20 = +HEAPF32[$2>>2];
  $21 = $20 / 1.999969482421875;
  HEAPF32[$1>>2] = $21;
  $22 = ((($2)) + 4|0);
  $23 = +HEAPF32[$22>>2];
  $24 = $23 / 1.999969482421875;
  $25 = ((($1)) + 4|0);
  HEAPF32[$25>>2] = $24;
  $26 = ((($2)) + 8|0);
  $27 = +HEAPF32[$26>>2];
  $28 = $27 / 1.999969482421875;
  $29 = ((($1)) + 8|0);
  HEAPF32[$29>>2] = $28;
  $30 = $4 >>> 5;
  $31 = $30 & 28;
  $32 = (($31) + 12)|0;
  $$sink = $32;
  $33 = (($2) + ($$sink)|0);
  return ($33|0);
 } else {
  $7 = (_PixelSize($4)|0);
  $8 = (($3>>>0) / ($7>>>0))&-1;
  $9 = +HEAPF32[$2>>2];
  $10 = $9 / 1.999969482421875;
  HEAPF32[$1>>2] = $10;
  $11 = (($2) + ($8<<2)|0);
  $12 = +HEAPF32[$11>>2];
  $13 = $12 / 1.999969482421875;
  $14 = ((($1)) + 4|0);
  HEAPF32[$14>>2] = $13;
  $15 = $8 << 1;
  $16 = (($2) + ($15<<2)|0);
  $17 = +HEAPF32[$16>>2];
  $18 = $17 / 1.999969482421875;
  $19 = ((($1)) + 8|0);
  HEAPF32[$19>>2] = $18;
  $$sink = 4;
  $33 = (($2) + ($$sink)|0);
  return ($33|0);
 }
 return (0)|0;
}
function _UnrollFloatsToFloat($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$070 = 0.0, $$070$in = 0, $$07273 = 0, $$pn = 0, $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP32[$0>>2]|0;
 $5 = $4 >>> 3;
 $6 = $5 & 15;
 $7 = $4 >>> 10;
 $8 = $7 & 1;
 $9 = $4 >>> 14;
 $10 = $9 & 1;
 $11 = $4 >>> 7;
 $12 = $11 & 7;
 $13 = (_IsInkSpace($4)|0);
 $14 = ($13|0)!=(0);
 $15 = $14 ? 100.0 : 1.0;
 $16 = ($8|0)==($10|0);
 $$ = $16 ? 0 : $12;
 $17 = ($6|0)==(0);
 if (!($17)) {
  $18 = (_PixelSize($4)|0);
  $19 = (($3>>>0) / ($18>>>0))&-1;
  $20 = $4 & 4096;
  $21 = $4 & 8192;
  $22 = ($8|0)==(0);
  $23 = (($6) + -1)|0;
  $24 = ($20|0)==(0);
  $25 = $24 ? 1 : $19;
  $26 = ($21|0)!=(0);
  $$07273 = 0;
  while(1) {
   $27 = (($23) - ($$07273))|0;
   $28 = $22 ? $$07273 : $27;
   $29 = (($$07273) + ($$))|0;
   $$pn = Math_imul($29, $25)|0;
   $$070$in = (($2) + ($$pn<<2)|0);
   $$070 = +HEAPF32[$$070$in>>2];
   $30 = $$070 / $15;
   $31 = 1.0 - $30;
   $32 = $26 ? $31 : $30;
   $33 = (($1) + ($28<<2)|0);
   HEAPF32[$33>>2] = $32;
   $34 = (($$07273) + 1)|0;
   $exitcond = ($34|0)==($6|0);
   if ($exitcond) {
    break;
   } else {
    $$07273 = $34;
   }
  }
 }
 $35 = ($12|0)==(0);
 $36 = ($10|0)!=(0);
 $or$cond = $35 & $36;
 $37 = (($6) + -1)|0;
 if (!($or$cond)) {
  $42 = HEAP32[$0>>2]|0;
  $43 = $42 & 4096;
  $44 = ($43|0)==(0);
  $45 = (($6) + ($12))|0;
  $46 = $45 << 2;
  $$sink = $44 ? $46 : 4;
  $47 = (($2) + ($$sink)|0);
  return ($47|0);
 }
 $38 = (($1) + ($37<<2)|0);
 $39 = $37 << 2;
 $40 = ((($1)) + 4|0);
 $41 = HEAP32[$1>>2]|0;
 _memmove(($1|0),($40|0),($39|0))|0;
 HEAP32[$38>>2] = $41;
 $42 = HEAP32[$0>>2]|0;
 $43 = $42 & 4096;
 $44 = ($43|0)==(0);
 $45 = (($6) + ($12))|0;
 $46 = $45 << 2;
 $$sink = $44 ? $46 : 4;
 $47 = (($2) + ($$sink)|0);
 return ($47|0);
}
function _UnrollDoublesToFloat($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$070 = 0.0, $$070$in = 0, $$07273 = 0, $$pn = 0, $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP32[$0>>2]|0;
 $5 = $4 >>> 3;
 $6 = $5 & 15;
 $7 = $4 >>> 10;
 $8 = $7 & 1;
 $9 = $4 >>> 14;
 $10 = $9 & 1;
 $11 = $4 >>> 7;
 $12 = $11 & 7;
 $13 = (_IsInkSpace($4)|0);
 $14 = ($13|0)!=(0);
 $15 = $14 ? 100.0 : 1.0;
 $16 = ($8|0)==($10|0);
 $$ = $16 ? 0 : $12;
 $17 = ($6|0)==(0);
 if (!($17)) {
  $18 = (_PixelSize($4)|0);
  $19 = (($3>>>0) / ($18>>>0))&-1;
  $20 = $4 & 4096;
  $21 = $4 & 8192;
  $22 = ($8|0)==(0);
  $23 = (($6) + -1)|0;
  $24 = ($20|0)==(0);
  $25 = $24 ? 1 : $19;
  $26 = ($21|0)!=(0);
  $$07273 = 0;
  while(1) {
   $27 = (($23) - ($$07273))|0;
   $28 = $22 ? $$07273 : $27;
   $29 = (($$07273) + ($$))|0;
   $$pn = Math_imul($29, $25)|0;
   $$070$in = (($2) + ($$pn<<3)|0);
   $$070 = +HEAPF64[$$070$in>>3];
   $30 = $$070 / $15;
   $31 = 1.0 - $30;
   $32 = $26 ? $31 : $30;
   $33 = $32;
   $34 = (($1) + ($28<<2)|0);
   HEAPF32[$34>>2] = $33;
   $35 = (($$07273) + 1)|0;
   $exitcond = ($35|0)==($6|0);
   if ($exitcond) {
    break;
   } else {
    $$07273 = $35;
   }
  }
 }
 $36 = ($12|0)==(0);
 $37 = ($10|0)!=(0);
 $or$cond = $36 & $37;
 $38 = (($6) + -1)|0;
 if (!($or$cond)) {
  $43 = HEAP32[$0>>2]|0;
  $44 = $43 & 4096;
  $45 = ($44|0)==(0);
  $46 = (($6) + ($12))|0;
  $47 = $46 << 3;
  $$sink = $45 ? $47 : 8;
  $48 = (($2) + ($$sink)|0);
  return ($48|0);
 }
 $39 = (($1) + ($38<<2)|0);
 $40 = $38 << 2;
 $41 = ((($1)) + 4|0);
 $42 = HEAP32[$1>>2]|0;
 _memmove(($1|0),($41|0),($40|0))|0;
 HEAP32[$39>>2] = $42;
 $43 = HEAP32[$0>>2]|0;
 $44 = $43 & 4096;
 $45 = ($44|0)==(0);
 $46 = (($6) + ($12))|0;
 $47 = $46 << 3;
 $$sink = $45 ? $47 : 8;
 $48 = (($2) + ($$sink)|0);
 return ($48|0);
}
function _UnrollHalfToFloat($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$07275 = 0, $$sink = 0, $$sink74 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP32[$0>>2]|0;
 $5 = $4 >>> 3;
 $6 = $5 & 15;
 $7 = $4 >>> 10;
 $8 = $7 & 1;
 $9 = $4 >>> 14;
 $10 = $9 & 1;
 $11 = $4 >>> 7;
 $12 = $11 & 7;
 $13 = (_IsInkSpace($4)|0);
 $14 = ($13|0)!=(0);
 $15 = $14 ? 100.0 : 1.0;
 $16 = ($8|0)==($10|0);
 $$ = $16 ? 0 : $12;
 $17 = ($6|0)==(0);
 if (!($17)) {
  $18 = ((($0)) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (_PixelSize($19)|0);
  $21 = (($3>>>0) / ($20>>>0))&-1;
  $22 = $4 & 4096;
  $23 = $4 & 8192;
  $24 = ($8|0)==(0);
  $25 = (($6) + -1)|0;
  $26 = ($22|0)==(0);
  $27 = $26 ? 1 : $21;
  $28 = ($23|0)!=(0);
  $$07275 = 0;
  while(1) {
   $29 = (($25) - ($$07275))|0;
   $30 = $24 ? $$07275 : $29;
   $31 = (($$07275) + ($$))|0;
   $$sink = Math_imul($31, $27)|0;
   $32 = (($2) + ($$sink<<1)|0);
   $33 = HEAP16[$32>>1]|0;
   $34 = (+__cmsHalf2Float($33));
   $35 = $34 / $15;
   $36 = 1.0 - $35;
   $37 = $28 ? $36 : $35;
   $38 = (($1) + ($30<<2)|0);
   HEAPF32[$38>>2] = $37;
   $39 = (($$07275) + 1)|0;
   $exitcond = ($39|0)==($6|0);
   if ($exitcond) {
    break;
   } else {
    $$07275 = $39;
   }
  }
 }
 $40 = ($12|0)==(0);
 $41 = ($10|0)!=(0);
 $or$cond = $40 & $41;
 $42 = (($6) + -1)|0;
 if (!($or$cond)) {
  $47 = HEAP32[$0>>2]|0;
  $48 = $47 & 4096;
  $49 = ($48|0)==(0);
  $50 = (($6) + ($12))|0;
  $51 = $50 << 1;
  $$sink74 = $49 ? $51 : 2;
  $52 = (($2) + ($$sink74)|0);
  return ($52|0);
 }
 $43 = (($1) + ($42<<2)|0);
 $44 = $42 << 2;
 $45 = ((($1)) + 4|0);
 $46 = HEAP32[$1>>2]|0;
 _memmove(($1|0),($45|0),($44|0))|0;
 HEAP32[$43>>2] = $46;
 $47 = HEAP32[$0>>2]|0;
 $48 = $47 & 4096;
 $49 = ($48|0)==(0);
 $50 = (($6) + ($12))|0;
 $51 = $50 << 1;
 $$sink74 = $49 ? $51 : 2;
 $52 = (($2) + ($$sink74)|0);
 return ($52|0);
}
function _UnrollLabDoubleTo16($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $4 = sp;
 $5 = HEAP32[$0>>2]|0;
 $6 = $5 & 4096;
 $7 = ($6|0)==(0);
 if ($7) {
  _cmsFloat2LabEncoded($1,$2);
  $17 = HEAP32[$0>>2]|0;
  $18 = $17 >>> 4;
  $19 = $18 & 56;
  $20 = (($19) + 24)|0;
  $21 = (($2) + ($20)|0);
  $$0 = $21;
  STACKTOP = sp;return ($$0|0);
 } else {
  $8 = (($2) + ($3)|0);
  $9 = $3 << 1;
  $10 = (($2) + ($9)|0);
  $11 = +HEAPF64[$2>>3];
  HEAPF64[$4>>3] = $11;
  $12 = +HEAPF64[$8>>3];
  $13 = ((($4)) + 8|0);
  HEAPF64[$13>>3] = $12;
  $14 = +HEAPF64[$10>>3];
  $15 = ((($4)) + 16|0);
  HEAPF64[$15>>3] = $14;
  _cmsFloat2LabEncoded($1,$4);
  $16 = ((($2)) + 8|0);
  $$0 = $16;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _UnrollXYZDoubleTo16($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $4 = sp;
 $5 = HEAP32[$0>>2]|0;
 $6 = $5 & 4096;
 $7 = ($6|0)==(0);
 if ($7) {
  _cmsFloat2XYZEncoded($1,$2);
  $17 = HEAP32[$0>>2]|0;
  $18 = $17 >>> 4;
  $19 = $18 & 56;
  $20 = (($19) + 24)|0;
  $21 = (($2) + ($20)|0);
  $$0 = $21;
  STACKTOP = sp;return ($$0|0);
 } else {
  $8 = (($2) + ($3)|0);
  $9 = $3 << 1;
  $10 = (($2) + ($9)|0);
  $11 = +HEAPF64[$2>>3];
  HEAPF64[$4>>3] = $11;
  $12 = +HEAPF64[$8>>3];
  $13 = ((($4)) + 8|0);
  HEAPF64[$13>>3] = $12;
  $14 = +HEAPF64[$10>>3];
  $15 = ((($4)) + 16|0);
  HEAPF64[$15>>3] = $14;
  _cmsFloat2XYZEncoded($1,$4);
  $16 = ((($2)) + 8|0);
  $$0 = $16;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _UnrollLabFloatTo16($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $4 = sp;
 $5 = HEAP32[$0>>2]|0;
 $6 = $5 & 4096;
 $7 = ($6|0)==(0);
 $8 = +HEAPF32[$2>>2];
 $9 = $8;
 HEAPF64[$4>>3] = $9;
 if ($7) {
  $19 = ((($2)) + 4|0);
  $20 = +HEAPF32[$19>>2];
  $21 = $20;
  $22 = ((($4)) + 8|0);
  HEAPF64[$22>>3] = $21;
  $23 = ((($2)) + 8|0);
  $24 = +HEAPF32[$23>>2];
  $25 = $24;
  $26 = ((($4)) + 16|0);
  HEAPF64[$26>>3] = $25;
  _cmsFloat2LabEncoded($1,$4);
  $27 = HEAP32[$0>>2]|0;
  $28 = $27 >>> 5;
  $29 = $28 & 28;
  $30 = (($29) + 12)|0;
  $$sink = $30;
  $31 = (($2) + ($$sink)|0);
  STACKTOP = sp;return ($31|0);
 } else {
  $10 = (($2) + ($3)|0);
  $11 = $3 << 1;
  $12 = (($2) + ($11)|0);
  $13 = +HEAPF32[$10>>2];
  $14 = $13;
  $15 = ((($4)) + 8|0);
  HEAPF64[$15>>3] = $14;
  $16 = +HEAPF32[$12>>2];
  $17 = $16;
  $18 = ((($4)) + 16|0);
  HEAPF64[$18>>3] = $17;
  _cmsFloat2LabEncoded($1,$4);
  $$sink = 4;
  $31 = (($2) + ($$sink)|0);
  STACKTOP = sp;return ($31|0);
 }
 return (0)|0;
}
function _UnrollXYZFloatTo16($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $4 = sp;
 $5 = HEAP32[$0>>2]|0;
 $6 = $5 & 4096;
 $7 = ($6|0)==(0);
 if ($7) {
  $20 = +HEAPF32[$2>>2];
  $21 = $20;
  HEAPF64[$4>>3] = $21;
  $22 = ((($2)) + 4|0);
  $23 = +HEAPF32[$22>>2];
  $24 = $23;
  $25 = ((($4)) + 8|0);
  HEAPF64[$25>>3] = $24;
  $26 = ((($2)) + 8|0);
  $27 = +HEAPF32[$26>>2];
  $28 = $27;
  $29 = ((($4)) + 16|0);
  HEAPF64[$29>>3] = $28;
  _cmsFloat2XYZEncoded($1,$4);
  $30 = HEAP32[$0>>2]|0;
  $31 = $30 >>> 5;
  $32 = $31 & 28;
  $33 = (($32) + 12)|0;
  $34 = (($2) + ($33)|0);
  $$0 = $34;
  STACKTOP = sp;return ($$0|0);
 } else {
  $8 = (($2) + ($3)|0);
  $9 = $3 << 1;
  $10 = (($2) + ($9)|0);
  $11 = +HEAPF32[$2>>2];
  $12 = $11;
  HEAPF64[$4>>3] = $12;
  $13 = +HEAPF32[$8>>2];
  $14 = $13;
  $15 = ((($4)) + 8|0);
  HEAPF64[$15>>3] = $14;
  $16 = +HEAPF32[$10>>2];
  $17 = $16;
  $18 = ((($4)) + 16|0);
  HEAPF64[$18>>3] = $17;
  _cmsFloat2XYZEncoded($1,$4);
  $19 = ((($2)) + 4|0);
  $$0 = $19;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _UnrollDouble1Chan($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = +HEAPF64[$2>>3];
 $5 = $4 * 65535.0;
 $6 = (__cmsQuickSaturateWord_387($5)|0);
 $7 = ((($1)) + 4|0);
 HEAP16[$7>>1] = $6;
 $8 = ((($1)) + 2|0);
 HEAP16[$8>>1] = $6;
 HEAP16[$1>>1] = $6;
 $9 = ((($2)) + 8|0);
 return ($9|0);
}
function _UnrollDoubleTo16($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$073 = 0.0, $$073$in = 0.0, $$073$in$in = 0.0, $$073$in$in$in = 0, $$07578 = 0, $$77 = 0, $$pn = 0, $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $or$cond = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP32[$0>>2]|0;
 $5 = $4 >>> 3;
 $6 = $5 & 15;
 $7 = $4 >>> 10;
 $8 = $7 & 1;
 $9 = $4 >>> 14;
 $10 = $9 & 1;
 $11 = $4 >>> 7;
 $12 = $11 & 7;
 $13 = (_IsInkSpace($4)|0);
 $14 = ($13|0)!=(0);
 $15 = $14 ? 655.35000000000002 : 65535.0;
 $16 = ($8|0)==($10|0);
 $$ = $16 ? 0 : $12;
 $17 = ($6|0)==(0);
 if (!($17)) {
  $18 = (_PixelSize($4)|0);
  $19 = (($3>>>0) / ($18>>>0))&-1;
  $20 = $4 & 4096;
  $21 = ($8|0)==(0);
  $22 = (($6) + -1)|0;
  $23 = ($20|0)==(0);
  $24 = $23 ? 1 : $19;
  $25 = $4 << 18;
  $sext = $25 >> 31;
  $26 = $sext&65535;
  $$07578 = 0;
  while(1) {
   $27 = (($22) - ($$07578))|0;
   $28 = $21 ? $$07578 : $27;
   $29 = (($$07578) + ($$))|0;
   $$pn = Math_imul($29, $24)|0;
   $$073$in$in$in = (($2) + ($$pn<<3)|0);
   $$073$in$in = +HEAPF64[$$073$in$in$in>>3];
   $$073$in = $$073$in$in;
   $$073 = $$073$in;
   $30 = $15 * $$073;
   $31 = (__cmsQuickSaturateWord_387($30)|0);
   $$77 = $31 ^ $26;
   $32 = (($1) + ($28<<1)|0);
   HEAP16[$32>>1] = $$77;
   $33 = (($$07578) + 1)|0;
   $exitcond = ($33|0)==($6|0);
   if ($exitcond) {
    break;
   } else {
    $$07578 = $33;
   }
  }
 }
 $34 = ($12|0)==(0);
 $35 = ($10|0)!=(0);
 $or$cond = $34 & $35;
 $36 = (($6) + -1)|0;
 if (!($or$cond)) {
  $41 = HEAP32[$0>>2]|0;
  $42 = $41 & 4096;
  $43 = ($42|0)==(0);
  $44 = (($6) + ($12))|0;
  $45 = $44 << 3;
  $$sink = $43 ? $45 : 8;
  $46 = (($2) + ($$sink)|0);
  return ($46|0);
 }
 $37 = (($1) + ($36<<1)|0);
 $38 = $36 << 1;
 $39 = ((($1)) + 2|0);
 $40 = HEAP16[$1>>1]|0;
 _memmove(($1|0),($39|0),($38|0))|0;
 HEAP16[$37>>1] = $40;
 $41 = HEAP32[$0>>2]|0;
 $42 = $41 & 4096;
 $43 = ($42|0)==(0);
 $44 = (($6) + ($12))|0;
 $45 = $44 << 3;
 $$sink = $43 ? $45 : 8;
 $46 = (($2) + ($$sink)|0);
 return ($46|0);
}
function _UnrollFloatTo16($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$073 = 0.0, $$073$in = 0, $$07578 = 0, $$77 = 0, $$pn = 0, $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $or$cond = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP32[$0>>2]|0;
 $5 = $4 >>> 3;
 $6 = $5 & 15;
 $7 = $4 >>> 10;
 $8 = $7 & 1;
 $9 = $4 >>> 14;
 $10 = $9 & 1;
 $11 = $4 >>> 7;
 $12 = $11 & 7;
 $13 = (_IsInkSpace($4)|0);
 $14 = ($13|0)!=(0);
 $15 = $14 ? 655.35000000000002 : 65535.0;
 $16 = ($8|0)==($10|0);
 $$ = $16 ? 0 : $12;
 $17 = ($6|0)==(0);
 if (!($17)) {
  $18 = (_PixelSize($4)|0);
  $19 = (($3>>>0) / ($18>>>0))&-1;
  $20 = $4 & 4096;
  $21 = ($8|0)==(0);
  $22 = (($6) + -1)|0;
  $23 = ($20|0)==(0);
  $24 = $23 ? 1 : $19;
  $25 = $4 << 18;
  $sext = $25 >> 31;
  $26 = $sext&65535;
  $$07578 = 0;
  while(1) {
   $27 = (($22) - ($$07578))|0;
   $28 = $21 ? $$07578 : $27;
   $29 = (($$07578) + ($$))|0;
   $$pn = Math_imul($29, $24)|0;
   $$073$in = (($2) + ($$pn<<2)|0);
   $$073 = +HEAPF32[$$073$in>>2];
   $30 = $$073;
   $31 = $15 * $30;
   $32 = (__cmsQuickSaturateWord_387($31)|0);
   $$77 = $32 ^ $26;
   $33 = (($1) + ($28<<1)|0);
   HEAP16[$33>>1] = $$77;
   $34 = (($$07578) + 1)|0;
   $exitcond = ($34|0)==($6|0);
   if ($exitcond) {
    break;
   } else {
    $$07578 = $34;
   }
  }
 }
 $35 = ($12|0)==(0);
 $36 = ($10|0)!=(0);
 $or$cond = $35 & $36;
 $37 = (($6) + -1)|0;
 if (!($or$cond)) {
  $42 = HEAP32[$0>>2]|0;
  $43 = $42 & 4096;
  $44 = ($43|0)==(0);
  $45 = (($6) + ($12))|0;
  $46 = $45 << 2;
  $$sink = $44 ? $46 : 4;
  $47 = (($2) + ($$sink)|0);
  return ($47|0);
 }
 $38 = (($1) + ($37<<1)|0);
 $39 = $37 << 1;
 $40 = ((($1)) + 2|0);
 $41 = HEAP16[$1>>1]|0;
 _memmove(($1|0),($40|0),($39|0))|0;
 HEAP16[$38>>1] = $41;
 $42 = HEAP32[$0>>2]|0;
 $43 = $42 & 4096;
 $44 = ($43|0)==(0);
 $45 = (($6) + ($12))|0;
 $46 = $45 << 2;
 $$sink = $44 ? $46 : 4;
 $47 = (($2) + ($$sink)|0);
 return ($47|0);
}
function _UnrollHalfTo16($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$07377 = 0, $$75 = 0.0, $$sink = 0, $$sink76 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP32[$0>>2]|0;
 $5 = $4 >>> 3;
 $6 = $5 & 15;
 $7 = $4 >>> 10;
 $8 = $7 & 1;
 $9 = $4 >>> 14;
 $10 = $9 & 1;
 $11 = $4 >>> 7;
 $12 = $11 & 7;
 $13 = (_IsInkSpace($4)|0);
 $14 = ($13|0)!=(0);
 $15 = $14 ? 655.3499755859375 : 65535.0;
 $16 = ($8|0)==($10|0);
 $$ = $16 ? 0 : $12;
 $17 = ($6|0)==(0);
 if (!($17)) {
  $18 = ((($0)) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (_PixelSize($19)|0);
  $21 = (($3>>>0) / ($20>>>0))&-1;
  $22 = $4 & 4096;
  $23 = $4 & 8192;
  $24 = ($8|0)==(0);
  $25 = (($6) + -1)|0;
  $26 = ($22|0)==(0);
  $27 = $26 ? 1 : $21;
  $28 = ($23|0)==(0);
  $$07377 = 0;
  while(1) {
   $29 = (($25) - ($$07377))|0;
   $30 = $24 ? $$07377 : $29;
   $31 = (($$07377) + ($$))|0;
   $$sink = Math_imul($31, $27)|0;
   $32 = (($2) + ($$sink<<1)|0);
   $33 = HEAP16[$32>>1]|0;
   $34 = (+__cmsHalf2Float($33));
   $35 = $15 - $34;
   $$75 = $28 ? $34 : $35;
   $36 = $15 * $$75;
   $37 = $36;
   $38 = (__cmsQuickSaturateWord_387($37)|0);
   $39 = (($1) + ($30<<1)|0);
   HEAP16[$39>>1] = $38;
   $40 = (($$07377) + 1)|0;
   $exitcond = ($40|0)==($6|0);
   if ($exitcond) {
    break;
   } else {
    $$07377 = $40;
   }
  }
 }
 $41 = ($12|0)==(0);
 $42 = ($10|0)!=(0);
 $or$cond = $41 & $42;
 $43 = (($6) + -1)|0;
 if (!($or$cond)) {
  $48 = HEAP32[$0>>2]|0;
  $49 = $48 & 4096;
  $50 = ($49|0)==(0);
  $51 = (($6) + ($12))|0;
  $52 = $51 << 1;
  $$sink76 = $50 ? $52 : 2;
  $53 = (($2) + ($$sink76)|0);
  return ($53|0);
 }
 $44 = (($1) + ($43<<1)|0);
 $45 = $43 << 1;
 $46 = ((($1)) + 2|0);
 $47 = HEAP16[$1>>1]|0;
 _memmove(($1|0),($46|0),($45|0))|0;
 HEAP16[$44>>1] = $47;
 $48 = HEAP32[$0>>2]|0;
 $49 = $48 & 4096;
 $50 = ($49|0)==(0);
 $51 = (($6) + ($12))|0;
 $52 = $51 << 1;
 $$sink76 = $50 ? $52 : 2;
 $53 = (($2) + ($$sink76)|0);
 return ($53|0);
}
function _Unroll1Byte($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP8[$2>>0]|0;
 $5 = $4&255;
 $6 = $5 << 8;
 $7 = $6 | $5;
 $8 = $7&65535;
 $9 = ((($1)) + 4|0);
 HEAP16[$9>>1] = $8;
 $10 = ((($1)) + 2|0);
 HEAP16[$10>>1] = $8;
 HEAP16[$1>>1] = $8;
 $11 = ((($2)) + 1|0);
 return ($11|0);
}
function _Unroll1ByteSkip1($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP8[$2>>0]|0;
 $5 = $4&255;
 $6 = $5 << 8;
 $7 = $6 | $5;
 $8 = $7&65535;
 $9 = ((($1)) + 4|0);
 HEAP16[$9>>1] = $8;
 $10 = ((($1)) + 2|0);
 HEAP16[$10>>1] = $8;
 HEAP16[$1>>1] = $8;
 $11 = ((($2)) + 2|0);
 return ($11|0);
}
function _Unroll1ByteSkip2($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP8[$2>>0]|0;
 $5 = $4&255;
 $6 = $5 << 8;
 $7 = $6 | $5;
 $8 = $7&65535;
 $9 = ((($1)) + 4|0);
 HEAP16[$9>>1] = $8;
 $10 = ((($1)) + 2|0);
 HEAP16[$10>>1] = $8;
 HEAP16[$1>>1] = $8;
 $11 = ((($2)) + 3|0);
 return ($11|0);
}
function _Unroll1ByteReversed($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP8[$2>>0]|0;
 $5 = $4&255;
 $6 = $5 << 8;
 $7 = $6 | $5;
 $8 = $7 ^ 65535;
 $9 = $8&65535;
 $10 = ((($1)) + 4|0);
 HEAP16[$10>>1] = $9;
 $11 = ((($1)) + 2|0);
 HEAP16[$11>>1] = $9;
 HEAP16[$1>>1] = $9;
 $12 = ((($2)) + 1|0);
 return ($12|0);
}
function _Unroll2Bytes($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP8[$2>>0]|0;
 $5 = $4&255;
 $6 = $5 << 8;
 $7 = $6 | $5;
 $8 = $7&65535;
 HEAP16[$1>>1] = $8;
 $9 = ((($2)) + 1|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $12 = $11 << 8;
 $13 = $12 | $11;
 $14 = $13&65535;
 $15 = ((($1)) + 2|0);
 HEAP16[$15>>1] = $14;
 $16 = ((($2)) + 2|0);
 return ($16|0);
}
function _UnrollLabV2_8($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP8[$2>>0]|0;
 $5 = $4&255;
 $6 = $5 << 8;
 $7 = $6 | $5;
 $8 = $7&65535;
 $9 = (_FomLabV2ToLabV4($8)|0);
 HEAP16[$1>>1] = $9;
 $10 = ((($2)) + 1|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = $12 << 8;
 $14 = $13 | $12;
 $15 = $14&65535;
 $16 = (_FomLabV2ToLabV4($15)|0);
 $17 = ((($1)) + 2|0);
 HEAP16[$17>>1] = $16;
 $18 = ((($2)) + 2|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19&255;
 $21 = $20 << 8;
 $22 = $21 | $20;
 $23 = $22&65535;
 $24 = (_FomLabV2ToLabV4($23)|0);
 $25 = ((($1)) + 4|0);
 HEAP16[$25>>1] = $24;
 $26 = ((($2)) + 3|0);
 return ($26|0);
}
function _UnrollALabV2_8($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($2)) + 1|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = $6 << 8;
 $8 = $7 | $6;
 $9 = $8&65535;
 $10 = (_FomLabV2ToLabV4($9)|0);
 HEAP16[$1>>1] = $10;
 $11 = ((($2)) + 2|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = $13 << 8;
 $15 = $14 | $13;
 $16 = $15&65535;
 $17 = (_FomLabV2ToLabV4($16)|0);
 $18 = ((($1)) + 2|0);
 HEAP16[$18>>1] = $17;
 $19 = ((($2)) + 3|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = $20&255;
 $22 = $21 << 8;
 $23 = $22 | $21;
 $24 = $23&65535;
 $25 = (_FomLabV2ToLabV4($24)|0);
 $26 = ((($1)) + 4|0);
 HEAP16[$26>>1] = $25;
 $27 = ((($2)) + 4|0);
 return ($27|0);
}
function _UnrollLabV2_16($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP16[$2>>1]|0;
 $5 = (_FomLabV2ToLabV4($4)|0);
 HEAP16[$1>>1] = $5;
 $6 = ((($2)) + 2|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = (_FomLabV2ToLabV4($7)|0);
 $9 = ((($1)) + 2|0);
 HEAP16[$9>>1] = $8;
 $10 = ((($2)) + 4|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = (_FomLabV2ToLabV4($11)|0);
 $13 = ((($1)) + 4|0);
 HEAP16[$13>>1] = $12;
 $14 = ((($2)) + 6|0);
 return ($14|0);
}
function _Unroll3Bytes($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP8[$2>>0]|0;
 $5 = $4&255;
 $6 = $5 << 8;
 $7 = $6 | $5;
 $8 = $7&65535;
 HEAP16[$1>>1] = $8;
 $9 = ((($2)) + 1|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $12 = $11 << 8;
 $13 = $12 | $11;
 $14 = $13&65535;
 $15 = ((($1)) + 2|0);
 HEAP16[$15>>1] = $14;
 $16 = ((($2)) + 2|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&255;
 $19 = $18 << 8;
 $20 = $19 | $18;
 $21 = $20&65535;
 $22 = ((($1)) + 4|0);
 HEAP16[$22>>1] = $21;
 $23 = ((($2)) + 3|0);
 return ($23|0);
}
function _Unroll3BytesSwap($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP8[$2>>0]|0;
 $5 = $4&255;
 $6 = $5 << 8;
 $7 = $6 | $5;
 $8 = $7&65535;
 $9 = ((($1)) + 4|0);
 HEAP16[$9>>1] = $8;
 $10 = ((($2)) + 1|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = $12 << 8;
 $14 = $13 | $12;
 $15 = $14&65535;
 $16 = ((($1)) + 2|0);
 HEAP16[$16>>1] = $15;
 $17 = ((($2)) + 2|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = $18&255;
 $20 = $19 << 8;
 $21 = $20 | $19;
 $22 = $21&65535;
 HEAP16[$1>>1] = $22;
 $23 = ((($2)) + 3|0);
 return ($23|0);
}
function _Unroll3BytesSkip1Swap($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($2)) + 1|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = $6 << 8;
 $8 = $7 | $6;
 $9 = $8&65535;
 $10 = ((($1)) + 4|0);
 HEAP16[$10>>1] = $9;
 $11 = ((($2)) + 2|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = $13 << 8;
 $15 = $14 | $13;
 $16 = $15&65535;
 $17 = ((($1)) + 2|0);
 HEAP16[$17>>1] = $16;
 $18 = ((($2)) + 3|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19&255;
 $21 = $20 << 8;
 $22 = $21 | $20;
 $23 = $22&65535;
 HEAP16[$1>>1] = $23;
 $24 = ((($2)) + 4|0);
 return ($24|0);
}
function _Unroll3BytesSkip1SwapFirst($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($2)) + 1|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = $6 << 8;
 $8 = $7 | $6;
 $9 = $8&65535;
 HEAP16[$1>>1] = $9;
 $10 = ((($2)) + 2|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = $12 << 8;
 $14 = $13 | $12;
 $15 = $14&65535;
 $16 = ((($1)) + 2|0);
 HEAP16[$16>>1] = $15;
 $17 = ((($2)) + 3|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = $18&255;
 $20 = $19 << 8;
 $21 = $20 | $19;
 $22 = $21&65535;
 $23 = ((($1)) + 4|0);
 HEAP16[$23>>1] = $22;
 $24 = ((($2)) + 4|0);
 return ($24|0);
}
function _Unroll3BytesSkip1SwapSwapFirst($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP8[$2>>0]|0;
 $5 = $4&255;
 $6 = $5 << 8;
 $7 = $6 | $5;
 $8 = $7&65535;
 $9 = ((($1)) + 4|0);
 HEAP16[$9>>1] = $8;
 $10 = ((($2)) + 1|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = $12 << 8;
 $14 = $13 | $12;
 $15 = $14&65535;
 $16 = ((($1)) + 2|0);
 HEAP16[$16>>1] = $15;
 $17 = ((($2)) + 2|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = $18&255;
 $20 = $19 << 8;
 $21 = $20 | $19;
 $22 = $21&65535;
 HEAP16[$1>>1] = $22;
 $23 = ((($2)) + 4|0);
 return ($23|0);
}
function _Unroll4Bytes($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP8[$2>>0]|0;
 $5 = $4&255;
 $6 = $5 << 8;
 $7 = $6 | $5;
 $8 = $7&65535;
 HEAP16[$1>>1] = $8;
 $9 = ((($2)) + 1|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $12 = $11 << 8;
 $13 = $12 | $11;
 $14 = $13&65535;
 $15 = ((($1)) + 2|0);
 HEAP16[$15>>1] = $14;
 $16 = ((($2)) + 2|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&255;
 $19 = $18 << 8;
 $20 = $19 | $18;
 $21 = $20&65535;
 $22 = ((($1)) + 4|0);
 HEAP16[$22>>1] = $21;
 $23 = ((($2)) + 3|0);
 $24 = HEAP8[$23>>0]|0;
 $25 = $24&255;
 $26 = $25 << 8;
 $27 = $26 | $25;
 $28 = $27&65535;
 $29 = ((($1)) + 6|0);
 HEAP16[$29>>1] = $28;
 $30 = ((($2)) + 4|0);
 return ($30|0);
}
function _Unroll4BytesReverse($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP8[$2>>0]|0;
 $5 = $4 ^ -1;
 $6 = $5&255;
 $7 = $6 << 8;
 $8 = $7 | $6;
 $9 = $8&65535;
 HEAP16[$1>>1] = $9;
 $10 = ((($2)) + 1|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11 ^ -1;
 $13 = $12&255;
 $14 = $13 << 8;
 $15 = $14 | $13;
 $16 = $15&65535;
 $17 = ((($1)) + 2|0);
 HEAP16[$17>>1] = $16;
 $18 = ((($2)) + 2|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19 ^ -1;
 $21 = $20&255;
 $22 = $21 << 8;
 $23 = $22 | $21;
 $24 = $23&65535;
 $25 = ((($1)) + 4|0);
 HEAP16[$25>>1] = $24;
 $26 = ((($2)) + 3|0);
 $27 = HEAP8[$26>>0]|0;
 $28 = $27 ^ -1;
 $29 = $28&255;
 $30 = $29 << 8;
 $31 = $30 | $29;
 $32 = $31&65535;
 $33 = ((($1)) + 6|0);
 HEAP16[$33>>1] = $32;
 $34 = ((($2)) + 4|0);
 return ($34|0);
}
function _Unroll4BytesSwapFirst($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP8[$2>>0]|0;
 $5 = $4&255;
 $6 = $5 << 8;
 $7 = $6 | $5;
 $8 = $7&65535;
 $9 = ((($1)) + 6|0);
 HEAP16[$9>>1] = $8;
 $10 = ((($2)) + 1|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = $12 << 8;
 $14 = $13 | $12;
 $15 = $14&65535;
 HEAP16[$1>>1] = $15;
 $16 = ((($2)) + 2|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&255;
 $19 = $18 << 8;
 $20 = $19 | $18;
 $21 = $20&65535;
 $22 = ((($1)) + 2|0);
 HEAP16[$22>>1] = $21;
 $23 = ((($2)) + 3|0);
 $24 = HEAP8[$23>>0]|0;
 $25 = $24&255;
 $26 = $25 << 8;
 $27 = $26 | $25;
 $28 = $27&65535;
 $29 = ((($1)) + 4|0);
 HEAP16[$29>>1] = $28;
 $30 = ((($2)) + 4|0);
 return ($30|0);
}
function _Unroll4BytesSwap($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP8[$2>>0]|0;
 $5 = $4&255;
 $6 = $5 << 8;
 $7 = $6 | $5;
 $8 = $7&65535;
 $9 = ((($1)) + 6|0);
 HEAP16[$9>>1] = $8;
 $10 = ((($2)) + 1|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = $12 << 8;
 $14 = $13 | $12;
 $15 = $14&65535;
 $16 = ((($1)) + 4|0);
 HEAP16[$16>>1] = $15;
 $17 = ((($2)) + 2|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = $18&255;
 $20 = $19 << 8;
 $21 = $20 | $19;
 $22 = $21&65535;
 $23 = ((($1)) + 2|0);
 HEAP16[$23>>1] = $22;
 $24 = ((($2)) + 3|0);
 $25 = HEAP8[$24>>0]|0;
 $26 = $25&255;
 $27 = $26 << 8;
 $28 = $27 | $26;
 $29 = $28&65535;
 HEAP16[$1>>1] = $29;
 $30 = ((($2)) + 4|0);
 return ($30|0);
}
function _Unroll4BytesSwapSwapFirst($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP8[$2>>0]|0;
 $5 = $4&255;
 $6 = $5 << 8;
 $7 = $6 | $5;
 $8 = $7&65535;
 $9 = ((($1)) + 4|0);
 HEAP16[$9>>1] = $8;
 $10 = ((($2)) + 1|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = $12 << 8;
 $14 = $13 | $12;
 $15 = $14&65535;
 $16 = ((($1)) + 2|0);
 HEAP16[$16>>1] = $15;
 $17 = ((($2)) + 2|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = $18&255;
 $20 = $19 << 8;
 $21 = $20 | $19;
 $22 = $21&65535;
 HEAP16[$1>>1] = $22;
 $23 = ((($2)) + 3|0);
 $24 = HEAP8[$23>>0]|0;
 $25 = $24&255;
 $26 = $25 << 8;
 $27 = $26 | $25;
 $28 = $27&65535;
 $29 = ((($1)) + 6|0);
 HEAP16[$29>>1] = $28;
 $30 = ((($2)) + 4|0);
 return ($30|0);
}
function _UnrollPlanarBytes($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$04042 = 0, $$143 = 0, $$41 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP32[$0>>2]|0;
 $5 = $4 >>> 3;
 $6 = $5 & 15;
 $7 = $4 >>> 10;
 $8 = $7 & 1;
 $9 = ($6|0)==(0);
 if ($9) {
  $32 = ((($2)) + 1|0);
  return ($32|0);
 }
 $10 = $4 >>> 14;
 $11 = $10 & 1;
 $12 = ($8|0)==($11|0);
 $13 = $4 >>> 7;
 $14 = $13 & 7;
 $15 = Math_imul($14, $3)|0;
 $16 = (($2) + ($15)|0);
 $$41 = $12 ? $2 : $16;
 $17 = $4 & 8192;
 $18 = ($8|0)==(0);
 $19 = (($6) + -1)|0;
 $20 = ($17|0)==(0);
 $$04042 = 0;$$143 = $$41;
 while(1) {
  $21 = (($19) - ($$04042))|0;
  $22 = $18 ? $$04042 : $21;
  $23 = HEAP8[$$143>>0]|0;
  $24 = $23&255;
  $25 = $24 << 8;
  $26 = $25 | $24;
  $27 = $26 ^ 65535;
  $$ = $20 ? $26 : $27;
  $28 = $$&65535;
  $29 = (($1) + ($22<<1)|0);
  HEAP16[$29>>1] = $28;
  $30 = (($$143) + ($3)|0);
  $31 = (($$04042) + 1)|0;
  $exitcond = ($31|0)==($6|0);
  if ($exitcond) {
   break;
  } else {
   $$04042 = $31;$$143 = $30;
  }
 }
 $32 = ((($2)) + 1|0);
 return ($32|0);
}
function _UnrollChunkyBytes($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$05759 = 0, $$1$ = 0, $$1$lcssa = 0, $$160 = 0, $$58 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $exitcond = 0, $or$cond = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP32[$0>>2]|0;
 $5 = $4 >>> 3;
 $6 = $5 & 15;
 $7 = $4 >>> 10;
 $8 = $7 & 1;
 $9 = $4 >>> 14;
 $10 = $9 & 1;
 $11 = $4 >>> 7;
 $12 = $11 & 7;
 $13 = ($8|0)!=($10|0);
 $14 = (($2) + ($12)|0);
 $$ = $13 ? $14 : $2;
 $15 = ($6|0)==(0);
 if ($15) {
  $$1$lcssa = $$;
 } else {
  $16 = $4 & 8192;
  $17 = ($8|0)==(0);
  $18 = (($6) + -1)|0;
  $19 = ($16|0)==(0);
  $$05759 = 0;$$160 = $$;
  while(1) {
   $20 = (($18) - ($$05759))|0;
   $21 = $17 ? $$05759 : $20;
   $22 = HEAP8[$$160>>0]|0;
   $23 = $22&255;
   $24 = $23 << 8;
   $25 = $24 | $23;
   $26 = $25 ^ 65535;
   $$58 = $19 ? $25 : $26;
   $27 = $$58&65535;
   $28 = (($1) + ($21<<1)|0);
   HEAP16[$28>>1] = $27;
   $29 = ((($$160)) + 1|0);
   $30 = (($$05759) + 1)|0;
   $exitcond = ($30|0)==($6|0);
   if ($exitcond) {
    break;
   } else {
    $$05759 = $30;$$160 = $29;
   }
  }
  $scevgep = (($$) + ($6)|0);
  $$1$lcssa = $scevgep;
 }
 $31 = (($$1$lcssa) + ($12)|0);
 $$1$ = $13 ? $$1$lcssa : $31;
 $32 = ($12|0)==(0);
 $33 = ($10|0)!=(0);
 $or$cond = $32 & $33;
 $34 = (($6) + -1)|0;
 if (!($or$cond)) {
  return ($$1$|0);
 }
 $35 = (($1) + ($34<<1)|0);
 $36 = $34 << 1;
 $37 = ((($1)) + 2|0);
 $38 = HEAP16[$1>>1]|0;
 _memmove(($1|0),($37|0),($36|0))|0;
 HEAP16[$35>>1] = $38;
 return ($$1$|0);
}
function _Unroll1Word($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP16[$2>>1]|0;
 $5 = ((($1)) + 4|0);
 HEAP16[$5>>1] = $4;
 $6 = ((($1)) + 2|0);
 HEAP16[$6>>1] = $4;
 HEAP16[$1>>1] = $4;
 $7 = ((($2)) + 2|0);
 return ($7|0);
}
function _Unroll1WordReversed($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP16[$2>>1]|0;
 $5 = $4 ^ -1;
 $6 = ((($1)) + 4|0);
 HEAP16[$6>>1] = $5;
 $7 = ((($1)) + 2|0);
 HEAP16[$7>>1] = $5;
 HEAP16[$1>>1] = $5;
 $8 = ((($2)) + 2|0);
 return ($8|0);
}
function _Unroll1WordSkip3($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP16[$2>>1]|0;
 $5 = ((($1)) + 4|0);
 HEAP16[$5>>1] = $4;
 $6 = ((($1)) + 2|0);
 HEAP16[$6>>1] = $4;
 HEAP16[$1>>1] = $4;
 $7 = ((($2)) + 8|0);
 return ($7|0);
}
function _Unroll2Words($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP16[$2>>1]|0;
 HEAP16[$1>>1] = $4;
 $5 = ((($2)) + 2|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = ((($1)) + 2|0);
 HEAP16[$7>>1] = $6;
 $8 = ((($2)) + 4|0);
 return ($8|0);
}
function _Unroll3Words($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP16[$2>>1]|0;
 HEAP16[$1>>1] = $4;
 $5 = ((($2)) + 2|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = ((($1)) + 2|0);
 HEAP16[$7>>1] = $6;
 $8 = ((($2)) + 4|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = ((($1)) + 4|0);
 HEAP16[$10>>1] = $9;
 $11 = ((($2)) + 6|0);
 return ($11|0);
}
function _Unroll4Words($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP16[$2>>1]|0;
 HEAP16[$1>>1] = $4;
 $5 = ((($2)) + 2|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = ((($1)) + 2|0);
 HEAP16[$7>>1] = $6;
 $8 = ((($2)) + 4|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = ((($1)) + 4|0);
 HEAP16[$10>>1] = $9;
 $11 = ((($2)) + 6|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = ((($1)) + 6|0);
 HEAP16[$13>>1] = $12;
 $14 = ((($2)) + 8|0);
 return ($14|0);
}
function _Unroll3WordsSwap($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP16[$2>>1]|0;
 $5 = ((($1)) + 4|0);
 HEAP16[$5>>1] = $4;
 $6 = ((($2)) + 2|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = ((($1)) + 2|0);
 HEAP16[$8>>1] = $7;
 $9 = ((($2)) + 4|0);
 $10 = HEAP16[$9>>1]|0;
 HEAP16[$1>>1] = $10;
 $11 = ((($2)) + 6|0);
 return ($11|0);
}
function _Unroll3WordsSkip1SwapFirst($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($2)) + 2|0);
 $5 = HEAP16[$4>>1]|0;
 HEAP16[$1>>1] = $5;
 $6 = ((($2)) + 4|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = ((($1)) + 2|0);
 HEAP16[$8>>1] = $7;
 $9 = ((($2)) + 6|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = ((($1)) + 4|0);
 HEAP16[$11>>1] = $10;
 $12 = ((($2)) + 8|0);
 return ($12|0);
}
function _Unroll3WordsSkip1Swap($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($2)) + 2|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = ((($1)) + 4|0);
 HEAP16[$6>>1] = $5;
 $7 = ((($2)) + 4|0);
 $8 = HEAP16[$7>>1]|0;
 $9 = ((($1)) + 2|0);
 HEAP16[$9>>1] = $8;
 $10 = ((($2)) + 6|0);
 $11 = HEAP16[$10>>1]|0;
 HEAP16[$1>>1] = $11;
 $12 = ((($2)) + 8|0);
 return ($12|0);
}
function _Unroll4WordsReverse($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP16[$2>>1]|0;
 $5 = $4 ^ -1;
 HEAP16[$1>>1] = $5;
 $6 = ((($2)) + 2|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7 ^ -1;
 $9 = ((($1)) + 2|0);
 HEAP16[$9>>1] = $8;
 $10 = ((($2)) + 4|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = $11 ^ -1;
 $13 = ((($1)) + 4|0);
 HEAP16[$13>>1] = $12;
 $14 = ((($2)) + 6|0);
 $15 = HEAP16[$14>>1]|0;
 $16 = $15 ^ -1;
 $17 = ((($1)) + 6|0);
 HEAP16[$17>>1] = $16;
 $18 = ((($2)) + 8|0);
 return ($18|0);
}
function _Unroll4WordsSwapFirst($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP16[$2>>1]|0;
 $5 = ((($1)) + 6|0);
 HEAP16[$5>>1] = $4;
 $6 = ((($2)) + 2|0);
 $7 = HEAP16[$6>>1]|0;
 HEAP16[$1>>1] = $7;
 $8 = ((($2)) + 4|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = ((($1)) + 2|0);
 HEAP16[$10>>1] = $9;
 $11 = ((($2)) + 6|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = ((($1)) + 4|0);
 HEAP16[$13>>1] = $12;
 $14 = ((($2)) + 8|0);
 return ($14|0);
}
function _Unroll4WordsSwap($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP16[$2>>1]|0;
 $5 = ((($1)) + 6|0);
 HEAP16[$5>>1] = $4;
 $6 = ((($2)) + 2|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = ((($1)) + 4|0);
 HEAP16[$8>>1] = $7;
 $9 = ((($2)) + 4|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = ((($1)) + 2|0);
 HEAP16[$11>>1] = $10;
 $12 = ((($2)) + 6|0);
 $13 = HEAP16[$12>>1]|0;
 HEAP16[$1>>1] = $13;
 $14 = ((($2)) + 8|0);
 return ($14|0);
}
function _Unroll4WordsSwapSwapFirst($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP16[$2>>1]|0;
 $5 = ((($1)) + 4|0);
 HEAP16[$5>>1] = $4;
 $6 = ((($2)) + 2|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = ((($1)) + 2|0);
 HEAP16[$8>>1] = $7;
 $9 = ((($2)) + 4|0);
 $10 = HEAP16[$9>>1]|0;
 HEAP16[$1>>1] = $10;
 $11 = ((($2)) + 6|0);
 $12 = HEAP16[$11>>1]|0;
 $13 = ((($1)) + 6|0);
 HEAP16[$13>>1] = $12;
 $14 = ((($2)) + 8|0);
 return ($14|0);
}
function _UnrollPlanarWords($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$04243 = 0, $$144 = 0, $$rev = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $rev = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP32[$0>>2]|0;
 $5 = $4 >>> 3;
 $6 = $5 & 15;
 $7 = $4 & 1024;
 $8 = ($7|0)!=(0);
 $9 = ($6|0)==(0);
 if ($9) {
  $29 = ((($2)) + 2|0);
  return ($29|0);
 }
 $10 = $4 >>> 7;
 $11 = $10 & 7;
 $12 = Math_imul($11, $3)|0;
 $13 = (($2) + ($12)|0);
 $$ = $8 ? $13 : $2;
 $14 = $4 & 2048;
 $15 = $4 & 8192;
 $16 = (($6) + -1)|0;
 $17 = ($14|0)==(0);
 $18 = ($15|0)==(0);
 $$04243 = 0;$$144 = $$;
 while(1) {
  $19 = (($16) - ($$04243))|0;
  $20 = $8 ? $19 : $$04243;
  $21 = HEAP16[$$144>>1]|0;
  $rev = (_llvm_bswap_i16(($21|0))|0);
  $$rev = $17 ? $21 : $rev;
  $22 = $$rev&65535;
  $23 = $22 ^ 65535;
  $24 = $18 ? $22 : $23;
  $25 = $24&65535;
  $26 = (($1) + ($20<<1)|0);
  HEAP16[$26>>1] = $25;
  $27 = (($$144) + ($3)|0);
  $28 = (($$04243) + 1)|0;
  $exitcond = ($28|0)==($6|0);
  if ($exitcond) {
   break;
  } else {
   $$04243 = $28;$$144 = $27;
  }
 }
 $29 = ((($2)) + 2|0);
 return ($29|0);
}
function _UnrollAnyWords($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$06263 = 0, $$1$lcssa = 0, $$164 = 0, $$2 = 0, $$rev = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $or$cond = 0, $rev = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP32[$0>>2]|0;
 $5 = $4 >>> 3;
 $6 = $5 & 15;
 $7 = $4 >>> 10;
 $8 = $7 & 1;
 $9 = $4 >>> 14;
 $10 = $9 & 1;
 $11 = $4 >>> 7;
 $12 = $11 & 7;
 $13 = ($8|0)!=($10|0);
 $14 = $12 << 1;
 $15 = (($2) + ($14)|0);
 $$0 = $13 ? $15 : $2;
 $16 = ($6|0)==(0);
 if ($16) {
  $$1$lcssa = $$0;
 } else {
  $17 = $4 & 8192;
  $18 = $4 & 2048;
  $19 = ($8|0)==(0);
  $20 = (($6) + -1)|0;
  $21 = ($18|0)==(0);
  $22 = ($17|0)==(0);
  $23 = $6 << 1;
  $$06263 = 0;$$164 = $$0;
  while(1) {
   $24 = (($20) - ($$06263))|0;
   $25 = $19 ? $$06263 : $24;
   $26 = HEAP16[$$164>>1]|0;
   $rev = (_llvm_bswap_i16(($26|0))|0);
   $$rev = $21 ? $26 : $rev;
   $27 = $$rev&65535;
   $28 = $27 ^ 65535;
   $29 = $22 ? $27 : $28;
   $30 = $29&65535;
   $31 = (($1) + ($25<<1)|0);
   HEAP16[$31>>1] = $30;
   $32 = ((($$164)) + 2|0);
   $33 = (($$06263) + 1)|0;
   $exitcond = ($33|0)==($6|0);
   if ($exitcond) {
    break;
   } else {
    $$06263 = $33;$$164 = $32;
   }
  }
  $scevgep = (($$0) + ($23)|0);
  $$1$lcssa = $scevgep;
 }
 $34 = (($$1$lcssa) + ($14)|0);
 $$2 = $13 ? $$1$lcssa : $34;
 $35 = ($12|0)==(0);
 $36 = ($10|0)!=(0);
 $or$cond = $35 & $36;
 $37 = (($6) + -1)|0;
 if (!($or$cond)) {
  return ($$2|0);
 }
 $38 = (($1) + ($37<<1)|0);
 $39 = $37 << 1;
 $40 = ((($1)) + 2|0);
 $41 = HEAP16[$1>>1]|0;
 _memmove(($1|0),($40|0),($39|0))|0;
 HEAP16[$38>>1] = $41;
 return ($$2|0);
}
function _FomLabV2ToLabV4($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0&65535;
 $2 = $1 << 8;
 $3 = $2 | $1;
 $4 = $3 >>> 8;
 $5 = $4&65535;
 return ($5|0);
}
function __cmsQuickSaturateWord_387($0) {
 $0 = +$0;
 var $$0 = 0, $1 = 0.0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0 + 0.5;
 $2 = !($1 <= 0.0);
 if ($2) {
  $3 = !($1 >= 65535.0);
  if ($3) {
   $4 = (__cmsQuickFloorWord_388($1)|0);
   $$0 = $4;
  } else {
   $$0 = -1;
  }
 } else {
  $$0 = 0;
 }
 return ($$0|0);
}
function __cmsQuickFloorWord_388($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0 + -32767.0;
 $2 = (__cmsQuickFloor_389($1)|0);
 $3 = (($2) + 32767)|0;
 $4 = $3&65535;
 return ($4|0);
}
function __cmsQuickFloor_389($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0 + 103079215104.0;
 HEAPF64[tempDoublePtr>>3] = $1;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = $2 >> 16;
 return ($4|0);
}
function __cmsFormatterIsFloat($0) {
 $0 = $0|0;
 var $$lobit = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0 >>> 22;
 $$lobit = $1 & 1;
 return ($$lobit|0);
}
function __cmsFormatterIs8bit($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0 & 7;
 $2 = ($1|0)==(1);
 $3 = $2&1;
 return ($3|0);
}
function _cmsFormatterForColorspaceOfProfile($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_cmsGetColorSpace($0)|0);
 $4 = (__cmsLCMScolorSpace($3)|0);
 $5 = (_cmsChannelsOf($3)|0);
 $6 = ($2|0)!=(0);
 $7 = $6&1;
 $8 = $7 << 22;
 $9 = $4 << 16;
 $10 = $5 << 3;
 $11 = $8 | $1;
 $12 = $11 | $9;
 $13 = $12 | $10;
 return ($13|0);
}
function _cmsXYZ2xyY($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = +HEAPF64[$1>>3];
 $3 = ((($1)) + 8|0);
 $4 = +HEAPF64[$3>>3];
 $5 = $2 + $4;
 $6 = ((($1)) + 16|0);
 $7 = +HEAPF64[$6>>3];
 $8 = $5 + $7;
 $9 = 1.0 / $8;
 $10 = $2 * $9;
 HEAPF64[$0>>3] = $10;
 $11 = $4 * $9;
 $12 = ((($0)) + 8|0);
 HEAPF64[$12>>3] = $11;
 $13 = +HEAPF64[$3>>3];
 $14 = ((($0)) + 16|0);
 HEAPF64[$14>>3] = $13;
 return;
}
function _cmsxyY2XYZ($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = +HEAPF64[$1>>3];
 $3 = ((($1)) + 8|0);
 $4 = +HEAPF64[$3>>3];
 $5 = $2 / $4;
 $6 = ((($1)) + 16|0);
 $7 = +HEAPF64[$6>>3];
 $8 = $5 * $7;
 HEAPF64[$0>>3] = $8;
 $9 = ((($0)) + 8|0);
 HEAPF64[$9>>3] = $7;
 $10 = +HEAPF64[$1>>3];
 $11 = 1.0 - $10;
 $12 = +HEAPF64[$3>>3];
 $13 = $11 - $12;
 $14 = $13 / $12;
 $15 = $7 * $14;
 $16 = ((($0)) + 16|0);
 HEAPF64[$16>>3] = $15;
 return;
}
function _cmsXYZ2Lab($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0;
 var $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0|0);
 if ($3) {
  $4 = (_cmsD50_XYZ()|0);
  $$0 = $4;
 } else {
  $$0 = $0;
 }
 $5 = +HEAPF64[$2>>3];
 $6 = +HEAPF64[$$0>>3];
 $7 = $5 / $6;
 $8 = (+_f($7));
 $9 = ((($2)) + 8|0);
 $10 = +HEAPF64[$9>>3];
 $11 = ((($$0)) + 8|0);
 $12 = +HEAPF64[$11>>3];
 $13 = $10 / $12;
 $14 = (+_f($13));
 $15 = ((($2)) + 16|0);
 $16 = +HEAPF64[$15>>3];
 $17 = ((($$0)) + 16|0);
 $18 = +HEAPF64[$17>>3];
 $19 = $16 / $18;
 $20 = (+_f($19));
 $21 = $14 * 116.0;
 $22 = $21 + -16.0;
 HEAPF64[$1>>3] = $22;
 $23 = $8 - $14;
 $24 = $23 * 500.0;
 $25 = ((($1)) + 8|0);
 HEAPF64[$25>>3] = $24;
 $26 = $14 - $20;
 $27 = $26 * 200.0;
 $28 = ((($1)) + 16|0);
 HEAPF64[$28>>3] = $27;
 return;
}
function _f($0) {
 $0 = +$0;
 var $$0 = 0.0, $1 = 0, $2 = 0.0, $3 = 0.0, $4 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = !($0 <= 0.0088564516790356311);
 if ($1) {
  $4 = (+Math_pow((+$0),0.33333333333333331));
  $$0 = $4;
  return (+$$0);
 } else {
  $2 = $0 * 7.7870370370370372;
  $3 = $2 + 0.13793103448275862;
  $$0 = $3;
  return (+$$0);
 }
 return +(0.0);
}
function _cmsLab2XYZ($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0;
 var $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0|0);
 if ($3) {
  $4 = (_cmsD50_XYZ()|0);
  $$0 = $4;
 } else {
  $$0 = $0;
 }
 $5 = +HEAPF64[$2>>3];
 $6 = $5 + 16.0;
 $7 = $6 / 116.0;
 $8 = ((($2)) + 8|0);
 $9 = +HEAPF64[$8>>3];
 $10 = $9 * 0.002;
 $11 = $7 + $10;
 $12 = ((($2)) + 16|0);
 $13 = +HEAPF64[$12>>3];
 $14 = $13 * 0.0050000000000000001;
 $15 = $7 - $14;
 $16 = (+_f_1($11));
 $17 = +HEAPF64[$$0>>3];
 $18 = $16 * $17;
 HEAPF64[$1>>3] = $18;
 $19 = (+_f_1($7));
 $20 = ((($$0)) + 8|0);
 $21 = +HEAPF64[$20>>3];
 $22 = $19 * $21;
 $23 = ((($1)) + 8|0);
 HEAPF64[$23>>3] = $22;
 $24 = (+_f_1($15));
 $25 = ((($$0)) + 16|0);
 $26 = +HEAPF64[$25>>3];
 $27 = $24 * $26;
 $28 = ((($1)) + 16|0);
 HEAPF64[$28>>3] = $27;
 return;
}
function _f_1($0) {
 $0 = +$0;
 var $$0 = 0.0, $1 = 0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = !($0 <= 0.20689655172413793);
 $2 = $0 + -0.13793103448275862;
 $3 = $2 * 0.12841854934601665;
 $4 = $0 * $0;
 $5 = $4 * $0;
 $$0 = $1 ? $5 : $3;
 return (+$$0);
}
function _cmsLabEncoded2Float($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0.0, $11 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP16[$1>>1]|0;
 $3 = (+_L2float4($2));
 HEAPF64[$0>>3] = $3;
 $4 = ((($1)) + 2|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = (+_ab2float4($5));
 $7 = ((($0)) + 8|0);
 HEAPF64[$7>>3] = $6;
 $8 = ((($1)) + 4|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = (+_ab2float4($9));
 $11 = ((($0)) + 16|0);
 HEAPF64[$11>>3] = $10;
 return;
}
function _L2float4($0) {
 $0 = $0|0;
 var $1 = 0.0, $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (+($0&65535));
 $2 = $1 / 655.35000000000002;
 return (+$2);
}
function _ab2float4($0) {
 $0 = $0|0;
 var $1 = 0.0, $2 = 0.0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (+($0&65535));
 $2 = $1 / 257.0;
 $3 = $2 + -128.0;
 return (+$3);
}
function __cmsQuickSaturateWord_406($0) {
 $0 = +$0;
 var $$0 = 0, $1 = 0.0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0 + 0.5;
 $2 = !($1 <= 0.0);
 if ($2) {
  $3 = !($1 >= 65535.0);
  if ($3) {
   $4 = (__cmsQuickFloorWord_407($1)|0);
   $$0 = $4;
  } else {
   $$0 = -1;
  }
 } else {
  $$0 = 0;
 }
 return ($$0|0);
}
function __cmsQuickFloorWord_407($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0 + -32767.0;
 $2 = (__cmsQuickFloor_408($1)|0);
 $3 = (($2) + 32767)|0;
 $4 = $3&65535;
 return ($4|0);
}
function __cmsQuickFloor_408($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0 + 103079215104.0;
 HEAPF64[tempDoublePtr>>3] = $1;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = $2 >> 16;
 return ($4|0);
}
function _cmsFloat2LabEncoded($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = +HEAPF64[$1>>3];
 $3 = (+_Clamp_L_doubleV4($2));
 $4 = ((($1)) + 8|0);
 $5 = +HEAPF64[$4>>3];
 $6 = (+_Clamp_ab_doubleV4($5));
 $7 = ((($1)) + 16|0);
 $8 = +HEAPF64[$7>>3];
 $9 = (+_Clamp_ab_doubleV4($8));
 $10 = (_L2Fix4($3)|0);
 HEAP16[$0>>1] = $10;
 $11 = (_ab2Fix4($6)|0);
 $12 = ((($0)) + 2|0);
 HEAP16[$12>>1] = $11;
 $13 = (_ab2Fix4($9)|0);
 $14 = ((($0)) + 4|0);
 HEAP16[$14>>1] = $13;
 return;
}
function _Clamp_L_doubleV4($0) {
 $0 = +$0;
 var $$0 = 0.0, $$1 = 0.0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0 < 0.0;
 $$0 = $1 ? 0.0 : $0;
 $2 = $$0 > 100.0;
 $$1 = $2 ? 100.0 : $$0;
 return (+$$1);
}
function _Clamp_ab_doubleV4($0) {
 $0 = +$0;
 var $$0 = 0.0, $$1 = 0.0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0 < -128.0;
 $$0 = $1 ? -128.0 : $0;
 $2 = $$0 > 127.0;
 $$1 = $2 ? 127.0 : $$0;
 return (+$$1);
}
function _L2Fix4($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0 * 655.35000000000002;
 $2 = (__cmsQuickSaturateWord_406($1)|0);
 return ($2|0);
}
function _ab2Fix4($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0.0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0 + 128.0;
 $2 = $1 * 257.0;
 $3 = (__cmsQuickSaturateWord_406($2)|0);
 return ($3|0);
}
function _Sqr($0) {
 $0 = +$0;
 var $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0 * $0;
 return (+$1);
}
function _cmsFloat2XYZEncoded($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sroa$0$0 = 0.0, $$sroa$0$1 = 0.0, $$sroa$0$2 = 0.0, $$sroa$17$0 = 0.0, $$sroa$17$1 = 0.0, $$sroa$17$2 = 0.0, $$sroa$9$0 = 0.0, $$sroa$9$1 = 0.0, $$sroa$9$2 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0.0, $3 = 0;
 var $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = +HEAPF64[$1>>3];
 $3 = ((($1)) + 8|0);
 $4 = +HEAPF64[$3>>3];
 $5 = ((($1)) + 16|0);
 $6 = +HEAPF64[$5>>3];
 $7 = !($4 <= 0.0);
 $$sroa$17$0 = $7 ? $6 : 0.0;
 $$sroa$9$0 = $7 ? $4 : 0.0;
 $$sroa$0$0 = $7 ? $2 : 0.0;
 $8 = $$sroa$0$0 > 1.999969482421875;
 $$sroa$0$1 = $8 ? 1.999969482421875 : $$sroa$0$0;
 $9 = $$sroa$0$1 < 0.0;
 $$sroa$0$2 = $9 ? 0.0 : $$sroa$0$1;
 $10 = $$sroa$9$0 > 1.999969482421875;
 $$sroa$9$1 = $10 ? 1.999969482421875 : $$sroa$9$0;
 $11 = $$sroa$9$1 < 0.0;
 $$sroa$9$2 = $11 ? 0.0 : $$sroa$9$1;
 $12 = $$sroa$17$0 > 1.999969482421875;
 $$sroa$17$1 = $12 ? 1.999969482421875 : $$sroa$17$0;
 $13 = $$sroa$17$1 < 0.0;
 $$sroa$17$2 = $13 ? 0.0 : $$sroa$17$1;
 $14 = (_XYZ2Fix($$sroa$0$2)|0);
 HEAP16[$0>>1] = $14;
 $15 = (_XYZ2Fix($$sroa$9$2)|0);
 $16 = ((($0)) + 2|0);
 HEAP16[$16>>1] = $15;
 $17 = (_XYZ2Fix($$sroa$17$2)|0);
 $18 = ((($0)) + 4|0);
 HEAP16[$18>>1] = $17;
 return;
}
function _XYZ2Fix($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0 * 32768.0;
 $2 = (__cmsQuickSaturateWord_406($1)|0);
 return ($2|0);
}
function _cmsXYZEncoded2Float($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0.0, $11 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP16[$1>>1]|0;
 $3 = (+_XYZ2float($2));
 HEAPF64[$0>>3] = $3;
 $4 = ((($1)) + 2|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = (+_XYZ2float($5));
 $7 = ((($0)) + 8|0);
 HEAPF64[$7>>3] = $6;
 $8 = ((($1)) + 4|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = (+_XYZ2float($9));
 $11 = ((($0)) + 16|0);
 HEAPF64[$11>>3] = $10;
 return;
}
function _XYZ2float($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0&65535;
 $2 = $1 << 1;
 $3 = (+__cms15Fixed16toDouble($2));
 return (+$3);
}
function _cmsDeltaE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0;
 var $7 = 0.0, $8 = 0, $9 = 0.0, $fabs = 0.0, $sqrt = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = +HEAPF64[$0>>3];
 $3 = +HEAPF64[$1>>3];
 $4 = $2 - $3;
 $5 = (+Math_abs((+$4)));
 $6 = ((($0)) + 8|0);
 $7 = +HEAPF64[$6>>3];
 $8 = ((($1)) + 8|0);
 $9 = +HEAPF64[$8>>3];
 $10 = $7 - $9;
 $11 = (+Math_abs((+$10)));
 $12 = ((($0)) + 16|0);
 $13 = +HEAPF64[$12>>3];
 $14 = ((($1)) + 16|0);
 $15 = +HEAPF64[$14>>3];
 $16 = $13 - $15;
 $17 = (+Math_abs((+$16)));
 $18 = (+_Sqr($5));
 $19 = (+_Sqr($11));
 $20 = $18 + $19;
 $21 = (+_Sqr($17));
 $22 = $20 + $21;
 $sqrt = (+Math_sqrt((+$22)));
 $fabs = (+Math_abs((+$sqrt)));
 $23 = $22 == -inf;
 $24 = $23 ? inf : $fabs;
 return (+$24);
}
function __cmsReasonableGridpointsByColorspace($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$$ = 0, $$$12 = 0, $$$13 = 0, $$0 = 0, $$12 = 0, $$13 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1 & 16711680;
 $3 = ($2|0)==(0);
 if (!($3)) {
  $4 = $1 >>> 16;
  $5 = $4 & 255;
  $$0 = $5;
  return ($$0|0);
 }
 $6 = (_cmsChannelsOf($0)|0);
 $7 = $1 & 1024;
 $8 = ($7|0)==(0);
 $9 = ($6>>>0)>(4);
 if (!($8)) {
  $10 = ($6|0)==(4);
  $$ = $10 ? 23 : 49;
  $$$ = $9 ? 7 : $$;
  return ($$$|0);
 }
 $11 = $1 & 2048;
 $12 = ($11|0)==(0);
 if ($12) {
  $14 = ($6|0)==(4);
  $$13 = $14 ? 17 : 33;
  $$$13 = $9 ? 7 : $$13;
  $$0 = $$$13;
  return ($$0|0);
 } else {
  $13 = ($6|0)==(1);
  $$12 = $13 ? 33 : 17;
  $$$12 = $9 ? 6 : $$12;
  $$0 = $$$12;
  return ($$0|0);
 }
 return (0)|0;
}
function _cmsChannelsOf($0) {
 $0 = $0|0;
 var $$0 = 0, $switch$split102D = 0, $switch$split12D = 0, $switch$split132D = 0, $switch$split162D = 0, $switch$split192D = 0, $switch$split222D = 0, $switch$split252D = 0, $switch$split282D = 0, $switch$split2D = 0, $switch$split312D = 0, $switch$split342D = 0, $switch$split372D = 0, $switch$split402D = 0, $switch$split42D = 0, $switch$split432D = 0, $switch$split462D = 0, $switch$split492D = 0, $switch$split522D = 0, $switch$split552D = 0;
 var $switch$split582D = 0, $switch$split612D = 0, $switch$split642D = 0, $switch$split672D = 0, $switch$split702D = 0, $switch$split72D = 0, $switch$split732D = 0, $switch$split762D = 0, $switch$split792D = 0, $switch$split822D = 0, $switch$split852D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $switch$split2D = ($0|0)<(1282766368);
 L1: do {
  if ($switch$split2D) {
   $switch$split12D = ($0|0)<(1111706706);
   if ($switch$split12D) {
    $switch$split72D = ($0|0)<(910380114);
    if ($switch$split72D) {
     $switch$split192D = ($0|0)<(860048466);
     if ($switch$split192D) {
      $switch$split372D = ($0|0)<(843271250);
      if ($switch$split372D) {
       switch ($0|0) {
       case 826494034:  {
        $$0 = 1;
        break L1;
        break;
       }
       default: {
        label = 16;
        break L1;
       }
       }
      } else {
       switch ($0|0) {
       case 843271250:  {
        label = 2;
        break L1;
        break;
       }
       default: {
        label = 16;
        break L1;
       }
       }
      }
     }
     $switch$split402D = ($0|0)<(876825682);
     if ($switch$split402D) {
      switch ($0|0) {
      case 860048466:  {
       label = 3;
       break L1;
       break;
      }
      default: {
       label = 16;
       break L1;
      }
      }
     }
     $switch$split672D = ($0|0)<(893602898);
     if ($switch$split672D) {
      switch ($0|0) {
      case 876825682:  {
       label = 4;
       break L1;
       break;
      }
      default: {
       label = 16;
       break L1;
      }
      }
     } else {
      switch ($0|0) {
      case 893602898:  {
       label = 5;
       break L1;
       break;
      }
      default: {
       label = 16;
       break L1;
      }
      }
     }
    } else {
     $switch$split222D = ($0|0)<(943934546);
     if ($switch$split222D) {
      $switch$split432D = ($0|0)<(927157330);
      if ($switch$split432D) {
       switch ($0|0) {
       case 910380114:  {
        label = 6;
        break L1;
        break;
       }
       default: {
        label = 16;
        break L1;
       }
       }
      } else {
       switch ($0|0) {
       case 927157330:  {
        label = 7;
        break L1;
        break;
       }
       default: {
        label = 16;
        break L1;
       }
       }
      }
     }
     $switch$split462D = ($0|0)<(960711762);
     if ($switch$split462D) {
      switch ($0|0) {
      case 943934546:  {
       label = 8;
       break L1;
       break;
      }
      default: {
       label = 16;
       break L1;
      }
      }
     }
     $switch$split702D = ($0|0)<(1094929490);
     if ($switch$split702D) {
      switch ($0|0) {
      case 960711762:  {
       label = 9;
       break L1;
       break;
      }
      default: {
       label = 16;
       break L1;
      }
      }
     } else {
      switch ($0|0) {
      case 1094929490:  {
       label = 10;
       break L1;
       break;
      }
      default: {
       label = 16;
       break L1;
      }
      }
     }
    }
   }
   $switch$split102D = ($0|0)<(1162038354);
   if ($switch$split102D) {
    $switch$split252D = ($0|0)<(1129142560);
    if ($switch$split252D) {
     $switch$split492D = ($0|0)<(1128483922);
     if ($switch$split492D) {
      switch ($0|0) {
      case 1111706706:  {
       label = 11;
       break L1;
       break;
      }
      default: {
       label = 16;
       break L1;
      }
      }
     } else {
      switch ($0|0) {
      case 1128483922:  {
       label = 12;
       break L1;
       break;
      }
      default: {
       label = 16;
       break L1;
      }
      }
     }
    }
    $switch$split522D = ($0|0)<(1129142603);
    if ($switch$split522D) {
     switch ($0|0) {
     case 1129142560:  {
      label = 3;
      break L1;
      break;
     }
     default: {
      label = 16;
      break L1;
     }
     }
    }
    $switch$split732D = ($0|0)<(1145261138);
    if ($switch$split732D) {
     switch ($0|0) {
     case 1129142603:  {
      label = 4;
      break L1;
      break;
     }
     default: {
      label = 16;
      break L1;
     }
     }
    } else {
     switch ($0|0) {
     case 1145261138:  {
      label = 13;
      break L1;
      break;
     }
     default: {
      label = 16;
      break L1;
     }
     }
    }
   }
   $switch$split282D = ($0|0)<(1212961568);
   if ($switch$split282D) {
    $switch$split552D = ($0|0)<(1178815570);
    if ($switch$split552D) {
     switch ($0|0) {
     case 1162038354:  {
      label = 14;
      break L1;
      break;
     }
     default: {
      label = 16;
      break L1;
     }
     }
    }
    $switch$split762D = ($0|0)<(1196573017);
    if ($switch$split762D) {
     switch ($0|0) {
     case 1178815570:  {
      label = 15;
      break L1;
      break;
     }
     default: {
      label = 16;
      break L1;
     }
     }
    } else {
     switch ($0|0) {
     case 1196573017:  {
      $$0 = 1;
      break L1;
      break;
     }
     default: {
      label = 16;
      break L1;
     }
     }
    }
   } else {
    $switch$split582D = ($0|0)<(1213421088);
    if ($switch$split582D) {
     switch ($0|0) {
     case 1212961568:  {
      label = 3;
      break L1;
      break;
     }
     default: {
      label = 16;
      break L1;
     }
     }
    }
    $switch$split792D = ($0|0)<(1281450528);
    if ($switch$split792D) {
     switch ($0|0) {
     case 1213421088:  {
      label = 3;
      break L1;
      break;
     }
     default: {
      label = 16;
      break L1;
     }
     }
    } else {
     switch ($0|0) {
     case 1281450528:  {
      label = 3;
      break L1;
      break;
     }
     default: {
      label = 16;
      break L1;
     }
     }
    }
   }
  } else {
   $switch$split42D = ($0|0)<(1296255033);
   if ($switch$split42D) {
    $switch$split132D = ($0|0)<(1296255028);
    if (!($switch$split132D)) {
     switch ($0|0) {
     case 1296255028:  {
      label = 4;
      break L1;
      break;
     }
     case 1296255029:  {
      label = 5;
      break L1;
      break;
     }
     case 1296255030:  {
      label = 6;
      break L1;
      break;
     }
     case 1296255031:  {
      label = 7;
      break L1;
      break;
     }
     case 1296255032:  {
      label = 8;
      break L1;
      break;
     }
     default: {
      label = 16;
      break L1;
     }
     }
    }
    $switch$split312D = ($0|0)<(1296255025);
    if ($switch$split312D) {
     switch ($0|0) {
     case 1282766411:  {
      label = 4;
      break L1;
      break;
     }
     case 1282766368:  {
      label = 3;
      break L1;
      break;
     }
     default: {
      label = 16;
      break L1;
     }
     }
    } else {
     switch ($0|0) {
     case 1296255027:  {
      label = 3;
      break L1;
      break;
     }
     case 1296255025:  {
      $$0 = 1;
      break L1;
      break;
     }
     case 1296255026:  {
      label = 2;
      break L1;
      break;
     }
     default: {
      label = 16;
      break L1;
     }
     }
    }
   }
   $switch$split162D = ($0|0)<(1296255045);
   if ($switch$split162D) {
    switch ($0|0) {
    case 1296255033:  {
     label = 9;
     break L1;
     break;
    }
    case 1296255041:  {
     label = 10;
     break L1;
     break;
    }
    case 1296255042:  {
     label = 11;
     break L1;
     break;
    }
    case 1296255043:  {
     label = 12;
     break L1;
     break;
    }
    case 1296255044:  {
     label = 13;
     break L1;
     break;
    }
    default: {
     label = 16;
     break L1;
    }
    }
   }
   $switch$split342D = ($0|0)<(1482250784);
   if ($switch$split342D) {
    $switch$split612D = ($0|0)<(1296255046);
    if ($switch$split612D) {
     switch ($0|0) {
     case 1296255045:  {
      label = 14;
      break L1;
      break;
     }
     default: {
      label = 16;
      break L1;
     }
     }
    }
    $switch$split822D = ($0|0)<(1380401696);
    if ($switch$split822D) {
     switch ($0|0) {
     case 1296255046:  {
      label = 15;
      break L1;
      break;
     }
     default: {
      label = 16;
      break L1;
     }
     }
    } else {
     switch ($0|0) {
     case 1380401696:  {
      label = 3;
      break L1;
      break;
     }
     default: {
      label = 16;
      break L1;
     }
     }
    }
   } else {
    $switch$split642D = ($0|0)<(1497588338);
    if ($switch$split642D) {
     switch ($0|0) {
     case 1482250784:  {
      label = 3;
      break L1;
      break;
     }
     default: {
      label = 16;
      break L1;
     }
     }
    }
    $switch$split852D = ($0|0)<(1501067552);
    if ($switch$split852D) {
     switch ($0|0) {
     case 1497588338:  {
      label = 3;
      break L1;
      break;
     }
     default: {
      label = 16;
      break L1;
     }
     }
    } else {
     switch ($0|0) {
     case 1501067552:  {
      label = 3;
      break L1;
      break;
     }
     default: {
      label = 16;
      break L1;
     }
     }
    }
   }
  }
 } while(0);
 switch (label|0) {
  case 2: {
   $$0 = 2;
   break;
  }
  case 3: {
   $$0 = 3;
   break;
  }
  case 4: {
   $$0 = 4;
   break;
  }
  case 5: {
   $$0 = 5;
   break;
  }
  case 6: {
   $$0 = 6;
   break;
  }
  case 7: {
   $$0 = 7;
   break;
  }
  case 8: {
   $$0 = 8;
   break;
  }
  case 9: {
   $$0 = 9;
   break;
  }
  case 10: {
   $$0 = 10;
   break;
  }
  case 11: {
   $$0 = 11;
   break;
  }
  case 12: {
   $$0 = 12;
   break;
  }
  case 13: {
   $$0 = 13;
   break;
  }
  case 14: {
   $$0 = 14;
   break;
  }
  case 15: {
   $$0 = 15;
   break;
  }
  case 16: {
   $$0 = 3;
   break;
  }
 }
 return ($$0|0);
}
function __cmsEndPointsBySpace($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $switch$split12D = 0, $switch$split2D = 0, $switch$split42D = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $switch$split2D = ($0|0)<(1196573017);
 L1: do {
  if ($switch$split2D) {
   switch ($0|0) {
   case 1129142603:  {
    $13 = ($1|0)==(0|0);
    if (!($13)) {
     HEAP32[$1>>2] = 32992;
    }
    $14 = ($2|0)==(0|0);
    if (!($14)) {
     HEAP32[$2>>2] = 24368;
    }
    $15 = ($3|0)==(0|0);
    if ($15) {
     $$0 = 1;
     break L1;
    }
    HEAP32[$3>>2] = 4;
    $$0 = 1;
    break L1;
    break;
   }
   case 1129142560:  {
    $16 = ($1|0)==(0|0);
    if (!($16)) {
     HEAP32[$1>>2] = 33000;
    }
    $17 = ($2|0)==(0|0);
    if (!($17)) {
     HEAP32[$2>>2] = 24376;
    }
    $18 = ($3|0)==(0|0);
    if ($18) {
     $$0 = 1;
     break L1;
    }
    HEAP32[$3>>2] = 3;
    $$0 = 1;
    break L1;
    break;
   }
   default: {
    $$0 = 0;
    break L1;
   }
   }
  } else {
   $switch$split12D = ($0|0)<(1281450528);
   if ($switch$split12D) {
    switch ($0|0) {
    case 1196573017:  {
     break;
    }
    default: {
     $$0 = 0;
     break L1;
    }
    }
    $4 = ($1|0)==(0|0);
    if (!($4)) {
     HEAP32[$1>>2] = 24336;
    }
    $5 = ($2|0)==(0|0);
    if (!($5)) {
     HEAP32[$2>>2] = 32976;
    }
    $6 = ($3|0)==(0|0);
    if ($6) {
     $$0 = 1;
     break;
    }
    HEAP32[$3>>2] = 1;
    $$0 = 1;
    break;
   }
   $switch$split42D = ($0|0)<(1380401696);
   if ($switch$split42D) {
    switch ($0|0) {
    case 1281450528:  {
     break;
    }
    default: {
     $$0 = 0;
     break L1;
    }
    }
    $10 = ($1|0)==(0|0);
    if (!($10)) {
     HEAP32[$1>>2] = 24352;
    }
    $11 = ($2|0)==(0|0);
    if (!($11)) {
     HEAP32[$2>>2] = 24360;
    }
    $12 = ($3|0)==(0|0);
    if ($12) {
     $$0 = 1;
     break;
    }
    HEAP32[$3>>2] = 3;
    $$0 = 1;
    break;
   } else {
    switch ($0|0) {
    case 1380401696:  {
     break;
    }
    default: {
     $$0 = 0;
     break L1;
    }
    }
    $7 = ($1|0)==(0|0);
    if (!($7)) {
     HEAP32[$1>>2] = 24344;
    }
    $8 = ($2|0)==(0|0);
    if (!($8)) {
     HEAP32[$2>>2] = 32984;
    }
    $9 = ($3|0)==(0|0);
    if ($9) {
     $$0 = 1;
     break;
    }
    HEAP32[$3>>2] = 3;
    $$0 = 1;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function __cmsICCcolorSpace($0) {
 $0 = $0|0;
 var $$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 do {
  switch ($0|0) {
  case 3: case 1:  {
   $$0 = 1196573017;
   break;
  }
  case 4: case 2:  {
   $$0 = 1380401696;
   break;
  }
  case 5:  {
   $$0 = 1129142560;
   break;
  }
  case 6:  {
   $$0 = 1129142603;
   break;
  }
  case 7:  {
   $$0 = 1497588338;
   break;
  }
  case 8:  {
   $$0 = 1282766368;
   break;
  }
  case 9:  {
   $$0 = 1482250784;
   break;
  }
  case 10: case 30:  {
   $$0 = 1281450528;
   break;
  }
  case 11:  {
   $$0 = 1282766411;
   break;
  }
  case 12:  {
   $$0 = 1213421088;
   break;
  }
  case 13:  {
   $$0 = 1212961568;
   break;
  }
  case 14:  {
   $$0 = 1501067552;
   break;
  }
  case 15:  {
   $$0 = 1296255025;
   break;
  }
  case 16:  {
   $$0 = 1296255026;
   break;
  }
  case 17:  {
   $$0 = 1296255027;
   break;
  }
  case 18:  {
   $$0 = 1296255028;
   break;
  }
  case 19:  {
   $$0 = 1296255029;
   break;
  }
  case 20:  {
   $$0 = 1296255030;
   break;
  }
  case 21:  {
   $$0 = 1296255031;
   break;
  }
  case 22:  {
   $$0 = 1296255032;
   break;
  }
  case 23:  {
   $$0 = 1296255033;
   break;
  }
  case 24:  {
   $$0 = 1296255041;
   break;
  }
  case 25:  {
   $$0 = 1296255042;
   break;
  }
  case 26:  {
   $$0 = 1296255043;
   break;
  }
  case 27:  {
   $$0 = 1296255044;
   break;
  }
  case 28:  {
   $$0 = 1296255045;
   break;
  }
  case 29:  {
   $$0 = 1296255046;
   break;
  }
  default: {
   $$0 = 0;
  }
  }
 } while(0);
 return ($$0|0);
}
function __cmsLCMScolorSpace($0) {
 $0 = $0|0;
 var $$0 = 0, $switch$split102D = 0, $switch$split12D = 0, $switch$split132D = 0, $switch$split162D = 0, $switch$split192D = 0, $switch$split222D = 0, $switch$split252D = 0, $switch$split282D = 0, $switch$split2D = 0, $switch$split312D = 0, $switch$split342D = 0, $switch$split372D = 0, $switch$split402D = 0, $switch$split42D = 0, $switch$split432D = 0, $switch$split462D = 0, $switch$split492D = 0, $switch$split522D = 0, $switch$split552D = 0;
 var $switch$split582D = 0, $switch$split612D = 0, $switch$split642D = 0, $switch$split672D = 0, $switch$split702D = 0, $switch$split72D = 0, $switch$split732D = 0, $switch$split762D = 0, $switch$split792D = 0, $switch$split822D = 0, $switch$split852D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $switch$split2D = ($0|0)<(1282766368);
 L1: do {
  if ($switch$split2D) {
   $switch$split12D = ($0|0)<(1111706706);
   if ($switch$split12D) {
    $switch$split72D = ($0|0)<(910380114);
    if ($switch$split72D) {
     $switch$split192D = ($0|0)<(860048466);
     if ($switch$split192D) {
      $switch$split372D = ($0|0)<(843271250);
      if ($switch$split372D) {
       switch ($0|0) {
       case 826494034:  {
        label = 13;
        break L1;
        break;
       }
       default: {
        label = 28;
        break L1;
       }
       }
      } else {
       switch ($0|0) {
       case 843271250:  {
        label = 14;
        break L1;
        break;
       }
       default: {
        label = 28;
        break L1;
       }
       }
      }
     }
     $switch$split402D = ($0|0)<(876825682);
     if ($switch$split402D) {
      switch ($0|0) {
      case 860048466:  {
       label = 15;
       break L1;
       break;
      }
      default: {
       label = 28;
       break L1;
      }
      }
     }
     $switch$split672D = ($0|0)<(893602898);
     if ($switch$split672D) {
      switch ($0|0) {
      case 876825682:  {
       label = 16;
       break L1;
       break;
      }
      default: {
       label = 28;
       break L1;
      }
      }
     } else {
      switch ($0|0) {
      case 893602898:  {
       label = 17;
       break L1;
       break;
      }
      default: {
       label = 28;
       break L1;
      }
      }
     }
    } else {
     $switch$split222D = ($0|0)<(943934546);
     if ($switch$split222D) {
      $switch$split432D = ($0|0)<(927157330);
      if ($switch$split432D) {
       switch ($0|0) {
       case 910380114:  {
        label = 18;
        break L1;
        break;
       }
       default: {
        label = 28;
        break L1;
       }
       }
      } else {
       switch ($0|0) {
       case 927157330:  {
        label = 19;
        break L1;
        break;
       }
       default: {
        label = 28;
        break L1;
       }
       }
      }
     }
     $switch$split462D = ($0|0)<(960711762);
     if ($switch$split462D) {
      switch ($0|0) {
      case 943934546:  {
       label = 20;
       break L1;
       break;
      }
      default: {
       label = 28;
       break L1;
      }
      }
     }
     $switch$split702D = ($0|0)<(1094929490);
     if ($switch$split702D) {
      switch ($0|0) {
      case 960711762:  {
       label = 21;
       break L1;
       break;
      }
      default: {
       label = 28;
       break L1;
      }
      }
     } else {
      switch ($0|0) {
      case 1094929490:  {
       label = 22;
       break L1;
       break;
      }
      default: {
       label = 28;
       break L1;
      }
      }
     }
    }
   }
   $switch$split102D = ($0|0)<(1162038354);
   if ($switch$split102D) {
    $switch$split252D = ($0|0)<(1129142560);
    if ($switch$split252D) {
     $switch$split492D = ($0|0)<(1128483922);
     if ($switch$split492D) {
      switch ($0|0) {
      case 1111706706:  {
       label = 23;
       break L1;
       break;
      }
      default: {
       label = 28;
       break L1;
      }
      }
     } else {
      switch ($0|0) {
      case 1128483922:  {
       label = 24;
       break L1;
       break;
      }
      default: {
       label = 28;
       break L1;
      }
      }
     }
    }
    $switch$split522D = ($0|0)<(1129142603);
    if ($switch$split522D) {
     switch ($0|0) {
     case 1129142560:  {
      break;
     }
     default: {
      label = 28;
      break L1;
     }
     }
     $$0 = 5;
     break;
    }
    $switch$split732D = ($0|0)<(1145261138);
    if (!($switch$split732D)) {
     switch ($0|0) {
     case 1145261138:  {
      label = 25;
      break L1;
      break;
     }
     default: {
      label = 28;
      break L1;
     }
     }
    }
    switch ($0|0) {
    case 1129142603:  {
     break;
    }
    default: {
     label = 28;
     break L1;
    }
    }
    $$0 = 6;
    break;
   }
   $switch$split282D = ($0|0)<(1212961568);
   if ($switch$split282D) {
    $switch$split552D = ($0|0)<(1178815570);
    if ($switch$split552D) {
     switch ($0|0) {
     case 1162038354:  {
      label = 26;
      break L1;
      break;
     }
     default: {
      label = 28;
      break L1;
     }
     }
    }
    $switch$split762D = ($0|0)<(1196573017);
    if ($switch$split762D) {
     switch ($0|0) {
     case 1178815570:  {
      label = 27;
      break L1;
      break;
     }
     default: {
      label = 28;
      break L1;
     }
     }
    } else {
     switch ($0|0) {
     case 1196573017:  {
      $$0 = 3;
      break L1;
      break;
     }
     default: {
      label = 28;
      break L1;
     }
     }
    }
   }
   $switch$split582D = ($0|0)<(1213421088);
   if ($switch$split582D) {
    switch ($0|0) {
    case 1212961568:  {
     break;
    }
    default: {
     label = 28;
     break L1;
    }
    }
    $$0 = 13;
    break;
   }
   $switch$split792D = ($0|0)<(1281450528);
   if ($switch$split792D) {
    switch ($0|0) {
    case 1213421088:  {
     break;
    }
    default: {
     label = 28;
     break L1;
    }
    }
    $$0 = 12;
    break;
   } else {
    switch ($0|0) {
    case 1281450528:  {
     break;
    }
    default: {
     label = 28;
     break L1;
    }
    }
    $$0 = 10;
    break;
   }
  } else {
   $switch$split42D = ($0|0)<(1296255033);
   if ($switch$split42D) {
    $switch$split132D = ($0|0)<(1296255028);
    if (!($switch$split132D)) {
     switch ($0|0) {
     case 1296255028:  {
      label = 16;
      break L1;
      break;
     }
     case 1296255029:  {
      label = 17;
      break L1;
      break;
     }
     case 1296255030:  {
      label = 18;
      break L1;
      break;
     }
     case 1296255031:  {
      label = 19;
      break L1;
      break;
     }
     case 1296255032:  {
      label = 20;
      break L1;
      break;
     }
     default: {
      label = 28;
      break L1;
     }
     }
    }
    $switch$split312D = ($0|0)<(1296255025);
    if (!($switch$split312D)) {
     switch ($0|0) {
     case 1296255025:  {
      label = 13;
      break L1;
      break;
     }
     case 1296255026:  {
      label = 14;
      break L1;
      break;
     }
     case 1296255027:  {
      label = 15;
      break L1;
      break;
     }
     default: {
      label = 28;
      break L1;
     }
     }
    }
    switch ($0|0) {
    case 1282766368:  {
     $$0 = 8;
     break L1;
     break;
    }
    case 1282766411:  {
     $$0 = 11;
     break L1;
     break;
    }
    default: {
     label = 28;
     break L1;
    }
    }
   }
   $switch$split162D = ($0|0)<(1296255045);
   if ($switch$split162D) {
    switch ($0|0) {
    case 1296255033:  {
     label = 21;
     break L1;
     break;
    }
    case 1296255041:  {
     label = 22;
     break L1;
     break;
    }
    case 1296255042:  {
     label = 23;
     break L1;
     break;
    }
    case 1296255043:  {
     label = 24;
     break L1;
     break;
    }
    case 1296255044:  {
     label = 25;
     break L1;
     break;
    }
    default: {
     label = 28;
     break L1;
    }
    }
   }
   $switch$split342D = ($0|0)<(1482250784);
   if ($switch$split342D) {
    $switch$split612D = ($0|0)<(1296255046);
    if ($switch$split612D) {
     switch ($0|0) {
     case 1296255045:  {
      label = 26;
      break L1;
      break;
     }
     default: {
      label = 28;
      break L1;
     }
     }
    }
    $switch$split822D = ($0|0)<(1380401696);
    if ($switch$split822D) {
     switch ($0|0) {
     case 1296255046:  {
      label = 27;
      break L1;
      break;
     }
     default: {
      label = 28;
      break L1;
     }
     }
    }
    switch ($0|0) {
    case 1380401696:  {
     break;
    }
    default: {
     label = 28;
     break L1;
    }
    }
    $$0 = 4;
    break;
   }
   $switch$split642D = ($0|0)<(1497588338);
   if ($switch$split642D) {
    switch ($0|0) {
    case 1482250784:  {
     break;
    }
    default: {
     label = 28;
     break L1;
    }
    }
    $$0 = 9;
    break;
   }
   $switch$split852D = ($0|0)<(1501067552);
   if ($switch$split852D) {
    switch ($0|0) {
    case 1497588338:  {
     break;
    }
    default: {
     label = 28;
     break L1;
    }
    }
    $$0 = 7;
    break;
   } else {
    switch ($0|0) {
    case 1501067552:  {
     break;
    }
    default: {
     label = 28;
     break L1;
    }
    }
    $$0 = 14;
    break;
   }
  }
 } while(0);
 switch (label|0) {
  case 13: {
   $$0 = 15;
   break;
  }
  case 14: {
   $$0 = 16;
   break;
  }
  case 15: {
   $$0 = 17;
   break;
  }
  case 16: {
   $$0 = 18;
   break;
  }
  case 17: {
   $$0 = 19;
   break;
  }
  case 18: {
   $$0 = 20;
   break;
  }
  case 19: {
   $$0 = 21;
   break;
  }
  case 20: {
   $$0 = 22;
   break;
  }
  case 21: {
   $$0 = 23;
   break;
  }
  case 22: {
   $$0 = 24;
   break;
  }
  case 23: {
   $$0 = 25;
   break;
  }
  case 24: {
   $$0 = 26;
   break;
  }
  case 25: {
   $$0 = 27;
   break;
  }
  case 26: {
   $$0 = 28;
   break;
  }
  case 27: {
   $$0 = 29;
   break;
  }
  case 28: {
   $$0 = 0;
   break;
  }
 }
 return ($$0|0);
}
function __cmsAdjustEndianess16($0) {
 $0 = $0|0;
 var $$sroa$0$0$insert$insert = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$sroa$0$0$insert$insert = (_llvm_bswap_i16(($0|0))|0);
 return ($$sroa$0$0$insert$insert|0);
}
function __cmsAdjustEndianess32($0) {
 $0 = $0|0;
 var $$sroa$0$0$insert$insert = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$sroa$0$0$insert$insert = (_llvm_bswap_i32(($0|0))|0);
 return ($$sroa$0$0$insert$insert|0);
}
function __cmsAdjustEndianess64($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  ___assert_fail((27666|0),(27689|0),87,(27720|0));
  // unreachable;
 } else {
  $3 = HEAP8[$1>>0]|0;
  $4 = ((($0)) + 7|0);
  HEAP8[$4>>0] = $3;
  $5 = ((($1)) + 1|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = ((($0)) + 6|0);
  HEAP8[$7>>0] = $6;
  $8 = ((($1)) + 2|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = ((($0)) + 5|0);
  HEAP8[$10>>0] = $9;
  $11 = ((($1)) + 3|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = ((($0)) + 4|0);
  HEAP8[$13>>0] = $12;
  $14 = ((($1)) + 4|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = ((($0)) + 3|0);
  HEAP8[$16>>0] = $15;
  $17 = ((($1)) + 5|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = ((($0)) + 2|0);
  HEAP8[$19>>0] = $18;
  $20 = ((($1)) + 6|0);
  $21 = HEAP8[$20>>0]|0;
  $22 = ((($0)) + 1|0);
  HEAP8[$22>>0] = $21;
  $23 = ((($1)) + 7|0);
  $24 = HEAP8[$23>>0]|0;
  HEAP8[$0>>0] = $24;
  return;
 }
}
function __cmsReadUInt8Number($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 $3 = ($0|0)==(0|0);
 if ($3) {
  ___assert_fail((28480|0),(27689|0),115,(27742|0));
  // unreachable;
 }
 $4 = ((($0)) + 272|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_iiiii[$5 & 255]($0,$2,1,1)|0);
 $7 = ($6|0)==(1);
 if (!($7)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = ($1|0)==(0|0);
 if ($8) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $9 = HEAP8[$2>>0]|0;
 HEAP8[$1>>0] = $9;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function __cmsReadUInt16Number($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 $3 = ($0|0)==(0|0);
 if ($3) {
  ___assert_fail((28480|0),(27689|0),128,(27762|0));
  // unreachable;
 }
 $4 = ((($0)) + 272|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_iiiii[$5 & 255]($0,$2,2,1)|0);
 $7 = ($6|0)==(1);
 if (!($7)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = ($1|0)==(0|0);
 if ($8) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $9 = HEAP16[$2>>1]|0;
 $10 = (__cmsAdjustEndianess16($9)|0);
 HEAP16[$1>>1] = $10;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function __cmsReadUInt16Array($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$010 = 0, $$09 = 0, $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0|0);
 if ($3) {
  ___assert_fail((28480|0),(27689|0),141,(27783|0));
  // unreachable;
 }
 $4 = ($1|0)==(0);
 if ($4) {
  $$09 = 1;
  return ($$09|0);
 }
 $5 = ($2|0)==(0|0);
 $$010 = 0;
 while(1) {
  if ($5) {
   $9 = (__cmsReadUInt16Number($0,0)|0);
   $10 = ($9|0)==(0);
   if ($10) {
    $$09 = 0;
    label = 9;
    break;
   }
  } else {
   $6 = (($2) + ($$010<<1)|0);
   $7 = (__cmsReadUInt16Number($0,$6)|0);
   $8 = ($7|0)==(0);
   if ($8) {
    $$09 = 0;
    label = 9;
    break;
   }
  }
  $11 = (($$010) + 1)|0;
  $12 = ($11>>>0)<($1>>>0);
  if ($12) {
   $$010 = $11;
  } else {
   $$09 = 1;
   label = 9;
   break;
  }
 }
 if ((label|0) == 9) {
  return ($$09|0);
 }
 return (0)|0;
}
function __cmsReadUInt32Number($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 $3 = ($0|0)==(0|0);
 if ($3) {
  ___assert_fail((28480|0),(27689|0),160,(27803|0));
  // unreachable;
 }
 $4 = ((($0)) + 272|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_iiiii[$5 & 255]($0,$2,4,1)|0);
 $7 = ($6|0)==(1);
 if (!($7)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = ($1|0)==(0|0);
 if ($8) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $9 = HEAP32[$2>>2]|0;
 $10 = (__cmsAdjustEndianess32($9)|0);
 HEAP32[$1>>2] = $10;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function __cmsReadFloat32Number($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$cast = 0.0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 $3 = ($0|0)==(0|0);
 if ($3) {
  ___assert_fail((28480|0),(27689|0),173,(27824|0));
  // unreachable;
 }
 $4 = ((($0)) + 272|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_iiiii[$5 & 255]($0,$2,4,1)|0);
 $7 = ($6|0)==(1);
 if (!($7)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = ($1|0)==(0|0);
 if ($8) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $9 = HEAP32[$2>>2]|0;
 $10 = (__cmsAdjustEndianess32($9)|0);
 HEAP32[$2>>2] = $10;
 $$cast = (HEAP32[tempDoublePtr>>2]=$10,+HEAPF32[tempDoublePtr>>2]);
 HEAP32[$1>>2] = $10;
 $11 = $$cast;
 $12 = $11 > 1.0E+20;
 $13 = $11 < -1.0E+20;
 $or$cond = $12 | $13;
 if ($or$cond) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $14 = (___fpclassifyf($$cast)|0);
 $15 = ($14|0)==(2);
 if ($15) {
  $20 = 1;
 } else {
  $16 = +HEAPF32[$1>>2];
  $17 = (___fpclassifyf($16)|0);
  $18 = ($17|0)==(4);
  $20 = $18;
 }
 $19 = $20&1;
 $$0 = $19;
 STACKTOP = sp;return ($$0|0);
}
function __cmsReadUInt64Number($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 $3 = ($0|0)==(0|0);
 if ($3) {
  ___assert_fail((28480|0),(27689|0),205,(27846|0));
  // unreachable;
 }
 $4 = ((($0)) + 272|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_iiiii[$5 & 255]($0,$2,8,1)|0);
 $7 = ($6|0)==(1);
 if ($7) {
  $8 = ($1|0)==(0|0);
  if ($8) {
   $$0 = 1;
  } else {
   __cmsAdjustEndianess64($1,$2);
   $$0 = 1;
  }
 } else {
  $$0 = 0;
 }
 STACKTOP = sp;return ($$0|0);
}
function __cmsRead15Fixed16Number($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 $3 = ($0|0)==(0|0);
 if ($3) {
  ___assert_fail((28480|0),(27689|0),223,(27867|0));
  // unreachable;
 }
 $4 = ((($0)) + 272|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_iiiii[$5 & 255]($0,$2,4,1)|0);
 $7 = ($6|0)==(1);
 if (!($7)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = ($1|0)==(0|0);
 if ($8) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $9 = HEAP32[$2>>2]|0;
 $10 = (__cmsAdjustEndianess32($9)|0);
 $11 = (+__cms15Fixed16toDouble($10));
 HEAPF64[$1>>3] = $11;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function __cms15Fixed16toDouble($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0.0, $11 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $ispos = 0, $neg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0 >> 31;
 $2 = $1 | 1;
 $3 = (+($2|0));
 $ispos = ($0|0)>(-1);
 $neg = (0 - ($0))|0;
 $4 = $ispos ? $0 : $neg;
 $5 = $4 >>> 16;
 $6 = $4 & 65535;
 $7 = (+($6|0));
 $8 = $7 * 1.52587890625E-5;
 $9 = (+($5|0));
 $10 = $9 + $8;
 $11 = $3 * $10;
 return (+$11);
}
function __cmsReadXYZNumber($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 $3 = ($0|0)==(0|0);
 if ($3) {
  ___assert_fail((28480|0),(27689|0),240,(27891|0));
  // unreachable;
 }
 $4 = ((($0)) + 272|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_iiiii[$5 & 255]($0,$2,12,1)|0);
 $7 = ($6|0)==(1);
 if (!($7)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = ($1|0)==(0|0);
 if ($8) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $9 = HEAP32[$2>>2]|0;
 $10 = (__cmsAdjustEndianess32($9)|0);
 $11 = (+__cms15Fixed16toDouble($10));
 HEAPF64[$1>>3] = $11;
 $12 = ((($2)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (__cmsAdjustEndianess32($13)|0);
 $15 = (+__cms15Fixed16toDouble($14));
 $16 = ((($1)) + 8|0);
 HEAPF64[$16>>3] = $15;
 $17 = ((($2)) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (__cmsAdjustEndianess32($18)|0);
 $20 = (+__cms15Fixed16toDouble($19));
 $21 = ((($1)) + 16|0);
 HEAPF64[$21>>3] = $20;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function __cmsWriteUInt8Number($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 HEAP8[$2>>0] = $1;
 $3 = ($0|0)==(0|0);
 if ($3) {
  ___assert_fail((28480|0),(27689|0),255,(27909|0));
  // unreachable;
 } else {
  $4 = ((($0)) + 288|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (FUNCTION_TABLE_iiii[$5 & 63]($0,1,$2)|0);
  $7 = ($6|0)==(1);
  $$ = $7&1;
  STACKTOP = sp;return ($$|0);
 }
 return (0)|0;
}
function __cmsWriteUInt16Number($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 $3 = ($0|0)==(0|0);
 if ($3) {
  ___assert_fail((28480|0),(27689|0),267,(27930|0));
  // unreachable;
 } else {
  $4 = (__cmsAdjustEndianess16($1)|0);
  HEAP16[$2>>1] = $4;
  $5 = ((($0)) + 288|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (FUNCTION_TABLE_iiii[$6 & 63]($0,2,$2)|0);
  $8 = ($7|0)==(1);
  $$ = $8&1;
  STACKTOP = sp;return ($$|0);
 }
 return (0)|0;
}
function __cmsWriteUInt16Array($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$010 = 0, $$09 = 0, $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0|0);
 if ($3) {
  ___assert_fail((28480|0),(27689|0),280,(27952|0));
  // unreachable;
 }
 $4 = ($2|0)==(0|0);
 if ($4) {
  ___assert_fail((27973|0),(27689|0),281,(27952|0));
  // unreachable;
 }
 $5 = ($1|0)==(0);
 if ($5) {
  $$09 = 1;
  return ($$09|0);
 } else {
  $$010 = 0;
 }
 while(1) {
  $8 = (($2) + ($$010<<1)|0);
  $9 = HEAP16[$8>>1]|0;
  $10 = (__cmsWriteUInt16Number($0,$9)|0);
  $11 = ($10|0)==(0);
  $7 = (($$010) + 1)|0;
  if ($11) {
   $$09 = 0;
   label = 8;
   break;
  }
  $6 = ($7>>>0)<($1>>>0);
  if ($6) {
   $$010 = $7;
  } else {
   $$09 = 1;
   label = 8;
   break;
  }
 }
 if ((label|0) == 8) {
  return ($$09|0);
 }
 return (0)|0;
}
function __cmsWriteUInt32Number($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 $3 = ($0|0)==(0|0);
 if ($3) {
  ___assert_fail((28480|0),(27689|0),294,(27995|0));
  // unreachable;
 } else {
  $4 = (__cmsAdjustEndianess32($1)|0);
  HEAP32[$2>>2] = $4;
  $5 = ((($0)) + 288|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (FUNCTION_TABLE_iiii[$6 & 63]($0,4,$2)|0);
  $8 = ($7|0)==(1);
  $$ = $8&1;
  STACKTOP = sp;return ($$|0);
 }
 return (0)|0;
}
function __cmsWriteFloat32Number($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $$ = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 $3 = ($0|0)==(0|0);
 if ($3) {
  ___assert_fail((28480|0),(27689|0),308,(28017|0));
  // unreachable;
 } else {
  $4 = (HEAPF32[tempDoublePtr>>2]=$1,HEAP32[tempDoublePtr>>2]|0);
  $5 = (__cmsAdjustEndianess32($4)|0);
  HEAP32[$2>>2] = $5;
  $6 = ((($0)) + 288|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (FUNCTION_TABLE_iiii[$7 & 63]($0,4,$2)|0);
  $9 = ($8|0)==(1);
  $$ = $9&1;
  STACKTOP = sp;return ($$|0);
 }
 return (0)|0;
}
function __cmsWriteUInt64Number($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 $3 = ($0|0)==(0|0);
 if ($3) {
  ___assert_fail((28480|0),(27689|0),322,(28040|0));
  // unreachable;
 } else {
  __cmsAdjustEndianess64($2,$1);
  $4 = ((($0)) + 288|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (FUNCTION_TABLE_iiii[$5 & 63]($0,8,$2)|0);
  $7 = ($6|0)==(1);
  $$ = $7&1;
  STACKTOP = sp;return ($$|0);
 }
 return (0)|0;
}
function __cmsWrite15Fixed16Number($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $$ = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 $3 = ($0|0)==(0|0);
 if ($3) {
  ___assert_fail((28480|0),(27689|0),335,(28062|0));
  // unreachable;
 } else {
  $4 = (__cmsDoubleTo15Fixed16($1)|0);
  $5 = (__cmsAdjustEndianess32($4)|0);
  HEAP32[$2>>2] = $5;
  $6 = ((($0)) + 288|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (FUNCTION_TABLE_iiii[$7 & 63]($0,4,$2)|0);
  $9 = ($8|0)==(1);
  $$ = $9&1;
  STACKTOP = sp;return ($$|0);
 }
 return (0)|0;
}
function __cmsDoubleTo15Fixed16($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0 * 65536.0;
 $2 = $1 + 0.5;
 $3 = (+Math_floor((+$2)));
 $4 = (~~(($3)));
 return ($4|0);
}
function __cmsWriteXYZNumber($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 $3 = ($0|0)==(0|0);
 if ($3) {
  ___assert_fail((28480|0),(27689|0),348,(28087|0));
  // unreachable;
 }
 $4 = ($1|0)==(0|0);
 if ($4) {
  ___assert_fail((28106|0),(27689|0),349,(28087|0));
  // unreachable;
 } else {
  $5 = +HEAPF64[$1>>3];
  $6 = (__cmsDoubleTo15Fixed16($5)|0);
  $7 = (__cmsAdjustEndianess32($6)|0);
  HEAP32[$2>>2] = $7;
  $8 = ((($1)) + 8|0);
  $9 = +HEAPF64[$8>>3];
  $10 = (__cmsDoubleTo15Fixed16($9)|0);
  $11 = (__cmsAdjustEndianess32($10)|0);
  $12 = ((($2)) + 4|0);
  HEAP32[$12>>2] = $11;
  $13 = ((($1)) + 16|0);
  $14 = +HEAPF64[$13>>3];
  $15 = (__cmsDoubleTo15Fixed16($14)|0);
  $16 = (__cmsAdjustEndianess32($15)|0);
  $17 = ((($2)) + 8|0);
  HEAP32[$17>>2] = $16;
  $18 = ((($0)) + 288|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (FUNCTION_TABLE_iiii[$19 & 63]($0,12,$2)|0);
  STACKTOP = sp;return ($20|0);
 }
 return (0)|0;
}
function __cms8Fixed8toDouble($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0&255;
 $2 = ($0&65535) >>> 8;
 $3 = $2&255;
 $4 = (+($3&255));
 $5 = (+($1&255));
 $6 = $5 * 0.00390625;
 $7 = $4 + $6;
 return (+$7);
}
function __cmsDoubleTo8Fixed8($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__cmsDoubleTo15Fixed16($0)|0);
 $2 = $1 >>> 8;
 $3 = $2&65535;
 return ($3|0);
}
function __cmsDecodeDateTimeNumber($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0|0);
 if ($2) {
  ___assert_fail((28126|0),(27689|0),404,(28147|0));
  // unreachable;
 }
 $3 = ($0|0)==(0|0);
 if ($3) {
  ___assert_fail((28172|0),(27689|0),405,(28147|0));
  // unreachable;
 } else {
  $4 = ((($0)) + 10|0);
  $5 = HEAP16[$4>>1]|0;
  $6 = (__cmsAdjustEndianess16($5)|0);
  $7 = $6&65535;
  HEAP32[$1>>2] = $7;
  $8 = ((($0)) + 8|0);
  $9 = HEAP16[$8>>1]|0;
  $10 = (__cmsAdjustEndianess16($9)|0);
  $11 = $10&65535;
  $12 = ((($1)) + 4|0);
  HEAP32[$12>>2] = $11;
  $13 = ((($0)) + 6|0);
  $14 = HEAP16[$13>>1]|0;
  $15 = (__cmsAdjustEndianess16($14)|0);
  $16 = $15&65535;
  $17 = ((($1)) + 8|0);
  HEAP32[$17>>2] = $16;
  $18 = ((($0)) + 4|0);
  $19 = HEAP16[$18>>1]|0;
  $20 = (__cmsAdjustEndianess16($19)|0);
  $21 = $20&65535;
  $22 = ((($1)) + 12|0);
  HEAP32[$22>>2] = $21;
  $23 = ((($0)) + 2|0);
  $24 = HEAP16[$23>>1]|0;
  $25 = (__cmsAdjustEndianess16($24)|0);
  $26 = $25&65535;
  $27 = (($26) + -1)|0;
  $28 = ((($1)) + 16|0);
  HEAP32[$28>>2] = $27;
  $29 = HEAP16[$0>>1]|0;
  $30 = (__cmsAdjustEndianess16($29)|0);
  $31 = $30&65535;
  $32 = (($31) + -1900)|0;
  $33 = ((($1)) + 20|0);
  HEAP32[$33>>2] = $32;
  $34 = ((($1)) + 24|0);
  HEAP32[$34>>2] = -1;
  $35 = ((($1)) + 28|0);
  HEAP32[$35>>2] = -1;
  $36 = ((($1)) + 32|0);
  HEAP32[$36>>2] = 0;
  return;
 }
}
function __cmsEncodeDateTimeNumber($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  ___assert_fail((28126|0),(27689|0),420,(28195|0));
  // unreachable;
 }
 $3 = ($1|0)==(0|0);
 if ($3) {
  ___assert_fail((28172|0),(27689|0),421,(28195|0));
  // unreachable;
 } else {
  $4 = HEAP32[$1>>2]|0;
  $5 = $4&65535;
  $6 = (__cmsAdjustEndianess16($5)|0);
  $7 = ((($0)) + 10|0);
  HEAP16[$7>>1] = $6;
  $8 = ((($1)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $9&65535;
  $11 = (__cmsAdjustEndianess16($10)|0);
  $12 = ((($0)) + 8|0);
  HEAP16[$12>>1] = $11;
  $13 = ((($1)) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $14&65535;
  $16 = (__cmsAdjustEndianess16($15)|0);
  $17 = ((($0)) + 6|0);
  HEAP16[$17>>1] = $16;
  $18 = ((($1)) + 12|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $19&65535;
  $21 = (__cmsAdjustEndianess16($20)|0);
  $22 = ((($0)) + 4|0);
  HEAP16[$22>>1] = $21;
  $23 = ((($1)) + 16|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($24) + 1)|0;
  $26 = $25&65535;
  $27 = (__cmsAdjustEndianess16($26)|0);
  $28 = ((($0)) + 2|0);
  HEAP16[$28>>1] = $27;
  $29 = ((($1)) + 20|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (($30) + 1900)|0;
  $32 = $31&65535;
  $33 = (__cmsAdjustEndianess16($32)|0);
  HEAP16[$0>>1] = $33;
  return;
 }
}
function __cmsReadTypeBase($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 $2 = ($0|0)==(0|0);
 if ($2) {
  ___assert_fail((28480|0),(27689|0),436,(28220|0));
  // unreachable;
 }
 $3 = ((($0)) + 272|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_iiiii[$4 & 255]($0,$1,8,1)|0);
 $6 = ($5|0)==(1);
 if (!($6)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = HEAP32[$1>>2]|0;
 $8 = (__cmsAdjustEndianess32($7)|0);
 $$0 = $8;
 STACKTOP = sp;return ($$0|0);
}
function __cmsWriteTypeBase($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 $3 = ($0|0)==(0|0);
 if ($3) {
  ___assert_fail((28480|0),(27689|0),449,(28237|0));
  // unreachable;
 } else {
  $4 = (__cmsAdjustEndianess32($1)|0);
  HEAP32[$2>>2] = $4;
  $5 = ((($2)) + 4|0);
  HEAP32[$5>>2] = 0;
  $6 = ((($0)) + 288|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (FUNCTION_TABLE_iiii[$7 & 63]($0,8,$2)|0);
  STACKTOP = sp;return ($8|0);
 }
 return (0)|0;
}
function __cmsReadAlignment($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 $2 = ($0|0)==(0|0);
 if ($2) {
  ___assert_fail((28480|0),(27689|0),462,(28255|0));
  // unreachable;
 }
 $3 = ((($0)) + 284|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 15]($0)|0);
 $6 = (($5) + 3)|0;
 $7 = $6 & -4;
 $8 = (($7) - ($5))|0;
 $9 = ($8|0)==(0);
 if ($9) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = ($8>>>0)>(4);
 if ($10) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = ((($0)) + 272|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (FUNCTION_TABLE_iiiii[$12 & 255]($0,$1,$8,1)|0);
 $14 = ($13|0)==(1);
 $15 = $14&1;
 $$0 = $15;
 STACKTOP = sp;return ($$0|0);
}
function __cmsWriteAlignment($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 $2 = ($0|0)==(0|0);
 if ($2) {
  ___assert_fail((28480|0),(27689|0),479,(28273|0));
  // unreachable;
 }
 $3 = ((($0)) + 284|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 15]($0)|0);
 $6 = (($5) + 3)|0;
 $7 = $6 & -4;
 $8 = (($7) - ($5))|0;
 $9 = ($8|0)==(0);
 if ($9) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = ($8>>>0)>(4);
 if ($10) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 _memset(($1|0),0,($8|0))|0;
 $11 = ((($0)) + 288|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (FUNCTION_TABLE_iiii[$12 & 63]($0,$8,$1)|0);
 $$0 = $13;
 STACKTOP = sp;return ($$0|0);
}
function __cmsGetContext($0) {
 $0 = $0|0;
 var $$0 = 0, $$010 = 0, $$011 = 0, $$012 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 L1: do {
  if ($1) {
   $$010 = 14692;
  } else {
   $$011 = HEAP32[8095]|0;
   $2 = ($$011|0)==(0|0);
   if ($2) {
    $$010 = 14692;
   } else {
    $$012 = $$011;
    while(1) {
     $3 = ($$012|0)==($0|0);
     if ($3) {
      $$010 = $$012;
      break L1;
     }
     $$0 = HEAP32[$$012>>2]|0;
     $4 = ($$0|0)==(0|0);
     if ($4) {
      $$010 = 14692;
      break;
     } else {
      $$012 = $$0;
     }
    }
   }
  }
 } while(0);
 return ($$010|0);
}
function __cmsContextGetClientChunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = ($1|0)<(0);
 $3 = ($1>>>0)>(14);
 $or$cond = $2 | $3;
 if ($or$cond) {
  _cmsSignalError($0,3,28292,$vararg_buffer);
  ___assert_fail((28334|0),(27689|0),701,(28338|0));
  // unreachable;
 }
 $4 = (__cmsGetContext($0)|0);
 $5 = (((($4)) + 8|0) + ($1<<2)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if (!($7)) {
  $$0 = $6;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = (14700 + ($1<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 $$0 = $9;
 STACKTOP = sp;return ($$0|0);
}
function _cmsDetectBlackPoint($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0;
 var $switch$split12D = 0, $switch$split2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (_cmsGetDeviceClass($1)|0);
 $switch$split2D = ($4|0)<(1818848875);
 L1: do {
  if ($switch$split2D) {
   switch ($4|0) {
   case 1633842036:  {
    label = 2;
    break;
   }
   default: {
   }
   }
  } else {
   $switch$split12D = ($4|0)<(1852662636);
   if ($switch$split12D) {
    switch ($4|0) {
    case 1818848875:  {
     label = 2;
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } else {
    switch ($4|0) {
    case 1852662636:  {
     label = 2;
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   }
  }
 } while(0);
 if ((label|0) == 2) {
  ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;HEAP32[$0+12>>2]=0|0;HEAP32[$0+16>>2]=0|0;HEAP32[$0+20>>2]=0|0;
  $$0 = 0;
  return ($$0|0);
 }
 $5 = ($2>>>0)>(2);
 if ($5) {
  ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;HEAP32[$0+12>>2]=0|0;HEAP32[$0+16>>2]=0|0;HEAP32[$0+20>>2]=0|0;
  $$0 = 0;
  return ($$0|0);
 }
 $6 = (_cmsGetEncodedICCversion($1)|0);
 $7 = ($6>>>0)>(67108863);
 $8 = $2 | 2;
 $9 = ($8|0)==(2);
 $or$cond = $9 & $7;
 if ($or$cond) {
  $10 = (_cmsIsMatrixShaper($1)|0);
  $11 = ($10|0)==(0);
  if ($11) {
   HEAPF64[$0>>3] = 0.0033600000000000001;
   $13 = ((($0)) + 8|0);
   HEAPF64[$13>>3] = 0.0034730999999999998;
   $14 = ((($0)) + 16|0);
   HEAPF64[$14>>3] = 0.0028700000000000002;
   $$0 = 1;
   return ($$0|0);
  } else {
   $12 = (_BlackPointAsDarkerColorant($1,1,$0)|0);
   $$0 = $12;
   return ($$0|0);
  }
 }
 $15 = ($2|0)==(1);
 if ($15) {
  $16 = (_cmsGetDeviceClass($1)|0);
  $17 = ($16|0)==(1886549106);
  if ($17) {
   $18 = (_cmsGetColorSpace($1)|0);
   $19 = ($18|0)==(1129142603);
   if ($19) {
    $20 = (_BlackPointUsingPerceptualBlack($0,$1)|0);
    $$0 = $20;
    return ($$0|0);
   }
  }
 }
 $21 = (_BlackPointAsDarkerColorant($1,$2,$0)|0);
 $$0 = $21;
 return ($$0|0);
}
function _BlackPointAsDarkerColorant($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $3 = sp + 52|0;
 $4 = sp + 48|0;
 $5 = sp + 24|0;
 $6 = sp;
 $7 = (_cmsGetProfileContextID($0)|0);
 $8 = (_cmsIsIntentSupported($0,$1,0)|0);
 $9 = ($8|0)==(0);
 if ($9) {
  ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;HEAP32[$2+16>>2]=0|0;HEAP32[$2+20>>2]=0|0;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = (_cmsFormatterForColorspaceOfProfile($0,2,0)|0);
 $11 = (_cmsGetColorSpace($0)|0);
 $12 = (__cmsEndPointsBySpace($11,0,$3,$4)|0);
 $13 = ($12|0)==(0);
 if ($13) {
  ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;HEAP32[$2+16>>2]=0|0;HEAP32[$2+20>>2]=0|0;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $14 = HEAP32[$4>>2]|0;
 $15 = $10 >>> 3;
 $16 = $15 & 15;
 $17 = ($14|0)==($16|0);
 if (!($17)) {
  ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;HEAP32[$2+16>>2]=0|0;HEAP32[$2+20>>2]=0|0;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $18 = (_cmsCreateLab2ProfileTHR($7,0)|0);
 $19 = ($18|0)==(0|0);
 if ($19) {
  ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;HEAP32[$2+16>>2]=0|0;HEAP32[$2+20>>2]=0|0;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $20 = (_cmsCreateTransformTHR($7,$0,$10,$18,4849688,$1,320)|0);
 (_cmsCloseProfile($18)|0);
 $21 = ($20|0)==(0|0);
 if ($21) {
  ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;HEAP32[$2+16>>2]=0|0;HEAP32[$2+20>>2]=0|0;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $22 = HEAP32[$3>>2]|0;
 _cmsDoTransform($20,$22,$5,1);
 $23 = ((($5)) + 8|0);
 ;HEAP32[$23>>2]=0|0;HEAP32[$23+4>>2]=0|0;HEAP32[$23+8>>2]=0|0;HEAP32[$23+12>>2]=0|0;
 $24 = +HEAPF64[$5>>3];
 $25 = $24 > 50.0;
 if ($25) {
  HEAPF64[$5>>3] = 50.0;
 }
 _cmsDeleteTransform($20);
 _cmsLab2XYZ(0,$6,$5);
 $26 = ($2|0)==(0|0);
 if ($26) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 ;HEAP32[$2>>2]=HEAP32[$6>>2]|0;HEAP32[$2+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$2+8>>2]=HEAP32[$6+8>>2]|0;HEAP32[$2+12>>2]=HEAP32[$6+12>>2]|0;HEAP32[$2+16>>2]=HEAP32[$6+16>>2]|0;HEAP32[$2+20>>2]=HEAP32[$6+20>>2]|0;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _BlackPointUsingPerceptualBlack($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $2 = sp + 48|0;
 $3 = sp + 24|0;
 $4 = sp;
 $5 = (_cmsIsIntentSupported($1,0,0)|0);
 $6 = ($5|0)==(0);
 if ($6) {
  ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;HEAP32[$0+12>>2]=0|0;HEAP32[$0+16>>2]=0|0;HEAP32[$0+20>>2]=0|0;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = (_CreateRoundtripXForm($1,0)|0);
 $8 = ($7|0)==(0|0);
 if ($8) {
  ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;HEAP32[$0+12>>2]=0|0;HEAP32[$0+16>>2]=0|0;HEAP32[$0+20>>2]=0|0;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;HEAP32[$2+16>>2]=0|0;HEAP32[$2+20>>2]=0|0;
 _cmsDoTransform($7,$2,$3,1);
 $9 = +HEAPF64[$3>>3];
 $10 = $9 > 50.0;
 if ($10) {
  HEAPF64[$3>>3] = 50.0;
 }
 $11 = ((($3)) + 8|0);
 ;HEAP32[$11>>2]=0|0;HEAP32[$11+4>>2]=0|0;HEAP32[$11+8>>2]=0|0;HEAP32[$11+12>>2]=0|0;
 _cmsDeleteTransform($7);
 _cmsLab2XYZ(0,$4,$3);
 $12 = ($0|0)==(0|0);
 if ($12) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;HEAP32[$0+16>>2]=HEAP32[$4+16>>2]|0;HEAP32[$0+20>>2]=HEAP32[$4+20>>2]|0;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _CreateRoundtripXForm($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $2 = sp + 64|0;
 $3 = sp;
 $4 = sp + 48|0;
 $5 = sp + 32|0;
 $6 = (_cmsGetProfileContextID($0)|0);
 $7 = (_cmsCreateLab4ProfileTHR($6,0)|0);
 ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;
 ;HEAP32[$3>>2]=HEAP32[584>>2]|0;HEAP32[$3+4>>2]=HEAP32[584+4>>2]|0;HEAP32[$3+8>>2]=HEAP32[584+8>>2]|0;HEAP32[$3+12>>2]=HEAP32[584+12>>2]|0;HEAP32[$3+16>>2]=HEAP32[584+16>>2]|0;HEAP32[$3+20>>2]=HEAP32[584+20>>2]|0;HEAP32[$3+24>>2]=HEAP32[584+24>>2]|0;HEAP32[$3+28>>2]=HEAP32[584+28>>2]|0;
 HEAP32[$4>>2] = $7;
 $8 = ((($4)) + 4|0);
 HEAP32[$8>>2] = $0;
 $9 = ((($4)) + 8|0);
 HEAP32[$9>>2] = $0;
 $10 = ((($4)) + 12|0);
 HEAP32[$10>>2] = $7;
 HEAP32[$5>>2] = 1;
 $11 = ((($5)) + 4|0);
 HEAP32[$11>>2] = $1;
 $12 = ((($5)) + 8|0);
 HEAP32[$12>>2] = 1;
 $13 = ((($5)) + 12|0);
 HEAP32[$13>>2] = 1;
 $14 = (_cmsCreateExtendedTransform($6,4,$4,$2,$5,$3,0,0,4849688,4849688,320)|0);
 (_cmsCloseProfile($7)|0);
 STACKTOP = sp;return ($14|0);
}
function _cmsDetectDestinationBlackPoint($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0.0, $$0132152 = 0, $$0134146 = 0, $$0138149 = 0, $$1 = 0, $$1133151 = 0, $$1135 = 0, $$1139 = 0, $$141 = 0.0, $$2150 = 0, $$3148 = 0, $$4147 = 0, $$sink14 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0, $105 = 0;
 var $106 = 0.0, $107 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0.0;
 var $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0.0;
 var $66 = 0, $67 = 0.0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond153 = 0, $exitcond154 = 0;
 var $exitcond155 = 0, $or$cond = 0, $or$cond142 = 0, $storemerge = 0.0, $switch$split122D = 0, $switch$split152D = 0, $switch$split2D = 0, $switch$split92D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 10336|0;
 $4 = sp + 10312|0;
 $5 = sp + 10288|0;
 $6 = sp + 10264|0;
 $7 = sp + 8216|0;
 $8 = sp + 6168|0;
 $9 = sp + 4120|0;
 $10 = sp + 2072|0;
 $11 = sp + 24|0;
 $12 = sp;
 $13 = (_cmsGetDeviceClass($1)|0);
 $switch$split2D = ($13|0)<(1818848875);
 L1: do {
  if ($switch$split2D) {
   switch ($13|0) {
   case 1633842036:  {
    label = 2;
    break;
   }
   default: {
   }
   }
  } else {
   $switch$split122D = ($13|0)<(1852662636);
   if ($switch$split122D) {
    switch ($13|0) {
    case 1818848875:  {
     label = 2;
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } else {
    switch ($13|0) {
    case 1852662636:  {
     label = 2;
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   }
  }
 } while(0);
 if ((label|0) == 2) {
  ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;HEAP32[$0+12>>2]=0|0;HEAP32[$0+16>>2]=0|0;HEAP32[$0+20>>2]=0|0;
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 $14 = ($2>>>0)>(2);
 if ($14) {
  ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;HEAP32[$0+12>>2]=0|0;HEAP32[$0+16>>2]=0|0;HEAP32[$0+20>>2]=0|0;
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 $15 = (_cmsGetEncodedICCversion($1)|0);
 $16 = ($15>>>0)>(67108863);
 $17 = $2 | 2;
 $18 = ($17|0)==(2);
 $or$cond = $18 & $16;
 if ($or$cond) {
  $19 = (_cmsIsMatrixShaper($1)|0);
  $20 = ($19|0)==(0);
  if ($20) {
   HEAPF64[$0>>3] = 0.0033600000000000001;
   $22 = ((($0)) + 8|0);
   HEAPF64[$22>>3] = 0.0034730999999999998;
   $23 = ((($0)) + 16|0);
   HEAPF64[$23>>3] = 0.0028700000000000002;
   $$1 = 1;
   STACKTOP = sp;return ($$1|0);
  } else {
   $21 = (_BlackPointAsDarkerColorant($1,1,$0)|0);
   $$1 = $21;
   STACKTOP = sp;return ($$1|0);
  }
 }
 $24 = (_cmsGetColorSpace($1)|0);
 $25 = (_cmsIsCLUT($1,$2,1)|0);
 $26 = ($25|0)==(0);
 L23: do {
  if (!($26)) {
   $switch$split92D = ($24|0)<(1196573017);
   L25: do {
    if ($switch$split92D) {
     switch ($24|0) {
     case 1129142603:  {
      break;
     }
     default: {
      break L23;
     }
     }
    } else {
     $switch$split152D = ($24|0)<(1380401696);
     if ($switch$split152D) {
      switch ($24|0) {
      case 1196573017:  {
       break L25;
       break;
      }
      default: {
       break L23;
      }
      }
     } else {
      switch ($24|0) {
      case 1380401696:  {
       break L25;
       break;
      }
      default: {
       break L23;
      }
      }
     }
    }
   } while(0);
   $28 = ($2|0)==(1);
   do {
    if ($28) {
     $29 = (_cmsDetectBlackPoint($12,$1,$2,0)|0);
     $30 = ($29|0)==(0);
     if (!($30)) {
      _cmsXYZ2Lab(0,$4,$12);
      break;
     }
     $$1 = 0;
     STACKTOP = sp;return ($$1|0);
    } else {
     ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;HEAP32[$4+16>>2]=0|0;HEAP32[$4+20>>2]=0|0;
    }
   } while(0);
   $31 = (_CreateRoundtripXForm($1,$2)|0);
   $32 = ($31|0)==(0|0);
   if ($32) {
    $$1 = 0;
    STACKTOP = sp;return ($$1|0);
   }
   $33 = ((($4)) + 8|0);
   $34 = ((($6)) + 8|0);
   $35 = ((($4)) + 16|0);
   $36 = ((($6)) + 16|0);
   $$0132152 = 0;
   while(1) {
    $37 = (+($$0132152|0));
    $38 = $37 * 100.0;
    $39 = $38 / 255.0;
    HEAPF64[$6>>3] = $39;
    $40 = +HEAPF64[$33>>3];
    $41 = $40 < -50.0;
    $42 = $41 ? -50.0 : $40;
    $43 = $42 > 50.0;
    $44 = $43 ? 50.0 : $42;
    HEAPF64[$34>>3] = $44;
    $45 = +HEAPF64[$35>>3];
    $46 = $45 < -50.0;
    $47 = $46 ? -50.0 : $45;
    $48 = $47 > 50.0;
    $49 = $48 ? 50.0 : $47;
    HEAPF64[$36>>3] = $49;
    _cmsDoTransform($31,$6,$5,1);
    $50 = +HEAPF64[$6>>3];
    $51 = (($7) + ($$0132152<<3)|0);
    HEAPF64[$51>>3] = $50;
    $52 = +HEAPF64[$5>>3];
    $53 = (($8) + ($$0132152<<3)|0);
    HEAPF64[$53>>3] = $52;
    $54 = (($$0132152) + 1)|0;
    $exitcond155 = ($54|0)==(256);
    if ($exitcond155) {
     $$1133151 = 254;
     break;
    } else {
     $$0132152 = $54;
    }
   }
   while(1) {
    $55 = (($8) + ($$1133151<<3)|0);
    $56 = +HEAPF64[$55>>3];
    $57 = (($$1133151) + 1)|0;
    $58 = (($8) + ($57<<3)|0);
    $59 = +HEAPF64[$58>>3];
    $60 = $56 < $59;
    $$sink14 = $60 ? $$1133151 : $57;
    $61 = (($8) + ($$sink14<<3)|0);
    $62 = +HEAPF64[$61>>3];
    HEAPF64[$55>>3] = $62;
    $63 = (($$1133151) + -1)|0;
    $64 = ($$1133151|0)>(1);
    if ($64) {
     $$1133151 = $63;
    } else {
     break;
    }
   }
   $65 = +HEAPF64[$8>>3];
   $66 = ((($8)) + 2040|0);
   $67 = +HEAPF64[$66>>3];
   $68 = $65 < $67;
   if (!($68)) {
    _cmsDeleteTransform($31);
    ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;HEAP32[$0+12>>2]=0|0;HEAP32[$0+16>>2]=0|0;HEAP32[$0+20>>2]=0|0;
    $$1 = 0;
    STACKTOP = sp;return ($$1|0);
   }
   if ($28) {
    $69 = $67 - $65;
    $70 = $69 * 0.20000000000000001;
    $71 = $65 + $70;
    $$0138149 = 1;$$2150 = 0;
    while(1) {
     $73 = (($7) + ($$2150<<3)|0);
     $74 = +HEAPF64[$73>>3];
     $75 = !($74 <= $71);
     if ($75) {
      $76 = (($8) + ($$2150<<3)|0);
      $77 = +HEAPF64[$76>>3];
      $78 = $74 - $77;
      $79 = (+Math_abs((+$78)));
      $80 = $79 < 4.0;
      if ($80) {
       $$1139 = $$0138149;
      } else {
       $$1139 = 0;
      }
     } else {
      $$1139 = $$0138149;
     }
     $81 = (($$2150) + 1)|0;
     $exitcond154 = ($81|0)==(256);
     if ($exitcond154) {
      break;
     } else {
      $$0138149 = $$1139;$$2150 = $81;
     }
    }
    $82 = ($$1139|0)==(0);
    if (!($82)) {
     _cmsLab2XYZ(0,$0,$4);
     _cmsDeleteTransform($31);
     $$1 = 1;
     STACKTOP = sp;return ($$1|0);
    }
   }
   $72 = $67 - $65;
   $$3148 = 0;
   while(1) {
    $83 = (($8) + ($$3148<<3)|0);
    $84 = +HEAPF64[$83>>3];
    $85 = $84 - $65;
    $86 = $85 / $72;
    $87 = (($9) + ($$3148<<3)|0);
    HEAPF64[$87>>3] = $86;
    $88 = (($$3148) + 1)|0;
    $exitcond153 = ($88|0)==(256);
    if ($exitcond153) {
     break;
    } else {
     $$3148 = $88;
    }
   }
   $$ = $28 ? 0.10000000000000001 : 0.029999999999999999;
   $$141 = $28 ? 0.5 : 0.25;
   $$0134146 = 0;$$4147 = 0;
   while(1) {
    $89 = (($9) + ($$4147<<3)|0);
    $90 = +HEAPF64[$89>>3];
    $91 = $90 >= $$;
    $92 = $90 < $$141;
    $or$cond142 = $91 & $92;
    if ($or$cond142) {
     $93 = (($$0134146) + 1)|0;
     $94 = (($11) + ($$0134146<<3)|0);
     $95 = (($10) + ($$0134146<<3)|0);
     $96 = (($7) + ($$4147<<3)|0);
     $97 = +HEAPF64[$96>>3];
     HEAPF64[$95>>3] = $97;
     HEAPF64[$94>>3] = $90;
     $$1135 = $93;
    } else {
     $$1135 = $$0134146;
    }
    $98 = (($$4147) + 1)|0;
    $exitcond = ($98|0)==(256);
    if ($exitcond) {
     break;
    } else {
     $$0134146 = $$1135;$$4147 = $98;
    }
   }
   $99 = ($$1135|0)<(3);
   if ($99) {
    _cmsDeleteTransform($31);
    ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;HEAP32[$0+12>>2]=0|0;HEAP32[$0+16>>2]=0|0;HEAP32[$0+20>>2]=0|0;
    $$1 = 0;
    STACKTOP = sp;return ($$1|0);
   } else {
    $100 = (+_RootOfLeastSquaresFitQuadraticCurve($$1135,$10,$11));
    $101 = $100 < 0.0;
    $storemerge = $101 ? 0.0 : $100;
    HEAPF64[$6>>3] = $storemerge;
    $102 = ((($4)) + 8|0);
    $103 = +HEAPF64[$102>>3];
    $104 = ((($6)) + 8|0);
    HEAPF64[$104>>3] = $103;
    $105 = ((($4)) + 16|0);
    $106 = +HEAPF64[$105>>3];
    $107 = ((($6)) + 16|0);
    HEAPF64[$107>>3] = $106;
    _cmsLab2XYZ(0,$0,$6);
    _cmsDeleteTransform($31);
    $$1 = 1;
    STACKTOP = sp;return ($$1|0);
   }
  }
 } while(0);
 $27 = (_cmsDetectBlackPoint($0,$1,$2,0)|0);
 $$1 = $27;
 STACKTOP = sp;return ($$1|0);
}
function _RootOfLeastSquaresFitQuadraticCurve($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0.0, $$0100101 = 0.0, $$093108 = 0.0, $$094107 = 0.0, $$095106 = 0, $$096105 = 0.0, $$097104 = 0.0, $$098103 = 0.0, $$099102 = 0.0, $$mux = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0;
 var $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0.0, $6 = 0, $7 = 0, $8 = 0.0;
 var $9 = 0, $brmerge = 0, $exitcond = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $3 = sp + 48|0;
 $4 = sp + 24|0;
 $5 = sp;
 $6 = ($0|0)<(4);
 if ($6) {
  $$0 = 0.0;
  STACKTOP = sp;return (+$$0);
 } else {
  $$0100101 = 0.0;$$093108 = 0.0;$$094107 = 0.0;$$095106 = 0;$$096105 = 0.0;$$097104 = 0.0;$$098103 = 0.0;$$099102 = 0.0;
 }
 while(1) {
  $7 = (($1) + ($$095106<<3)|0);
  $8 = +HEAPF64[$7>>3];
  $9 = (($2) + ($$095106<<3)|0);
  $10 = +HEAPF64[$9>>3];
  $11 = $$093108 + $8;
  $12 = $8 * $8;
  $13 = $$094107 + $12;
  $14 = $8 * $12;
  $15 = $$096105 + $14;
  $16 = $8 * $14;
  $17 = $$097104 + $16;
  $18 = $$098103 + $10;
  $19 = $8 * $10;
  $20 = $$099102 + $19;
  $21 = $8 * $19;
  $22 = $$0100101 + $21;
  $23 = (($$095106) + 1)|0;
  $exitcond = ($23|0)==($0|0);
  if ($exitcond) {
   break;
  } else {
   $$0100101 = $22;$$093108 = $11;$$094107 = $13;$$095106 = $23;$$096105 = $15;$$097104 = $17;$$098103 = $18;$$099102 = $20;
  }
 }
 $24 = (+($0|0));
 __cmsVEC3init($3,$24,$11,$13);
 $25 = ((($3)) + 24|0);
 __cmsVEC3init($25,$11,$13,$15);
 $26 = ((($3)) + 48|0);
 __cmsVEC3init($26,$13,$15,$17);
 __cmsVEC3init($4,$18,$20,$22);
 $27 = (__cmsMAT3solve($5,$3,$4)|0);
 $28 = ($27|0)==(0);
 if ($28) {
  $$0 = 0.0;
  STACKTOP = sp;return (+$$0);
 }
 $29 = ((($5)) + 16|0);
 $30 = +HEAPF64[$29>>3];
 $31 = ((($5)) + 8|0);
 $32 = +HEAPF64[$31>>3];
 $33 = +HEAPF64[$5>>3];
 $34 = (+Math_abs((+$30)));
 $35 = $34 < 1.0E-10;
 if ($35) {
  $36 = -$33;
  $37 = $36 / $32;
  $38 = $37 < 50.0;
  $phitmp = $37 > 0.0;
  $39 = $38 | $phitmp;
  $brmerge = $38 | $phitmp;
  $$mux = $39 ? 0.0 : 50.0;
  $40 = $brmerge ? $$mux : $37;
  $$0 = $40;
  STACKTOP = sp;return (+$$0);
 }
 $41 = $32 * $32;
 $42 = $30 * 4.0;
 $43 = $42 * $33;
 $44 = $41 - $43;
 $45 = !($44 <= 0.0);
 if (!($45)) {
  $$0 = 0.0;
  STACKTOP = sp;return (+$$0);
 }
 $46 = (+Math_sqrt((+$44)));
 $47 = $46 - $32;
 $48 = $30 * 2.0;
 $49 = $47 / $48;
 $50 = $49 > 50.0;
 $51 = $50 ? 50.0 : $49;
 $52 = $51 < 0.0;
 $53 = $52 ? 0.0 : $51;
 $$0 = $53;
 STACKTOP = sp;return (+$$0);
}
function __cmsGetTagTypeHandler($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__cmsContextGetClientChunk($0,8)|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_GetHandler($1,$3,14784)|0);
 return ($4|0);
}
function _GetHandler($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$011 = 0, $$015 = 0, $$114 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1|0)==(0|0);
 L1: do {
  if (!($3)) {
   $$015 = $1;
   while(1) {
    $5 = HEAP32[$$015>>2]|0;
    $6 = ($5|0)==($0|0);
    if ($6) {
     break;
    }
    $7 = ((($$015)) + 28|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = ($8|0)==(0|0);
    if ($9) {
     break L1;
    } else {
     $$015 = $8;
    }
   }
   $$011 = $$015;
   return ($$011|0);
  }
 } while(0);
 $4 = ($2|0)==(0|0);
 if ($4) {
  $$011 = 0;
  return ($$011|0);
 } else {
  $$114 = $2;
 }
 while(1) {
  $10 = HEAP32[$$114>>2]|0;
  $11 = ($10|0)==($0|0);
  if ($11) {
   break;
  }
  $12 = ((($$114)) + 28|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==(0|0);
  if ($14) {
   $$011 = 0;
   label = 9;
   break;
  } else {
   $$114 = $13;
  }
 }
 if ((label|0) == 9) {
  return ($$011|0);
 }
 $$011 = $$114;
 return ($$011|0);
}
function _Type_Chromaticity_Read($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$old29 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $or$cond = 0, $or$cond30 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $4 = sp + 2|0;
 $5 = sp;
 HEAP32[$2>>2] = 0;
 $6 = ((($0)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (__cmsMallocZero($7,72)|0);
 $9 = ($8|0)==(0|0);
 if ($9) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = (__cmsReadUInt16Number($1,$4)|0);
 $11 = ($10|0)==(0);
 do {
  if (!($11)) {
   $12 = HEAP16[$4>>1]|0;
   $13 = ($12<<16>>16)==(0);
   $14 = ($3|0)==(32);
   $or$cond = $14 & $13;
   if ($or$cond) {
    $15 = (__cmsReadUInt16Number($1,0)|0);
    $16 = ($15|0)==(0);
    if ($16) {
     break;
    }
    $17 = (__cmsReadUInt16Number($1,$4)|0);
    $18 = ($17|0)!=(0);
    $19 = HEAP16[$4>>1]|0;
    $20 = ($19<<16>>16)==(3);
    $or$cond30 = $18 & $20;
    if (!($or$cond30)) {
     break;
    }
   } else {
    $$old29 = ($12<<16>>16)==(3);
    if (!($$old29)) {
     break;
    }
   }
   $21 = (__cmsReadUInt16Number($1,$5)|0);
   $22 = ($21|0)==(0);
   if (!($22)) {
    $23 = (__cmsRead15Fixed16Number($1,$8)|0);
    $24 = ($23|0)==(0);
    if (!($24)) {
     $25 = ((($8)) + 8|0);
     $26 = (__cmsRead15Fixed16Number($1,$25)|0);
     $27 = ($26|0)==(0);
     if (!($27)) {
      $28 = ((($8)) + 16|0);
      HEAPF64[$28>>3] = 1.0;
      $29 = ((($8)) + 24|0);
      $30 = (__cmsRead15Fixed16Number($1,$29)|0);
      $31 = ($30|0)==(0);
      if (!($31)) {
       $32 = ((($8)) + 32|0);
       $33 = (__cmsRead15Fixed16Number($1,$32)|0);
       $34 = ($33|0)==(0);
       if (!($34)) {
        $35 = ((($8)) + 40|0);
        HEAPF64[$35>>3] = 1.0;
        $36 = ((($8)) + 48|0);
        $37 = (__cmsRead15Fixed16Number($1,$36)|0);
        $38 = ($37|0)==(0);
        if (!($38)) {
         $39 = ((($8)) + 56|0);
         $40 = (__cmsRead15Fixed16Number($1,$39)|0);
         $41 = ($40|0)==(0);
         if (!($41)) {
          $42 = ((($8)) + 64|0);
          HEAPF64[$42>>3] = 1.0;
          HEAP32[$2>>2] = 1;
          $$0 = $8;
          STACKTOP = sp;return ($$0|0);
         }
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 $43 = HEAP32[$6>>2]|0;
 __cmsFree($43,$8);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _Type_Chromaticity_Write($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$0 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0.0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (__cmsWriteUInt16Number($1,3)|0);
 $5 = ($4|0)==(0);
 if ($5) {
  $$0 = 0;
  return ($$0|0);
 }
 $6 = (__cmsWriteUInt16Number($1,0)|0);
 $7 = ($6|0)==(0);
 if ($7) {
  $$0 = 0;
  return ($$0|0);
 }
 $8 = +HEAPF64[$2>>3];
 $9 = ((($2)) + 8|0);
 $10 = +HEAPF64[$9>>3];
 $11 = (_SaveOneChromaticity($8,$10,$1)|0);
 $12 = ($11|0)==(0);
 if ($12) {
  $$0 = 0;
  return ($$0|0);
 }
 $13 = ((($2)) + 24|0);
 $14 = +HEAPF64[$13>>3];
 $15 = ((($2)) + 32|0);
 $16 = +HEAPF64[$15>>3];
 $17 = (_SaveOneChromaticity($14,$16,$1)|0);
 $18 = ($17|0)==(0);
 if ($18) {
  $$0 = 0;
  return ($$0|0);
 }
 $19 = ((($2)) + 48|0);
 $20 = +HEAPF64[$19>>3];
 $21 = ((($2)) + 56|0);
 $22 = +HEAPF64[$21>>3];
 $23 = (_SaveOneChromaticity($20,$22,$1)|0);
 $not$ = ($23|0)!=(0);
 $$ = $not$&1;
 $$0 = $$;
 return ($$0|0);
}
function _Type_Chromaticity_Dup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (__cmsDupMem($4,$1,72)|0);
 return ($5|0);
}
function _Type_Chromaticity_Free($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 __cmsFree($3,$1);
 return;
}
function _Type_ColorantOrderType_Read($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $4 = sp;
 HEAP32[$2>>2] = 0;
 $5 = (__cmsReadUInt32Number($1,$4)|0);
 $6 = ($5|0)==(0);
 $7 = HEAP32[$4>>2]|0;
 $8 = ($7>>>0)>(16);
 $or$cond = $6 | $8;
 if ($or$cond) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $9 = ((($0)) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (__cmsCalloc($10,16,1)|0);
 $12 = ($11|0)==(0|0);
 if ($12) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 dest=$11; stop=dest+16|0; do { HEAP8[dest>>0]=255|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $13 = ((($1)) + 272|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = HEAP32[$4>>2]|0;
 $16 = (FUNCTION_TABLE_iiiii[$14 & 255]($1,$11,1,$15)|0);
 $17 = HEAP32[$4>>2]|0;
 $18 = ($16|0)==($17|0);
 if ($18) {
  HEAP32[$2>>2] = 1;
  $$0 = $11;
  STACKTOP = sp;return ($$0|0);
 } else {
  $19 = HEAP32[$9>>2]|0;
  __cmsFree($19,$11);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _Type_ColorantOrderType_Write($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$0$$1 = 0, $$0$$10 = 0, $$0$$11 = 0, $$0$$12 = 0, $$0$$13 = 0, $$0$$14 = 0, $$0$$15 = 0, $$0$$2 = 0, $$0$$3 = 0, $$0$$4 = 0, $$0$$5 = 0, $$0$$6 = 0, $$0$$7 = 0, $$0$$8 = 0, $$0$$9 = 0, $$020 = 0, $10 = 0, $11 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, $not$22 = 0, $not$22$1 = 0, $not$22$10 = 0, $not$22$11 = 0, $not$22$12 = 0, $not$22$13 = 0, $not$22$14 = 0, $not$22$15 = 0, $not$22$2 = 0, $not$22$3 = 0;
 var $not$22$4 = 0, $not$22$5 = 0, $not$22$6 = 0, $not$22$7 = 0, $not$22$8 = 0, $not$22$9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP8[$2>>0]|0;
 $not$22 = ($4<<24>>24)!=(-1);
 $5 = $not$22&1;
 $6 = ((($2)) + 1|0);
 $7 = HEAP8[$6>>0]|0;
 $not$22$1 = ($7<<24>>24)!=(-1);
 $8 = $not$22$1&1;
 $$0$$1 = (($8) + ($5))|0;
 $9 = ((($2)) + 2|0);
 $10 = HEAP8[$9>>0]|0;
 $not$22$2 = ($10<<24>>24)!=(-1);
 $11 = $not$22$2&1;
 $$0$$2 = (($11) + ($$0$$1))|0;
 $12 = ((($2)) + 3|0);
 $13 = HEAP8[$12>>0]|0;
 $not$22$3 = ($13<<24>>24)!=(-1);
 $14 = $not$22$3&1;
 $$0$$3 = (($14) + ($$0$$2))|0;
 $15 = ((($2)) + 4|0);
 $16 = HEAP8[$15>>0]|0;
 $not$22$4 = ($16<<24>>24)!=(-1);
 $17 = $not$22$4&1;
 $$0$$4 = (($17) + ($$0$$3))|0;
 $18 = ((($2)) + 5|0);
 $19 = HEAP8[$18>>0]|0;
 $not$22$5 = ($19<<24>>24)!=(-1);
 $20 = $not$22$5&1;
 $$0$$5 = (($20) + ($$0$$4))|0;
 $21 = ((($2)) + 6|0);
 $22 = HEAP8[$21>>0]|0;
 $not$22$6 = ($22<<24>>24)!=(-1);
 $23 = $not$22$6&1;
 $$0$$6 = (($23) + ($$0$$5))|0;
 $24 = ((($2)) + 7|0);
 $25 = HEAP8[$24>>0]|0;
 $not$22$7 = ($25<<24>>24)!=(-1);
 $26 = $not$22$7&1;
 $$0$$7 = (($26) + ($$0$$6))|0;
 $27 = ((($2)) + 8|0);
 $28 = HEAP8[$27>>0]|0;
 $not$22$8 = ($28<<24>>24)!=(-1);
 $29 = $not$22$8&1;
 $$0$$8 = (($29) + ($$0$$7))|0;
 $30 = ((($2)) + 9|0);
 $31 = HEAP8[$30>>0]|0;
 $not$22$9 = ($31<<24>>24)!=(-1);
 $32 = $not$22$9&1;
 $$0$$9 = (($32) + ($$0$$8))|0;
 $33 = ((($2)) + 10|0);
 $34 = HEAP8[$33>>0]|0;
 $not$22$10 = ($34<<24>>24)!=(-1);
 $35 = $not$22$10&1;
 $$0$$10 = (($35) + ($$0$$9))|0;
 $36 = ((($2)) + 11|0);
 $37 = HEAP8[$36>>0]|0;
 $not$22$11 = ($37<<24>>24)!=(-1);
 $38 = $not$22$11&1;
 $$0$$11 = (($38) + ($$0$$10))|0;
 $39 = ((($2)) + 12|0);
 $40 = HEAP8[$39>>0]|0;
 $not$22$12 = ($40<<24>>24)!=(-1);
 $41 = $not$22$12&1;
 $$0$$12 = (($41) + ($$0$$11))|0;
 $42 = ((($2)) + 13|0);
 $43 = HEAP8[$42>>0]|0;
 $not$22$13 = ($43<<24>>24)!=(-1);
 $44 = $not$22$13&1;
 $$0$$13 = (($44) + ($$0$$12))|0;
 $45 = ((($2)) + 14|0);
 $46 = HEAP8[$45>>0]|0;
 $not$22$14 = ($46<<24>>24)!=(-1);
 $47 = $not$22$14&1;
 $$0$$14 = (($47) + ($$0$$13))|0;
 $48 = ((($2)) + 15|0);
 $49 = HEAP8[$48>>0]|0;
 $not$22$15 = ($49<<24>>24)!=(-1);
 $50 = $not$22$15&1;
 $$0$$15 = (($50) + ($$0$$14))|0;
 $51 = (__cmsWriteUInt32Number($1,$$0$$15)|0);
 $52 = ($51|0)==(0);
 if ($52) {
  $$020 = 0;
  return ($$020|0);
 }
 $53 = ((($1)) + 288|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = (FUNCTION_TABLE_iiii[$54 & 63]($1,$$0$$15,$2)|0);
 $not$ = ($55|0)!=(0);
 $$ = $not$&1;
 $$020 = $$;
 return ($$020|0);
}
function _Type_ColorantOrderType_Dup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (__cmsDupMem($4,$1,16)|0);
 return ($5|0);
}
function _Type_ColorantOrderType_Free($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 __cmsFree($3,$1);
 return;
}
function _Type_S15Fixed16_Read($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$02122 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$2>>2] = 0;
 $4 = $3 >>> 2;
 $5 = ((($0)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (__cmsCalloc($6,$4,8)|0);
 $8 = ($7|0)==(0|0);
 if ($8) {
  $$0 = 0;
  return ($$0|0);
 }
 $9 = ($4|0)==(0);
 L4: do {
  if (!($9)) {
   $$02122 = 0;
   while(1) {
    $12 = (($7) + ($$02122<<3)|0);
    $13 = (__cmsRead15Fixed16Number($1,$12)|0);
    $14 = ($13|0)==(0);
    $11 = (($$02122) + 1)|0;
    if ($14) {
     break;
    }
    $10 = ($11>>>0)<($4>>>0);
    if ($10) {
     $$02122 = $11;
    } else {
     break L4;
    }
   }
   $15 = HEAP32[$5>>2]|0;
   __cmsFree($15,$7);
   $$0 = 0;
   return ($$0|0);
  }
 } while(0);
 HEAP32[$2>>2] = $4;
 $$0 = $7;
 return ($$0|0);
}
function _Type_S15Fixed16_Write($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$010 = 0, $$011 = 0, $10 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($3|0)==(0);
 if ($4) {
  $$010 = 1;
  return ($$010|0);
 } else {
  $$011 = 0;
 }
 while(1) {
  $7 = (($2) + ($$011<<3)|0);
  $8 = +HEAPF64[$7>>3];
  $9 = (__cmsWrite15Fixed16Number($1,$8)|0);
  $10 = ($9|0)==(0);
  $6 = (($$011) + 1)|0;
  if ($10) {
   $$010 = 0;
   label = 4;
   break;
  }
  $5 = ($6>>>0)<($3>>>0);
  if ($5) {
   $$011 = $6;
  } else {
   $$010 = 1;
   label = 4;
   break;
  }
 }
 if ((label|0) == 4) {
  return ($$010|0);
 }
 return (0)|0;
}
function _Type_S15Fixed16_Dup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $2 << 3;
 $6 = (__cmsDupMem($4,$1,$5)|0);
 return ($6|0);
}
function _Type_S15Fixed16_Free($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 __cmsFree($3,$1);
 return;
}
function _Type_U16Fixed16_Read($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$02122 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $4 = sp;
 HEAP32[$2>>2] = 0;
 $5 = $3 >>> 2;
 $6 = ((($0)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (__cmsCalloc($7,$5,8)|0);
 $9 = ($8|0)==(0|0);
 if ($9) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = ($5|0)==(0);
 L4: do {
  if (!($10)) {
   $$02122 = 0;
   while(1) {
    $11 = (__cmsReadUInt32Number($1,$4)|0);
    $12 = ($11|0)==(0);
    if ($12) {
     break;
    }
    $14 = HEAP32[$4>>2]|0;
    $15 = (+($14>>>0));
    $16 = $15 * 1.52587890625E-5;
    $17 = (($8) + ($$02122<<3)|0);
    HEAPF64[$17>>3] = $16;
    $18 = (($$02122) + 1)|0;
    $19 = ($18>>>0)<($5>>>0);
    if ($19) {
     $$02122 = $18;
    } else {
     break L4;
    }
   }
   $13 = HEAP32[$6>>2]|0;
   __cmsFree($13,$8);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 HEAP32[$2>>2] = $5;
 $$0 = $8;
 STACKTOP = sp;return ($$0|0);
}
function _Type_U16Fixed16_Write($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$01516 = 0, $$2 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($3|0)==(0);
 if ($4) {
  $$2 = 1;
  return ($$2|0);
 } else {
  $$01516 = 0;
 }
 while(1) {
  $7 = (($2) + ($$01516<<3)|0);
  $8 = +HEAPF64[$7>>3];
  $9 = $8 * 65536.0;
  $10 = $9 + 0.5;
  $11 = (+Math_floor((+$10)));
  $12 = (~~(($11))>>>0);
  $13 = (__cmsWriteUInt32Number($1,$12)|0);
  $not$ = ($13|0)==(0);
  $6 = (($$01516) + 1)|0;
  if ($not$) {
   $$2 = 0;
   label = 4;
   break;
  }
  $5 = ($6>>>0)<($3>>>0);
  if ($5) {
   $$01516 = $6;
  } else {
   $$2 = 1;
   label = 4;
   break;
  }
 }
 if ((label|0) == 4) {
  return ($$2|0);
 }
 return (0)|0;
}
function _Type_U16Fixed16_Dup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $2 << 3;
 $6 = (__cmsDupMem($4,$1,$5)|0);
 return ($6|0);
}
function _Type_U16Fixed16_Free($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 __cmsFree($3,$1);
 return;
}
function _Type_Text_Read($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$028 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (_cmsMLUalloc($5,1)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  $$028 = 0;
  return ($$028|0);
 }
 HEAP32[$2>>2] = 0;
 $8 = ($3|0)==(-1);
 if (!($8)) {
  $9 = HEAP32[$4>>2]|0;
  $10 = (($3) + 1)|0;
  $11 = (__cmsMalloc($9,$10)|0);
  $12 = ($11|0)==(0|0);
  if (!($12)) {
   $13 = ((($1)) + 272|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (FUNCTION_TABLE_iiiii[$14 & 255]($1,$11,1,$3)|0);
   $16 = ($15|0)==($3|0);
   if ($16) {
    $17 = (($11) + ($3)|0);
    HEAP8[$17>>0] = 0;
    HEAP32[$2>>2] = 1;
    $18 = (_cmsMLUsetASCII($6,33008,33008,$11)|0);
    $19 = ($18|0)==(0);
    if (!($19)) {
     $20 = HEAP32[$4>>2]|0;
     __cmsFree($20,$11);
     $$028 = $6;
     return ($$028|0);
    }
   }
   _cmsMLUfree($6);
   $21 = HEAP32[$4>>2]|0;
   __cmsFree($21,$11);
   $$028 = 0;
   return ($$028|0);
  }
 }
 _cmsMLUfree($6);
 $$028 = 0;
 return ($$028|0);
}
function _Type_Text_Write($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (_cmsMLUgetASCII($2,33008,33008,0,0)|0);
 $5 = ($4|0)==(0);
 if ($5) {
  $$0 = 0;
  return ($$0|0);
 }
 $6 = ((($0)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (__cmsMalloc($7,$4)|0);
 $9 = ($8|0)==(0|0);
 if ($9) {
  $$0 = 0;
  return ($$0|0);
 }
 (_cmsMLUgetASCII($2,33008,33008,$8,$4)|0);
 $10 = ((($1)) + 288|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (FUNCTION_TABLE_iiii[$11 & 63]($1,$4,$8)|0);
 $13 = HEAP32[$6>>2]|0;
 __cmsFree($13,$8);
 $$0 = $12;
 return ($$0|0);
}
function _Type_Text_Dup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_cmsMLUdup($1)|0);
 return ($3|0);
}
function _Type_Text_Free($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _cmsMLUfree($1);
 return;
}
function _Type_Text_Description_Read($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$048 = 0, $$053 = 0, $$152 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $4 = sp + 8|0;
 $5 = sp + 4|0;
 $6 = sp;
 $7 = sp + 14|0;
 $8 = sp + 12|0;
 $9 = sp + 16|0;
 HEAP32[$2>>2] = 0;
 $10 = ($3>>>0)<(4);
 if ($10) {
  $$048 = 0;
  STACKTOP = sp;return ($$048|0);
 }
 $11 = (__cmsReadUInt32Number($1,$4)|0);
 $12 = ($11|0)==(0);
 if ($12) {
  $$048 = 0;
  STACKTOP = sp;return ($$048|0);
 }
 $13 = (($3) + -4)|0;
 $14 = HEAP32[$4>>2]|0;
 $15 = ($13>>>0)<($14>>>0);
 if ($15) {
  $$048 = 0;
  STACKTOP = sp;return ($$048|0);
 }
 $16 = ((($0)) + 20|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (_cmsMLUalloc($17,1)|0);
 $19 = ($18|0)==(0|0);
 if ($19) {
  $$048 = 0;
  STACKTOP = sp;return ($$048|0);
 }
 $20 = HEAP32[$16>>2]|0;
 $21 = HEAP32[$4>>2]|0;
 $22 = (($21) + 1)|0;
 $23 = (__cmsMalloc($20,$22)|0);
 $24 = ($23|0)==(0|0);
 L13: do {
  if (!($24)) {
   $25 = ((($1)) + 272|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = HEAP32[$4>>2]|0;
   $28 = (FUNCTION_TABLE_iiiii[$26 & 255]($1,$23,1,$27)|0);
   $29 = HEAP32[$4>>2]|0;
   $30 = ($28|0)==($29|0);
   if ($30) {
    $31 = (($13) - ($29))|0;
    $32 = (($23) + ($29)|0);
    HEAP8[$32>>0] = 0;
    $33 = (_cmsMLUsetASCII($18,33008,33008,$23)|0);
    $34 = ($33|0)==(0);
    if (!($34)) {
     $35 = HEAP32[$16>>2]|0;
     __cmsFree($35,$23);
     $36 = ($31>>>0)<(8);
     L18: do {
      if (!($36)) {
       $37 = (__cmsReadUInt32Number($1,$5)|0);
       $38 = ($37|0)==(0);
       if (!($38)) {
        $39 = (__cmsReadUInt32Number($1,$6)|0);
        $40 = ($39|0)==(0);
        if (!($40)) {
         $41 = (($31) + -8)|0;
         $42 = HEAP32[$6>>2]|0;
         $43 = $42 << 1;
         $44 = ($41>>>0)<($43>>>0);
         if (!($44)) {
          $45 = HEAP32[$6>>2]|0;
          $46 = ($45|0)==(0);
          if ($46) {
           $$lcssa = 0;
          } else {
           $$053 = 0;
           while(1) {
            $50 = HEAP32[$25>>2]|0;
            $51 = (FUNCTION_TABLE_iiiii[$50 & 255]($1,$8,2,1)|0);
            $52 = ($51|0)==(0);
            $49 = (($$053) + 1)|0;
            if ($52) {
             break L18;
            }
            $47 = HEAP32[$6>>2]|0;
            $48 = ($49>>>0)<($47>>>0);
            if ($48) {
             $$053 = $49;
            } else {
             break;
            }
           }
           $phitmp = $47 << 1;
           $$lcssa = $phitmp;
          }
          $53 = (($41) - ($$lcssa))|0;
          $54 = ($53>>>0)>(69);
          if ($54) {
           $55 = (__cmsReadUInt16Number($1,$7)|0);
           $56 = ($55|0)==(0);
           if (!($56)) {
            $57 = (__cmsReadUInt8Number($1,$9)|0);
            $58 = ($57|0)==(0);
            if (!($58)) {
             $$152 = 0;
             while(1) {
              $61 = HEAP32[$25>>2]|0;
              $62 = (FUNCTION_TABLE_iiiii[$61 & 255]($1,$8,1,1)|0);
              $63 = ($62|0)==(0);
              $60 = (($$152) + 1)|0;
              if ($63) {
               break L13;
              }
              $59 = ($60>>>0)<(67);
              if ($59) {
               $$152 = $60;
              } else {
               break;
              }
             }
            }
           }
          }
         }
        }
       }
      }
     } while(0);
     HEAP32[$2>>2] = 1;
     $$048 = $18;
     STACKTOP = sp;return ($$048|0);
    }
   }
   $64 = HEAP32[$16>>2]|0;
   __cmsFree($64,$23);
  }
 } while(0);
 _cmsMLUfree($18);
 $$048 = 0;
 STACKTOP = sp;return ($$048|0);
}
function _Type_Text_Description_Write($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$063 = 0, $$064 = 0, $$067 = 0, $$06773 = 0, $$071 = 0, $$16566 = 0, $$16569 = 0, $$170 = 0, $$neg74 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $4 = sp;
 dest=$4; stop=dest+68|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $5 = (_cmsMLUgetASCII($2,33008,33008,0,0)|0);
 $6 = ($5|0)==(0);
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 if ($6) {
  $9 = (__cmsDupMem($8,33011,1)|0);
  $10 = HEAP32[$7>>2]|0;
  $11 = (__cmsDupMem($10,32396,4)|0);
  $$063 = $9;$$064 = $11;$54 = $11;
  label = 6;
 } else {
  $12 = (__cmsCalloc($8,$5,1)|0);
  $13 = ($12|0)==(0|0);
  if ($13) {
   $$06773 = 0;
   STACKTOP = sp;return ($$06773|0);
  }
  $14 = HEAP32[$7>>2]|0;
  $15 = (__cmsCalloc($14,$5,4)|0);
  $16 = ($15|0)==(0|0);
  if ($16) {
   $$071 = 0;$$16569 = $15;$$170 = $12;$55 = 0;
   label = 18;
  } else {
   (_cmsMLUgetASCII($2,33008,33008,$12,$5)|0);
   $17 = $5 << 2;
   (_cmsMLUgetWide($2,33008,33008,$15,$17)|0);
   $$063 = $12;$$064 = $15;$54 = $15;
   label = 6;
  }
 }
 if ((label|0) == 6) {
  $18 = (_strlen($$063)|0);
  $19 = (($18) + 1)|0;
  $20 = (($18) + 21)|0;
  $21 = $19 << 1;
  $22 = (($20) + ($21))|0;
  $23 = (($22) + 73)|0;
  $24 = $23 & -4;
  $25 = (__cmsWriteUInt32Number($1,$19)|0);
  $26 = ($25|0)==(0);
  do {
   if ($26) {
    $$0 = 0;
   } else {
    $27 = ((($1)) + 288|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (FUNCTION_TABLE_iiii[$28 & 63]($1,$19,$$063)|0);
    $30 = ($29|0)==(0);
    if ($30) {
     $$0 = 0;
    } else {
     $31 = (__cmsWriteUInt32Number($1,0)|0);
     $32 = ($31|0)==(0);
     if ($32) {
      $$0 = 0;
     } else {
      $33 = (__cmsWriteUInt32Number($1,$19)|0);
      $34 = ($33|0)==(0);
      if ($34) {
       $$0 = 0;
      } else {
       $35 = (__cmsWriteWCharArray($1,$19,$$064)|0);
       $36 = ($35|0)==(0);
       if ($36) {
        $$0 = 0;
       } else {
        $37 = (__cmsWriteUInt16Number($1,0)|0);
        $38 = ($37|0)==(0);
        if ($38) {
         $$0 = 0;
        } else {
         $39 = (__cmsWriteUInt8Number($1,0)|0);
         $40 = ($39|0)==(0);
         if ($40) {
          $$0 = 0;
         } else {
          $41 = HEAP32[$27>>2]|0;
          $42 = (FUNCTION_TABLE_iiii[$41 & 63]($1,67,$4)|0);
          $43 = ($42|0)==(0);
          if ($43) {
           $$0 = 0;
          } else {
           $$neg74 = (-70 - ($22))|0;
           $44 = (($$neg74) + ($24))|0;
           $45 = ($44|0)==(0);
           if (!($45)) {
            $46 = HEAP32[$27>>2]|0;
            $47 = (FUNCTION_TABLE_iiii[$46 & 63]($1,$44,$4)|0);
            $48 = ($47|0)==(0);
            if ($48) {
             $$0 = 0;
             break;
            }
           }
           $$0 = 1;
          }
         }
        }
       }
      }
     }
    }
   }
  } while(0);
  $49 = ($$063|0)==(0|0);
  if ($49) {
   $$067 = $$0;$$16566 = $$064;$53 = $54;
  } else {
   $$071 = $$0;$$16569 = $$064;$$170 = $$063;$55 = $54;
   label = 18;
  }
 }
 if ((label|0) == 18) {
  $50 = HEAP32[$7>>2]|0;
  __cmsFree($50,$$170);
  $$067 = $$071;$$16566 = $$16569;$53 = $55;
 }
 $51 = ($$16566|0)==(0|0);
 if ($51) {
  $$06773 = $$067;
  STACKTOP = sp;return ($$06773|0);
 }
 $52 = HEAP32[$7>>2]|0;
 __cmsFree($52,$53);
 $$06773 = $$067;
 STACKTOP = sp;return ($$06773|0);
}
function _Type_Text_Description_Dup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_cmsMLUdup($1)|0);
 return ($3|0);
}
function _Type_Text_Description_Free($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _cmsMLUfree($1);
 return;
}
function _Type_Curve_Read($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$1 = 0, $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $4 = sp + 16|0;
 $5 = sp + 8|0;
 $6 = sp;
 HEAP32[$2>>2] = 0;
 $7 = (__cmsReadUInt32Number($1,$4)|0);
 $8 = ($7|0)==(0);
 if ($8) {
  $$2 = 0;
  STACKTOP = sp;return ($$2|0);
 }
 $9 = HEAP32[$4>>2]|0;
 switch ($9|0) {
 case 0:  {
  HEAPF64[$5>>3] = 1.0;
  $10 = ((($0)) + 20|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (_cmsBuildParametricToneCurve($11,1,$5)|0);
  $13 = ($12|0)==(0|0);
  if ($13) {
   $$0 = 0;
  } else {
   HEAP32[$2>>2] = 1;
   $$0 = $12;
  }
  $$2 = $$0;
  STACKTOP = sp;return ($$2|0);
  break;
 }
 case 1:  {
  $14 = (__cmsReadUInt16Number($1,$5)|0);
  $15 = ($14|0)==(0);
  if ($15) {
   $$1 = 0;
  } else {
   $16 = HEAP16[$5>>1]|0;
   $17 = (+__cms8Fixed8toDouble($16));
   HEAPF64[$6>>3] = $17;
   HEAP32[$2>>2] = 1;
   $18 = ((($0)) + 20|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = (_cmsBuildParametricToneCurve($19,1,$6)|0);
   $$1 = $20;
  }
  $$2 = $$1;
  STACKTOP = sp;return ($$2|0);
  break;
 }
 default: {
  $21 = ($9>>>0)>(32767);
  if ($21) {
   $$2 = 0;
   STACKTOP = sp;return ($$2|0);
  }
  $22 = ((($0)) + 20|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (_cmsBuildTabulatedToneCurve16($23,$9,0)|0);
  $25 = ($24|0)==(0|0);
  if ($25) {
   $$2 = 0;
   STACKTOP = sp;return ($$2|0);
  }
  $26 = HEAP32[$4>>2]|0;
  $27 = ((($24)) + 24|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (__cmsReadUInt16Array($1,$26,$28)|0);
  $30 = ($29|0)==(0);
  if ($30) {
   _cmsFreeToneCurve($24);
   $$2 = 0;
   STACKTOP = sp;return ($$2|0);
  } else {
   HEAP32[$2>>2] = 1;
   $$2 = $24;
   STACKTOP = sp;return ($$2|0);
  }
 }
 }
 return (0)|0;
}
function _Type_Curve_Write($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($2)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(1);
 if ($6) {
  $7 = ((($2)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ((($8)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(1);
  if ($11) {
   $12 = ((($8)) + 16|0);
   $13 = +HEAPF64[$12>>3];
   $14 = (__cmsDoubleTo8Fixed8($13)|0);
   $15 = (__cmsWriteUInt32Number($1,1)|0);
   $16 = ($15|0)==(0);
   if ($16) {
    $$1 = 0;
    return ($$1|0);
   }
   $17 = (__cmsWriteUInt16Number($1,$14)|0);
   $not$ = ($17|0)!=(0);
   $$ = $not$&1;
   $$1 = $$;
   return ($$1|0);
  }
 }
 $18 = ((($2)) + 20|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (__cmsWriteUInt32Number($1,$19)|0);
 $21 = ($20|0)==(0);
 if ($21) {
  $$1 = 0;
  return ($$1|0);
 }
 $22 = HEAP32[$18>>2]|0;
 $23 = ((($2)) + 24|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (__cmsWriteUInt16Array($1,$22,$24)|0);
 $$1 = $25;
 return ($$1|0);
}
function _Type_Curve_Dup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_cmsDupToneCurve($1)|0);
 return ($3|0);
}
function _Type_Curve_Free($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _cmsFreeToneCurve($1);
 return;
}
function _Type_ParametricCurve_Read($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$01617 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $vararg_buffer = sp + 80|0;
 $4 = sp;
 $5 = sp + 84|0;
 $6 = (__cmsReadUInt16Number($1,$5)|0);
 $7 = ($6|0)==(0);
 if ($7) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = (__cmsReadUInt16Number($1,0)|0);
 $9 = ($8|0)==(0);
 if ($9) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = HEAP16[$5>>1]|0;
 $11 = ($10&65535)>(4);
 if ($11) {
  $12 = $10&65535;
  $13 = ((($0)) + 20|0);
  $14 = HEAP32[$13>>2]|0;
  HEAP32[$vararg_buffer>>2] = $12;
  _cmsSignalError($14,8,29373,$vararg_buffer);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 dest=$4; stop=dest+80|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $15 = HEAP16[$5>>1]|0;
 $16 = $15&65535;
 $17 = (15972 + ($16<<2)|0);
 $18 = HEAP32[$17>>2]|0;
 $$01617 = 0;
 while(1) {
  $21 = (($4) + ($$01617<<3)|0);
  $22 = (__cmsRead15Fixed16Number($1,$21)|0);
  $23 = ($22|0)==(0);
  $20 = (($$01617) + 1)|0;
  if ($23) {
   $$0 = 0;
   label = 9;
   break;
  }
  $19 = ($20|0)<($18|0);
  if ($19) {
   $$01617 = $20;
  } else {
   break;
  }
 }
 if ((label|0) == 9) {
  STACKTOP = sp;return ($$0|0);
 }
 $24 = ((($0)) + 20|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = HEAP16[$5>>1]|0;
 $27 = $26&65535;
 $28 = (($27) + 1)|0;
 $29 = (_cmsBuildParametricToneCurve($25,$28,$4)|0);
 HEAP32[$2>>2] = 1;
 $$0 = $29;
 STACKTOP = sp;return ($$0|0);
}
function _Type_ParametricCurve_Write($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$02526 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0.0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $4 = ((($2)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($2)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9>>>0)>(1);
 $11 = ($7|0)<(1);
 $or$cond = $11 | $10;
 if ($or$cond) {
  $12 = ((($0)) + 20|0);
  $13 = HEAP32[$12>>2]|0;
  _cmsSignalError($13,8,29283,$vararg_buffer);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $14 = ($7|0)>(5);
 if ($14) {
  $15 = ((($0)) + 20|0);
  $16 = HEAP32[$15>>2]|0;
  _cmsSignalError($16,8,29344,$vararg_buffer1);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $17 = (15948 + ($7<<2)|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($7) + 65535)|0;
 $20 = $19&65535;
 $21 = (__cmsWriteUInt16Number($1,$20)|0);
 $22 = ($21|0)==(0);
 if ($22) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $23 = (__cmsWriteUInt16Number($1,0)|0);
 $24 = ($23|0)==(0);
 if ($24) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $25 = ($7|0)==(0);
 if ($25) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 } else {
  $$02526 = 0;
 }
 while(1) {
  $28 = HEAP32[$4>>2]|0;
  $29 = (((($28)) + 16|0) + ($$02526<<3)|0);
  $30 = +HEAPF64[$29>>3];
  $31 = (__cmsWrite15Fixed16Number($1,$30)|0);
  $32 = ($31|0)==(0);
  $27 = (($$02526) + 1)|0;
  if ($32) {
   $$0 = 0;
   label = 10;
   break;
  }
  $26 = ($27|0)<($18|0);
  if ($26) {
   $$02526 = $27;
  } else {
   $$0 = 1;
   label = 10;
   break;
  }
 }
 if ((label|0) == 10) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _Type_ParametricCurve_Dup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_cmsDupToneCurve($1)|0);
 return ($3|0);
}
function _Type_ParametricCurve_Free($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _cmsFreeToneCurve($1);
 return;
}
function _Type_DateTime_Read($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $4 = sp;
 HEAP32[$2>>2] = 0;
 $5 = ((($0)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (__cmsMalloc($6,44)|0);
 $8 = ($7|0)==(0|0);
 if ($8) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $9 = ((($1)) + 272|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (FUNCTION_TABLE_iiiii[$10 & 255]($1,$4,12,1)|0);
 $12 = ($11|0)==(1);
 if (!($12)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 __cmsDecodeDateTimeNumber($4,$7);
 HEAP32[$2>>2] = 1;
 $$0 = $7;
 STACKTOP = sp;return ($$0|0);
}
function _Type_DateTime_Write($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $4 = sp;
 __cmsEncodeDateTimeNumber($4,$2);
 $5 = ((($1)) + 288|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (FUNCTION_TABLE_iiii[$6 & 63]($1,12,$4)|0);
 $not$ = ($7|0)!=(0);
 $$ = $not$&1;
 STACKTOP = sp;return ($$|0);
}
function _Type_DateTime_Dup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (__cmsDupMem($4,$1,44)|0);
 return ($5|0);
}
function _Type_DateTime_Free($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 __cmsFree($3,$1);
 return;
}
function _Type_LUT8_Read($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$073 = 0, $$07487 = 0, $$07586 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $4 = sp + 74|0;
 $5 = sp + 73|0;
 $6 = sp + 72|0;
 $7 = sp;
 HEAP32[$2>>2] = 0;
 $8 = (__cmsReadUInt8Number($1,$4)|0);
 $9 = ($8|0)==(0);
 if ($9) {
  $$073 = 0;
  STACKTOP = sp;return ($$073|0);
 }
 $10 = (__cmsReadUInt8Number($1,$5)|0);
 $11 = ($10|0)==(0);
 if ($11) {
  $$073 = 0;
  STACKTOP = sp;return ($$073|0);
 }
 $12 = (__cmsReadUInt8Number($1,$6)|0);
 $13 = ($12|0)==(0);
 $14 = HEAP8[$6>>0]|0;
 $15 = ($14<<24>>24)==(1);
 $or$cond = $13 | $15;
 if ($or$cond) {
  $$073 = 0;
  STACKTOP = sp;return ($$073|0);
 }
 $16 = (__cmsReadUInt8Number($1,0)|0);
 $17 = ($16|0)==(0);
 if ($17) {
  $$073 = 0;
  STACKTOP = sp;return ($$073|0);
 }
 $18 = HEAP8[$4>>0]|0;
 $19 = $18&255;
 $20 = (($18) + -1)<<24>>24;
 $21 = ($20&255)>(15);
 if ($21) {
  $$073 = 0;
  STACKTOP = sp;return ($$073|0);
 }
 $22 = HEAP8[$5>>0]|0;
 $23 = (($22) + -1)<<24>>24;
 $24 = ($23&255)>(15);
 if ($24) {
  $$073 = 0;
  STACKTOP = sp;return ($$073|0);
 }
 $25 = $22&255;
 $26 = ((($0)) + 20|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (_cmsPipelineAlloc($27,$19,$25)|0);
 $29 = ($28|0)==(0|0);
 if ($29) {
  $$073 = 0;
  STACKTOP = sp;return ($$073|0);
 }
 $30 = (__cmsRead15Fixed16Number($1,$7)|0);
 $31 = ($30|0)==(0);
 L22: do {
  if (!($31)) {
   $32 = ((($7)) + 8|0);
   $33 = (__cmsRead15Fixed16Number($1,$32)|0);
   $34 = ($33|0)==(0);
   if (!($34)) {
    $35 = ((($7)) + 16|0);
    $36 = (__cmsRead15Fixed16Number($1,$35)|0);
    $37 = ($36|0)==(0);
    if (!($37)) {
     $38 = ((($7)) + 24|0);
     $39 = (__cmsRead15Fixed16Number($1,$38)|0);
     $40 = ($39|0)==(0);
     if (!($40)) {
      $41 = ((($7)) + 32|0);
      $42 = (__cmsRead15Fixed16Number($1,$41)|0);
      $43 = ($42|0)==(0);
      if (!($43)) {
       $44 = ((($7)) + 40|0);
       $45 = (__cmsRead15Fixed16Number($1,$44)|0);
       $46 = ($45|0)==(0);
       if (!($46)) {
        $47 = ((($7)) + 48|0);
        $48 = (__cmsRead15Fixed16Number($1,$47)|0);
        $49 = ($48|0)==(0);
        if (!($49)) {
         $50 = ((($7)) + 56|0);
         $51 = (__cmsRead15Fixed16Number($1,$50)|0);
         $52 = ($51|0)==(0);
         if (!($52)) {
          $53 = ((($7)) + 64|0);
          $54 = (__cmsRead15Fixed16Number($1,$53)|0);
          $55 = ($54|0)==(0);
          if (!($55)) {
           $56 = HEAP8[$4>>0]|0;
           $57 = ($56<<24>>24)==(3);
           if ($57) {
            $58 = (__cmsMAT3isIdentity($7)|0);
            $59 = ($58|0)==(0);
            if ($59) {
             $60 = HEAP32[$26>>2]|0;
             $61 = (_cmsStageAllocMatrix($60,3,3,$7,0)|0);
             $62 = (_cmsPipelineInsertStage($28,0,$61)|0);
             $63 = ($62|0)==(0);
             if ($63) {
              break;
             }
            }
           }
           $64 = HEAP32[$26>>2]|0;
           $65 = HEAP8[$4>>0]|0;
           $66 = $65&255;
           $67 = (_Read8bitTables($64,$1,$28,$66)|0);
           $68 = ($67|0)==(0);
           if (!($68)) {
            $69 = HEAP8[$5>>0]|0;
            $70 = $69&255;
            $71 = HEAP8[$6>>0]|0;
            $72 = $71&255;
            $73 = HEAP8[$4>>0]|0;
            $74 = $73&255;
            $75 = (_uipow($70,$72,$74)|0);
            switch ($75|0) {
            case -1:  {
             break L22;
             break;
            }
            case 0:  {
             label = 29;
             break;
            }
            default: {
             $76 = HEAP32[$26>>2]|0;
             $77 = (__cmsCalloc($76,$75,2)|0);
             $78 = ($77|0)==(0|0);
             if ($78) {
              break L22;
             }
             $79 = HEAP32[$26>>2]|0;
             $80 = (__cmsMalloc($79,$75)|0);
             $81 = ($80|0)==(0|0);
             if ($81) {
              $82 = HEAP32[$26>>2]|0;
              __cmsFree($82,$77);
              break L22;
             }
             $83 = ((($1)) + 272|0);
             $84 = HEAP32[$83>>2]|0;
             $85 = (FUNCTION_TABLE_iiiii[$84 & 255]($1,$80,$75,1)|0);
             $86 = ($85|0)==(1);
             if ($86) {
              $$07487 = $77;$$07586 = 0;
             } else {
              $87 = HEAP32[$26>>2]|0;
              __cmsFree($87,$77);
              $88 = HEAP32[$26>>2]|0;
              __cmsFree($88,$80);
              break L22;
             }
             while(1) {
              $89 = (($80) + ($$07586)|0);
              $90 = HEAP8[$89>>0]|0;
              $91 = $90&255;
              $92 = $91 << 8;
              $93 = $92 | $91;
              $94 = $93&65535;
              $95 = ((($$07487)) + 2|0);
              HEAP16[$$07487>>1] = $94;
              $96 = (($$07586) + 1)|0;
              $exitcond = ($96|0)==($75|0);
              if ($exitcond) {
               break;
              } else {
               $$07487 = $95;$$07586 = $96;
              }
             }
             $97 = HEAP32[$26>>2]|0;
             __cmsFree($97,$80);
             $98 = HEAP32[$26>>2]|0;
             $99 = HEAP8[$6>>0]|0;
             $100 = $99&255;
             $101 = HEAP8[$4>>0]|0;
             $102 = $101&255;
             $103 = HEAP8[$5>>0]|0;
             $104 = $103&255;
             $105 = (_cmsStageAllocCLut16bit($98,$100,$102,$104,$77)|0);
             $106 = (_cmsPipelineInsertStage($28,1,$105)|0);
             $107 = ($106|0)==(0);
             $108 = HEAP32[$26>>2]|0;
             __cmsFree($108,$77);
             if (!($107)) {
              label = 29;
             }
            }
            }
            do {
             if ((label|0) == 29) {
              $109 = HEAP32[$26>>2]|0;
              $110 = HEAP8[$5>>0]|0;
              $111 = $110&255;
              $112 = (_Read8bitTables($109,$1,$28,$111)|0);
              $113 = ($112|0)==(0);
              if ($113) {
               break;
              }
              HEAP32[$2>>2] = 1;
              $$073 = $28;
              STACKTOP = sp;return ($$073|0);
             }
            } while(0);
            $114 = ($28|0)==(0|0);
            if ($114) {
             $$073 = 0;
             STACKTOP = sp;return ($$073|0);
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 _cmsPipelineFree($28);
 $$073 = 0;
 STACKTOP = sp;return ($$073|0);
}
function _Type_LUT8_Write($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$0 = 0, $$0100123 = 0, $$094107114 = 0, $$094107114121 = 0, $$094111 = 0, $$095 = 0, $$096116 = 0, $$096116119 = 0, $$097101106115120 = 0, $$097104 = 0, $$098 = 0, $$099 = 0, $$1103 = 0, $$2110 = 0, $$3118 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $not$ = 0;
 var $or$cond124 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $4 = HEAP32[$2>>2]|0;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(1835103334);
 if ($7) {
  $8 = ((($4)) + 32|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($4)) + 36|0);
  $11 = HEAP32[$10>>2]|0;
  $$095 = $9;$$098 = $11;
 } else {
  $$095 = 0;$$098 = $4;
 }
 $12 = ($$098|0)==(0|0);
 L4: do {
  if ($12) {
   $$0 = 0;$$094107114121 = 0;$$096116119 = 0;$$097101106115120 = 0;
   label = 13;
  } else {
   $13 = ((($$098)) + 4|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($14|0)==(1668707188);
   if ($15) {
    $16 = ((($$098)) + 32|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = ((($$098)) + 36|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = ($19|0)==(0|0);
    if ($20) {
     $$0 = 0;$$094107114121 = 0;$$096116119 = 0;$$097101106115120 = $17;
     label = 13;
     break;
    } else {
     $$097104 = $17;$$1103 = $19;
    }
   } else {
    $$097104 = 0;$$1103 = $$098;
   }
   $21 = ((($$1103)) + 4|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($22|0)==(1668052340);
   if ($23) {
    $24 = ((($$1103)) + 32|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ((($$1103)) + 36|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ($27|0)==(0|0);
    if ($28) {
     $$094107114 = $25;$$096116 = 0;
    } else {
     $$094111 = $25;$$2110 = $27;
     label = 8;
    }
   } else {
    $$094111 = 0;$$2110 = $$1103;
    label = 8;
   }
   do {
    if ((label|0) == 8) {
     $29 = ((($$2110)) + 4|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ($30|0)==(1668707188);
     if ($31) {
      $32 = ((($$2110)) + 32|0);
      $33 = HEAP32[$32>>2]|0;
      $34 = ((($$2110)) + 36|0);
      $35 = HEAP32[$34>>2]|0;
      $36 = ($35|0)==(0|0);
      if ($36) {
       $$094107114 = $$094111;$$096116 = $33;
       break;
      } else {
       $$3118 = $35;
      }
     } else {
      $$3118 = $$2110;
     }
     $37 = HEAP32[$$3118>>2]|0;
     _cmsSignalError($37,8,29200,$vararg_buffer);
     $$099 = 0;
     break L4;
    }
   } while(0);
   $38 = ($$094107114|0)==(0|0);
   if ($38) {
    $$0 = 0;$$094107114121 = 0;$$096116119 = $$096116;$$097101106115120 = $$097104;
    label = 13;
   } else {
    $39 = ((($$094107114)) + 4|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = ((($40)) + 16|0);
    $42 = HEAP32[$41>>2]|0;
    $$0 = $42;$$094107114121 = $$094107114;$$096116119 = $$096116;$$097101106115120 = $$097104;
    label = 13;
   }
  }
 } while(0);
 L18: do {
  if ((label|0) == 13) {
   $43 = ((($2)) + 4|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = $44&255;
   $46 = (__cmsWriteUInt8Number($1,$45)|0);
   $47 = ($46|0)==(0);
   if ($47) {
    $$099 = 0;
   } else {
    $48 = ((($2)) + 8|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = $49&255;
    $51 = (__cmsWriteUInt8Number($1,$50)|0);
    $52 = ($51|0)==(0);
    if ($52) {
     $$099 = 0;
    } else {
     $53 = $$0&255;
     $54 = (__cmsWriteUInt8Number($1,$53)|0);
     $55 = ($54|0)==(0);
     if ($55) {
      $$099 = 0;
     } else {
      $56 = (__cmsWriteUInt8Number($1,0)|0);
      $57 = ($56|0)==(0);
      if ($57) {
       $$099 = 0;
      } else {
       $58 = ($$095|0)==(0|0);
       if ($58) {
        $103 = (__cmsWrite15Fixed16Number($1,1.0)|0);
        $104 = ($103|0)==(0);
        if ($104) {
         $$099 = 0;
         break;
        }
        $105 = (__cmsWrite15Fixed16Number($1,0.0)|0);
        $106 = ($105|0)==(0);
        if ($106) {
         $$099 = 0;
         break;
        }
        $107 = (__cmsWrite15Fixed16Number($1,0.0)|0);
        $108 = ($107|0)==(0);
        if ($108) {
         $$099 = 0;
         break;
        }
        $109 = (__cmsWrite15Fixed16Number($1,0.0)|0);
        $110 = ($109|0)==(0);
        if ($110) {
         $$099 = 0;
         break;
        }
        $111 = (__cmsWrite15Fixed16Number($1,1.0)|0);
        $112 = ($111|0)==(0);
        if ($112) {
         $$099 = 0;
         break;
        }
        $113 = (__cmsWrite15Fixed16Number($1,0.0)|0);
        $114 = ($113|0)==(0);
        if ($114) {
         $$099 = 0;
         break;
        }
        $115 = (__cmsWrite15Fixed16Number($1,0.0)|0);
        $116 = ($115|0)==(0);
        if ($116) {
         $$099 = 0;
         break;
        }
        $117 = (__cmsWrite15Fixed16Number($1,0.0)|0);
        $118 = ($117|0)==(0);
        if ($118) {
         $$099 = 0;
         break;
        }
        $119 = (__cmsWrite15Fixed16Number($1,1.0)|0);
        $120 = ($119|0)==(0);
        if ($120) {
         $$099 = 0;
         break;
        }
       } else {
        $59 = HEAP32[$$095>>2]|0;
        $60 = +HEAPF64[$59>>3];
        $61 = (__cmsWrite15Fixed16Number($1,$60)|0);
        $62 = ($61|0)==(0);
        if ($62) {
         $$099 = 0;
         break;
        }
        $63 = HEAP32[$$095>>2]|0;
        $64 = ((($63)) + 8|0);
        $65 = +HEAPF64[$64>>3];
        $66 = (__cmsWrite15Fixed16Number($1,$65)|0);
        $67 = ($66|0)==(0);
        if ($67) {
         $$099 = 0;
         break;
        }
        $68 = HEAP32[$$095>>2]|0;
        $69 = ((($68)) + 16|0);
        $70 = +HEAPF64[$69>>3];
        $71 = (__cmsWrite15Fixed16Number($1,$70)|0);
        $72 = ($71|0)==(0);
        if ($72) {
         $$099 = 0;
         break;
        }
        $73 = HEAP32[$$095>>2]|0;
        $74 = ((($73)) + 24|0);
        $75 = +HEAPF64[$74>>3];
        $76 = (__cmsWrite15Fixed16Number($1,$75)|0);
        $77 = ($76|0)==(0);
        if ($77) {
         $$099 = 0;
         break;
        }
        $78 = HEAP32[$$095>>2]|0;
        $79 = ((($78)) + 32|0);
        $80 = +HEAPF64[$79>>3];
        $81 = (__cmsWrite15Fixed16Number($1,$80)|0);
        $82 = ($81|0)==(0);
        if ($82) {
         $$099 = 0;
         break;
        }
        $83 = HEAP32[$$095>>2]|0;
        $84 = ((($83)) + 40|0);
        $85 = +HEAPF64[$84>>3];
        $86 = (__cmsWrite15Fixed16Number($1,$85)|0);
        $87 = ($86|0)==(0);
        if ($87) {
         $$099 = 0;
         break;
        }
        $88 = HEAP32[$$095>>2]|0;
        $89 = ((($88)) + 48|0);
        $90 = +HEAPF64[$89>>3];
        $91 = (__cmsWrite15Fixed16Number($1,$90)|0);
        $92 = ($91|0)==(0);
        if ($92) {
         $$099 = 0;
         break;
        }
        $93 = HEAP32[$$095>>2]|0;
        $94 = ((($93)) + 56|0);
        $95 = +HEAPF64[$94>>3];
        $96 = (__cmsWrite15Fixed16Number($1,$95)|0);
        $97 = ($96|0)==(0);
        if ($97) {
         $$099 = 0;
         break;
        }
        $98 = HEAP32[$$095>>2]|0;
        $99 = ((($98)) + 64|0);
        $100 = +HEAPF64[$99>>3];
        $101 = (__cmsWrite15Fixed16Number($1,$100)|0);
        $102 = ($101|0)==(0);
        if ($102) {
         $$099 = 0;
         break;
        }
       }
       $121 = ((($0)) + 20|0);
       $122 = HEAP32[$121>>2]|0;
       $123 = HEAP32[$43>>2]|0;
       $124 = (_Write8bitTables($122,$1,$123,$$097101106115120)|0);
       $125 = ($124|0)==(0);
       if ($125) {
        $$099 = 0;
       } else {
        $126 = HEAP32[$48>>2]|0;
        $127 = HEAP32[$43>>2]|0;
        $128 = (_uipow($126,$$0,$127)|0);
        $129 = ($128|0)==(-1);
        if ($129) {
         $$099 = 0;
        } else {
         $130 = ($128|0)!=(0);
         $131 = ($$094107114121|0)!=(0|0);
         $or$cond124 = $131 & $130;
         if ($or$cond124) {
          $$0100123 = 0;
          while(1) {
           $134 = HEAP32[$$094107114121>>2]|0;
           $135 = (($134) + ($$0100123<<1)|0);
           $136 = HEAP16[$135>>1]|0;
           $137 = $136&65535;
           $138 = ($137*65281)|0;
           $139 = (($138) + 8388608)|0;
           $140 = $139 >>> 24;
           $141 = $140&255;
           $142 = (__cmsWriteUInt8Number($1,$141)|0);
           $143 = ($142|0)==(0);
           $133 = (($$0100123) + 1)|0;
           if ($143) {
            $$099 = 0;
            break L18;
           }
           $132 = ($133>>>0)<($128>>>0);
           if ($132) {
            $$0100123 = $133;
           } else {
            break;
           }
          }
         }
         $144 = HEAP32[$121>>2]|0;
         $145 = HEAP32[$48>>2]|0;
         $146 = (_Write8bitTables($144,$1,$145,$$096116119)|0);
         $not$ = ($146|0)!=(0);
         $$ = $not$&1;
         $$099 = $$;
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$099|0);
}
function _Type_LUT8_Dup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_cmsPipelineDup($1)|0);
 return ($3|0);
}
function _Type_LUT8_Free($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _cmsPipelineFree($1);
 return;
}
function _Type_LUT16_Read($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond57 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $4 = sp + 78|0;
 $5 = sp + 77|0;
 $6 = sp + 76|0;
 $7 = sp;
 $8 = sp + 74|0;
 $9 = sp + 72|0;
 HEAP32[$2>>2] = 0;
 $10 = (__cmsReadUInt8Number($1,$4)|0);
 $11 = ($10|0)==(0);
 if ($11) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $12 = (__cmsReadUInt8Number($1,$5)|0);
 $13 = ($12|0)==(0);
 if ($13) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $14 = (__cmsReadUInt8Number($1,$6)|0);
 $15 = ($14|0)==(0);
 if ($15) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $16 = (__cmsReadUInt8Number($1,0)|0);
 $17 = ($16|0)==(0);
 if ($17) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $18 = HEAP8[$4>>0]|0;
 $19 = $18&255;
 $20 = (($18) + -1)<<24>>24;
 $21 = ($20&255)>(15);
 if ($21) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $22 = HEAP8[$5>>0]|0;
 $23 = (($22) + -1)<<24>>24;
 $24 = ($23&255)>(15);
 if ($24) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $25 = $22&255;
 $26 = ((($0)) + 20|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (_cmsPipelineAlloc($27,$19,$25)|0);
 $29 = ($28|0)==(0|0);
 if ($29) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $30 = (__cmsRead15Fixed16Number($1,$7)|0);
 $31 = ($30|0)==(0);
 L22: do {
  if (!($31)) {
   $32 = ((($7)) + 8|0);
   $33 = (__cmsRead15Fixed16Number($1,$32)|0);
   $34 = ($33|0)==(0);
   if (!($34)) {
    $35 = ((($7)) + 16|0);
    $36 = (__cmsRead15Fixed16Number($1,$35)|0);
    $37 = ($36|0)==(0);
    if (!($37)) {
     $38 = ((($7)) + 24|0);
     $39 = (__cmsRead15Fixed16Number($1,$38)|0);
     $40 = ($39|0)==(0);
     if (!($40)) {
      $41 = ((($7)) + 32|0);
      $42 = (__cmsRead15Fixed16Number($1,$41)|0);
      $43 = ($42|0)==(0);
      if (!($43)) {
       $44 = ((($7)) + 40|0);
       $45 = (__cmsRead15Fixed16Number($1,$44)|0);
       $46 = ($45|0)==(0);
       if (!($46)) {
        $47 = ((($7)) + 48|0);
        $48 = (__cmsRead15Fixed16Number($1,$47)|0);
        $49 = ($48|0)==(0);
        if (!($49)) {
         $50 = ((($7)) + 56|0);
         $51 = (__cmsRead15Fixed16Number($1,$50)|0);
         $52 = ($51|0)==(0);
         if (!($52)) {
          $53 = ((($7)) + 64|0);
          $54 = (__cmsRead15Fixed16Number($1,$53)|0);
          $55 = ($54|0)==(0);
          if (!($55)) {
           $56 = HEAP8[$4>>0]|0;
           $57 = ($56<<24>>24)==(3);
           if ($57) {
            $58 = (__cmsMAT3isIdentity($7)|0);
            $59 = ($58|0)==(0);
            if ($59) {
             $60 = HEAP32[$26>>2]|0;
             $61 = (_cmsStageAllocMatrix($60,3,3,$7,0)|0);
             $62 = (_cmsPipelineInsertStage($28,1,$61)|0);
             $63 = ($62|0)==(0);
             if ($63) {
              break;
             }
            }
           }
           $64 = (__cmsReadUInt16Number($1,$8)|0);
           $65 = ($64|0)==(0);
           if (!($65)) {
            $66 = (__cmsReadUInt16Number($1,$9)|0);
            $67 = ($66|0)==(0);
            if (!($67)) {
             $68 = HEAP16[$8>>1]|0;
             $69 = HEAP16[$9>>1]|0;
             $70 = $69 | $68;
             $71 = ($70<<16>>16)<(0);
             $72 = HEAP8[$6>>0]|0;
             $73 = ($72<<24>>24)==(1);
             $or$cond57 = $71 | $73;
             if ($or$cond57) {
              break;
             }
             $74 = $68&65535;
             $75 = HEAP32[$26>>2]|0;
             $76 = HEAP8[$4>>0]|0;
             $77 = $76&255;
             $78 = (_Read16bitTables($75,$1,$28,$77,$74)|0);
             $79 = ($78|0)==(0);
             if ($79) {
              break;
             }
             $80 = HEAP8[$5>>0]|0;
             $81 = $80&255;
             $82 = HEAP8[$6>>0]|0;
             $83 = $82&255;
             $84 = HEAP8[$4>>0]|0;
             $85 = $84&255;
             $86 = (_uipow($81,$83,$85)|0);
             L40: do {
              switch ($86|0) {
              case -1:  {
               break L22;
               break;
              }
              case 0:  {
               break;
              }
              default: {
               $87 = HEAP32[$26>>2]|0;
               $88 = (__cmsCalloc($87,$86,2)|0);
               $89 = ($88|0)==(0|0);
               if ($89) {
                break L22;
               }
               $90 = (__cmsReadUInt16Array($1,$86,$88)|0);
               $91 = ($90|0)==(0);
               $92 = HEAP32[$26>>2]|0;
               if ($91) {
                __cmsFree($92,$88);
                break L22;
               } else {
                $93 = HEAP8[$6>>0]|0;
                $94 = $93&255;
                $95 = HEAP8[$4>>0]|0;
                $96 = $95&255;
                $97 = HEAP8[$5>>0]|0;
                $98 = $97&255;
                $99 = (_cmsStageAllocCLut16bit($92,$94,$96,$98,$88)|0);
                $100 = (_cmsPipelineInsertStage($28,1,$99)|0);
                $101 = ($100|0)==(0);
                $102 = HEAP32[$26>>2]|0;
                __cmsFree($102,$88);
                if ($101) {
                 break L22;
                } else {
                 break L40;
                }
               }
              }
              }
             } while(0);
             $103 = HEAP32[$26>>2]|0;
             $104 = HEAP8[$5>>0]|0;
             $105 = $104&255;
             $106 = HEAP16[$9>>1]|0;
             $107 = $106&65535;
             $108 = (_Read16bitTables($103,$1,$28,$105,$107)|0);
             $109 = ($108|0)==(0);
             if ($109) {
              break;
             }
             HEAP32[$2>>2] = 1;
             $$0 = $28;
             STACKTOP = sp;return ($$0|0);
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 _cmsPipelineFree($28);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _Type_LUT16_Write($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$0113 = 0, $$0114124 = 0, $$0115155 = 0, $$0117136144 = 0, $$0117140 = 0, $$0118121126135145 = 0, $$0118123 = 0, $$0119147 = 0, $$0120127134146 = 0, $$0120130 = 0, $$1116154 = 0, $$1131 = 0, $$2141 = 0, $$3149 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0.0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0.0, $or$cond = 0, $vararg_buffer = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $4 = HEAP32[$2>>2]|0;
 $5 = ($4|0)==(0|0);
 do {
  if ($5) {
   $$0117136144 = 0;$$0118121126135145 = 0;$$0119147 = 0;$$0120127134146 = 0;
   label = 11;
  } else {
   $6 = ((($4)) + 4|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)==(1835103334);
   if ($8) {
    $9 = ((($4)) + 32|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = ((($4)) + 36|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==(0|0);
    if ($13) {
     $$0117136144 = 0;$$0118121126135145 = $10;$$0119147 = 0;$$0120127134146 = 0;
     label = 11;
     break;
    } else {
     $$0114124 = $12;$$0118123 = $10;
    }
   } else {
    $$0114124 = $4;$$0118123 = 0;
   }
   $14 = ((($$0114124)) + 4|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)==(1668707188);
   if ($16) {
    $17 = ((($$0114124)) + 32|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($$0114124)) + 36|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==(0|0);
    if ($21) {
     $$0117136144 = 0;$$0118121126135145 = $$0118123;$$0119147 = 0;$$0120127134146 = $18;
     label = 11;
     break;
    } else {
     $$0120130 = $18;$$1131 = $20;
    }
   } else {
    $$0120130 = 0;$$1131 = $$0114124;
   }
   $22 = ((($$1131)) + 4|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ($23|0)==(1668052340);
   if ($24) {
    $25 = ((($$1131)) + 32|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = ((($$1131)) + 36|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = ($28|0)==(0|0);
    if ($29) {
     $$0117136144 = $26;$$0118121126135145 = $$0118123;$$0119147 = 0;$$0120127134146 = $$0120130;
     label = 11;
     break;
    } else {
     $$0117140 = $26;$$2141 = $28;
    }
   } else {
    $$0117140 = 0;$$2141 = $$1131;
   }
   $30 = ((($$2141)) + 4|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ($31|0)==(1668707188);
   if ($32) {
    $33 = ((($$2141)) + 32|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = ((($$2141)) + 36|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ($36|0)==(0|0);
    if ($37) {
     $$0117136144 = $$0117140;$$0118121126135145 = $$0118123;$$0119147 = $34;$$0120127134146 = $$0120130;
     label = 11;
     break;
    } else {
     $$3149 = $36;
    }
   } else {
    $$3149 = $$2141;
   }
   $38 = HEAP32[$$3149>>2]|0;
   _cmsSignalError($38,8,29119,$vararg_buffer);
   $$0113 = 0;
  }
 } while(0);
 L15: do {
  if ((label|0) == 11) {
   $39 = (_cmsPipelineInputChannels($2)|0);
   $40 = (_cmsPipelineOutputChannels($2)|0);
   $41 = ($$0117136144|0)==(0|0);
   if ($41) {
    $$0 = 0;
   } else {
    $42 = ((($$0117136144)) + 4|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = ((($43)) + 16|0);
    $45 = HEAP32[$44>>2]|0;
    $$0 = $45;
   }
   $46 = $39&255;
   $47 = (__cmsWriteUInt8Number($1,$46)|0);
   $48 = ($47|0)==(0);
   if ($48) {
    $$0113 = 0;
   } else {
    $49 = $40&255;
    $50 = (__cmsWriteUInt8Number($1,$49)|0);
    $51 = ($50|0)==(0);
    if ($51) {
     $$0113 = 0;
    } else {
     $52 = $$0&255;
     $53 = (__cmsWriteUInt8Number($1,$52)|0);
     $54 = ($53|0)==(0);
     if ($54) {
      $$0113 = 0;
     } else {
      $55 = (__cmsWriteUInt8Number($1,0)|0);
      $56 = ($55|0)==(0);
      if ($56) {
       $$0113 = 0;
      } else {
       $57 = ($$0118121126135145|0)==(0|0);
       if ($57) {
        $102 = (__cmsWrite15Fixed16Number($1,1.0)|0);
        $103 = ($102|0)==(0);
        if ($103) {
         $$0113 = 0;
         break;
        }
        $104 = (__cmsWrite15Fixed16Number($1,0.0)|0);
        $105 = ($104|0)==(0);
        if ($105) {
         $$0113 = 0;
         break;
        }
        $106 = (__cmsWrite15Fixed16Number($1,0.0)|0);
        $107 = ($106|0)==(0);
        if ($107) {
         $$0113 = 0;
         break;
        }
        $108 = (__cmsWrite15Fixed16Number($1,0.0)|0);
        $109 = ($108|0)==(0);
        if ($109) {
         $$0113 = 0;
         break;
        }
        $110 = (__cmsWrite15Fixed16Number($1,1.0)|0);
        $111 = ($110|0)==(0);
        if ($111) {
         $$0113 = 0;
         break;
        }
        $112 = (__cmsWrite15Fixed16Number($1,0.0)|0);
        $113 = ($112|0)==(0);
        if ($113) {
         $$0113 = 0;
         break;
        }
        $114 = (__cmsWrite15Fixed16Number($1,0.0)|0);
        $115 = ($114|0)==(0);
        if ($115) {
         $$0113 = 0;
         break;
        }
        $116 = (__cmsWrite15Fixed16Number($1,0.0)|0);
        $117 = ($116|0)==(0);
        if ($117) {
         $$0113 = 0;
         break;
        }
        $118 = (__cmsWrite15Fixed16Number($1,1.0)|0);
        $119 = ($118|0)==(0);
        if ($119) {
         $$0113 = 0;
         break;
        }
       } else {
        $58 = HEAP32[$$0118121126135145>>2]|0;
        $59 = +HEAPF64[$58>>3];
        $60 = (__cmsWrite15Fixed16Number($1,$59)|0);
        $61 = ($60|0)==(0);
        if ($61) {
         $$0113 = 0;
         break;
        }
        $62 = HEAP32[$$0118121126135145>>2]|0;
        $63 = ((($62)) + 8|0);
        $64 = +HEAPF64[$63>>3];
        $65 = (__cmsWrite15Fixed16Number($1,$64)|0);
        $66 = ($65|0)==(0);
        if ($66) {
         $$0113 = 0;
         break;
        }
        $67 = HEAP32[$$0118121126135145>>2]|0;
        $68 = ((($67)) + 16|0);
        $69 = +HEAPF64[$68>>3];
        $70 = (__cmsWrite15Fixed16Number($1,$69)|0);
        $71 = ($70|0)==(0);
        if ($71) {
         $$0113 = 0;
         break;
        }
        $72 = HEAP32[$$0118121126135145>>2]|0;
        $73 = ((($72)) + 24|0);
        $74 = +HEAPF64[$73>>3];
        $75 = (__cmsWrite15Fixed16Number($1,$74)|0);
        $76 = ($75|0)==(0);
        if ($76) {
         $$0113 = 0;
         break;
        }
        $77 = HEAP32[$$0118121126135145>>2]|0;
        $78 = ((($77)) + 32|0);
        $79 = +HEAPF64[$78>>3];
        $80 = (__cmsWrite15Fixed16Number($1,$79)|0);
        $81 = ($80|0)==(0);
        if ($81) {
         $$0113 = 0;
         break;
        }
        $82 = HEAP32[$$0118121126135145>>2]|0;
        $83 = ((($82)) + 40|0);
        $84 = +HEAPF64[$83>>3];
        $85 = (__cmsWrite15Fixed16Number($1,$84)|0);
        $86 = ($85|0)==(0);
        if ($86) {
         $$0113 = 0;
         break;
        }
        $87 = HEAP32[$$0118121126135145>>2]|0;
        $88 = ((($87)) + 48|0);
        $89 = +HEAPF64[$88>>3];
        $90 = (__cmsWrite15Fixed16Number($1,$89)|0);
        $91 = ($90|0)==(0);
        if ($91) {
         $$0113 = 0;
         break;
        }
        $92 = HEAP32[$$0118121126135145>>2]|0;
        $93 = ((($92)) + 56|0);
        $94 = +HEAPF64[$93>>3];
        $95 = (__cmsWrite15Fixed16Number($1,$94)|0);
        $96 = ($95|0)==(0);
        if ($96) {
         $$0113 = 0;
         break;
        }
        $97 = HEAP32[$$0118121126135145>>2]|0;
        $98 = ((($97)) + 64|0);
        $99 = +HEAPF64[$98>>3];
        $100 = (__cmsWrite15Fixed16Number($1,$99)|0);
        $101 = ($100|0)==(0);
        if ($101) {
         $$0113 = 0;
         break;
        }
       }
       $120 = ($$0120127134146|0)!=(0|0);
       if ($120) {
        $121 = ((($$0120127134146)) + 4|0);
        $122 = HEAP32[$121>>2]|0;
        $123 = HEAP32[$122>>2]|0;
        $124 = ((($123)) + 20|0);
        $125 = HEAP32[$124>>2]|0;
        $126 = $125&65535;
        $127 = (__cmsWriteUInt16Number($1,$126)|0);
        $128 = ($127|0)==(0);
        if ($128) {
         $$0113 = 0;
         break;
        }
       } else {
        $129 = (__cmsWriteUInt16Number($1,2)|0);
        $130 = ($129|0)==(0);
        if ($130) {
         $$0113 = 0;
         break;
        }
       }
       $131 = ($$0119147|0)!=(0|0);
       if ($131) {
        $132 = ((($$0119147)) + 4|0);
        $133 = HEAP32[$132>>2]|0;
        $134 = HEAP32[$133>>2]|0;
        $135 = ((($134)) + 20|0);
        $136 = HEAP32[$135>>2]|0;
        $137 = $136&65535;
        $138 = (__cmsWriteUInt16Number($1,$137)|0);
        $139 = ($138|0)==(0);
        if ($139) {
         $$0113 = 0;
         break;
        }
       } else {
        $140 = (__cmsWriteUInt16Number($1,2)|0);
        $141 = ($140|0)==(0);
        if ($141) {
         $$0113 = 0;
         break;
        }
       }
       if ($120) {
        $143 = (_Write16bitTables($1,$$0120127134146)|0);
        $144 = ($143|0)==(0);
        if ($144) {
         $$0113 = 0;
         break;
        }
       } else {
        $142 = ($39|0)==(0);
        if (!($142)) {
         $$0115155 = 0;
         while(1) {
          $147 = (__cmsWriteUInt16Number($1,0)|0);
          $148 = ($147|0)==(0);
          if ($148) {
           $$0113 = 0;
           break L15;
          }
          $149 = (__cmsWriteUInt16Number($1,-1)|0);
          $150 = ($149|0)==(0);
          $146 = (($$0115155) + 1)|0;
          if ($150) {
           $$0113 = 0;
           break L15;
          }
          $145 = ($146>>>0)<($39>>>0);
          if ($145) {
           $$0115155 = $146;
          } else {
           break;
          }
         }
        }
       }
       $151 = (_uipow($40,$$0,$39)|0);
       $152 = ($151|0)==(-1);
       if ($152) {
        $$0113 = 0;
       } else {
        $153 = ($151|0)!=(0);
        $154 = ($$0117136144|0)!=(0|0);
        $or$cond = $154 & $153;
        if ($or$cond) {
         $155 = HEAP32[$$0117136144>>2]|0;
         $156 = (__cmsWriteUInt16Array($1,$151,$155)|0);
         $157 = ($156|0)==(0);
         if ($157) {
          $$0113 = 0;
          break;
         }
        }
        if ($131) {
         $159 = (_Write16bitTables($1,$$0119147)|0);
         $160 = ($159|0)==(0);
         if ($160) {
          $$0113 = 0;
          break;
         }
        } else {
         $158 = ($40|0)==(0);
         if (!($158)) {
          $$1116154 = 0;
          while(1) {
           $163 = (__cmsWriteUInt16Number($1,0)|0);
           $164 = ($163|0)==(0);
           if ($164) {
            $$0113 = 0;
            break L15;
           }
           $165 = (__cmsWriteUInt16Number($1,-1)|0);
           $166 = ($165|0)==(0);
           $162 = (($$1116154) + 1)|0;
           if ($166) {
            $$0113 = 0;
            break L15;
           }
           $161 = ($162>>>0)<($40>>>0);
           if ($161) {
            $$1116154 = $162;
           } else {
            break;
           }
          }
         }
        }
        $$0113 = 1;
       }
      }
     }
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0113|0);
}
function _Type_LUT16_Dup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_cmsPipelineDup($1)|0);
 return ($3|0);
}
function _Type_LUT16_Free($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _cmsPipelineFree($1);
 return;
}
function _Type_ColorantTable_Read($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$01516 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer = sp;
 $4 = sp + 4|0;
 $5 = sp + 14|0;
 $6 = sp + 8|0;
 $7 = (__cmsReadUInt32Number($1,$4)|0);
 $8 = ($7|0)==(0);
 if ($8) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $9 = HEAP32[$4>>2]|0;
 $10 = ($9>>>0)>(16);
 $11 = ((($0)) + 20|0);
 $12 = HEAP32[$11>>2]|0;
 if ($10) {
  HEAP32[$vararg_buffer>>2] = $9;
  _cmsSignalError($12,2,29095,$vararg_buffer);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $13 = (_cmsAllocNamedColorList($12,$9,0,33011,33011)|0);
 $14 = HEAP32[$4>>2]|0;
 $15 = ($14|0)==(0);
 L8: do {
  if (!($15)) {
   $16 = ((($1)) + 272|0);
   $17 = ((($5)) + 32|0);
   $$01516 = 0;
   while(1) {
    $21 = HEAP32[$16>>2]|0;
    $22 = (FUNCTION_TABLE_iiiii[$21 & 255]($1,$5,32,1)|0);
    $23 = ($22|0)==(1);
    if (!($23)) {
     break;
    }
    HEAP8[$17>>0] = 0;
    $24 = (__cmsReadUInt16Array($1,3,$6)|0);
    $25 = ($24|0)==(0);
    if ($25) {
     break;
    }
    $26 = (_cmsAppendNamedColor($13,$5,$6,0)|0);
    $27 = ($26|0)==(0);
    $20 = (($$01516) + 1)|0;
    if ($27) {
     break;
    }
    $18 = HEAP32[$4>>2]|0;
    $19 = ($20>>>0)<($18>>>0);
    if ($19) {
     $$01516 = $20;
    } else {
     break L8;
    }
   }
   HEAP32[$2>>2] = 0;
   _cmsFreeNamedColorList($13);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 HEAP32[$2>>2] = 1;
 $$0 = $13;
 STACKTOP = sp;return ($$0|0);
}
function _Type_ColorantTable_Write($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$01924 = 0, $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0;
 $4 = sp + 8|0;
 $5 = sp;
 $6 = (_cmsNamedColorCount($2)|0);
 $7 = (__cmsWriteUInt32Number($1,$6)|0);
 $8 = ($7|0)==(0);
 L1: do {
  if ($8) {
   $$2 = 0;
  } else {
   $9 = ($6|0)==(0);
   if ($9) {
    $$2 = 1;
   } else {
    $10 = ((($4)) + 32|0);
    $11 = ((($1)) + 288|0);
    $$01924 = 0;
    while(1) {
     _memset(($4|0),0,256)|0;
     $14 = (_cmsNamedColorInfo($2,$$01924,$4,0,0,$5,0)|0);
     $15 = ($14|0)==(0);
     if ($15) {
      label = 8;
      break;
     }
     HEAP8[$10>>0] = 0;
     $16 = HEAP32[$11>>2]|0;
     $17 = (FUNCTION_TABLE_iiii[$16 & 63]($1,32,$4)|0);
     $18 = ($17|0)==(0);
     if ($18) {
      label = 9;
      break;
     }
     $19 = (__cmsWriteUInt16Array($1,3,$5)|0);
     $not$ = ($19|0)==(0);
     $13 = (($$01924) + 1)|0;
     if ($not$) {
      $$2 = 0;
      break L1;
     }
     $12 = ($13>>>0)<($6>>>0);
     if ($12) {
      $$01924 = $13;
     } else {
      $$2 = 1;
      break L1;
     }
    }
    if ((label|0) == 8) {
     $$2 = 0;
     break;
    }
    else if ((label|0) == 9) {
     $$2 = 0;
     break;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$2|0);
}
function _Type_ColorantTable_Dup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_cmsDupNamedColorList($1)|0);
 return ($3|0);
}
function _Type_ColorantTable_Free($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _cmsFreeNamedColorList($1);
 return;
}
function _Type_NamedColor_Read($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$0 = 0, $$0$clear = 0, $$02628 = 0, $$027 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $switch = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $4 = sp + 20|0;
 $5 = sp + 16|0;
 $6 = sp + 12|0;
 $7 = sp + 128|0;
 $8 = sp + 96|0;
 $9 = sp + 56|0;
 $10 = sp + 24|0;
 $11 = sp + 62|0;
 HEAP32[$2>>2] = 0;
 $12 = (__cmsReadUInt32Number($1,$4)|0);
 $13 = ($12|0)==(0);
 if ($13) {
  $$027 = 0;
  STACKTOP = sp;return ($$027|0);
 }
 $14 = (__cmsReadUInt32Number($1,$5)|0);
 $15 = ($14|0)==(0);
 if ($15) {
  $$027 = 0;
  STACKTOP = sp;return ($$027|0);
 }
 $16 = (__cmsReadUInt32Number($1,$6)|0);
 $17 = ($16|0)==(0);
 if ($17) {
  $$027 = 0;
  STACKTOP = sp;return ($$027|0);
 }
 $18 = ((($1)) + 272|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (FUNCTION_TABLE_iiiii[$19 & 255]($1,$7,32,1)|0);
 $21 = ($20|0)==(1);
 if (!($21)) {
  $$027 = 0;
  STACKTOP = sp;return ($$027|0);
 }
 $22 = HEAP32[$18>>2]|0;
 $23 = (FUNCTION_TABLE_iiiii[$22 & 255]($1,$8,32,1)|0);
 $24 = ($23|0)==(1);
 if (!($24)) {
  $$027 = 0;
  STACKTOP = sp;return ($$027|0);
 }
 $25 = ((($8)) + 31|0);
 HEAP8[$25>>0] = 0;
 $26 = ((($7)) + 31|0);
 HEAP8[$26>>0] = 0;
 $27 = ((($0)) + 20|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = HEAP32[$5>>2]|0;
 $30 = HEAP32[$6>>2]|0;
 $31 = (_cmsAllocNamedColorList($28,$29,$30,$7,$8)|0);
 $32 = ($31|0)==(0|0);
 if ($32) {
  $33 = HEAP32[$27>>2]|0;
  $34 = HEAP32[$5>>2]|0;
  HEAP32[$vararg_buffer>>2] = $34;
  _cmsSignalError($33,2,29035,$vararg_buffer);
  $$027 = 0;
  STACKTOP = sp;return ($$027|0);
 }
 $35 = HEAP32[$6>>2]|0;
 $36 = ($35>>>0)>(16);
 L20: do {
  if ($36) {
   $40 = HEAP32[$27>>2]|0;
   HEAP32[$vararg_buffer1>>2] = $35;
   _cmsSignalError($40,2,29062,$vararg_buffer1);
  } else {
   $37 = HEAP32[$5>>2]|0;
   $38 = ($37|0)==(0);
   if (!($38)) {
    $39 = ((($11)) + 32|0);
    $$02628 = 0;
    while(1) {
     dest=$10; stop=dest+32|0; do { HEAP16[dest>>1]=0|0; dest=dest+2|0; } while ((dest|0) < (stop|0));
     $44 = HEAP32[$18>>2]|0;
     $45 = (FUNCTION_TABLE_iiiii[$44 & 255]($1,$11,32,1)|0);
     $46 = ($45|0)==(1);
     if ($46) {
      HEAP8[$39>>0] = 0;
      $47 = (__cmsReadUInt16Array($1,3,$9)|0);
      $48 = ($47|0)==(0);
      if ($48) {
       $$0 = 2;
      } else {
       $49 = HEAP32[$6>>2]|0;
       $50 = (__cmsReadUInt16Array($1,$49,$10)|0);
       $51 = ($50|0)==(0);
       if ($51) {
        $$0 = 2;
       } else {
        $52 = (_cmsAppendNamedColor($31,$11,$9,$10)|0);
        $53 = ($52|0)==(0);
        $$ = $53 ? 2 : 0;
        $$0 = $$;
       }
      }
     } else {
      $$0 = 2;
     }
     $$0$clear = $$0 & 3;
     $switch = ($$0$clear<<24>>24)==(0);
     $43 = (($$02628) + 1)|0;
     if (!($switch)) {
      break L20;
     }
     $41 = HEAP32[$5>>2]|0;
     $42 = ($43>>>0)<($41>>>0);
     if ($42) {
      $$02628 = $43;
     } else {
      break;
     }
    }
   }
   HEAP32[$2>>2] = 1;
   $$027 = $31;
   STACKTOP = sp;return ($$027|0);
  }
 } while(0);
 _cmsFreeNamedColorList($31);
 $$027 = 0;
 STACKTOP = sp;return ($$027|0);
}
function _Type_NamedColor_Write($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$03041 = 0, $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 368|0;
 $4 = sp + 329|0;
 $5 = sp + 296|0;
 $6 = sp + 32|0;
 $7 = sp;
 $8 = sp + 40|0;
 $9 = (_cmsNamedColorCount($2)|0);
 $10 = (__cmsWriteUInt32Number($1,0)|0);
 $11 = ($10|0)==(0);
 L1: do {
  if ($11) {
   $$2 = 0;
  } else {
   $12 = (__cmsWriteUInt32Number($1,$9)|0);
   $13 = ($12|0)==(0);
   if ($13) {
    $$2 = 0;
   } else {
    $14 = ((($2)) + 8|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = (__cmsWriteUInt32Number($1,$15)|0);
    $17 = ($16|0)==(0);
    if ($17) {
     $$2 = 0;
    } else {
     $18 = ((($2)) + 12|0);
     (_strncpy($4,$18,32)|0);
     $19 = ((($2)) + 45|0);
     (_strncpy($5,$19,32)|0);
     $20 = ((($4)) + 32|0);
     HEAP8[$20>>0] = 0;
     $21 = ((($5)) + 32|0);
     HEAP8[$21>>0] = 0;
     $22 = ((($1)) + 288|0);
     $23 = HEAP32[$22>>2]|0;
     $24 = (FUNCTION_TABLE_iiii[$23 & 63]($1,32,$4)|0);
     $25 = ($24|0)==(0);
     if ($25) {
      $$2 = 0;
     } else {
      $26 = HEAP32[$22>>2]|0;
      $27 = (FUNCTION_TABLE_iiii[$26 & 63]($1,32,$5)|0);
      $28 = ($27|0)==(0);
      if ($28) {
       $$2 = 0;
      } else {
       $29 = ($9|0)==(0);
       if ($29) {
        $$2 = 1;
       } else {
        $30 = ((($8)) + 32|0);
        $$03041 = 0;
        while(1) {
         $33 = (_cmsNamedColorInfo($2,$$03041,$8,0,0,$6,$7)|0);
         $34 = ($33|0)==(0);
         if ($34) {
          label = 13;
          break;
         }
         HEAP8[$30>>0] = 0;
         $35 = HEAP32[$22>>2]|0;
         $36 = (FUNCTION_TABLE_iiii[$35 & 63]($1,32,$8)|0);
         $37 = ($36|0)==(0);
         if ($37) {
          label = 14;
          break;
         }
         $38 = (__cmsWriteUInt16Array($1,3,$6)|0);
         $39 = ($38|0)==(0);
         if ($39) {
          label = 15;
          break;
         }
         $40 = HEAP32[$14>>2]|0;
         $41 = (__cmsWriteUInt16Array($1,$40,$7)|0);
         $not$ = ($41|0)==(0);
         $32 = (($$03041) + 1)|0;
         if ($not$) {
          $$2 = 0;
          break L1;
         }
         $31 = ($32>>>0)<($9>>>0);
         if ($31) {
          $$03041 = $32;
         } else {
          $$2 = 1;
          break L1;
         }
        }
        if ((label|0) == 13) {
         $$2 = 0;
         break;
        }
        else if ((label|0) == 14) {
         $$2 = 0;
         break;
        }
        else if ((label|0) == 15) {
         $$2 = 0;
         break;
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$2|0);
}
function _Type_NamedColor_Dup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_cmsDupNamedColorList($1)|0);
 return ($3|0);
}
function _Type_NamedColor_Free($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _cmsFreeNamedColorList($1);
 return;
}
function _Type_MLU_Read($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$$0 = 0, $$0$lcssa71 = 0, $$062 = 0, $$063 = 0, $$06468 = 0, $$069 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $phitmp = 0, $phitmp70 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer = sp;
 $4 = sp + 16|0;
 $5 = sp + 12|0;
 $6 = sp + 8|0;
 $7 = sp + 4|0;
 HEAP32[$2>>2] = 0;
 $8 = (__cmsReadUInt32Number($1,$4)|0);
 $9 = ($8|0)==(0);
 if ($9) {
  $$062 = 0;
  STACKTOP = sp;return ($$062|0);
 }
 $10 = (__cmsReadUInt32Number($1,$5)|0);
 $11 = ($10|0)==(0);
 if ($11) {
  $$062 = 0;
  STACKTOP = sp;return ($$062|0);
 }
 $12 = HEAP32[$5>>2]|0;
 $13 = ($12|0)==(12);
 $14 = ((($0)) + 20|0);
 $15 = HEAP32[$14>>2]|0;
 if (!($13)) {
  _cmsSignalError($15,8,28978,$vararg_buffer);
  $$062 = 0;
  STACKTOP = sp;return ($$062|0);
 }
 $16 = HEAP32[$4>>2]|0;
 $17 = (_cmsMLUalloc($15,$16)|0);
 $18 = ($17|0)==(0|0);
 if ($18) {
  $$062 = 0;
  STACKTOP = sp;return ($$062|0);
 }
 $19 = HEAP32[$4>>2]|0;
 $20 = ((($17)) + 8|0);
 HEAP32[$20>>2] = $19;
 $21 = ($19*12)|0;
 $22 = ($19|0)==(0);
 do {
  if ($22) {
   $$0$lcssa71 = 0;$$063 = 0;
  } else {
   $23 = ((($17)) + 12|0);
   $24 = (($21) + 16)|0;
   $25 = (($3) + 8)|0;
   $26 = (-16 - ($21))|0;
   $$06468 = 0;$$069 = 0;
   while(1) {
    $27 = HEAP32[$23>>2]|0;
    $28 = (($27) + (($$06468*12)|0)|0);
    $29 = (__cmsReadUInt16Number($1,$28)|0);
    $30 = ($29|0)==(0);
    if ($30) {
     break;
    }
    $31 = HEAP32[$23>>2]|0;
    $32 = (((($31) + (($$06468*12)|0)|0)) + 2|0);
    $33 = (__cmsReadUInt16Number($1,$32)|0);
    $34 = ($33|0)==(0);
    if ($34) {
     break;
    }
    $35 = (__cmsReadUInt32Number($1,$6)|0);
    $36 = ($35|0)==(0);
    if ($36) {
     break;
    }
    $37 = (__cmsReadUInt32Number($1,$7)|0);
    $38 = ($37|0)==(0);
    if ($38) {
     break;
    }
    $39 = HEAP32[$7>>2]|0;
    $40 = ($39>>>0)<($24>>>0);
    if ($40) {
     break;
    }
    $41 = HEAP32[$6>>2]|0;
    $42 = (($41) + ($39))|0;
    $43 = ($42>>>0)<($41>>>0);
    $44 = ($42>>>0)>($25>>>0);
    $or$cond = $43 | $44;
    if ($or$cond) {
     break;
    }
    $45 = (($26) + ($39))|0;
    $46 = $41 << 1;
    $47 = $46 & 2147483646;
    $48 = HEAP32[$23>>2]|0;
    $49 = (((($48) + (($$06468*12)|0)|0)) + 8|0);
    HEAP32[$49>>2] = $47;
    $50 = $45 << 1;
    $51 = $50 & 2147483646;
    $52 = (((($48) + (($$06468*12)|0)|0)) + 4|0);
    HEAP32[$52>>2] = $51;
    $53 = (($41) + ($45))|0;
    $54 = ($53>>>0)>($$069>>>0);
    $$$0 = $54 ? $53 : $$069;
    $55 = (($$06468) + 1)|0;
    $56 = HEAP32[$4>>2]|0;
    $57 = ($55>>>0)<($56>>>0);
    if ($57) {
     $$06468 = $55;$$069 = $$$0;
    } else {
     label = 15;
     break;
    }
   }
   if ((label|0) == 15) {
    $phitmp = $$$0 << 1;
    $phitmp70 = $phitmp & 2147483646;
    $58 = ($phitmp70|0)==(0);
    if ($58) {
     $$0$lcssa71 = 0;$$063 = 0;
     break;
    }
    $59 = HEAP32[$14>>2]|0;
    $60 = (__cmsMalloc($59,$phitmp70)|0);
    $61 = ($60|0)==(0|0);
    if (!($61)) {
     $62 = $phitmp70 >>> 2;
     $63 = (__cmsReadWCharArray($1,$62,$60)|0);
     $64 = ($63|0)==(0);
     if (!($64)) {
      $$0$lcssa71 = $phitmp70;$$063 = $60;
      break;
     }
    }
   }
   _cmsMLUfree($17);
   $$062 = 0;
   STACKTOP = sp;return ($$062|0);
  }
 } while(0);
 $65 = ((($17)) + 24|0);
 HEAP32[$65>>2] = $$063;
 $66 = ((($17)) + 16|0);
 HEAP32[$66>>2] = $$0$lcssa71;
 $67 = ((($17)) + 20|0);
 HEAP32[$67>>2] = $$0$lcssa71;
 HEAP32[$2>>2] = 1;
 $$062 = $17;
 STACKTOP = sp;return ($$062|0);
}
function _Type_MLU_Write($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$039 = 0, $$039$shrunk = 0, $$042 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, $not$41 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($2|0)==(0|0);
 L1: do {
  if ($4) {
   $5 = (__cmsWriteUInt32Number($1,0)|0);
   $6 = ($5|0)==(0);
   if ($6) {
    $$039$shrunk = 0;
   } else {
    $7 = (__cmsWriteUInt32Number($1,12)|0);
    $not$41 = ($7|0)!=(0);
    $$039$shrunk = $not$41;
   }
  } else {
   $8 = ((($2)) + 8|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = (__cmsWriteUInt32Number($1,$9)|0);
   $11 = ($10|0)==(0);
   if ($11) {
    $$039$shrunk = 0;
   } else {
    $12 = (__cmsWriteUInt32Number($1,12)|0);
    $13 = ($12|0)==(0);
    if ($13) {
     $$039$shrunk = 0;
    } else {
     $14 = HEAP32[$8>>2]|0;
     $15 = ($14|0)==(0);
     if (!($15)) {
      $16 = HEAP32[$8>>2]|0;
      $17 = ($16*12)|0;
      $18 = ((($2)) + 12|0);
      $19 = (($17) + 16)|0;
      $$042 = 0;
      while(1) {
       $23 = HEAP32[$18>>2]|0;
       $24 = (((($23) + (($$042*12)|0)|0)) + 8|0);
       $25 = HEAP32[$24>>2]|0;
       $26 = (((($23) + (($$042*12)|0)|0)) + 4|0);
       $27 = HEAP32[$26>>2]|0;
       $28 = $25 >>> 1;
       $29 = $28 & 1073741823;
       $30 = $27 >>> 1;
       $31 = $30 & 1073741823;
       $32 = (($19) + ($31))|0;
       $33 = (($23) + (($$042*12)|0)|0);
       $34 = HEAP16[$33>>1]|0;
       $35 = (__cmsWriteUInt16Number($1,$34)|0);
       $36 = ($35|0)==(0);
       if ($36) {
        $$039$shrunk = 0;
        break L1;
       }
       $37 = HEAP32[$18>>2]|0;
       $38 = (((($37) + (($$042*12)|0)|0)) + 2|0);
       $39 = HEAP16[$38>>1]|0;
       $40 = (__cmsWriteUInt16Number($1,$39)|0);
       $41 = ($40|0)==(0);
       if ($41) {
        $$039$shrunk = 0;
        break L1;
       }
       $42 = (__cmsWriteUInt32Number($1,$29)|0);
       $43 = ($42|0)==(0);
       if ($43) {
        $$039$shrunk = 0;
        break L1;
       }
       $44 = (__cmsWriteUInt32Number($1,$32)|0);
       $45 = ($44|0)==(0);
       $22 = (($$042) + 1)|0;
       if ($45) {
        $$039$shrunk = 0;
        break L1;
       }
       $20 = HEAP32[$8>>2]|0;
       $21 = ($22>>>0)<($20>>>0);
       if ($21) {
        $$042 = $22;
       } else {
        break;
       }
      }
     }
     $46 = ((($2)) + 20|0);
     $47 = HEAP32[$46>>2]|0;
     $48 = $47 >>> 2;
     $49 = ((($2)) + 24|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = (__cmsWriteWCharArray($1,$48,$50)|0);
     $not$ = ($51|0)!=(0);
     $$039$shrunk = $not$;
    }
   }
  }
 } while(0);
 $$039 = $$039$shrunk&1;
 return ($$039|0);
}
function _Type_MLU_Dup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_cmsMLUdup($1)|0);
 return ($3|0);
}
function _Type_MLU_Free($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _cmsMLUfree($1);
 return;
}
function _Type_ProfileSequenceDesc_Read($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$04552 = 0, $$04651 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond47 = 0, $or$cond48 = 0, $or$cond49 = 0, $or$cond50 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $4 = sp;
 HEAP32[$2>>2] = 0;
 $5 = (__cmsReadUInt32Number($1,$4)|0);
 $6 = ($5|0)==(0);
 $7 = ($3>>>0)<(4);
 $or$cond = $7 | $6;
 if ($or$cond) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = ((($0)) + 20|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$4>>2]|0;
 $11 = (_cmsAllocProfileSequenceDescription($9,$10)|0);
 $12 = ($11|0)==(0|0);
 if ($12) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $13 = HEAP32[$4>>2]|0;
 HEAP32[$11>>2] = $13;
 $14 = HEAP32[$4>>2]|0;
 $15 = ($14|0)==(0);
 L7: do {
  if (!($15)) {
   $16 = (($3) + -4)|0;
   $17 = ((($11)) + 8|0);
   $$04552 = 0;$$04651 = $16;
   while(1) {
    $21 = HEAP32[$17>>2]|0;
    $22 = (($21) + (($$04552*48)|0)|0);
    $23 = (__cmsReadUInt32Number($1,$22)|0);
    $24 = ($23|0)==(0);
    $25 = ($$04651>>>0)<(4);
    $or$cond47 = $25 | $24;
    if ($or$cond47) {
     break;
    }
    $26 = (((($21) + (($$04552*48)|0)|0)) + 4|0);
    $27 = (__cmsReadUInt32Number($1,$26)|0);
    $28 = ($27|0)==(0);
    $29 = $$04651 & -4;
    $30 = ($29|0)==(4);
    $or$cond48 = $30 | $28;
    if ($or$cond48) {
     break;
    }
    $31 = (((($21) + (($$04552*48)|0)|0)) + 8|0);
    $32 = (__cmsReadUInt64Number($1,$31)|0);
    $33 = ($32|0)==(0);
    $34 = $$04651 & -8;
    $35 = ($34|0)==(8);
    $or$cond49 = $35 | $33;
    if ($or$cond49) {
     break;
    }
    $36 = (((($21) + (($$04552*48)|0)|0)) + 16|0);
    $37 = (__cmsReadUInt32Number($1,$36)|0);
    $38 = ($37|0)==(0);
    $39 = $$04651 & -4;
    $40 = ($39|0)==(16);
    $or$cond50 = $40 | $38;
    if ($or$cond50) {
     break;
    }
    $41 = (($$04651) + -20)|0;
    $42 = (((($21) + (($$04552*48)|0)|0)) + 36|0);
    $43 = (_ReadEmbeddedText($0,$1,$42,$41)|0);
    $44 = ($43|0)==(0);
    if ($44) {
     break;
    }
    $45 = (((($21) + (($$04552*48)|0)|0)) + 40|0);
    $46 = (_ReadEmbeddedText($0,$1,$45,$41)|0);
    $47 = ($46|0)==(0);
    $20 = (($$04552) + 1)|0;
    if ($47) {
     break;
    }
    $18 = HEAP32[$4>>2]|0;
    $19 = ($20>>>0)<($18>>>0);
    if ($19) {
     $$04552 = $20;$$04651 = $41;
    } else {
     break L7;
    }
   }
   _cmsFreeProfileSequenceDescription($11);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 HEAP32[$2>>2] = 1;
 $$0 = $11;
 STACKTOP = sp;return ($$0|0);
}
function _Type_ProfileSequenceDesc_Write($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$02934 = 0, $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP32[$2>>2]|0;
 $5 = (__cmsWriteUInt32Number($1,$4)|0);
 $6 = ($5|0)==(0);
 if ($6) {
  $$2 = 0;
  return ($$2|0);
 }
 $7 = ((($2)) + 8|0);
 $8 = HEAP32[$2>>2]|0;
 $9 = ($8|0)==(0);
 if ($9) {
  $$2 = 1;
  return ($$2|0);
 } else {
  $$02934 = 0;
 }
 while(1) {
  $13 = HEAP32[$7>>2]|0;
  $14 = (($13) + (($$02934*48)|0)|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (__cmsWriteUInt32Number($1,$15)|0);
  $17 = ($16|0)==(0);
  if ($17) {
   $$2 = 0;
   label = 10;
   break;
  }
  $18 = (((($13) + (($$02934*48)|0)|0)) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (__cmsWriteUInt32Number($1,$19)|0);
  $21 = ($20|0)==(0);
  if ($21) {
   $$2 = 0;
   label = 10;
   break;
  }
  $22 = (((($13) + (($$02934*48)|0)|0)) + 8|0);
  $23 = (__cmsWriteUInt64Number($1,$22)|0);
  $24 = ($23|0)==(0);
  if ($24) {
   $$2 = 0;
   label = 10;
   break;
  }
  $25 = (((($13) + (($$02934*48)|0)|0)) + 16|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (__cmsWriteUInt32Number($1,$26)|0);
  $28 = ($27|0)==(0);
  if ($28) {
   $$2 = 0;
   label = 10;
   break;
  }
  $29 = (((($13) + (($$02934*48)|0)|0)) + 36|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (_SaveDescription($0,$1,$30)|0);
  $32 = ($31|0)==(0);
  if ($32) {
   $$2 = 0;
   label = 10;
   break;
  }
  $33 = (((($13) + (($$02934*48)|0)|0)) + 40|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (_SaveDescription($0,$1,$34)|0);
  $not$ = ($35|0)==(0);
  $12 = (($$02934) + 1)|0;
  if ($not$) {
   $$2 = 0;
   label = 10;
   break;
  }
  $10 = HEAP32[$2>>2]|0;
  $11 = ($12>>>0)<($10>>>0);
  if ($11) {
   $$02934 = $12;
  } else {
   $$2 = 1;
   label = 10;
   break;
  }
 }
 if ((label|0) == 10) {
  return ($$2|0);
 }
 return (0)|0;
}
function _Type_ProfileSequenceDesc_Dup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_cmsDupProfileSequenceDescription($1)|0);
 return ($3|0);
}
function _Type_ProfileSequenceDesc_Free($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _cmsFreeProfileSequenceDescription($1);
 return;
}
function _Type_Signature_Read($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (__cmsMalloc($5,4)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  $$0 = 0;
  return ($$0|0);
 }
 $8 = (__cmsReadUInt32Number($1,$6)|0);
 $9 = ($8|0)==(0);
 if ($9) {
  $$0 = 0;
  return ($$0|0);
 }
 HEAP32[$2>>2] = 1;
 $$0 = $6;
 return ($$0|0);
}
function _Type_Signature_Write($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP32[$2>>2]|0;
 $5 = (__cmsWriteUInt32Number($1,$4)|0);
 return ($5|0);
}
function _Type_Signature_Dup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $2 << 2;
 $6 = (__cmsDupMem($4,$1,$5)|0);
 return ($6|0);
}
function _Type_Signature_Free($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 __cmsFree($3,$1);
 return;
}
function _Type_Measurement_Read($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0;
 var label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $4 = sp;
 dest=$4; stop=dest+56|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $5 = (__cmsReadUInt32Number($1,$4)|0);
 $6 = ($5|0)==(0);
 if ($6) {
  $$0 = 0;
 } else {
  $7 = ((($4)) + 8|0);
  $8 = (__cmsReadXYZNumber($1,$7)|0);
  $9 = ($8|0)==(0);
  if ($9) {
   $$0 = 0;
  } else {
   $10 = ((($4)) + 32|0);
   $11 = (__cmsReadUInt32Number($1,$10)|0);
   $12 = ($11|0)==(0);
   if ($12) {
    $$0 = 0;
   } else {
    $13 = ((($4)) + 40|0);
    $14 = (__cmsRead15Fixed16Number($1,$13)|0);
    $15 = ($14|0)==(0);
    if ($15) {
     $$0 = 0;
    } else {
     $16 = ((($4)) + 48|0);
     $17 = (__cmsReadUInt32Number($1,$16)|0);
     $18 = ($17|0)==(0);
     if ($18) {
      $$0 = 0;
     } else {
      HEAP32[$2>>2] = 1;
      $19 = ((($0)) + 20|0);
      $20 = HEAP32[$19>>2]|0;
      $21 = (__cmsDupMem($20,$4,56)|0);
      $$0 = $21;
     }
    }
   }
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _Type_Measurement_Write($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP32[$2>>2]|0;
 $5 = (__cmsWriteUInt32Number($1,$4)|0);
 $6 = ($5|0)==(0);
 if ($6) {
  $$0 = 0;
  return ($$0|0);
 }
 $7 = ((($2)) + 8|0);
 $8 = (__cmsWriteXYZNumber($1,$7)|0);
 $9 = ($8|0)==(0);
 if ($9) {
  $$0 = 0;
  return ($$0|0);
 }
 $10 = ((($2)) + 32|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (__cmsWriteUInt32Number($1,$11)|0);
 $13 = ($12|0)==(0);
 if ($13) {
  $$0 = 0;
  return ($$0|0);
 }
 $14 = ((($2)) + 40|0);
 $15 = +HEAPF64[$14>>3];
 $16 = (__cmsWrite15Fixed16Number($1,$15)|0);
 $17 = ($16|0)==(0);
 if ($17) {
  $$0 = 0;
  return ($$0|0);
 }
 $18 = ((($2)) + 48|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (__cmsWriteUInt32Number($1,$19)|0);
 $not$ = ($20|0)!=(0);
 $$ = $not$&1;
 $$0 = $$;
 return ($$0|0);
}
function _Type_Measurement_Dup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (__cmsDupMem($4,$1,56)|0);
 return ($5|0);
}
function _Type_Measurement_Free($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 __cmsFree($3,$1);
 return;
}
function _Type_Data_Read($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAP32[$2>>2] = 0;
 $4 = ($3>>>0)<(4);
 if ($4) {
  $$0 = 0;
  return ($$0|0);
 }
 $5 = (($3) + -4)|0;
 $6 = ($5|0)<(0);
 if ($6) {
  $$0 = 0;
  return ($$0|0);
 }
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($3) + 7)|0;
 $10 = (__cmsMalloc($8,$9)|0);
 $11 = ($10|0)==(0|0);
 if ($11) {
  $$0 = 0;
  return ($$0|0);
 }
 HEAP32[$10>>2] = $5;
 $12 = ((($10)) + 4|0);
 $13 = (__cmsReadUInt32Number($1,$12)|0);
 $14 = ($13|0)==(0);
 if ($14) {
  $15 = HEAP32[$7>>2]|0;
  __cmsFree($15,$10);
  $$0 = 0;
  return ($$0|0);
 }
 $16 = ((($1)) + 272|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($10)) + 8|0);
 $19 = (FUNCTION_TABLE_iiiii[$17 & 255]($1,$18,1,$5)|0);
 $20 = ($19|0)==($5|0);
 if ($20) {
  HEAP32[$2>>2] = 1;
  $$0 = $10;
  return ($$0|0);
 } else {
  $21 = HEAP32[$7>>2]|0;
  __cmsFree($21,$10);
  $$0 = 0;
  return ($$0|0);
 }
 return (0)|0;
}
function _Type_Data_Write($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($2)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (__cmsWriteUInt32Number($1,$5)|0);
 $7 = ($6|0)==(0);
 if ($7) {
  $$0 = 0;
  return ($$0|0);
 }
 $8 = ((($1)) + 288|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$2>>2]|0;
 $11 = ((($2)) + 8|0);
 $12 = (FUNCTION_TABLE_iiii[$9 & 63]($1,$10,$11)|0);
 $$0 = $12;
 return ($$0|0);
}
function _Type_Data_Dup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$1>>2]|0;
 $6 = (($5) + 11)|0;
 $7 = (__cmsDupMem($4,$1,$6)|0);
 return ($7|0);
}
function _Type_Data_Free($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 __cmsFree($3,$1);
 return;
}
function _Type_LUTA2B_Read($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $4 = sp + 21|0;
 $5 = sp + 20|0;
 $6 = sp + 16|0;
 $7 = sp + 12|0;
 $8 = sp + 8|0;
 $9 = sp + 4|0;
 $10 = sp;
 $11 = ((($1)) + 284|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (FUNCTION_TABLE_ii[$12 & 15]($1)|0);
 $14 = (($13) + -8)|0;
 $15 = (__cmsReadUInt8Number($1,$4)|0);
 $16 = ($15|0)==(0);
 if ($16) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $17 = (__cmsReadUInt8Number($1,$5)|0);
 $18 = ($17|0)==(0);
 if ($18) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $19 = (__cmsReadUInt16Number($1,0)|0);
 $20 = ($19|0)==(0);
 if ($20) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $21 = (__cmsReadUInt32Number($1,$6)|0);
 $22 = ($21|0)==(0);
 if ($22) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $23 = (__cmsReadUInt32Number($1,$7)|0);
 $24 = ($23|0)==(0);
 if ($24) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $25 = (__cmsReadUInt32Number($1,$8)|0);
 $26 = ($25|0)==(0);
 if ($26) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $27 = (__cmsReadUInt32Number($1,$9)|0);
 $28 = ($27|0)==(0);
 if ($28) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $29 = (__cmsReadUInt32Number($1,$10)|0);
 $30 = ($29|0)==(0);
 if ($30) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $31 = HEAP8[$4>>0]|0;
 $32 = $31&255;
 $33 = (($31) + -1)<<24>>24;
 $34 = ($33&255)>(14);
 if ($34) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $35 = HEAP8[$5>>0]|0;
 $36 = (($35) + -1)<<24>>24;
 $37 = ($36&255)>(14);
 if ($37) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $38 = $35&255;
 $39 = ((($0)) + 20|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = (_cmsPipelineAlloc($40,$32,$38)|0);
 $42 = ($41|0)==(0|0);
 if ($42) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $43 = HEAP32[$10>>2]|0;
 $44 = ($43|0)==(0);
 if ($44) {
  label = 14;
 } else {
  $45 = (($43) + ($14))|0;
  $46 = HEAP8[$4>>0]|0;
  $47 = $46&255;
  $48 = (_ReadSetOfCurves($0,$1,$45,$47)|0);
  $49 = (_cmsPipelineInsertStage($41,1,$48)|0);
  $50 = ($49|0)==(0);
  if (!($50)) {
   label = 14;
  }
 }
 do {
  if ((label|0) == 14) {
   $51 = HEAP32[$9>>2]|0;
   $52 = ($51|0)==(0);
   if (!($52)) {
    $53 = (($51) + ($14))|0;
    $54 = HEAP8[$4>>0]|0;
    $55 = $54&255;
    $56 = HEAP8[$5>>0]|0;
    $57 = $56&255;
    $58 = (_ReadCLUT($0,$1,$53,$55,$57)|0);
    $59 = (_cmsPipelineInsertStage($41,1,$58)|0);
    $60 = ($59|0)==(0);
    if ($60) {
     break;
    }
   }
   $61 = HEAP32[$8>>2]|0;
   $62 = ($61|0)==(0);
   if (!($62)) {
    $63 = (($61) + ($14))|0;
    $64 = HEAP8[$5>>0]|0;
    $65 = $64&255;
    $66 = (_ReadSetOfCurves($0,$1,$63,$65)|0);
    $67 = (_cmsPipelineInsertStage($41,1,$66)|0);
    $68 = ($67|0)==(0);
    if ($68) {
     break;
    }
   }
   $69 = HEAP32[$7>>2]|0;
   $70 = ($69|0)==(0);
   if (!($70)) {
    $71 = (($69) + ($14))|0;
    $72 = (_ReadMatrix($0,$1,$71)|0);
    $73 = (_cmsPipelineInsertStage($41,1,$72)|0);
    $74 = ($73|0)==(0);
    if ($74) {
     break;
    }
   }
   $75 = HEAP32[$6>>2]|0;
   $76 = ($75|0)==(0);
   if (!($76)) {
    $77 = (($75) + ($14))|0;
    $78 = HEAP8[$5>>0]|0;
    $79 = $78&255;
    $80 = (_ReadSetOfCurves($0,$1,$77,$79)|0);
    $81 = (_cmsPipelineInsertStage($41,1,$80)|0);
    $82 = ($81|0)==(0);
    if ($82) {
     break;
    }
   }
   HEAP32[$2>>2] = 1;
   $$0 = $41;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 _cmsPipelineFree($41);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _Type_LUTA2B_Write($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$0 = 0, $$088 = 0, $$089 = 0, $$090 = 0, $$091 = 0, $$092 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $11 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $not$ = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer18 = 0, $vararg_buffer2 = 0, $vararg_buffer30 = 0, $vararg_ptr1 = 0, $vararg_ptr13 = 0;
 var $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr17 = 0, $vararg_ptr21 = 0, $vararg_ptr22 = 0, $vararg_ptr23 = 0, $vararg_ptr24 = 0, $vararg_ptr25 = 0, $vararg_ptr26 = 0, $vararg_ptr27 = 0, $vararg_ptr28 = 0, $vararg_ptr29 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $vararg_buffer30 = sp + 96|0;
 $vararg_buffer18 = sp + 56|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $4 = sp + 116|0;
 $5 = sp + 112|0;
 $6 = sp + 108|0;
 $7 = sp + 104|0;
 $8 = sp + 100|0;
 HEAP32[$4>>2] = 0;
 HEAP32[$5>>2] = 0;
 HEAP32[$6>>2] = 0;
 HEAP32[$7>>2] = 0;
 HEAP32[$8>>2] = 0;
 $9 = ((($1)) + 284|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (FUNCTION_TABLE_ii[$10 & 15]($1)|0);
 $12 = (($11) + -8)|0;
 $13 = HEAP32[$2>>2]|0;
 $14 = ($13|0)==(0|0);
 if (!($14)) {
  HEAP32[$vararg_buffer>>2] = 1668707188;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $5;
  $15 = (_cmsPipelineCheckAndRetreiveStages($2,1,$vararg_buffer)|0);
  $16 = ($15|0)==(0);
  if ($16) {
   HEAP32[$vararg_buffer2>>2] = 1668707188;
   $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
   HEAP32[$vararg_ptr5>>2] = 1835103334;
   $vararg_ptr6 = ((($vararg_buffer2)) + 8|0);
   HEAP32[$vararg_ptr6>>2] = 1668707188;
   $vararg_ptr7 = ((($vararg_buffer2)) + 12|0);
   HEAP32[$vararg_ptr7>>2] = $6;
   $vararg_ptr8 = ((($vararg_buffer2)) + 16|0);
   HEAP32[$vararg_ptr8>>2] = $7;
   $vararg_ptr9 = ((($vararg_buffer2)) + 20|0);
   HEAP32[$vararg_ptr9>>2] = $5;
   $17 = (_cmsPipelineCheckAndRetreiveStages($2,3,$vararg_buffer2)|0);
   $18 = ($17|0)==(0);
   if ($18) {
    HEAP32[$vararg_buffer10>>2] = 1668707188;
    $vararg_ptr13 = ((($vararg_buffer10)) + 4|0);
    HEAP32[$vararg_ptr13>>2] = 1668052340;
    $vararg_ptr14 = ((($vararg_buffer10)) + 8|0);
    HEAP32[$vararg_ptr14>>2] = 1668707188;
    $vararg_ptr15 = ((($vararg_buffer10)) + 12|0);
    HEAP32[$vararg_ptr15>>2] = $4;
    $vararg_ptr16 = ((($vararg_buffer10)) + 16|0);
    HEAP32[$vararg_ptr16>>2] = $8;
    $vararg_ptr17 = ((($vararg_buffer10)) + 20|0);
    HEAP32[$vararg_ptr17>>2] = $5;
    $19 = (_cmsPipelineCheckAndRetreiveStages($2,3,$vararg_buffer10)|0);
    $20 = ($19|0)==(0);
    if ($20) {
     HEAP32[$vararg_buffer18>>2] = 1668707188;
     $vararg_ptr21 = ((($vararg_buffer18)) + 4|0);
     HEAP32[$vararg_ptr21>>2] = 1668052340;
     $vararg_ptr22 = ((($vararg_buffer18)) + 8|0);
     HEAP32[$vararg_ptr22>>2] = 1668707188;
     $vararg_ptr23 = ((($vararg_buffer18)) + 12|0);
     HEAP32[$vararg_ptr23>>2] = 1835103334;
     $vararg_ptr24 = ((($vararg_buffer18)) + 16|0);
     HEAP32[$vararg_ptr24>>2] = 1668707188;
     $vararg_ptr25 = ((($vararg_buffer18)) + 20|0);
     HEAP32[$vararg_ptr25>>2] = $4;
     $vararg_ptr26 = ((($vararg_buffer18)) + 24|0);
     HEAP32[$vararg_ptr26>>2] = $8;
     $vararg_ptr27 = ((($vararg_buffer18)) + 28|0);
     HEAP32[$vararg_ptr27>>2] = $6;
     $vararg_ptr28 = ((($vararg_buffer18)) + 32|0);
     HEAP32[$vararg_ptr28>>2] = $7;
     $vararg_ptr29 = ((($vararg_buffer18)) + 36|0);
     HEAP32[$vararg_ptr29>>2] = $5;
     $21 = (_cmsPipelineCheckAndRetreiveStages($2,5,$vararg_buffer18)|0);
     $22 = ($21|0)==(0);
     if ($22) {
      $23 = ((($0)) + 20|0);
      $24 = HEAP32[$23>>2]|0;
      _cmsSignalError($24,13,28935,$vararg_buffer30);
      $$0 = 0;
      STACKTOP = sp;return ($$0|0);
     }
    }
   }
  }
 }
 $25 = (_cmsPipelineInputChannels($2)|0);
 $26 = (_cmsPipelineOutputChannels($2)|0);
 $27 = $25&255;
 $28 = (__cmsWriteUInt8Number($1,$27)|0);
 $29 = ($28|0)==(0);
 if ($29) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $30 = $26&255;
 $31 = (__cmsWriteUInt8Number($1,$30)|0);
 $32 = ($31|0)==(0);
 if ($32) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $33 = (__cmsWriteUInt16Number($1,0)|0);
 $34 = ($33|0)==(0);
 if ($34) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $35 = HEAP32[$9>>2]|0;
 $36 = (FUNCTION_TABLE_ii[$35 & 15]($1)|0);
 $37 = (__cmsWriteUInt32Number($1,0)|0);
 $38 = ($37|0)==(0);
 if ($38) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $39 = (__cmsWriteUInt32Number($1,0)|0);
 $40 = ($39|0)==(0);
 if ($40) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $41 = (__cmsWriteUInt32Number($1,0)|0);
 $42 = ($41|0)==(0);
 if ($42) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $43 = (__cmsWriteUInt32Number($1,0)|0);
 $44 = ($43|0)==(0);
 if ($44) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $45 = (__cmsWriteUInt32Number($1,0)|0);
 $46 = ($45|0)==(0);
 if ($46) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $47 = HEAP32[$4>>2]|0;
 $48 = ($47|0)==(0|0);
 if ($48) {
  $$090 = 0;
 } else {
  $49 = HEAP32[$9>>2]|0;
  $50 = (FUNCTION_TABLE_ii[$49 & 15]($1)|0);
  $51 = (($50) - ($12))|0;
  $52 = HEAP32[$4>>2]|0;
  $53 = (_WriteSetOfCurves($0,$1,$52)|0);
  $54 = ($53|0)==(0);
  if ($54) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $$090 = $51;
  }
 }
 $55 = HEAP32[$8>>2]|0;
 $56 = ($55|0)==(0|0);
 if ($56) {
  $$091 = 0;
 } else {
  $57 = HEAP32[$9>>2]|0;
  $58 = (FUNCTION_TABLE_ii[$57 & 15]($1)|0);
  $59 = (($58) - ($12))|0;
  $60 = ((($2)) + 36|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ($61|0)!=(0);
  $63 = $62 ? 1 : 2;
  $64 = HEAP32[$8>>2]|0;
  $65 = (_WriteCLUT_639($0,$1,$63,$64)|0);
  $66 = ($65|0)==(0);
  if ($66) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $$091 = $59;
  }
 }
 $67 = HEAP32[$6>>2]|0;
 $68 = ($67|0)==(0|0);
 if ($68) {
  $$092 = 0;
 } else {
  $69 = HEAP32[$9>>2]|0;
  $70 = (FUNCTION_TABLE_ii[$69 & 15]($1)|0);
  $71 = (($70) - ($12))|0;
  $72 = HEAP32[$6>>2]|0;
  $73 = (_WriteSetOfCurves($0,$1,$72)|0);
  $74 = ($73|0)==(0);
  if ($74) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $$092 = $71;
  }
 }
 $75 = HEAP32[$7>>2]|0;
 $76 = ($75|0)==(0|0);
 if ($76) {
  $$089 = 0;
 } else {
  $77 = HEAP32[$9>>2]|0;
  $78 = (FUNCTION_TABLE_ii[$77 & 15]($1)|0);
  $79 = (($78) - ($12))|0;
  $80 = HEAP32[$7>>2]|0;
  $81 = (_WriteMatrix($1,$80)|0);
  $82 = ($81|0)==(0);
  if ($82) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $$089 = $79;
  }
 }
 $83 = HEAP32[$5>>2]|0;
 $84 = ($83|0)==(0|0);
 if ($84) {
  $$088 = 0;
 } else {
  $85 = HEAP32[$9>>2]|0;
  $86 = (FUNCTION_TABLE_ii[$85 & 15]($1)|0);
  $87 = (($86) - ($12))|0;
  $88 = HEAP32[$5>>2]|0;
  $89 = (_WriteSetOfCurves($0,$1,$88)|0);
  $90 = ($89|0)==(0);
  if ($90) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $$088 = $87;
  }
 }
 $91 = HEAP32[$9>>2]|0;
 $92 = (FUNCTION_TABLE_ii[$91 & 15]($1)|0);
 $93 = ((($1)) + 276|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = (FUNCTION_TABLE_iii[$94 & 15]($1,$36)|0);
 $96 = ($95|0)==(0);
 if ($96) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $97 = (__cmsWriteUInt32Number($1,$$088)|0);
 $98 = ($97|0)==(0);
 if ($98) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $99 = (__cmsWriteUInt32Number($1,$$089)|0);
 $100 = ($99|0)==(0);
 if ($100) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $101 = (__cmsWriteUInt32Number($1,$$092)|0);
 $102 = ($101|0)==(0);
 if ($102) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $103 = (__cmsWriteUInt32Number($1,$$091)|0);
 $104 = ($103|0)==(0);
 if ($104) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $105 = (__cmsWriteUInt32Number($1,$$090)|0);
 $106 = ($105|0)==(0);
 if ($106) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $107 = HEAP32[$93>>2]|0;
 $108 = (FUNCTION_TABLE_iii[$107 & 15]($1,$92)|0);
 $not$ = ($108|0)!=(0);
 $$ = $not$&1;
 $$0 = $$;
 STACKTOP = sp;return ($$0|0);
}
function _Type_LUTA2B_Dup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_cmsPipelineDup($1)|0);
 return ($3|0);
}
function _Type_LUTA2B_Free($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _cmsPipelineFree($1);
 return;
}
function _Type_LUTB2A_Read($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $4 = sp + 21|0;
 $5 = sp + 20|0;
 $6 = sp + 16|0;
 $7 = sp + 12|0;
 $8 = sp + 8|0;
 $9 = sp + 4|0;
 $10 = sp;
 $11 = ((($1)) + 284|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (FUNCTION_TABLE_ii[$12 & 15]($1)|0);
 $14 = (($13) + -8)|0;
 $15 = (__cmsReadUInt8Number($1,$4)|0);
 $16 = ($15|0)==(0);
 if ($16) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $17 = (__cmsReadUInt8Number($1,$5)|0);
 $18 = ($17|0)==(0);
 if ($18) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $19 = HEAP8[$4>>0]|0;
 $20 = (($19) + -1)<<24>>24;
 $21 = ($20&255)>(14);
 if ($21) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $22 = HEAP8[$5>>0]|0;
 $23 = (($22) + -1)<<24>>24;
 $24 = ($23&255)>(14);
 if ($24) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $25 = (__cmsReadUInt16Number($1,0)|0);
 $26 = ($25|0)==(0);
 if ($26) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $27 = (__cmsReadUInt32Number($1,$6)|0);
 $28 = ($27|0)==(0);
 if ($28) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $29 = (__cmsReadUInt32Number($1,$7)|0);
 $30 = ($29|0)==(0);
 if ($30) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $31 = (__cmsReadUInt32Number($1,$8)|0);
 $32 = ($31|0)==(0);
 if ($32) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $33 = (__cmsReadUInt32Number($1,$9)|0);
 $34 = ($33|0)==(0);
 if ($34) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $35 = (__cmsReadUInt32Number($1,$10)|0);
 $36 = ($35|0)==(0);
 if ($36) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $37 = ((($0)) + 20|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = HEAP8[$4>>0]|0;
 $40 = $39&255;
 $41 = HEAP8[$5>>0]|0;
 $42 = $41&255;
 $43 = (_cmsPipelineAlloc($38,$40,$42)|0);
 $44 = ($43|0)==(0|0);
 if ($44) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $45 = HEAP32[$6>>2]|0;
 $46 = ($45|0)==(0);
 if ($46) {
  label = 14;
 } else {
  $47 = (($45) + ($14))|0;
  $48 = HEAP8[$4>>0]|0;
  $49 = $48&255;
  $50 = (_ReadSetOfCurves($0,$1,$47,$49)|0);
  $51 = (_cmsPipelineInsertStage($43,1,$50)|0);
  $52 = ($51|0)==(0);
  if (!($52)) {
   label = 14;
  }
 }
 do {
  if ((label|0) == 14) {
   $53 = HEAP32[$7>>2]|0;
   $54 = ($53|0)==(0);
   if (!($54)) {
    $55 = (($53) + ($14))|0;
    $56 = (_ReadMatrix($0,$1,$55)|0);
    $57 = (_cmsPipelineInsertStage($43,1,$56)|0);
    $58 = ($57|0)==(0);
    if ($58) {
     break;
    }
   }
   $59 = HEAP32[$8>>2]|0;
   $60 = ($59|0)==(0);
   if (!($60)) {
    $61 = (($59) + ($14))|0;
    $62 = HEAP8[$4>>0]|0;
    $63 = $62&255;
    $64 = (_ReadSetOfCurves($0,$1,$61,$63)|0);
    $65 = (_cmsPipelineInsertStage($43,1,$64)|0);
    $66 = ($65|0)==(0);
    if ($66) {
     break;
    }
   }
   $67 = HEAP32[$9>>2]|0;
   $68 = ($67|0)==(0);
   if (!($68)) {
    $69 = (($67) + ($14))|0;
    $70 = HEAP8[$4>>0]|0;
    $71 = $70&255;
    $72 = HEAP8[$5>>0]|0;
    $73 = $72&255;
    $74 = (_ReadCLUT($0,$1,$69,$71,$73)|0);
    $75 = (_cmsPipelineInsertStage($43,1,$74)|0);
    $76 = ($75|0)==(0);
    if ($76) {
     break;
    }
   }
   $77 = HEAP32[$10>>2]|0;
   $78 = ($77|0)==(0);
   if (!($78)) {
    $79 = (($77) + ($14))|0;
    $80 = HEAP8[$5>>0]|0;
    $81 = $80&255;
    $82 = (_ReadSetOfCurves($0,$1,$79,$81)|0);
    $83 = (_cmsPipelineInsertStage($43,1,$82)|0);
    $84 = ($83|0)==(0);
    if ($84) {
     break;
    }
   }
   HEAP32[$2>>2] = 1;
   $$0 = $43;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 _cmsPipelineFree($43);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _Type_LUTB2A_Write($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$0 = 0, $$087 = 0, $$088 = 0, $$089 = 0, $$090 = 0, $$091 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $not$ = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer18 = 0, $vararg_buffer2 = 0, $vararg_buffer30 = 0, $vararg_ptr1 = 0, $vararg_ptr13 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0;
 var $vararg_ptr16 = 0, $vararg_ptr17 = 0, $vararg_ptr21 = 0, $vararg_ptr22 = 0, $vararg_ptr23 = 0, $vararg_ptr24 = 0, $vararg_ptr25 = 0, $vararg_ptr26 = 0, $vararg_ptr27 = 0, $vararg_ptr28 = 0, $vararg_ptr29 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $vararg_buffer30 = sp + 96|0;
 $vararg_buffer18 = sp + 56|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $4 = sp + 116|0;
 $5 = sp + 112|0;
 $6 = sp + 108|0;
 $7 = sp + 104|0;
 $8 = sp + 100|0;
 HEAP32[$4>>2] = 0;
 HEAP32[$5>>2] = 0;
 HEAP32[$6>>2] = 0;
 HEAP32[$7>>2] = 0;
 HEAP32[$8>>2] = 0;
 $9 = ((($1)) + 284|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (FUNCTION_TABLE_ii[$10 & 15]($1)|0);
 $12 = (($11) + -8)|0;
 HEAP32[$vararg_buffer>>2] = 1668707188;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $5;
 $13 = (_cmsPipelineCheckAndRetreiveStages($2,1,$vararg_buffer)|0);
 $14 = ($13|0)==(0);
 if ($14) {
  HEAP32[$vararg_buffer2>>2] = 1668707188;
  $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
  HEAP32[$vararg_ptr5>>2] = 1835103334;
  $vararg_ptr6 = ((($vararg_buffer2)) + 8|0);
  HEAP32[$vararg_ptr6>>2] = 1668707188;
  $vararg_ptr7 = ((($vararg_buffer2)) + 12|0);
  HEAP32[$vararg_ptr7>>2] = $5;
  $vararg_ptr8 = ((($vararg_buffer2)) + 16|0);
  HEAP32[$vararg_ptr8>>2] = $7;
  $vararg_ptr9 = ((($vararg_buffer2)) + 20|0);
  HEAP32[$vararg_ptr9>>2] = $6;
  $15 = (_cmsPipelineCheckAndRetreiveStages($2,3,$vararg_buffer2)|0);
  $16 = ($15|0)==(0);
  if ($16) {
   HEAP32[$vararg_buffer10>>2] = 1668707188;
   $vararg_ptr13 = ((($vararg_buffer10)) + 4|0);
   HEAP32[$vararg_ptr13>>2] = 1668052340;
   $vararg_ptr14 = ((($vararg_buffer10)) + 8|0);
   HEAP32[$vararg_ptr14>>2] = 1668707188;
   $vararg_ptr15 = ((($vararg_buffer10)) + 12|0);
   HEAP32[$vararg_ptr15>>2] = $5;
   $vararg_ptr16 = ((($vararg_buffer10)) + 16|0);
   HEAP32[$vararg_ptr16>>2] = $8;
   $vararg_ptr17 = ((($vararg_buffer10)) + 20|0);
   HEAP32[$vararg_ptr17>>2] = $4;
   $17 = (_cmsPipelineCheckAndRetreiveStages($2,3,$vararg_buffer10)|0);
   $18 = ($17|0)==(0);
   if ($18) {
    HEAP32[$vararg_buffer18>>2] = 1668707188;
    $vararg_ptr21 = ((($vararg_buffer18)) + 4|0);
    HEAP32[$vararg_ptr21>>2] = 1835103334;
    $vararg_ptr22 = ((($vararg_buffer18)) + 8|0);
    HEAP32[$vararg_ptr22>>2] = 1668707188;
    $vararg_ptr23 = ((($vararg_buffer18)) + 12|0);
    HEAP32[$vararg_ptr23>>2] = 1668052340;
    $vararg_ptr24 = ((($vararg_buffer18)) + 16|0);
    HEAP32[$vararg_ptr24>>2] = 1668707188;
    $vararg_ptr25 = ((($vararg_buffer18)) + 20|0);
    HEAP32[$vararg_ptr25>>2] = $5;
    $vararg_ptr26 = ((($vararg_buffer18)) + 24|0);
    HEAP32[$vararg_ptr26>>2] = $7;
    $vararg_ptr27 = ((($vararg_buffer18)) + 28|0);
    HEAP32[$vararg_ptr27>>2] = $6;
    $vararg_ptr28 = ((($vararg_buffer18)) + 32|0);
    HEAP32[$vararg_ptr28>>2] = $8;
    $vararg_ptr29 = ((($vararg_buffer18)) + 36|0);
    HEAP32[$vararg_ptr29>>2] = $4;
    $19 = (_cmsPipelineCheckAndRetreiveStages($2,5,$vararg_buffer18)|0);
    $20 = ($19|0)==(0);
    if ($20) {
     $21 = ((($0)) + 20|0);
     $22 = HEAP32[$21>>2]|0;
     _cmsSignalError($22,13,28783,$vararg_buffer30);
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
    }
   }
  }
 }
 $23 = (_cmsPipelineInputChannels($2)|0);
 $24 = (_cmsPipelineOutputChannels($2)|0);
 $25 = $23&255;
 $26 = (__cmsWriteUInt8Number($1,$25)|0);
 $27 = ($26|0)==(0);
 if ($27) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $28 = $24&255;
 $29 = (__cmsWriteUInt8Number($1,$28)|0);
 $30 = ($29|0)==(0);
 if ($30) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $31 = (__cmsWriteUInt16Number($1,0)|0);
 $32 = ($31|0)==(0);
 if ($32) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $33 = HEAP32[$9>>2]|0;
 $34 = (FUNCTION_TABLE_ii[$33 & 15]($1)|0);
 $35 = (__cmsWriteUInt32Number($1,0)|0);
 $36 = ($35|0)==(0);
 if ($36) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $37 = (__cmsWriteUInt32Number($1,0)|0);
 $38 = ($37|0)==(0);
 if ($38) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $39 = (__cmsWriteUInt32Number($1,0)|0);
 $40 = ($39|0)==(0);
 if ($40) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $41 = (__cmsWriteUInt32Number($1,0)|0);
 $42 = ($41|0)==(0);
 if ($42) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $43 = (__cmsWriteUInt32Number($1,0)|0);
 $44 = ($43|0)==(0);
 if ($44) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $45 = HEAP32[$4>>2]|0;
 $46 = ($45|0)==(0|0);
 if ($46) {
  $$089 = 0;
 } else {
  $47 = HEAP32[$9>>2]|0;
  $48 = (FUNCTION_TABLE_ii[$47 & 15]($1)|0);
  $49 = (($48) - ($12))|0;
  $50 = HEAP32[$4>>2]|0;
  $51 = (_WriteSetOfCurves($0,$1,$50)|0);
  $52 = ($51|0)==(0);
  if ($52) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $$089 = $49;
  }
 }
 $53 = HEAP32[$8>>2]|0;
 $54 = ($53|0)==(0|0);
 if ($54) {
  $$090 = 0;
 } else {
  $55 = HEAP32[$9>>2]|0;
  $56 = (FUNCTION_TABLE_ii[$55 & 15]($1)|0);
  $57 = (($56) - ($12))|0;
  $58 = ((($2)) + 36|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = ($59|0)!=(0);
  $61 = $60 ? 1 : 2;
  $62 = HEAP32[$8>>2]|0;
  $63 = (_WriteCLUT_639($0,$1,$61,$62)|0);
  $64 = ($63|0)==(0);
  if ($64) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $$090 = $57;
  }
 }
 $65 = HEAP32[$6>>2]|0;
 $66 = ($65|0)==(0|0);
 if ($66) {
  $$091 = 0;
 } else {
  $67 = HEAP32[$9>>2]|0;
  $68 = (FUNCTION_TABLE_ii[$67 & 15]($1)|0);
  $69 = (($68) - ($12))|0;
  $70 = HEAP32[$6>>2]|0;
  $71 = (_WriteSetOfCurves($0,$1,$70)|0);
  $72 = ($71|0)==(0);
  if ($72) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $$091 = $69;
  }
 }
 $73 = HEAP32[$7>>2]|0;
 $74 = ($73|0)==(0|0);
 if ($74) {
  $$088 = 0;
 } else {
  $75 = HEAP32[$9>>2]|0;
  $76 = (FUNCTION_TABLE_ii[$75 & 15]($1)|0);
  $77 = (($76) - ($12))|0;
  $78 = HEAP32[$7>>2]|0;
  $79 = (_WriteMatrix($1,$78)|0);
  $80 = ($79|0)==(0);
  if ($80) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $$088 = $77;
  }
 }
 $81 = HEAP32[$5>>2]|0;
 $82 = ($81|0)==(0|0);
 if ($82) {
  $$087 = 0;
 } else {
  $83 = HEAP32[$9>>2]|0;
  $84 = (FUNCTION_TABLE_ii[$83 & 15]($1)|0);
  $85 = (($84) - ($12))|0;
  $86 = HEAP32[$5>>2]|0;
  $87 = (_WriteSetOfCurves($0,$1,$86)|0);
  $88 = ($87|0)==(0);
  if ($88) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $$087 = $85;
  }
 }
 $89 = HEAP32[$9>>2]|0;
 $90 = (FUNCTION_TABLE_ii[$89 & 15]($1)|0);
 $91 = ((($1)) + 276|0);
 $92 = HEAP32[$91>>2]|0;
 $93 = (FUNCTION_TABLE_iii[$92 & 15]($1,$34)|0);
 $94 = ($93|0)==(0);
 if ($94) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $95 = (__cmsWriteUInt32Number($1,$$087)|0);
 $96 = ($95|0)==(0);
 if ($96) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $97 = (__cmsWriteUInt32Number($1,$$088)|0);
 $98 = ($97|0)==(0);
 if ($98) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $99 = (__cmsWriteUInt32Number($1,$$091)|0);
 $100 = ($99|0)==(0);
 if ($100) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $101 = (__cmsWriteUInt32Number($1,$$090)|0);
 $102 = ($101|0)==(0);
 if ($102) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $103 = (__cmsWriteUInt32Number($1,$$089)|0);
 $104 = ($103|0)==(0);
 if ($104) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $105 = HEAP32[$91>>2]|0;
 $106 = (FUNCTION_TABLE_iii[$105 & 15]($1,$90)|0);
 $not$ = ($106|0)!=(0);
 $$ = $not$&1;
 $$0 = $$;
 STACKTOP = sp;return ($$0|0);
}
function _Type_LUTB2A_Dup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_cmsPipelineDup($1)|0);
 return ($3|0);
}
function _Type_LUTB2A_Free($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _cmsPipelineFree($1);
 return;
}
function _Type_UcrBg_Read($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond45 = 0, $or$cond46 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $4 = sp + 4|0;
 $5 = sp;
 $6 = ((($0)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (__cmsMallocZero($7,12)|0);
 HEAP32[$2>>2] = 0;
 $9 = ($8|0)==(0|0);
 if ($9) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = (__cmsReadUInt32Number($1,$4)|0);
 $11 = ($10|0)==(0);
 $12 = ($3>>>0)<(4);
 $or$cond = $12 | $11;
 if ($or$cond) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $13 = (($3) + -4)|0;
 $14 = HEAP32[$6>>2]|0;
 $15 = HEAP32[$4>>2]|0;
 $16 = (_cmsBuildTabulatedToneCurve16($14,$15,0)|0);
 HEAP32[$8>>2] = $16;
 $17 = ($16|0)==(0|0);
 if ($17) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $18 = HEAP32[$4>>2]|0;
 $19 = ((($16)) + 24|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (__cmsReadUInt16Array($1,$18,$20)|0);
 $22 = ($21|0)==(0);
 $23 = ($13>>>0)<(4);
 $or$cond45 = $23 | $22;
 if ($or$cond45) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $24 = HEAP32[$4>>2]|0;
 $25 = $24 << 1;
 $26 = (($13) - ($25))|0;
 $27 = (__cmsReadUInt32Number($1,$5)|0);
 $28 = ($27|0)==(0);
 $29 = ($26>>>0)<(4);
 $or$cond46 = $28 | $29;
 if ($or$cond46) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $30 = (($26) + -4)|0;
 $31 = HEAP32[$6>>2]|0;
 $32 = HEAP32[$5>>2]|0;
 $33 = (_cmsBuildTabulatedToneCurve16($31,$32,0)|0);
 $34 = ((($8)) + 4|0);
 HEAP32[$34>>2] = $33;
 $35 = ($33|0)==(0|0);
 if ($35) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $36 = HEAP32[$5>>2]|0;
 $37 = ((($33)) + 24|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = (__cmsReadUInt16Array($1,$36,$38)|0);
 $40 = ($39|0)==(0);
 if ($40) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $41 = HEAP32[$5>>2]|0;
 $42 = $41 << 1;
 $43 = ($30>>>0)<($42>>>0);
 if ($43) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $44 = (($30) - ($42))|0;
 $45 = ($44|0)==(-1);
 if ($45) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $46 = HEAP32[$6>>2]|0;
 $47 = (_cmsMLUalloc($46,1)|0);
 $48 = ((($8)) + 8|0);
 HEAP32[$48>>2] = $47;
 $49 = ($47|0)==(0|0);
 if ($49) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $50 = HEAP32[$6>>2]|0;
 $51 = (($44) + 1)|0;
 $52 = (__cmsMalloc($50,$51)|0);
 $53 = ((($1)) + 272|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = (FUNCTION_TABLE_iiiii[$54 & 255]($1,$52,1,$44)|0);
 $56 = ($55|0)==($44|0);
 if (!($56)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $57 = (($52) + ($44)|0);
 HEAP8[$57>>0] = 0;
 $58 = HEAP32[$48>>2]|0;
 (_cmsMLUsetASCII($58,33008,33008,$52)|0);
 $59 = HEAP32[$6>>2]|0;
 __cmsFree($59,$52);
 HEAP32[$2>>2] = 1;
 $$0 = $8;
 STACKTOP = sp;return ($$0|0);
}
function _Type_UcrBg_Write($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP32[$2>>2]|0;
 $5 = ((($4)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (__cmsWriteUInt32Number($1,$6)|0);
 $8 = ($7|0)==(0);
 if ($8) {
  $$0 = 0;
  return ($$0|0);
 }
 $9 = HEAP32[$2>>2]|0;
 $10 = ((($9)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($9)) + 24|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (__cmsWriteUInt16Array($1,$11,$13)|0);
 $15 = ($14|0)==(0);
 if ($15) {
  $$0 = 0;
  return ($$0|0);
 }
 $16 = ((($2)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($17)) + 20|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (__cmsWriteUInt32Number($1,$19)|0);
 $21 = ($20|0)==(0);
 if ($21) {
  $$0 = 0;
  return ($$0|0);
 }
 $22 = HEAP32[$16>>2]|0;
 $23 = ((($22)) + 20|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ((($22)) + 24|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (__cmsWriteUInt16Array($1,$24,$26)|0);
 $28 = ($27|0)==(0);
 if ($28) {
  $$0 = 0;
  return ($$0|0);
 }
 $29 = ((($2)) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (_cmsMLUgetASCII($30,33008,33008,0,0)|0);
 $32 = ((($0)) + 20|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (__cmsMalloc($33,$31)|0);
 $35 = HEAP32[$29>>2]|0;
 $36 = (_cmsMLUgetASCII($35,33008,33008,$34,$31)|0);
 $37 = ($36|0)==($31|0);
 if (!($37)) {
  $$0 = 0;
  return ($$0|0);
 }
 $38 = ((($1)) + 288|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = (FUNCTION_TABLE_iiii[$39 & 63]($1,$31,$34)|0);
 $41 = ($40|0)==(0);
 if ($41) {
  $$0 = 0;
  return ($$0|0);
 }
 $42 = HEAP32[$32>>2]|0;
 __cmsFree($42,$34);
 $$0 = 1;
 return ($$0|0);
}
function _Type_UcrBg_Dup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (__cmsMallocZero($4,12)|0);
 $6 = ($5|0)==(0|0);
 if ($6) {
  $$0 = 0;
  return ($$0|0);
 }
 $7 = ((($1)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (_cmsDupToneCurve($8)|0);
 $10 = ((($5)) + 4|0);
 HEAP32[$10>>2] = $9;
 $11 = HEAP32[$1>>2]|0;
 $12 = (_cmsDupToneCurve($11)|0);
 HEAP32[$5>>2] = $12;
 $13 = ((($1)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (_cmsMLUdup($14)|0);
 $16 = ((($5)) + 8|0);
 HEAP32[$16>>2] = $15;
 $$0 = $5;
 return ($$0|0);
}
function _Type_UcrBg_Free($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  _cmsFreeToneCurve($2);
 }
 $4 = ((($1)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  _cmsFreeToneCurve($5);
 }
 $7 = ((($1)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if (!($9)) {
  _cmsMLUfree($8);
 }
 $10 = ((($0)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 __cmsFree($11,$1);
 return;
}
function _Type_CrdInfo_Read($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $4 = sp;
 HEAP32[$4>>2] = $3;
 $5 = ((($0)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_cmsMLUalloc($6,5)|0);
 HEAP32[$2>>2] = 0;
 $8 = (_ReadCountAndSting($0,$1,$7,$4,28765)|0);
 $9 = ($8|0)==(0);
 if (!($9)) {
  $10 = (_ReadCountAndSting($0,$1,$7,$4,28768)|0);
  $11 = ($10|0)==(0);
  if (!($11)) {
   $12 = (_ReadCountAndSting($0,$1,$7,$4,28771)|0);
   $13 = ($12|0)==(0);
   if (!($13)) {
    $14 = (_ReadCountAndSting($0,$1,$7,$4,28774)|0);
    $15 = ($14|0)==(0);
    if (!($15)) {
     $16 = (_ReadCountAndSting($0,$1,$7,$4,28777)|0);
     $17 = ($16|0)==(0);
     if (!($17)) {
      HEAP32[$2>>2] = 1;
      $$0 = $7;
      STACKTOP = sp;return ($$0|0);
     }
    }
   }
  }
 }
 _cmsMLUfree($7);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _Type_CrdInfo_Write($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (_WriteCountAndSting($0,$1,$2,28765)|0);
 $5 = ($4|0)==(0);
 if (!($5)) {
  $6 = (_WriteCountAndSting($0,$1,$2,28768)|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   $8 = (_WriteCountAndSting($0,$1,$2,28771)|0);
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = (_WriteCountAndSting($0,$1,$2,28774)|0);
    $11 = ($10|0)==(0);
    if (!($11)) {
     $12 = (_WriteCountAndSting($0,$1,$2,28777)|0);
     $13 = ($12|0)==(0);
     if (!($13)) {
      $$0 = 1;
      return ($$0|0);
     }
    }
   }
  }
 }
 $$0 = 0;
 return ($$0|0);
}
function _Type_CrdInfo_Dup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_cmsMLUdup($1)|0);
 return ($3|0);
}
function _Type_CrdInfo_Free($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _cmsMLUfree($1);
 return;
}
function _Type_MPE_Read($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $4 = sp + 6|0;
 $5 = sp + 4|0;
 $6 = sp;
 $7 = ((($1)) + 284|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (FUNCTION_TABLE_ii[$8 & 15]($1)|0);
 $10 = (($9) + -8)|0;
 $11 = (__cmsReadUInt16Number($1,$4)|0);
 $12 = ($11|0)==(0);
 if ($12) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $13 = (__cmsReadUInt16Number($1,$5)|0);
 $14 = ($13|0)==(0);
 if ($14) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = HEAP16[$4>>1]|0;
 $16 = $15&65535;
 $17 = (($15) + -1)<<16>>16;
 $18 = ($17&65535)>(14);
 if ($18) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $19 = HEAP16[$5>>1]|0;
 $20 = (($19) + -1)<<16>>16;
 $21 = ($20&65535)>(14);
 if ($21) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $22 = $19&65535;
 $23 = ((($0)) + 20|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (_cmsPipelineAlloc($24,$16,$22)|0);
 $26 = ($25|0)==(0|0);
 if ($26) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $27 = (__cmsReadUInt32Number($1,$6)|0);
 $28 = ($27|0)==(0);
 if (!($28)) {
  $29 = HEAP32[$6>>2]|0;
  $30 = (_ReadPositionTable($0,$1,$29,$10,$25,5)|0);
  $31 = ($30|0)==(0);
  if (!($31)) {
   $32 = HEAP16[$4>>1]|0;
   $33 = $32&65535;
   $34 = ((($25)) + 4|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($33|0)==($35|0);
   if ($36) {
    $37 = HEAP16[$5>>1]|0;
    $38 = $37&65535;
    $39 = ((($25)) + 8|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = ($38|0)==($40|0);
    if ($41) {
     HEAP32[$2>>2] = 1;
     $$0 = $25;
     STACKTOP = sp;return ($$0|0);
    }
   }
  }
 }
 _cmsPipelineFree($25);
 HEAP32[$2>>2] = 0;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _Type_MPE_Write($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$0113134 = 0, $$1131 = 0, $$2129 = 0, $$in = 0, $$lcssa126 = 0, $$neg121 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $4 = sp + 4|0;
 $5 = HEAP32[$2>>2]|0;
 $6 = ((($0)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (__cmsContextGetClientChunk($7,11)|0);
 $9 = ((($1)) + 284|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (FUNCTION_TABLE_ii[$10 & 15]($1)|0);
 $12 = (_cmsPipelineInputChannels($2)|0);
 $13 = (_cmsPipelineOutputChannels($2)|0);
 $14 = (_cmsPipelineStageCount($2)|0);
 $15 = HEAP32[$6>>2]|0;
 $16 = (__cmsCalloc($15,$14,4)|0);
 $17 = ($16|0)==(0|0);
 if ($17) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $18 = HEAP32[$6>>2]|0;
 $19 = (__cmsCalloc($18,$14,4)|0);
 $20 = ($19|0)==(0|0);
 if ($20) {
  $98 = 0;
  label = 27;
 } else {
  $21 = $12&65535;
  $22 = (__cmsWriteUInt16Number($1,$21)|0);
  $23 = ($22|0)==(0);
  if ($23) {
   $98 = $19;
   label = 27;
  } else {
   $24 = $13&65535;
   $25 = (__cmsWriteUInt16Number($1,$24)|0);
   $26 = ($25|0)==(0);
   if ($26) {
    $98 = $19;
    label = 27;
   } else {
    $27 = $14 & 65535;
    $28 = (__cmsWriteUInt32Number($1,$27)|0);
    $29 = ($28|0)==(0);
    if ($29) {
     $98 = $19;
     label = 27;
    } else {
     $30 = HEAP32[$9>>2]|0;
     $31 = (FUNCTION_TABLE_ii[$30 & 15]($1)|0);
     $32 = ($14|0)==(0);
     L9: do {
      if ($32) {
       $33 = HEAP32[$9>>2]|0;
       $34 = (FUNCTION_TABLE_ii[$33 & 15]($1)|0);
       $$lcssa126 = $34;
       label = 19;
      } else {
       $$0113134 = 0;
       while(1) {
        $39 = (__cmsWriteUInt32Number($1,0)|0);
        $40 = ($39|0)==(0);
        if ($40) {
         break L9;
        }
        $41 = (__cmsWriteUInt32Number($1,0)|0);
        $42 = ($41|0)==(0);
        $36 = (($$0113134) + 1)|0;
        if ($42) {
         break L9;
        }
        $35 = ($36>>>0)<($14>>>0);
        if ($35) {
         $$0113134 = $36;
        } else {
         break;
        }
       }
       $37 = HEAP32[$9>>2]|0;
       $38 = (FUNCTION_TABLE_ii[$37 & 15]($1)|0);
       $$neg121 = (8 - ($11))|0;
       $$1131 = 0;$$in = $5;$44 = $38;
       while(1) {
        $43 = (($$neg121) + ($44))|0;
        $45 = (($16) + ($$1131<<2)|0);
        HEAP32[$45>>2] = $43;
        $46 = ((($$in)) + 4|0);
        $47 = HEAP32[$46>>2]|0;
        $48 = HEAP32[$8>>2]|0;
        $49 = (_GetHandler($47,$48,15776)|0);
        $50 = ($49|0)==(0|0);
        if ($50) {
         break;
        }
        $52 = (__cmsWriteUInt32Number($1,$47)|0);
        $53 = ($52|0)==(0);
        if ($53) {
         break L9;
        }
        $54 = (__cmsWriteUInt32Number($1,0)|0);
        $55 = ($54|0)==(0);
        if ($55) {
         break L9;
        }
        $56 = HEAP32[$9>>2]|0;
        $57 = (FUNCTION_TABLE_ii[$56 & 15]($1)|0);
        $58 = ((($49)) + 8|0);
        $59 = HEAP32[$58>>2]|0;
        $60 = (FUNCTION_TABLE_iiiii[$59 & 255]($0,$1,$$in,1)|0);
        $61 = ($60|0)==(0);
        if ($61) {
         break L9;
        }
        $62 = (__cmsWriteAlignment($1)|0);
        $63 = ($62|0)==(0);
        if ($63) {
         break L9;
        }
        $64 = HEAP32[$9>>2]|0;
        $65 = (FUNCTION_TABLE_ii[$64 & 15]($1)|0);
        $66 = (($65) - ($57))|0;
        $67 = (($19) + ($$1131<<2)|0);
        HEAP32[$67>>2] = $66;
        $68 = ((($$in)) + 36|0);
        $69 = HEAP32[$68>>2]|0;
        $70 = (($$1131) + 1)|0;
        $71 = ($70>>>0)<($14>>>0);
        $72 = HEAP32[$9>>2]|0;
        $73 = (FUNCTION_TABLE_ii[$72 & 15]($1)|0);
        if ($71) {
         $$1131 = $70;$$in = $69;$44 = $73;
        } else {
         $$lcssa126 = $73;
         label = 19;
         break L9;
        }
       }
       __cmsTagSignature2String($4,$47);
       $51 = HEAP32[$6>>2]|0;
       HEAP32[$vararg_buffer>>2] = $4;
       _cmsSignalError($51,8,28669,$vararg_buffer);
      }
     } while(0);
     L24: do {
      if ((label|0) == 19) {
       $74 = ((($1)) + 276|0);
       $75 = HEAP32[$74>>2]|0;
       $76 = (FUNCTION_TABLE_iii[$75 & 15]($1,$31)|0);
       $77 = ($76|0)==(0);
       if (!($77)) {
        $78 = ($14|0)==(0);
        if (!($78)) {
         $$2129 = 0;
         while(1) {
          $81 = (($16) + ($$2129<<2)|0);
          $82 = HEAP32[$81>>2]|0;
          $83 = (__cmsWriteUInt32Number($1,$82)|0);
          $84 = ($83|0)==(0);
          if ($84) {
           break L24;
          }
          $85 = (($19) + ($$2129<<2)|0);
          $86 = HEAP32[$85>>2]|0;
          $87 = (__cmsWriteUInt32Number($1,$86)|0);
          $88 = ($87|0)==(0);
          $80 = (($$2129) + 1)|0;
          if ($88) {
           break L24;
          }
          $79 = ($80>>>0)<($14>>>0);
          if ($79) {
           $$2129 = $80;
          } else {
           break;
          }
         }
        }
        $89 = HEAP32[$74>>2]|0;
        $90 = (FUNCTION_TABLE_iii[$89 & 15]($1,$$lcssa126)|0);
        $91 = ($90|0)==(0);
        if (!($91)) {
         $92 = HEAP32[$6>>2]|0;
         __cmsFree($92,$16);
         $93 = HEAP32[$6>>2]|0;
         __cmsFree($93,$19);
         $$0 = 1;
         STACKTOP = sp;return ($$0|0);
        }
       }
      }
     } while(0);
     if ($17) {
      $97 = $19;
     } else {
      $98 = $19;
      label = 27;
     }
    }
   }
  }
 }
 if ((label|0) == 27) {
  $94 = HEAP32[$6>>2]|0;
  __cmsFree($94,$16);
  $97 = $98;
 }
 $95 = ($19|0)==(0|0);
 if ($95) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $96 = HEAP32[$6>>2]|0;
 __cmsFree($96,$97);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _Type_MPE_Dup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_cmsPipelineDup($1)|0);
 return ($3|0);
}
function _Type_MPE_Free($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _cmsPipelineFree($1);
 return;
}
function _Type_Screening_Read($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$029 = 0, $$030 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (__cmsMallocZero($5,392)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  $$029 = 0;
  return ($$029|0);
 }
 HEAP32[$2>>2] = 0;
 $8 = (__cmsReadUInt32Number($1,$6)|0);
 $9 = ($8|0)==(0);
 L4: do {
  if (!($9)) {
   $10 = ((($6)) + 4|0);
   $11 = (__cmsReadUInt32Number($1,$10)|0);
   $12 = ($11|0)==(0);
   if (!($12)) {
    $13 = HEAP32[$10>>2]|0;
    $14 = ($13>>>0)>(15);
    if ($14) {
     HEAP32[$10>>2] = 15;
     label = 7;
    } else {
     $15 = ($13|0)==(0);
     if (!($15)) {
      label = 7;
     }
    }
    if ((label|0) == 7) {
     $16 = ((($6)) + 8|0);
     $$030 = 0;
     while(1) {
      $20 = (($16) + (($$030*24)|0)|0);
      $21 = (__cmsRead15Fixed16Number($1,$20)|0);
      $22 = ($21|0)==(0);
      if ($22) {
       break L4;
      }
      $23 = (((($16) + (($$030*24)|0)|0)) + 8|0);
      $24 = (__cmsRead15Fixed16Number($1,$23)|0);
      $25 = ($24|0)==(0);
      if ($25) {
       break L4;
      }
      $26 = (((($16) + (($$030*24)|0)|0)) + 16|0);
      $27 = (__cmsReadUInt32Number($1,$26)|0);
      $28 = ($27|0)==(0);
      $19 = (($$030) + 1)|0;
      if ($28) {
       break L4;
      }
      $17 = HEAP32[$10>>2]|0;
      $18 = ($19>>>0)<($17>>>0);
      if ($18) {
       $$030 = $19;
      } else {
       break;
      }
     }
    }
    HEAP32[$2>>2] = 1;
    $$029 = $6;
    return ($$029|0);
   }
  }
 } while(0);
 $29 = HEAP32[$4>>2]|0;
 __cmsFree($29,$6);
 $$029 = 0;
 return ($$029|0);
}
function _Type_Screening_Write($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$020 = 0, $$021 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP32[$2>>2]|0;
 $5 = (__cmsWriteUInt32Number($1,$4)|0);
 $6 = ($5|0)==(0);
 if ($6) {
  $$020 = 0;
  return ($$020|0);
 }
 $7 = ((($2)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (__cmsWriteUInt32Number($1,$8)|0);
 $10 = ($9|0)==(0);
 if ($10) {
  $$020 = 0;
  return ($$020|0);
 }
 $11 = ((($2)) + 8|0);
 $12 = HEAP32[$7>>2]|0;
 $13 = ($12|0)==(0);
 if ($13) {
  $$020 = 1;
  return ($$020|0);
 } else {
  $$021 = 0;
 }
 while(1) {
  $17 = (($11) + (($$021*24)|0)|0);
  $18 = +HEAPF64[$17>>3];
  $19 = (__cmsWrite15Fixed16Number($1,$18)|0);
  $20 = ($19|0)==(0);
  if ($20) {
   $$020 = 0;
   label = 8;
   break;
  }
  $21 = (((($11) + (($$021*24)|0)|0)) + 8|0);
  $22 = +HEAPF64[$21>>3];
  $23 = (__cmsWrite15Fixed16Number($1,$22)|0);
  $24 = ($23|0)==(0);
  if ($24) {
   $$020 = 0;
   label = 8;
   break;
  }
  $25 = (((($11) + (($$021*24)|0)|0)) + 16|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (__cmsWriteUInt32Number($1,$26)|0);
  $28 = ($27|0)==(0);
  $16 = (($$021) + 1)|0;
  if ($28) {
   $$020 = 0;
   label = 8;
   break;
  }
  $14 = HEAP32[$7>>2]|0;
  $15 = ($16>>>0)<($14>>>0);
  if ($15) {
   $$021 = $16;
  } else {
   $$020 = 1;
   label = 8;
   break;
  }
 }
 if ((label|0) == 8) {
  return ($$020|0);
 }
 return (0)|0;
}
function _Type_Screening_Dup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (__cmsDupMem($4,$1,392)|0);
 return ($5|0);
}
function _Type_Screening_Free($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 __cmsFree($3,$1);
 return;
}
function _Type_ViewingConditions_Read($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (__cmsMallocZero($5,56)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  $$0 = 0;
  return ($$0|0);
 }
 HEAP32[$2>>2] = 0;
 $8 = (__cmsReadXYZNumber($1,$6)|0);
 $9 = ($8|0)==(0);
 if (!($9)) {
  $10 = ((($6)) + 24|0);
  $11 = (__cmsReadXYZNumber($1,$10)|0);
  $12 = ($11|0)==(0);
  if (!($12)) {
   $13 = ((($6)) + 48|0);
   $14 = (__cmsReadUInt32Number($1,$13)|0);
   $15 = ($14|0)==(0);
   if (!($15)) {
    HEAP32[$2>>2] = 1;
    $$0 = $6;
    return ($$0|0);
   }
  }
 }
 $16 = HEAP32[$4>>2]|0;
 __cmsFree($16,$6);
 $$0 = 0;
 return ($$0|0);
}
function _Type_ViewingConditions_Write($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$0 = 0, $10 = 0, $11 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (__cmsWriteXYZNumber($1,$2)|0);
 $5 = ($4|0)==(0);
 if ($5) {
  $$0 = 0;
  return ($$0|0);
 }
 $6 = ((($2)) + 24|0);
 $7 = (__cmsWriteXYZNumber($1,$6)|0);
 $8 = ($7|0)==(0);
 if ($8) {
  $$0 = 0;
  return ($$0|0);
 }
 $9 = ((($2)) + 48|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (__cmsWriteUInt32Number($1,$10)|0);
 $not$ = ($11|0)!=(0);
 $$ = $not$&1;
 $$0 = $$;
 return ($$0|0);
}
function _Type_ViewingConditions_Dup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (__cmsDupMem($4,$1,56)|0);
 return ($5|0);
}
function _Type_ViewingConditions_Free($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 __cmsFree($3,$1);
 return;
}
function _Type_XYZ_Read($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$2>>2] = 0;
 $4 = ((($0)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (__cmsMallocZero($5,24)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  $$0 = 0;
  return ($$0|0);
 }
 $8 = (__cmsReadXYZNumber($1,$6)|0);
 $9 = ($8|0)==(0);
 if ($9) {
  $10 = HEAP32[$4>>2]|0;
  __cmsFree($10,$6);
  $$0 = 0;
  return ($$0|0);
 } else {
  HEAP32[$2>>2] = 1;
  $$0 = $6;
  return ($$0|0);
 }
 return (0)|0;
}
function _Type_XYZ_Write($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (__cmsWriteXYZNumber($1,$2)|0);
 return ($4|0);
}
function _Type_XYZ_Dup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (__cmsDupMem($4,$1,24)|0);
 return ($5|0);
}
function _Type_XYZ_Free($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 __cmsFree($3,$1);
 return;
}
function _Type_ProfileSequenceId_Read($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $4 = sp;
 HEAP32[$2>>2] = 0;
 $5 = ((($1)) + 284|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (FUNCTION_TABLE_ii[$6 & 15]($1)|0);
 $8 = (($7) + -8)|0;
 $9 = (__cmsReadUInt32Number($1,$4)|0);
 $10 = ($9|0)==(0);
 if ($10) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = ((($0)) + 20|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = HEAP32[$4>>2]|0;
 $14 = (_cmsAllocProfileSequenceDescription($12,$13)|0);
 $15 = ($14|0)==(0|0);
 if ($15) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $16 = HEAP32[$4>>2]|0;
 $17 = (_ReadPositionTable($0,$1,$16,$8,$14,6)|0);
 $18 = ($17|0)==(0);
 if ($18) {
  _cmsFreeProfileSequenceDescription($14);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  HEAP32[$2>>2] = 1;
  $$0 = $14;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _Type_ProfileSequenceId_Write($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 284|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_ii[$5 & 15]($1)|0);
 $7 = HEAP32[$2>>2]|0;
 $8 = (__cmsWriteUInt32Number($1,$7)|0);
 $9 = ($8|0)==(0);
 if ($9) {
  $$0 = 0;
  return ($$0|0);
 }
 $10 = (($6) + -8)|0;
 $11 = HEAP32[$2>>2]|0;
 $12 = (_WritePositionTable($0,$1,$11,$10,$2,7)|0);
 $not$ = ($12|0)!=(0);
 $$ = $not$&1;
 $$0 = $$;
 return ($$0|0);
}
function _Type_ProfileSequenceId_Dup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_cmsDupProfileSequenceDescription($1)|0);
 return ($3|0);
}
function _Type_ProfileSequenceId_Free($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _cmsFreeProfileSequenceDescription($1);
 return;
}
function _Type_Dictionary_Read($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$044 = 0, $$04546 = 0, $$pr = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $or$cond5 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $4 = sp + 84|0;
 $5 = sp + 80|0;
 $6 = sp + 32|0;
 $7 = sp + 24|0;
 $8 = sp + 20|0;
 $9 = sp + 16|0;
 $10 = sp + 12|0;
 HEAP32[$7>>2] = 0;
 HEAP32[$8>>2] = 0;
 HEAP32[$9>>2] = 0;
 HEAP32[$10>>2] = 0;
 HEAP32[$2>>2] = 0;
 $11 = ((($1)) + 284|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (FUNCTION_TABLE_ii[$12 & 15]($1)|0);
 $14 = (($13) + -8)|0;
 $15 = (__cmsReadUInt32Number($1,$4)|0);
 $16 = ($15|0)==(0);
 if ($16) {
  $$044 = 0;
  STACKTOP = sp;return ($$044|0);
 }
 $17 = (__cmsReadUInt32Number($1,$5)|0);
 $18 = ($17|0)==(0);
 if ($18) {
  $$044 = 0;
  STACKTOP = sp;return ($$044|0);
 }
 $19 = HEAP32[$5>>2]|0;
 $20 = ((($0)) + 20|0);
 $21 = HEAP32[$20>>2]|0;
 switch ($19|0) {
 case 16: case 24: case 32:  {
  break;
 }
 default: {
  HEAP32[$vararg_buffer>>2] = $19;
  _cmsSignalError($21,8,28583,$vararg_buffer);
  $$044 = 0;
  STACKTOP = sp;return ($$044|0);
 }
 }
 $22 = (_cmsDictAlloc($21)|0);
 $23 = ($22|0)==(0|0);
 if ($23) {
  $$044 = 0;
  STACKTOP = sp;return ($$044|0);
 }
 $24 = HEAP32[$20>>2]|0;
 $25 = HEAP32[$4>>2]|0;
 $26 = HEAP32[$5>>2]|0;
 $27 = (_AllocArray($24,$6,$25,$26)|0);
 $28 = ($27|0)==(0);
 L14: do {
  if (!($28)) {
   $29 = HEAP32[$4>>2]|0;
   $30 = HEAP32[$5>>2]|0;
   $31 = (_ReadOffsetArray($1,$6,$29,$30,$14)|0);
   $32 = ($31|0)==(0);
   if (!($32)) {
    $33 = HEAP32[$4>>2]|0;
    $34 = ($33|0)==(0);
    if (!($34)) {
     $35 = ((($6)) + 12|0);
     $36 = ((($6)) + 24|0);
     $37 = ((($6)) + 36|0);
     $$04546 = 0;
     while(1) {
      $41 = (_ReadOneWChar($1,$6,$$04546,$7)|0);
      $42 = ($41|0)==(0);
      if ($42) {
       break L14;
      }
      $43 = (_ReadOneWChar($1,$35,$$04546,$8)|0);
      $44 = ($43|0)==(0);
      if ($44) {
       break L14;
      }
      $45 = HEAP32[$5>>2]|0;
      $46 = ($45>>>0)>(16);
      if ($46) {
       $47 = (_ReadOneMLUC($0,$1,$36,$$04546,$9)|0);
       $48 = ($47|0)==(0);
       if ($48) {
        break L14;
       }
       $$pr = HEAP32[$5>>2]|0;
       $49 = ($$pr>>>0)>(24);
       if ($49) {
        $50 = (_ReadOneMLUC($0,$1,$37,$$04546,$10)|0);
        $51 = ($50|0)==(0);
        if ($51) {
         break L14;
        }
       }
      }
      $52 = HEAP32[$7>>2]|0;
      $53 = ($52|0)==(0|0);
      $54 = HEAP32[$8>>2]|0;
      $55 = ($54|0)==(0|0);
      $or$cond5 = $53 | $55;
      if ($or$cond5) {
       $56 = HEAP32[$20>>2]|0;
       _cmsSignalError($56,12,28624,$vararg_buffer1);
       $$0 = 0;
      } else {
       $57 = HEAP32[$9>>2]|0;
       $58 = HEAP32[$10>>2]|0;
       $59 = (_cmsDictAddEntry($22,$52,$54,$57,$58)|0);
       $$0 = $59;
      }
      $60 = HEAP32[$7>>2]|0;
      $61 = ($60|0)==(0|0);
      if (!($61)) {
       $62 = HEAP32[$20>>2]|0;
       __cmsFree($62,$60);
      }
      $63 = HEAP32[$8>>2]|0;
      $64 = ($63|0)==(0|0);
      if (!($64)) {
       $65 = HEAP32[$20>>2]|0;
       __cmsFree($65,$63);
      }
      $66 = HEAP32[$9>>2]|0;
      $67 = ($66|0)==(0|0);
      if (!($67)) {
       _cmsMLUfree($66);
      }
      $68 = HEAP32[$10>>2]|0;
      $69 = ($68|0)==(0|0);
      if (!($69)) {
       _cmsMLUfree($68);
      }
      $70 = ($$0|0)==(0);
      $40 = (($$04546) + 1)|0;
      if ($70) {
       break L14;
      }
      $38 = HEAP32[$4>>2]|0;
      $39 = ($40>>>0)<($38>>>0);
      if ($39) {
       $$04546 = $40;
      } else {
       break;
      }
     }
    }
    _FreeArray($6);
    HEAP32[$2>>2] = 1;
    $$044 = $22;
    STACKTOP = sp;return ($$044|0);
   }
  }
 } while(0);
 _FreeArray($6);
 _cmsDictFree($22);
 $$044 = 0;
 STACKTOP = sp;return ($$044|0);
}
function _Type_Dictionary_Write($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$08094 = 0, $$081$ = 0, $$081$lcssa104 = 0, $$08193 = 0, $$085$lcssa102 = 0, $$085$lcssa103 = 0, $$08592 = 0, $$08689 = 0, $$08791 = 0, $$188 = 0, $$190 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0;
 var $phitmp = 0, $phitmp100 = 0, $phitmp101 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $4 = sp;
 $5 = ($2|0)==(0|0);
 if ($5) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = ((($1)) + 284|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_ii[$7 & 15]($1)|0);
 $9 = (($8) + -8)|0;
 $10 = (_cmsDictGetEntryList($2)|0);
 $11 = ($10|0)==(0|0);
 if ($11) {
  $$081$lcssa104 = 16;$$085$lcssa103 = 0;
  label = 5;
 } else {
  $$08094 = $10;$$08193 = 0;$$08592 = 0;$$08791 = 0;
  while(1) {
   $12 = ((($$08094)) + 4|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($13|0)==(0|0);
   $$081$ = $14 ? $$08193 : 1;
   $15 = ((($$08094)) + 8|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ($16|0)==(0|0);
   $$188 = $17 ? $$08791 : 1;
   $18 = (($$08592) + 1)|0;
   $19 = (_cmsDictNextEntry($$08094)|0);
   $20 = ($19|0)==(0|0);
   if ($20) {
    break;
   } else {
    $$08094 = $19;$$08193 = $$081$;$$08592 = $18;$$08791 = $$188;
   }
  }
  $phitmp = ($$081$|0)==(0);
  $phitmp100 = $phitmp ? 16 : 24;
  $phitmp101 = ($$188|0)==(0);
  $21 = (($phitmp100) + 8)|0;
  if ($phitmp101) {
   $$081$lcssa104 = $phitmp100;$$085$lcssa103 = $18;
   label = 5;
  } else {
   $$085$lcssa102 = $18;$24 = $21;
  }
 }
 if ((label|0) == 5) {
  $$085$lcssa102 = $$085$lcssa103;$24 = $$081$lcssa104;
 }
 $22 = (__cmsWriteUInt32Number($1,$$085$lcssa102)|0);
 $23 = ($22|0)==(0);
 if ($23) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $25 = (__cmsWriteUInt32Number($1,$24)|0);
 $26 = ($25|0)==(0);
 if ($26) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $27 = HEAP32[$6>>2]|0;
 $28 = (FUNCTION_TABLE_ii[$27 & 15]($1)|0);
 $29 = ((($0)) + 20|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (_AllocArray($30,$4,$$085$lcssa102,$24)|0);
 $32 = ($31|0)==(0);
 L17: do {
  if (!($32)) {
   $33 = (_WriteOffsetArray($1,$4,$$085$lcssa102,$24)|0);
   $34 = ($33|0)==(0);
   if (!($34)) {
    $35 = (_cmsDictGetEntryList($2)|0);
    $36 = ($$085$lcssa102|0)==(0);
    if (!($36)) {
     $37 = ((($4)) + 12|0);
     $38 = ((($4)) + 36|0);
     $39 = ((($4)) + 24|0);
     $$08689 = 0;$$190 = $35;
     while(1) {
      $40 = ((($$190)) + 12|0);
      $41 = HEAP32[$40>>2]|0;
      $42 = (_WriteOneWChar($1,$4,$$08689,$41,$9)|0);
      $43 = ($42|0)==(0);
      if ($43) {
       break L17;
      }
      $44 = ((($$190)) + 16|0);
      $45 = HEAP32[$44>>2]|0;
      $46 = (_WriteOneWChar($1,$37,$$08689,$45,$9)|0);
      $47 = ($46|0)==(0);
      if ($47) {
       break L17;
      }
      $48 = ((($$190)) + 4|0);
      $49 = HEAP32[$48>>2]|0;
      $50 = ($49|0)==(0|0);
      if (!($50)) {
       $51 = (_WriteOneMLUC($0,$1,$39,$$08689,$49,$9)|0);
       $52 = ($51|0)==(0);
       if ($52) {
        break L17;
       }
      }
      $53 = ((($$190)) + 8|0);
      $54 = HEAP32[$53>>2]|0;
      $55 = ($54|0)==(0|0);
      if (!($55)) {
       $56 = (_WriteOneMLUC($0,$1,$38,$$08689,$54,$9)|0);
       $57 = ($56|0)==(0);
       if ($57) {
        break L17;
       }
      }
      $58 = (_cmsDictNextEntry($$190)|0);
      $59 = (($$08689) + 1)|0;
      $60 = ($59>>>0)<($$085$lcssa102>>>0);
      if ($60) {
       $$08689 = $59;$$190 = $58;
      } else {
       break;
      }
     }
    }
    $61 = HEAP32[$6>>2]|0;
    $62 = (FUNCTION_TABLE_ii[$61 & 15]($1)|0);
    $63 = ((($1)) + 276|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = (FUNCTION_TABLE_iii[$64 & 15]($1,$28)|0);
    $66 = ($65|0)==(0);
    if (!($66)) {
     $67 = (_WriteOffsetArray($1,$4,$$085$lcssa102,$24)|0);
     $68 = ($67|0)==(0);
     if (!($68)) {
      $69 = HEAP32[$63>>2]|0;
      $70 = (FUNCTION_TABLE_iii[$69 & 15]($1,$62)|0);
      $71 = ($70|0)==(0);
      if (!($71)) {
       _FreeArray($4);
       $$0 = 1;
       STACKTOP = sp;return ($$0|0);
      }
     }
    }
   }
  }
 } while(0);
 _FreeArray($4);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _Type_Dictionary_Dup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_cmsDictDup($1)|0);
 return ($3|0);
}
function _Type_Dictionary_Free($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _cmsDictFree($1);
 return;
}
function _Type_vcgt_Read($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$061 = 0, $$06273 = 0, $$06273$1 = 0, $$06273$2 = 0, $$lcssa = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0;
 $vararg_buffer4 = sp + 168|0;
 $vararg_buffer1 = sp + 160|0;
 $vararg_buffer = sp + 152|0;
 $4 = sp + 172|0;
 $5 = sp + 80|0;
 $6 = sp;
 $7 = sp + 176|0;
 $8 = sp + 178|0;
 HEAP32[$2>>2] = 0;
 $9 = (__cmsReadUInt32Number($1,$4)|0);
 $10 = ($9|0)==(0);
 if ($10) {
  $$061 = 0;
  STACKTOP = sp;return ($$061|0);
 }
 $11 = ((($0)) + 20|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (__cmsCalloc($12,3,4)|0);
 $14 = ($13|0)==(0|0);
 if ($14) {
  $$061 = 0;
  STACKTOP = sp;return ($$061|0);
 }
 $15 = HEAP32[$4>>2]|0;
 L7: do {
  switch ($15|0) {
  case 0:  {
   $16 = (__cmsReadUInt16Number($1,$5)|0);
   $17 = ($16|0)==(0);
   L10: do {
    if (!($17)) {
     $18 = HEAP16[$5>>1]|0;
     $19 = ($18<<16>>16)==(3);
     if (!($19)) {
      $20 = $18&65535;
      $21 = HEAP32[$11>>2]|0;
      HEAP32[$vararg_buffer>>2] = $20;
      _cmsSignalError($21,8,28364,$vararg_buffer);
      break;
     }
     $22 = (__cmsReadUInt16Number($1,$6)|0);
     $23 = ($22|0)==(0);
     if (!($23)) {
      $24 = (__cmsReadUInt16Number($1,$7)|0);
      $25 = ($24|0)==(0);
      if (!($25)) {
       $26 = HEAP16[$6>>1]|0;
       $27 = ($26<<16>>16)==(256);
       if ($27) {
        $28 = HEAP16[$7>>1]|0;
        $29 = ($28<<16>>16)==(1);
        $30 = ($3|0)==(1576);
        $or$cond = $30 & $29;
        if ($or$cond) {
         HEAP16[$7>>1] = 2;
        }
       }
       $31 = HEAP32[$11>>2]|0;
       $32 = HEAP16[$6>>1]|0;
       $33 = $32&65535;
       $34 = (_cmsBuildTabulatedToneCurve16($31,$33,0)|0);
       HEAP32[$13>>2] = $34;
       $35 = ($34|0)==(0|0);
       if (!($35)) {
        $36 = HEAP16[$7>>1]|0;
        L22: do {
         switch ($36<<16>>16) {
         case 1:  {
          $37 = HEAP16[$6>>1]|0;
          $38 = ($37<<16>>16)==(0);
          if ($38) {
           label = 20;
          } else {
           $$06273 = 0;
           while(1) {
            $39 = (__cmsReadUInt8Number($1,$8)|0);
            $40 = ($39|0)==(0);
            if ($40) {
             label = 16;
             break L22;
            }
            $41 = HEAP8[$8>>0]|0;
            $42 = $41&255;
            $43 = $42 << 8;
            $44 = $43 | $42;
            $45 = $44&65535;
            $46 = HEAP32[$13>>2]|0;
            $47 = ((($46)) + 24|0);
            $48 = HEAP32[$47>>2]|0;
            $49 = (($48) + ($$06273<<1)|0);
            HEAP16[$49>>1] = $45;
            $50 = (($$06273) + 1)|0;
            $51 = HEAP16[$6>>1]|0;
            $52 = $51&65535;
            $53 = ($50>>>0)<($52>>>0);
            if ($53) {
             $$06273 = $50;
            } else {
             label = 20;
             break;
            }
           }
          }
          break;
         }
         case 2:  {
          $54 = HEAP16[$6>>1]|0;
          $55 = $54&65535;
          $56 = ((($34)) + 24|0);
          $57 = HEAP32[$56>>2]|0;
          $58 = (__cmsReadUInt16Array($1,$55,$57)|0);
          $59 = ($58|0)==(0);
          if ($59) {
           break L10;
          } else {
           label = 20;
          }
          break;
         }
         default: {
          $$lcssa = $36;
          label = 19;
         }
         }
        } while(0);
        L28: do {
         if ((label|0) == 20) {
          $63 = HEAP32[$11>>2]|0;
          $64 = HEAP16[$6>>1]|0;
          $65 = $64&65535;
          $66 = (_cmsBuildTabulatedToneCurve16($63,$65,0)|0);
          $67 = ((($13)) + 4|0);
          HEAP32[$67>>2] = $66;
          $68 = ($66|0)==(0|0);
          if ($68) {
           break L10;
          }
          $95 = HEAP16[$7>>1]|0;
          switch ($95<<16>>16) {
          case 1:  {
           $102 = HEAP16[$6>>1]|0;
           $103 = ($102<<16>>16)==(0);
           if (!($103)) {
            $$06273$1 = 0;
            while(1) {
             $104 = (__cmsReadUInt8Number($1,$8)|0);
             $105 = ($104|0)==(0);
             if ($105) {
              label = 16;
              break L28;
             }
             $106 = HEAP8[$8>>0]|0;
             $107 = $106&255;
             $108 = $107 << 8;
             $109 = $108 | $107;
             $110 = $109&65535;
             $111 = HEAP32[$67>>2]|0;
             $112 = ((($111)) + 24|0);
             $113 = HEAP32[$112>>2]|0;
             $114 = (($113) + ($$06273$1<<1)|0);
             HEAP16[$114>>1] = $110;
             $115 = (($$06273$1) + 1)|0;
             $116 = HEAP16[$6>>1]|0;
             $117 = $116&65535;
             $118 = ($115>>>0)<($117>>>0);
             if ($118) {
              $$06273$1 = $115;
             } else {
              break;
             }
            }
           }
           break;
          }
          case 2:  {
           $96 = HEAP16[$6>>1]|0;
           $97 = $96&65535;
           $98 = ((($66)) + 24|0);
           $99 = HEAP32[$98>>2]|0;
           $100 = (__cmsReadUInt16Array($1,$97,$99)|0);
           $101 = ($100|0)==(0);
           if ($101) {
            break L10;
           }
           break;
          }
          default: {
           $$lcssa = $95;
           label = 19;
           break L28;
          }
          }
          $119 = HEAP32[$11>>2]|0;
          $120 = HEAP16[$6>>1]|0;
          $121 = $120&65535;
          $122 = (_cmsBuildTabulatedToneCurve16($119,$121,0)|0);
          $123 = ((($13)) + 8|0);
          HEAP32[$123>>2] = $122;
          $124 = ($122|0)==(0|0);
          if ($124) {
           break L10;
          }
          $125 = HEAP16[$7>>1]|0;
          switch ($125<<16>>16) {
          case 1:  {
           $132 = HEAP16[$6>>1]|0;
           $133 = ($132<<16>>16)==(0);
           if (!($133)) {
            $$06273$2 = 0;
            while(1) {
             $134 = (__cmsReadUInt8Number($1,$8)|0);
             $135 = ($134|0)==(0);
             if ($135) {
              label = 16;
              break L28;
             }
             $136 = HEAP8[$8>>0]|0;
             $137 = $136&255;
             $138 = $137 << 8;
             $139 = $138 | $137;
             $140 = $139&65535;
             $141 = HEAP32[$123>>2]|0;
             $142 = ((($141)) + 24|0);
             $143 = HEAP32[$142>>2]|0;
             $144 = (($143) + ($$06273$2<<1)|0);
             HEAP16[$144>>1] = $140;
             $145 = (($$06273$2) + 1)|0;
             $146 = HEAP16[$6>>1]|0;
             $147 = $146&65535;
             $148 = ($145>>>0)<($147>>>0);
             if ($148) {
              $$06273$2 = $145;
             } else {
              break;
             }
            }
           }
           break;
          }
          case 2:  {
           $126 = HEAP16[$6>>1]|0;
           $127 = $126&65535;
           $128 = ((($122)) + 24|0);
           $129 = HEAP32[$128>>2]|0;
           $130 = (__cmsReadUInt16Array($1,$127,$129)|0);
           $131 = ($130|0)==(0);
           if ($131) {
            break L10;
           }
           break;
          }
          default: {
           $$lcssa = $125;
           label = 19;
           break L28;
          }
          }
          label = 29;
          break L7;
         }
        } while(0);
        if ((label|0) == 16) {
         break;
        }
        else if ((label|0) == 19) {
         $60 = $$lcssa&65535;
         $61 = HEAP32[$11>>2]|0;
         $62 = $60 << 3;
         HEAP32[$vararg_buffer1>>2] = $62;
         _cmsSignalError($61,8,28409,$vararg_buffer1);
         break;
        }
       }
      }
     }
    }
   } while(0);
   label = 30;
   break;
  }
  case 1:  {
   $69 = ((($6)) + 8|0);
   $70 = ((($6)) + 16|0);
   $71 = ((($6)) + 40|0);
   $72 = ((($6)) + 48|0);
   $73 = (__cmsRead15Fixed16Number($1,$5)|0);
   $74 = ($73|0)==(0);
   if (!($74)) {
    $75 = ((($5)) + 8|0);
    $76 = (__cmsRead15Fixed16Number($1,$75)|0);
    $77 = ($76|0)==(0);
    if (!($77)) {
     $78 = ((($5)) + 16|0);
     $79 = (__cmsRead15Fixed16Number($1,$78)|0);
     $80 = ($79|0)==(0);
     if (!($80)) {
      $81 = +HEAPF64[$5>>3];
      HEAPF64[$6>>3] = $81;
      $82 = +HEAPF64[$78>>3];
      $83 = +HEAPF64[$75>>3];
      $84 = $82 - $83;
      $85 = 1.0 / $81;
      $86 = (+Math_pow((+$84),(+$85)));
      HEAPF64[$69>>3] = $86;
      ;HEAP32[$70>>2]=0|0;HEAP32[$70+4>>2]=0|0;HEAP32[$70+8>>2]=0|0;HEAP32[$70+12>>2]=0|0;HEAP32[$70+16>>2]=0|0;HEAP32[$70+20>>2]=0|0;
      HEAPF64[$71>>3] = $83;
      HEAPF64[$72>>3] = 0.0;
      $87 = HEAP32[$11>>2]|0;
      $88 = (_cmsBuildParametricToneCurve($87,5,$6)|0);
      HEAP32[$13>>2] = $88;
      $89 = ($88|0)==(0|0);
      if (!($89)) {
       $90 = ((($5)) + 24|0);
       $91 = (__cmsRead15Fixed16Number($1,$90)|0);
       $92 = ($91|0)==(0);
       if (!($92)) {
        $149 = ((($5)) + 32|0);
        $150 = (__cmsRead15Fixed16Number($1,$149)|0);
        $151 = ($150|0)==(0);
        if (!($151)) {
         $152 = ((($5)) + 40|0);
         $153 = (__cmsRead15Fixed16Number($1,$152)|0);
         $154 = ($153|0)==(0);
         if (!($154)) {
          $155 = +HEAPF64[$90>>3];
          HEAPF64[$6>>3] = $155;
          $156 = +HEAPF64[$152>>3];
          $157 = +HEAPF64[$149>>3];
          $158 = $156 - $157;
          $159 = 1.0 / $155;
          $160 = (+Math_pow((+$158),(+$159)));
          HEAPF64[$69>>3] = $160;
          ;HEAP32[$70>>2]=0|0;HEAP32[$70+4>>2]=0|0;HEAP32[$70+8>>2]=0|0;HEAP32[$70+12>>2]=0|0;HEAP32[$70+16>>2]=0|0;HEAP32[$70+20>>2]=0|0;
          HEAPF64[$71>>3] = $157;
          HEAPF64[$72>>3] = 0.0;
          $161 = HEAP32[$11>>2]|0;
          $162 = (_cmsBuildParametricToneCurve($161,5,$6)|0);
          $163 = ((($13)) + 4|0);
          HEAP32[$163>>2] = $162;
          $164 = ($162|0)==(0|0);
          if (!($164)) {
           $165 = ((($5)) + 48|0);
           $166 = (__cmsRead15Fixed16Number($1,$165)|0);
           $167 = ($166|0)==(0);
           if (!($167)) {
            $168 = ((($5)) + 56|0);
            $169 = (__cmsRead15Fixed16Number($1,$168)|0);
            $170 = ($169|0)==(0);
            if (!($170)) {
             $171 = ((($5)) + 64|0);
             $172 = (__cmsRead15Fixed16Number($1,$171)|0);
             $173 = ($172|0)==(0);
             if (!($173)) {
              $174 = +HEAPF64[$165>>3];
              HEAPF64[$6>>3] = $174;
              $175 = +HEAPF64[$171>>3];
              $176 = +HEAPF64[$168>>3];
              $177 = $175 - $176;
              $178 = 1.0 / $174;
              $179 = (+Math_pow((+$177),(+$178)));
              HEAPF64[$69>>3] = $179;
              ;HEAP32[$70>>2]=0|0;HEAP32[$70+4>>2]=0|0;HEAP32[$70+8>>2]=0|0;HEAP32[$70+12>>2]=0|0;HEAP32[$70+16>>2]=0|0;HEAP32[$70+20>>2]=0|0;
              HEAPF64[$71>>3] = $176;
              HEAPF64[$72>>3] = 0.0;
              $180 = HEAP32[$11>>2]|0;
              $181 = (_cmsBuildParametricToneCurve($180,5,$6)|0);
              $182 = ((($13)) + 8|0);
              HEAP32[$182>>2] = $181;
              $183 = ($181|0)==(0|0);
              if (!($183)) {
               label = 29;
               break L7;
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
   label = 30;
   break;
  }
  default: {
   $93 = HEAP32[$11>>2]|0;
   HEAP32[$vararg_buffer4>>2] = $15;
   _cmsSignalError($93,8,28445,$vararg_buffer4);
   label = 30;
  }
  }
 } while(0);
 if ((label|0) == 29) {
  HEAP32[$2>>2] = 1;
  $$061 = $13;
  STACKTOP = sp;return ($$061|0);
 }
 else if ((label|0) == 30) {
  _cmsFreeToneCurveTriple($13);
  $94 = HEAP32[$11>>2]|0;
  __cmsFree($94,$13);
  $$061 = 0;
  STACKTOP = sp;return ($$061|0);
 }
 return (0)|0;
}
function _Type_vcgt_Write($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$04960 = 0, $$14861 = 0, $$5 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0;
 var $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0;
 var $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0;
 var $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, $not$ = 0, $not$54 = 0, $not$54$1 = 0, $not$not$54$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP32[$2>>2]|0;
 $5 = (_cmsGetToneCurveParametricType($4)|0);
 $6 = ($5|0)==(5);
 if ($6) {
  $7 = ((($2)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (_cmsGetToneCurveParametricType($8)|0);
  $10 = ($9|0)==(5);
  if ($10) {
   $11 = ((($2)) + 8|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = (_cmsGetToneCurveParametricType($12)|0);
   $14 = ($13|0)==(5);
   if ($14) {
    $15 = (__cmsWriteUInt32Number($1,1)|0);
    $16 = ($15|0)==(0);
    if ($16) {
     $$5 = 0;
     return ($$5|0);
    }
    $31 = HEAP32[$2>>2]|0;
    $32 = ((($31)) + 8|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = ((($33)) + 16|0);
    $35 = +HEAPF64[$34>>3];
    $36 = ((($33)) + 56|0);
    $37 = +HEAPF64[$36>>3];
    $38 = ((($33)) + 24|0);
    $39 = +HEAPF64[$38>>3];
    $40 = (+Math_pow((+$39),(+$35)));
    $41 = $37 + $40;
    $42 = (__cmsWrite15Fixed16Number($1,$35)|0);
    $43 = ($42|0)==(0);
    if ($43) {
     $$5 = 0;
     return ($$5|0);
    }
    $44 = (__cmsWrite15Fixed16Number($1,$37)|0);
    $45 = ($44|0)==(0);
    if ($45) {
     $$5 = 0;
     return ($$5|0);
    }
    $46 = (__cmsWrite15Fixed16Number($1,$41)|0);
    $not$54 = ($46|0)==(0);
    if ($not$54) {
     $$5 = 0;
     return ($$5|0);
    }
    $17 = ((($2)) + 4|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($18)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ((($20)) + 16|0);
    $22 = +HEAPF64[$21>>3];
    $23 = ((($20)) + 56|0);
    $24 = +HEAPF64[$23>>3];
    $25 = ((($20)) + 24|0);
    $26 = +HEAPF64[$25>>3];
    $27 = (+Math_pow((+$26),(+$22)));
    $28 = $24 + $27;
    $29 = (__cmsWrite15Fixed16Number($1,$22)|0);
    $30 = ($29|0)==(0);
    if ($30) {
     $$5 = 0;
     return ($$5|0);
    }
    $69 = (__cmsWrite15Fixed16Number($1,$24)|0);
    $70 = ($69|0)==(0);
    if ($70) {
     $$5 = 0;
     return ($$5|0);
    }
    $71 = (__cmsWrite15Fixed16Number($1,$28)|0);
    $not$54$1 = ($71|0)==(0);
    if ($not$54$1) {
     $$5 = 0;
     return ($$5|0);
    }
    $72 = ((($2)) + 8|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = ((($73)) + 8|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = ((($75)) + 16|0);
    $77 = +HEAPF64[$76>>3];
    $78 = ((($75)) + 56|0);
    $79 = +HEAPF64[$78>>3];
    $80 = ((($75)) + 24|0);
    $81 = +HEAPF64[$80>>3];
    $82 = (+Math_pow((+$81),(+$77)));
    $83 = $79 + $82;
    $84 = (__cmsWrite15Fixed16Number($1,$77)|0);
    $85 = ($84|0)==(0);
    if ($85) {
     $$5 = 0;
     return ($$5|0);
    }
    $86 = (__cmsWrite15Fixed16Number($1,$79)|0);
    $87 = ($86|0)==(0);
    if ($87) {
     $$5 = 0;
     return ($$5|0);
    } else {
     $88 = (__cmsWrite15Fixed16Number($1,$83)|0);
     $not$not$54$2 = ($88|0)!=(0);
     $$ = $not$not$54$2&1;
     return ($$|0);
    }
   }
  }
 }
 $47 = (__cmsWriteUInt32Number($1,0)|0);
 $48 = ($47|0)==(0);
 if ($48) {
  $$5 = 0;
  return ($$5|0);
 }
 $49 = (__cmsWriteUInt16Number($1,3)|0);
 $50 = ($49|0)==(0);
 if ($50) {
  $$5 = 0;
  return ($$5|0);
 }
 $51 = (__cmsWriteUInt16Number($1,256)|0);
 $52 = ($51|0)==(0);
 if ($52) {
  $$5 = 0;
  return ($$5|0);
 }
 $53 = (__cmsWriteUInt16Number($1,2)|0);
 $54 = ($53|0)==(0);
 if ($54) {
  $$5 = 0;
  return ($$5|0);
 } else {
  $$14861 = 0;
 }
 L44: while(1) {
  $55 = (($2) + ($$14861<<2)|0);
  $$04960 = 0;
  while(1) {
   $58 = HEAP32[$55>>2]|0;
   $59 = (+($$04960>>>0));
   $60 = $59 / 255.0;
   $61 = $60;
   $62 = (+_cmsEvalToneCurveFloat($58,$61));
   $63 = $62;
   $64 = $63 * 65535.0;
   $65 = (__cmsQuickSaturateWord_616($64)|0);
   $66 = (__cmsWriteUInt16Number($1,$65)|0);
   $not$ = ($66|0)==(0);
   $57 = (($$04960) + 1)|0;
   if ($not$) {
    $$5 = 0;
    label = 17;
    break L44;
   }
   $56 = ($57>>>0)<(256);
   if ($56) {
    $$04960 = $57;
   } else {
    break;
   }
  }
  $67 = (($$14861) + 1)|0;
  $68 = ($67>>>0)<(3);
  if ($68) {
   $$14861 = $67;
  } else {
   $$5 = 1;
   label = 17;
   break;
  }
 }
 if ((label|0) == 17) {
  return ($$5|0);
 }
 return (0)|0;
}
function _Type_vcgt_Dup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (__cmsCalloc($4,3,4)|0);
 $6 = ($5|0)==(0|0);
 if ($6) {
  $$0 = 0;
  return ($$0|0);
 }
 $7 = HEAP32[$1>>2]|0;
 $8 = (_cmsDupToneCurve($7)|0);
 HEAP32[$5>>2] = $8;
 $9 = ((($1)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_cmsDupToneCurve($10)|0);
 $12 = ((($5)) + 4|0);
 HEAP32[$12>>2] = $11;
 $13 = ((($1)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (_cmsDupToneCurve($14)|0);
 $16 = ((($5)) + 8|0);
 HEAP32[$16>>2] = $15;
 $$0 = $5;
 return ($$0|0);
}
function _Type_vcgt_Free($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _cmsFreeToneCurveTriple($1);
 $2 = ((($0)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 __cmsFree($3,$1);
 return;
}
function __cmsQuickSaturateWord_616($0) {
 $0 = +$0;
 var $$0 = 0, $1 = 0.0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0 + 0.5;
 $2 = !($1 <= 0.0);
 if ($2) {
  $3 = !($1 >= 65535.0);
  if ($3) {
   $4 = (__cmsQuickFloorWord_617($1)|0);
   $$0 = $4;
  } else {
   $$0 = -1;
  }
 } else {
  $$0 = 0;
 }
 return ($$0|0);
}
function __cmsQuickFloorWord_617($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0 + -32767.0;
 $2 = (__cmsQuickFloor_618($1)|0);
 $3 = (($2) + 32767)|0;
 $4 = $3&65535;
 return ($4|0);
}
function __cmsQuickFloor_618($0) {
 $0 = +$0;
 var $1 = 0.0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0 + 103079215104.0;
 HEAPF64[tempDoublePtr>>3] = $1;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = $2 >> 16;
 return ($4|0);
}
function _AllocArray($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 dest=$1; stop=dest+48|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $4 = (_AllocElem($0,$1,$2)|0);
 $5 = ($4|0)==(0);
 if (!($5)) {
  $6 = ((($1)) + 12|0);
  $7 = (_AllocElem($0,$6,$2)|0);
  $8 = ($7|0)==(0);
  if (!($8)) {
   $9 = ($3>>>0)>(16);
   if (!($9)) {
    $$0 = 1;
    return ($$0|0);
   }
   $10 = ((($1)) + 24|0);
   $11 = (_AllocElem($0,$10,$2)|0);
   $12 = ($11|0)==(0);
   if (!($12)) {
    $13 = ($3>>>0)>(24);
    if (!($13)) {
     $$0 = 1;
     return ($$0|0);
    }
    $14 = ((($1)) + 36|0);
    $15 = (_AllocElem($0,$14,$2)|0);
    $16 = ($15|0)==(0);
    if (!($16)) {
     $$0 = 1;
     return ($$0|0);
    }
   }
  }
 }
 _FreeArray($1);
 $$0 = 0;
 return ($$0|0);
}
function _WriteOffsetArray($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$018 = 0, $$019 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 12|0);
 $5 = ((($1)) + 24|0);
 $6 = ((($1)) + 36|0);
 $7 = ($2|0)==(0);
 L1: do {
  if ($7) {
   $$018 = 1;
  } else {
   $8 = ($3>>>0)>(16);
   $9 = ($3>>>0)>(24);
   $$019 = 0;
   while(1) {
    $10 = (_WriteOneElem($0,$1,$$019)|0);
    $11 = ($10|0)==(0);
    if ($11) {
     $$018 = 0;
     break L1;
    }
    $12 = (_WriteOneElem($0,$4,$$019)|0);
    $13 = ($12|0)==(0);
    if ($13) {
     $$018 = 0;
     break L1;
    }
    if ($8) {
     $14 = (_WriteOneElem($0,$5,$$019)|0);
     $15 = ($14|0)==(0);
     if ($15) {
      $$018 = 0;
      break L1;
     }
     if ($9) {
      $16 = (_WriteOneElem($0,$6,$$019)|0);
      $17 = ($16|0)==(0);
      if ($17) {
       $$018 = 0;
       break L1;
      }
     }
    }
    $18 = (($$019) + 1)|0;
    $19 = ($18>>>0)<($2>>>0);
    if ($19) {
     $$019 = $18;
    } else {
     $$018 = 1;
     break;
    }
   }
  }
 } while(0);
 return ($$018|0);
}
function _WriteOneWChar($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$sink = 0, $$sink25 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($0)) + 284|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (FUNCTION_TABLE_ii[$6 & 15]($0)|0);
 $8 = (($7) - ($4))|0;
 $9 = ((($1)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + ($2<<2)|0);
 HEAP32[$11>>2] = $8;
 $12 = ($3|0)==(0|0);
 do {
  if ($12) {
   $13 = ((($1)) + 8|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (($14) + ($2<<2)|0);
   HEAP32[$15>>2] = 0;
   $$sink = 0;$$sink25 = $9;
  } else {
   $16 = (_mywcslen_622($3)|0);
   $17 = (__cmsWriteWCharArray($0,$16,$3)|0);
   $18 = ($17|0)==(0);
   if ($18) {
    $$0 = 0;
    return ($$0|0);
   } else {
    $19 = HEAP32[$5>>2]|0;
    $20 = (FUNCTION_TABLE_ii[$19 & 15]($0)|0);
    $21 = (($20) - ($7))|0;
    $22 = ((($1)) + 8|0);
    $$sink = $21;$$sink25 = $22;
    break;
   }
  }
 } while(0);
 $23 = HEAP32[$$sink25>>2]|0;
 $24 = (($23) + ($2<<2)|0);
 HEAP32[$24>>2] = $$sink;
 $$0 = 1;
 return ($$0|0);
}
function _WriteOneMLUC($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$sink = 0, $$sink22 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ($4|0)==(0|0);
 do {
  if ($6) {
   $7 = ((($2)) + 8|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = (($8) + ($3<<2)|0);
   HEAP32[$9>>2] = 0;
   $10 = ((($2)) + 4|0);
   $$sink = 0;$$sink22 = $10;
  } else {
   $11 = ((($1)) + 284|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = (FUNCTION_TABLE_ii[$12 & 15]($1)|0);
   $14 = (($13) - ($5))|0;
   $15 = ((($2)) + 4|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (($16) + ($3<<2)|0);
   HEAP32[$17>>2] = $14;
   $18 = (_Type_MLU_Write($0,$1,$4,1)|0);
   $19 = ($18|0)==(0);
   if ($19) {
    $$0 = 0;
    return ($$0|0);
   } else {
    $20 = HEAP32[$11>>2]|0;
    $21 = (FUNCTION_TABLE_ii[$20 & 15]($1)|0);
    $22 = (($21) - ($13))|0;
    $23 = ((($2)) + 8|0);
    $$sink = $22;$$sink22 = $23;
    break;
   }
  }
 } while(0);
 $24 = HEAP32[$$sink22>>2]|0;
 $25 = (($24) + ($3<<2)|0);
 HEAP32[$25>>2] = $$sink;
 $$0 = 1;
 return ($$0|0);
}
function _FreeArray($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  _FreeElem($0);
 }
 $4 = ((($0)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  $7 = ((($0)) + 12|0);
  _FreeElem($7);
 }
 $8 = ((($0)) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  $11 = ((($0)) + 24|0);
  _FreeElem($11);
 }
 $12 = ((($0)) + 40|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0|0);
 if ($14) {
  return;
 }
 $15 = ((($0)) + 36|0);
 _FreeElem($15);
 return;
}
function _FreeElem($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $4 = HEAP32[$0>>2]|0;
  __cmsFree($4,$2);
 }
 $5 = ((($0)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  HEAP32[$5>>2] = 0;
  HEAP32[$1>>2] = 0;
  return;
 }
 $8 = HEAP32[$0>>2]|0;
 __cmsFree($8,$6);
 HEAP32[$5>>2] = 0;
 HEAP32[$1>>2] = 0;
 return;
}
function _mywcslen_622($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $0;
 while(1) {
  $1 = HEAP32[$$0>>2]|0;
  $2 = ($1|0)==(0);
  $3 = ((($$0)) + 4|0);
  if ($2) {
   break;
  } else {
   $$0 = $3;
  }
 }
 $4 = $$0;
 $5 = $0;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 return ($7|0);
}
function __cmsWriteWCharArray($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$011 = 0, $$012 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0|0);
 if ($3) {
  ___assert_fail((28480|0),(28499|0),127,(28529|0));
  // unreachable;
 }
 $4 = ($2|0)==(0|0);
 $5 = ($1|0)!=(0);
 $or$cond = $5 & $4;
 if ($or$cond) {
  ___assert_fail((28549|0),(28499|0),128,(28529|0));
  // unreachable;
 }
 $6 = ($1|0)==(0);
 if ($6) {
  $$011 = 1;
  return ($$011|0);
 } else {
  $$012 = 0;
 }
 while(1) {
  $9 = (($2) + ($$012<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $10&65535;
  $12 = (__cmsWriteUInt16Number($0,$11)|0);
  $13 = ($12|0)==(0);
  $8 = (($$012) + 1)|0;
  if ($13) {
   $$011 = 0;
   label = 8;
   break;
  }
  $7 = ($8>>>0)<($1>>>0);
  if ($7) {
   $$012 = $8;
  } else {
   $$011 = 1;
   label = 8;
   break;
  }
 }
 if ((label|0) == 8) {
  return ($$011|0);
 }
 return (0)|0;
}
function _WriteOneElem($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($1)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + ($2<<2)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (__cmsWriteUInt32Number($0,$6)|0);
 $8 = ($7|0)==(0);
 if ($8) {
  $$0 = 0;
  return ($$0|0);
 }
 $9 = ((($1)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + ($2<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (__cmsWriteUInt32Number($0,$12)|0);
 $not$ = ($13|0)!=(0);
 $$ = $not$&1;
 $$0 = $$;
 return ($$0|0);
}
function _AllocElem($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (__cmsCalloc($0,$2,4)|0);
 $4 = ((($1)) + 4|0);
 HEAP32[$4>>2] = $3;
 $5 = ($3|0)==(0|0);
 if ($5) {
  $$0 = 0;
  return ($$0|0);
 }
 $6 = (__cmsCalloc($0,$2,4)|0);
 $7 = ((($1)) + 8|0);
 HEAP32[$7>>2] = $6;
 $8 = ($6|0)==(0|0);
 if ($8) {
  $9 = HEAP32[$4>>2]|0;
  __cmsFree($0,$9);
  $$0 = 0;
  return ($$0|0);
 } else {
  HEAP32[$1>>2] = $0;
  $$0 = 1;
  return ($$0|0);
 }
 return (0)|0;
}
function _ReadOffsetArray($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$022 = 0, $$023 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($1)) + 12|0);
 $6 = ((($1)) + 24|0);
 $7 = ((($1)) + 36|0);
 $8 = ($2|0)==(0);
 L1: do {
  if ($8) {
   $$022 = 1;
  } else {
   $9 = ($3>>>0)>(16);
   $10 = ($3>>>0)>(24);
   $$023 = 0;
   while(1) {
    $11 = (_ReadOneElem($0,$1,$$023,$4)|0);
    $12 = ($11|0)==(0);
    if ($12) {
     $$022 = 0;
     break L1;
    }
    $13 = (_ReadOneElem($0,$5,$$023,$4)|0);
    $14 = ($13|0)==(0);
    if ($14) {
     $$022 = 0;
     break L1;
    }
    if ($9) {
     $15 = (_ReadOneElem($0,$6,$$023,$4)|0);
     $16 = ($15|0)==(0);
     if ($16) {
      $$022 = 0;
      break L1;
     }
     if ($10) {
      $17 = (_ReadOneElem($0,$7,$$023,$4)|0);
      $18 = ($17|0)==(0);
      if ($18) {
       $$022 = 0;
       break L1;
      }
     }
    }
    $19 = (($$023) + 1)|0;
    $20 = ($19>>>0)<($2>>>0);
    if ($20) {
     $$023 = $19;
    } else {
     $$022 = 1;
     break;
    }
   }
  }
 } while(0);
 return ($$022|0);
}
function _ReadOneWChar($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + ($2<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0);
 if ($8) {
  HEAP32[$3>>2] = 0;
  $$0 = 1;
  return ($$0|0);
 }
 $9 = ((($0)) + 276|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (FUNCTION_TABLE_iii[$10 & 15]($0,$7)|0);
 $12 = ($11|0)==(0);
 if ($12) {
  $$0 = 0;
  return ($$0|0);
 }
 $13 = ((($1)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + ($2<<2)|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $16 >>> 1;
 $18 = HEAP32[$1>>2]|0;
 $19 = $17 << 2;
 $20 = (($19) + 4)|0;
 $21 = (__cmsMallocZero($18,$20)|0);
 HEAP32[$3>>2] = $21;
 $22 = ($21|0)==(0|0);
 if ($22) {
  $$0 = 0;
  return ($$0|0);
 }
 $23 = (__cmsReadWCharArray($0,$17,$21)|0);
 $24 = ($23|0)==(0);
 $25 = HEAP32[$3>>2]|0;
 if ($24) {
  $26 = HEAP32[$1>>2]|0;
  __cmsFree($26,$25);
  $$0 = 0;
  return ($$0|0);
 } else {
  $27 = (($25) + ($17<<2)|0);
  HEAP32[$27>>2] = 0;
  $$0 = 1;
  return ($$0|0);
 }
 return (0)|0;
}
function _ReadOneMLUC($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $5 = sp;
 HEAP32[$5>>2] = 0;
 $6 = ((($2)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + ($3<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 if (!($10)) {
  $11 = ((($2)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (($12) + ($3<<2)|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)==(0);
  if (!($15)) {
   $16 = ((($1)) + 276|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (FUNCTION_TABLE_iii[$17 & 15]($1,$9)|0);
   $19 = ($18|0)==(0);
   if ($19) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $20 = HEAP32[$11>>2]|0;
   $21 = (($20) + ($3<<2)|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = (_Type_MLU_Read($0,$1,$5,$22)|0);
   HEAP32[$4>>2] = $23;
   $24 = ($23|0)!=(0|0);
   $25 = $24&1;
   $$0 = $25;
   STACKTOP = sp;return ($$0|0);
  }
 }
 HEAP32[$4>>2] = 0;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function __cmsReadWCharArray($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$010 = 0, $$09 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $3 = sp;
 $4 = ($0|0)==(0|0);
 if ($4) {
  ___assert_fail((28480|0),(28499|0),144,(28650|0));
  // unreachable;
 }
 $5 = ($1|0)==(0);
 L4: do {
  if ($5) {
   $$09 = 1;
  } else {
   $6 = ($2|0)==(0|0);
   $$010 = 0;
   while(1) {
    if ($6) {
     $12 = (__cmsReadUInt16Number($0,0)|0);
     $13 = ($12|0)==(0);
     if ($13) {
      $$09 = 0;
      break L4;
     }
    } else {
     $7 = (__cmsReadUInt16Number($0,$3)|0);
     $8 = ($7|0)==(0);
     if ($8) {
      $$09 = 0;
      break L4;
     }
     $9 = HEAP16[$3>>1]|0;
     $10 = $9&65535;
     $11 = (($2) + ($$010<<2)|0);
     HEAP32[$11>>2] = $10;
    }
    $14 = (($$010) + 1)|0;
    $15 = ($14>>>0)<($1>>>0);
    if ($15) {
     $$010 = $14;
    } else {
     $$09 = 1;
     break;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$09|0);
}
function _ReadOneElem($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + ($2<<2)|0);
 $7 = (__cmsReadUInt32Number($0,$6)|0);
 $8 = ($7|0)==(0);
 if ($8) {
  $$0 = 0;
  return ($$0|0);
 }
 $9 = ((($1)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + ($2<<2)|0);
 $12 = (__cmsReadUInt32Number($0,$11)|0);
 $13 = ($12|0)==(0);
 if ($13) {
  $$0 = 0;
  return ($$0|0);
 }
 $14 = HEAP32[$4>>2]|0;
 $15 = (($14) + ($2<<2)|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)==(0);
 if ($17) {
  $$0 = 1;
  return ($$0|0);
 }
 $18 = (($16) + ($3))|0;
 HEAP32[$15>>2] = $18;
 $$0 = 1;
 return ($$0|0);
}
function _WriteSeqID($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($1)) + 288|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($2)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (((($8) + (($3*48)|0)|0)) + 20|0);
 $10 = (FUNCTION_TABLE_iiii[$6 & 63]($1,16,$9)|0);
 $11 = ($10|0)==(0);
 if ($11) {
  $$0 = 0;
  return ($$0|0);
 }
 $12 = HEAP32[$7>>2]|0;
 $13 = (((($12) + (($3*48)|0)|0)) + 44|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (_SaveDescription($0,$1,$14)|0);
 $not$ = ($15|0)!=(0);
 $$ = $not$&1;
 $$0 = $$;
 return ($$0|0);
}
function _WritePositionTable($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$070 = 0, $$07113 = 0, $$110 = 0, $$29 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($1)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (__cmsCalloc($7,$2,4)|0);
 $9 = ($8|0)==(0|0);
 if ($9) {
  $$070 = 0;
  return ($$070|0);
 }
 $10 = HEAP32[$6>>2]|0;
 $11 = (__cmsCalloc($10,$2,4)|0);
 $12 = ($11|0)==(0|0);
 if ($12) {
  $64 = 0;
  label = 19;
 } else {
  $13 = ((($1)) + 284|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (FUNCTION_TABLE_ii[$14 & 15]($1)|0);
  $16 = ($2|0)==(0);
  L6: do {
   if ($16) {
    $17 = HEAP32[$13>>2]|0;
    $18 = (FUNCTION_TABLE_ii[$17 & 15]($1)|0);
    $$lcssa = $18;
    label = 11;
   } else {
    $$07113 = 0;
    while(1) {
     $23 = (__cmsWriteUInt32Number($1,0)|0);
     $24 = ($23|0)==(0);
     if ($24) {
      break L6;
     }
     $25 = (__cmsWriteUInt32Number($1,0)|0);
     $26 = ($25|0)==(0);
     $20 = (($$07113) + 1)|0;
     if ($26) {
      break L6;
     }
     $19 = ($20>>>0)<($2>>>0);
     if ($19) {
      $$07113 = $20;
     } else {
      break;
     }
    }
    $21 = HEAP32[$13>>2]|0;
    $22 = (FUNCTION_TABLE_ii[$21 & 15]($1)|0);
    $$110 = 0;$28 = $22;
    while(1) {
     $27 = (($28) - ($3))|0;
     $29 = (($8) + ($$110<<2)|0);
     HEAP32[$29>>2] = $27;
     $30 = (FUNCTION_TABLE_iiiiii[$5 & 15]($0,$1,$4,$$110,0)|0);
     $31 = ($30|0)==(0);
     if ($31) {
      break L6;
     }
     $32 = HEAP32[$13>>2]|0;
     $33 = (FUNCTION_TABLE_ii[$32 & 15]($1)|0);
     $34 = (($33) - ($28))|0;
     $35 = (($11) + ($$110<<2)|0);
     HEAP32[$35>>2] = $34;
     $36 = (($$110) + 1)|0;
     $37 = ($36>>>0)<($2>>>0);
     $38 = HEAP32[$13>>2]|0;
     $39 = (FUNCTION_TABLE_ii[$38 & 15]($1)|0);
     if ($37) {
      $$110 = $36;$28 = $39;
     } else {
      $$lcssa = $39;
      label = 11;
      break;
     }
    }
   }
  } while(0);
  L16: do {
   if ((label|0) == 11) {
    $40 = ((($1)) + 276|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = (FUNCTION_TABLE_iii[$41 & 15]($1,$15)|0);
    $43 = ($42|0)==(0);
    if (!($43)) {
     $44 = ($2|0)==(0);
     if (!($44)) {
      $$29 = 0;
      while(1) {
       $47 = (($8) + ($$29<<2)|0);
       $48 = HEAP32[$47>>2]|0;
       $49 = (__cmsWriteUInt32Number($1,$48)|0);
       $50 = ($49|0)==(0);
       if ($50) {
        break L16;
       }
       $51 = (($11) + ($$29<<2)|0);
       $52 = HEAP32[$51>>2]|0;
       $53 = (__cmsWriteUInt32Number($1,$52)|0);
       $54 = ($53|0)==(0);
       $46 = (($$29) + 1)|0;
       if ($54) {
        break L16;
       }
       $45 = ($46>>>0)<($2>>>0);
       if ($45) {
        $$29 = $46;
       } else {
        break;
       }
      }
     }
     $55 = HEAP32[$40>>2]|0;
     $56 = (FUNCTION_TABLE_iii[$55 & 15]($1,$$lcssa)|0);
     $57 = ($56|0)==(0);
     if (!($57)) {
      $58 = HEAP32[$6>>2]|0;
      __cmsFree($58,$8);
      $59 = HEAP32[$6>>2]|0;
      __cmsFree($59,$11);
      $$070 = 1;
      return ($$070|0);
     }
    }
   }
  } while(0);
  if ($9) {
   $63 = $11;
  } else {
   $64 = $11;
   label = 19;
  }
 }
 if ((label|0) == 19) {
  $60 = HEAP32[$6>>2]|0;
  __cmsFree($60,$8);
  $63 = $64;
 }
 $61 = ($11|0)==(0|0);
 if ($61) {
  $$070 = 0;
  return ($$070|0);
 }
 $62 = HEAP32[$6>>2]|0;
 __cmsFree($62,$63);
 $$070 = 0;
 return ($$070|0);
}
function _SaveDescription($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4>>>0)<(67108864);
 if ($5) {
  $6 = (__cmsWriteTypeBase($1,1684370275)|0);
  $7 = ($6|0)==(0);
  if ($7) {
   $$0 = 0;
   return ($$0|0);
  }
  $8 = (_Type_Text_Description_Write($0,$1,$2,1)|0);
  $$0 = $8;
  return ($$0|0);
 } else {
  $9 = (__cmsWriteTypeBase($1,1835824483)|0);
  $10 = ($9|0)==(0);
  if ($10) {
   $$0 = 0;
   return ($$0|0);
  }
  $11 = (_Type_MLU_Write($0,$1,$2,1)|0);
  $$0 = $11;
  return ($$0|0);
 }
 return (0)|0;
}
function _ReadSeqID($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($2)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($1)) + 272|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (((($6) + (($3*48)|0)|0)) + 20|0);
 $10 = (FUNCTION_TABLE_iiiii[$8 & 255]($1,$9,16,1)|0);
 $11 = ($10|0)==(1);
 if (!($11)) {
  $$0 = 0;
  return ($$0|0);
 }
 $12 = (((($6) + (($3*48)|0)|0)) + 44|0);
 $13 = (_ReadEmbeddedText($0,$1,$12,$4)|0);
 $not$ = ($13|0)!=(0);
 $$ = $not$&1;
 $$0 = $$;
 return ($$0|0);
}
function _ReadPositionTable($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $$05764 = 0, $$163 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ((($1)) + 284|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_ii[$7 & 15]($1)|0);
 $9 = ((($1)) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) - ($8))|0;
 $12 = $11 >>> 3;
 $13 = ($12>>>0)<($2>>>0);
 if ($13) {
  $$0 = 0;
  return ($$0|0);
 }
 $14 = ((($1)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (__cmsCalloc($15,$2,4)|0);
 $17 = ($16|0)==(0|0);
 if ($17) {
  $$0 = 0;
  return ($$0|0);
 }
 $18 = HEAP32[$14>>2]|0;
 $19 = (__cmsCalloc($18,$2,4)|0);
 $20 = ($19|0)==(0|0);
 if ($20) {
  $21 = HEAP32[$14>>2]|0;
  __cmsFree($21,$16);
  $$0 = 0;
  return ($$0|0);
 }
 $22 = ($2|0)==(0);
 L11: do {
  if (!($22)) {
   $$05764 = 0;
   while(1) {
    $24 = (($16) + ($$05764<<2)|0);
    $25 = (__cmsReadUInt32Number($1,$24)|0);
    $26 = ($25|0)==(0);
    if ($26) {
     label = 15;
     break;
    }
    $27 = (($19) + ($$05764<<2)|0);
    $28 = (__cmsReadUInt32Number($1,$27)|0);
    $29 = ($28|0)==(0);
    if ($29) {
     label = 15;
     break;
    }
    $30 = HEAP32[$24>>2]|0;
    $31 = (($30) + ($3))|0;
    HEAP32[$24>>2] = $31;
    $32 = (($$05764) + 1)|0;
    $33 = ($32>>>0)<($2>>>0);
    if ($33) {
     $$05764 = $32;
    } else {
     label = 6;
     break;
    }
   }
   L16: do {
    if ((label|0) == 6) {
     $23 = ((($1)) + 276|0);
     $$163 = 0;
     while(1) {
      $36 = HEAP32[$23>>2]|0;
      $37 = (($16) + ($$163<<2)|0);
      $38 = HEAP32[$37>>2]|0;
      $39 = (FUNCTION_TABLE_iii[$36 & 15]($1,$38)|0);
      $40 = ($39|0)==(0);
      if ($40) {
       label = 15;
       break L16;
      }
      $41 = (($19) + ($$163<<2)|0);
      $42 = HEAP32[$41>>2]|0;
      $43 = (FUNCTION_TABLE_iiiiii[$5 & 15]($0,$1,$4,$$163,$42)|0);
      $44 = ($43|0)==(0);
      $35 = (($$163) + 1)|0;
      if ($44) {
       break;
      }
      $34 = ($35>>>0)<($2>>>0);
      if ($34) {
       $$163 = $35;
      } else {
       break L11;
      }
     }
     $45 = HEAP32[$14>>2]|0;
     __cmsFree($45,$16);
    }
   } while(0);
   if ((label|0) == 15) {
    $48 = HEAP32[$14>>2]|0;
    __cmsFree($48,$16);
    $49 = ($19|0)==(0|0);
    if ($49) {
     $$0 = 0;
     return ($$0|0);
    }
   }
   $50 = HEAP32[$14>>2]|0;
   __cmsFree($50,$19);
   $$0 = 0;
   return ($$0|0);
  }
 } while(0);
 $46 = HEAP32[$14>>2]|0;
 __cmsFree($46,$16);
 $47 = HEAP32[$14>>2]|0;
 __cmsFree($47,$19);
 $$0 = 1;
 return ($$0|0);
}
function _ReadEmbeddedText($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$0$shrunk = 0, $$sink24 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $switch$split12D = 0, $switch$split2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $4 = sp;
 $5 = (__cmsReadTypeBase($1)|0);
 $switch$split2D = ($5|0)<(1835824483);
 L1: do {
  if ($switch$split2D) {
   switch ($5|0) {
   case 1684370275:  {
    break;
   }
   default: {
    $$0$shrunk = 0;
    break L1;
   }
   }
   $9 = HEAP32[$2>>2]|0;
   $10 = ($9|0)==(0|0);
   if (!($10)) {
    _cmsMLUfree($9);
   }
   $11 = (_Type_Text_Description_Read($0,$1,$4,$3)|0);
   $$sink24 = $11;
   label = 11;
  } else {
   $switch$split12D = ($5|0)<(1952807028);
   if ($switch$split12D) {
    switch ($5|0) {
    case 1835824483:  {
     break;
    }
    default: {
     $$0$shrunk = 0;
     break L1;
    }
    }
    $12 = HEAP32[$2>>2]|0;
    $13 = ($12|0)==(0|0);
    if (!($13)) {
     _cmsMLUfree($12);
    }
    $14 = (_Type_MLU_Read($0,$1,$4,$3)|0);
    $$sink24 = $14;
    label = 11;
    break;
   } else {
    switch ($5|0) {
    case 1952807028:  {
     break;
    }
    default: {
     $$0$shrunk = 0;
     break L1;
    }
    }
    $6 = HEAP32[$2>>2]|0;
    $7 = ($6|0)==(0|0);
    if (!($7)) {
     _cmsMLUfree($6);
    }
    $8 = (_Type_Text_Read($0,$1,$4,$3)|0);
    $$sink24 = $8;
    label = 11;
    break;
   }
  }
 } while(0);
 if ((label|0) == 11) {
  HEAP32[$2>>2] = $$sink24;
  $15 = ($$sink24|0)!=(0|0);
  $$0$shrunk = $15;
 }
 $$0 = $$0$shrunk&1;
 STACKTOP = sp;return ($$0|0);
}
function _Type_MPEcurve_Read($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$031 = 0, $$03233 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $4 = sp + 2|0;
 $5 = sp;
 HEAP32[$2>>2] = 0;
 $6 = ((($1)) + 284|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_ii[$7 & 15]($1)|0);
 $9 = (($8) + -8)|0;
 $10 = (__cmsReadUInt16Number($1,$4)|0);
 $11 = ($10|0)==(0);
 if ($11) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $12 = (__cmsReadUInt16Number($1,$5)|0);
 $13 = ($12|0)==(0);
 if ($13) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $14 = HEAP16[$4>>1]|0;
 $15 = HEAP16[$5>>1]|0;
 $16 = ($14<<16>>16)==($15<<16>>16);
 if (!($16)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $17 = $14&65535;
 $18 = ((($0)) + 20|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (__cmsCalloc($19,$17,4)|0);
 $21 = ($20|0)==(0|0);
 if ($21) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $22 = HEAP16[$4>>1]|0;
 $23 = $22&65535;
 $24 = (_ReadPositionTable($0,$1,$23,$9,$20,8)|0);
 $25 = ($24|0)==(0);
 if ($25) {
  $$031 = 0;
 } else {
  $26 = HEAP32[$18>>2]|0;
  $27 = HEAP16[$4>>1]|0;
  $28 = $27&65535;
  $29 = (_cmsStageAllocToneCurves($26,$28,$20)|0);
  $$031 = $29;
 }
 $30 = HEAP16[$4>>1]|0;
 $31 = ($30<<16>>16)==(0);
 if (!($31)) {
  $$03233 = 0;
  while(1) {
   $32 = (($20) + ($$03233<<2)|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ($33|0)==(0|0);
   if (!($34)) {
    _cmsFreeToneCurve($33);
   }
   $35 = (($$03233) + 1)|0;
   $36 = HEAP16[$4>>1]|0;
   $37 = $36&65535;
   $38 = ($35>>>0)<($37>>>0);
   if ($38) {
    $$03233 = $35;
   } else {
    break;
   }
  }
 }
 $39 = HEAP32[$18>>2]|0;
 __cmsFree($39,$20);
 $40 = ($$031|0)!=(0|0);
 $41 = $40&1;
 HEAP32[$2>>2] = $41;
 $$0 = $$031;
 STACKTOP = sp;return ($$0|0);
}
function _Type_MPEcurve_Write($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($2)) + 32|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($1)) + 284|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_ii[$7 & 15]($1)|0);
 $9 = (($8) + -8)|0;
 $10 = ((($2)) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11&65535;
 $13 = (__cmsWriteUInt16Number($1,$12)|0);
 $14 = ($13|0)==(0);
 if ($14) {
  $$0 = 0;
  return ($$0|0);
 }
 $15 = HEAP32[$10>>2]|0;
 $16 = $15&65535;
 $17 = (__cmsWriteUInt16Number($1,$16)|0);
 $18 = ($17|0)==(0);
 if ($18) {
  $$0 = 0;
  return ($$0|0);
 }
 $19 = HEAP32[$10>>2]|0;
 $20 = (_WritePositionTable($0,$1,$19,$9,$5,9)|0);
 $not$ = ($20|0)!=(0);
 $$ = $not$&1;
 $$0 = $$;
 return ($$0|0);
}
function _GenericMPEdup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_cmsStageDup($1)|0);
 return ($3|0);
}
function _GenericMPEfree($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _cmsStageFree($1);
 return;
}
function _Type_MPEmatrix_Read($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$05159 = 0, $$15258 = 0, $$4 = 0, $$lcssa55 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $4 = sp + 6|0;
 $5 = sp + 4|0;
 $6 = sp;
 $7 = (__cmsReadUInt16Number($1,$4)|0);
 $8 = ($7|0)==(0);
 if ($8) {
  $$4 = 0;
  STACKTOP = sp;return ($$4|0);
 }
 $9 = (__cmsReadUInt16Number($1,$5)|0);
 $10 = ($9|0)==(0);
 if ($10) {
  $$4 = 0;
  STACKTOP = sp;return ($$4|0);
 }
 $11 = HEAP16[$4>>1]|0;
 $12 = $11&65535;
 $13 = ($11&65535)>(15);
 if ($13) {
  $$4 = 0;
  STACKTOP = sp;return ($$4|0);
 }
 $14 = HEAP16[$5>>1]|0;
 $15 = ($14&65535)>(15);
 if ($15) {
  $$4 = 0;
  STACKTOP = sp;return ($$4|0);
 }
 $16 = $14&65535;
 $17 = Math_imul($16, $12)|0;
 $18 = ((($0)) + 20|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (__cmsCalloc($19,$17,8)|0);
 $21 = ($20|0)==(0|0);
 if ($21) {
  $$4 = 0;
  STACKTOP = sp;return ($$4|0);
 }
 $22 = HEAP32[$18>>2]|0;
 $23 = HEAP16[$5>>1]|0;
 $24 = $23&65535;
 $25 = (__cmsCalloc($22,$24,8)|0);
 $26 = ($25|0)==(0|0);
 if ($26) {
  $28 = HEAP32[$18>>2]|0;
  __cmsFree($28,$20);
  $$4 = 0;
  STACKTOP = sp;return ($$4|0);
 }
 $27 = ($17|0)==(0);
 L20: do {
  if (!($27)) {
   $$05159 = 0;
   while(1) {
    $32 = (__cmsReadFloat32Number($1,$6)|0);
    $33 = ($32|0)==(0);
    if ($33) {
     break;
    }
    $36 = +HEAPF32[$6>>2];
    $37 = $36;
    $38 = (($20) + ($$05159<<3)|0);
    HEAPF64[$38>>3] = $37;
    $39 = (($$05159) + 1)|0;
    $40 = ($39>>>0)<($17>>>0);
    if ($40) {
     $$05159 = $39;
    } else {
     break L20;
    }
   }
   $34 = HEAP32[$18>>2]|0;
   __cmsFree($34,$20);
   $35 = HEAP32[$18>>2]|0;
   __cmsFree($35,$25);
   $$4 = 0;
   STACKTOP = sp;return ($$4|0);
  }
 } while(0);
 $29 = HEAP16[$5>>1]|0;
 $30 = $29&65535;
 $31 = ($29<<16>>16)==(0);
 L28: do {
  if ($31) {
   $$lcssa55 = $30;
  } else {
   $$15258 = 0;
   while(1) {
    $41 = (__cmsReadFloat32Number($1,$6)|0);
    $42 = ($41|0)==(0);
    if ($42) {
     break;
    }
    $45 = +HEAPF32[$6>>2];
    $46 = $45;
    $47 = (($25) + ($$15258<<3)|0);
    HEAPF64[$47>>3] = $46;
    $48 = (($$15258) + 1)|0;
    $49 = HEAP16[$5>>1]|0;
    $50 = $49&65535;
    $51 = ($48>>>0)<($50>>>0);
    if ($51) {
     $$15258 = $48;
    } else {
     $$lcssa55 = $50;
     break L28;
    }
   }
   $43 = HEAP32[$18>>2]|0;
   __cmsFree($43,$20);
   $44 = HEAP32[$18>>2]|0;
   __cmsFree($44,$25);
   $$4 = 0;
   STACKTOP = sp;return ($$4|0);
  }
 } while(0);
 $52 = HEAP32[$18>>2]|0;
 $53 = HEAP16[$4>>1]|0;
 $54 = $53&65535;
 $55 = (_cmsStageAllocMatrix($52,$$lcssa55,$54,$20,$25)|0);
 $56 = HEAP32[$18>>2]|0;
 __cmsFree($56,$20);
 $57 = HEAP32[$18>>2]|0;
 __cmsFree($57,$25);
 HEAP32[$2>>2] = 1;
 $$4 = $55;
 STACKTOP = sp;return ($$4|0);
}
function _Type_MPEmatrix_Write($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$02835 = 0, $$130 = 0, $$pr = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($2)) + 32|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($2)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7&65535;
 $9 = (__cmsWriteUInt16Number($1,$8)|0);
 $10 = ($9|0)==(0);
 if ($10) {
  $$0 = 0;
  return ($$0|0);
 }
 $11 = ((($2)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12&65535;
 $14 = (__cmsWriteUInt16Number($1,$13)|0);
 $15 = ($14|0)==(0);
 if ($15) {
  $$0 = 0;
  return ($$0|0);
 }
 $16 = HEAP32[$6>>2]|0;
 $17 = HEAP32[$11>>2]|0;
 $18 = Math_imul($17, $16)|0;
 $19 = ($18|0)==(0);
 do {
  if ($19) {
   $23 = $17;
  } else {
   $$02835 = 0;
   while(1) {
    $25 = HEAP32[$5>>2]|0;
    $26 = (($25) + ($$02835<<3)|0);
    $27 = +HEAPF64[$26>>3];
    $28 = $27;
    $29 = (__cmsWriteFloat32Number($1,$28)|0);
    $30 = ($29|0)==(0);
    $21 = (($$02835) + 1)|0;
    if ($30) {
     $$0 = 0;
     label = 14;
     break;
    }
    $20 = ($21>>>0)<($18>>>0);
    if ($20) {
     $$02835 = $21;
    } else {
     label = 6;
     break;
    }
   }
   if ((label|0) == 6) {
    $$pr = HEAP32[$11>>2]|0;
    $23 = $$pr;
    break;
   }
   else if ((label|0) == 14) {
    return ($$0|0);
   }
  }
 } while(0);
 $22 = ($23|0)==(0);
 if ($22) {
  $$0 = 1;
  return ($$0|0);
 }
 $24 = ((($5)) + 4|0);
 $$130 = 0;
 while(1) {
  $31 = HEAP32[$24>>2]|0;
  $32 = ($31|0)==(0|0);
  if ($32) {
   $33 = (__cmsWriteFloat32Number($1,0.0)|0);
   $34 = ($33|0)==(0);
   if ($34) {
    $$0 = 0;
    label = 14;
    break;
   }
  } else {
   $35 = (($31) + ($$130<<3)|0);
   $36 = +HEAPF64[$35>>3];
   $37 = $36;
   $38 = (__cmsWriteFloat32Number($1,$37)|0);
   $39 = ($38|0)==(0);
   if ($39) {
    $$0 = 0;
    label = 14;
    break;
   }
  }
  $40 = (($$130) + 1)|0;
  $41 = HEAP32[$11>>2]|0;
  $42 = ($40>>>0)<($41>>>0);
  if ($42) {
   $$130 = $40;
  } else {
   $$0 = 1;
   label = 14;
   break;
  }
 }
 if ((label|0) == 14) {
  return ($$0|0);
 }
 return (0)|0;
}
function _Type_MPEclut_Read($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$03235 = 0, $$134 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $4 = sp + 34|0;
 $5 = sp + 32|0;
 $6 = sp + 40|0;
 $7 = sp;
 $8 = (__cmsReadUInt16Number($1,$4)|0);
 $9 = ($8|0)==(0);
 if ($9) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = (__cmsReadUInt16Number($1,$5)|0);
 $11 = ($10|0)==(0);
 if ($11) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $12 = HEAP16[$4>>1]|0;
 $13 = ($12<<16>>16)==(0);
 $14 = HEAP16[$5>>1]|0;
 $15 = ($14<<16>>16)==(0);
 $or$cond = $13 | $15;
 L7: do {
  if (!($or$cond)) {
   $16 = ((($1)) + 272|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (FUNCTION_TABLE_iiiii[$17 & 255]($1,$6,1,16)|0);
   $19 = ($18|0)==(16);
   if ($19) {
    $20 = HEAP16[$4>>1]|0;
    $21 = $20&65535;
    $22 = ($21>>>0)<(8);
    $23 = $22 ? $21 : 8;
    $24 = ($23|0)==(0);
    if (!($24)) {
     $$03235 = 0;
     while(1) {
      $25 = (($6) + ($$03235)|0);
      $26 = HEAP8[$25>>0]|0;
      $27 = ($26<<24>>24)==(1);
      if ($27) {
       break L7;
      }
      $28 = $26&255;
      $29 = (($7) + ($$03235<<2)|0);
      HEAP32[$29>>2] = $28;
      $30 = (($$03235) + 1)|0;
      $31 = ($30>>>0)<($23>>>0);
      if ($31) {
       $$03235 = $30;
      } else {
       break;
      }
     }
    }
    $32 = ((($0)) + 20|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = HEAP16[$5>>1]|0;
    $35 = $34&65535;
    $36 = (_cmsStageAllocCLutFloatGranular($33,$7,$21,$35,0)|0);
    $37 = ($36|0)==(0|0);
    if (!($37)) {
     $38 = ((($36)) + 32|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = ((($39)) + 8|0);
     $41 = HEAP32[$40>>2]|0;
     $42 = ($41|0)==(0);
     L16: do {
      if (!($42)) {
       $$134 = 0;
       while(1) {
        $46 = HEAP32[$39>>2]|0;
        $47 = (($46) + ($$134<<2)|0);
        $48 = (__cmsReadFloat32Number($1,$47)|0);
        $49 = ($48|0)==(0);
        $45 = (($$134) + 1)|0;
        if ($49) {
         break;
        }
        $43 = HEAP32[$40>>2]|0;
        $44 = ($45>>>0)<($43>>>0);
        if ($44) {
         $$134 = $45;
        } else {
         break L16;
        }
       }
       HEAP32[$2>>2] = 0;
       $50 = ($36|0)==(0|0);
       if ($50) {
        $$0 = 0;
        STACKTOP = sp;return ($$0|0);
       }
       _cmsStageFree($36);
       $$0 = 0;
       STACKTOP = sp;return ($$0|0);
      }
     } while(0);
     HEAP32[$2>>2] = 1;
     $$0 = $36;
     STACKTOP = sp;return ($$0|0);
    }
   }
  }
 } while(0);
 HEAP32[$2>>2] = 0;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _Type_MPEclut_Write($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$02731 = 0, $$128 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0;
 var $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $4 = sp;
 $5 = ((($2)) + 32|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($2)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8>>>0)>(8);
 if ($9) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = ((($6)) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0);
 if ($12) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $13 = $8&65535;
 $14 = (__cmsWriteUInt16Number($1,$13)|0);
 $15 = ($14|0)==(0);
 if ($15) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $16 = ((($2)) + 16|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17&65535;
 $19 = (__cmsWriteUInt16Number($1,$18)|0);
 $20 = ($19|0)==(0);
 if ($20) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 dest=$4; stop=dest+16|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $21 = HEAP32[$7>>2]|0;
 $22 = ($21|0)==(0);
 if (!($22)) {
  $23 = ((($6)) + 4|0);
  $$02731 = 0;
  while(1) {
   $24 = HEAP32[$23>>2]|0;
   $25 = (((($24)) + 16|0) + ($$02731<<2)|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = $26&255;
   $28 = (($4) + ($$02731)|0);
   HEAP8[$28>>0] = $27;
   $29 = (($$02731) + 1)|0;
   $30 = HEAP32[$7>>2]|0;
   $31 = ($29>>>0)<($30>>>0);
   if ($31) {
    $$02731 = $29;
   } else {
    break;
   }
  }
 }
 $32 = ((($1)) + 288|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (FUNCTION_TABLE_iiii[$33 & 63]($1,16,$4)|0);
 $35 = ($34|0)==(0);
 if ($35) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $36 = ((($6)) + 8|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ($37|0)==(0);
 if ($38) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 } else {
  $$128 = 0;
 }
 while(1) {
  $42 = HEAP32[$6>>2]|0;
  $43 = (($42) + ($$128<<2)|0);
  $44 = +HEAPF32[$43>>2];
  $45 = (__cmsWriteFloat32Number($1,$44)|0);
  $46 = ($45|0)==(0);
  $41 = (($$128) + 1)|0;
  if ($46) {
   $$0 = 0;
   label = 12;
   break;
  }
  $39 = HEAP32[$36>>2]|0;
  $40 = ($41>>>0)<($39>>>0);
  if ($40) {
   $$128 = $41;
  } else {
   $$0 = 1;
   label = 12;
   break;
  }
 }
 if ((label|0) == 12) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _WriteMPECurve($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($2)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + ($3<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (_WriteSegmentedCurve($1,$8)|0);
 return ($9|0);
}
function _WriteSegmentedCurve($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$058 = 0, $$05999 = 0, $$06176 = 0, $$16078 = 0, $$16275 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, $or$cond = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($1)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (__cmsWriteUInt32Number($0,1668641382)|0);
 $7 = ($6|0)==(0);
 if ($7) {
  $$058 = 0;
  return ($$058|0);
 }
 $8 = (__cmsWriteUInt32Number($0,0)|0);
 $9 = ($8|0)==(0);
 if ($9) {
  $$058 = 0;
  return ($$058|0);
 }
 $10 = $5&65535;
 $11 = (__cmsWriteUInt16Number($0,$10)|0);
 $12 = ($11|0)==(0);
 if ($12) {
  $$058 = 0;
  return ($$058|0);
 }
 $13 = (__cmsWriteUInt16Number($0,0)|0);
 $14 = ($13|0)==(0);
 if ($14) {
  $$058 = 0;
  return ($$058|0);
 }
 $15 = (($5) + -1)|0;
 $16 = ($15|0)==(0);
 L13: do {
  if (!($16)) {
   $$05999 = 0;
   while(1) {
    $21 = (((($3) + (($$05999*104)|0)|0)) + 4|0);
    $22 = +HEAPF32[$21>>2];
    $23 = (__cmsWriteFloat32Number($0,$22)|0);
    $24 = ($23|0)==(0);
    $18 = (($$05999) + 1)|0;
    if ($24) {
     $$058 = 0;
     break;
    }
    $17 = ($18>>>0)<($15>>>0);
    if ($17) {
     $$05999 = $18;
    } else {
     break L13;
    }
   }
   return ($$058|0);
  }
 } while(0);
 $19 = HEAP32[$4>>2]|0;
 $20 = ($19|0)==(0);
 if ($20) {
  $$058 = 1;
  return ($$058|0);
 } else {
  $$16078 = 0;
 }
 L21: while(1) {
  $25 = (((($3) + (($$16078*104)|0)|0)) + 8|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ($26|0)==(0);
  if ($27) {
   $28 = (__cmsWriteUInt32Number($0,1935764838)|0);
   $29 = ($28|0)==(0);
   if ($29) {
    $$058 = 0;
    label = 26;
    break;
   }
   $30 = (__cmsWriteUInt32Number($0,0)|0);
   $31 = ($30|0)==(0);
   if ($31) {
    $$058 = 0;
    label = 26;
    break;
   }
   $32 = (((($3) + (($$16078*104)|0)|0)) + 96|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = (__cmsWriteUInt32Number($0,$33)|0);
   $35 = ($34|0)==(0);
   if ($35) {
    $$058 = 0;
    label = 26;
    break;
   }
   $36 = HEAP32[$2>>2]|0;
   $37 = (((($36) + (($$16078*104)|0)|0)) + 96|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = ($38|0)==(0);
   if (!($39)) {
    $40 = (((($3) + (($$16078*104)|0)|0)) + 100|0);
    $$06176 = 0;
    while(1) {
     $46 = HEAP32[$40>>2]|0;
     $47 = (($46) + ($$06176<<2)|0);
     $48 = +HEAPF32[$47>>2];
     $49 = (__cmsWriteFloat32Number($0,$48)|0);
     $50 = ($49|0)==(0);
     $45 = (($$06176) + 1)|0;
     if ($50) {
      $$058 = 0;
      label = 26;
      break L21;
     }
     $41 = HEAP32[$2>>2]|0;
     $42 = (((($41) + (($$16078*104)|0)|0)) + 96|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = ($45>>>0)<($43>>>0);
     if ($44) {
      $$06176 = $45;
     } else {
      break;
     }
    }
   }
  } else {
   $51 = (__cmsWriteUInt32Number($0,1885434470)|0);
   $52 = ($51|0)==(0);
   if ($52) {
    $$058 = 0;
    label = 26;
    break;
   }
   $53 = (__cmsWriteUInt32Number($0,0)|0);
   $54 = ($53|0)==(0);
   if ($54) {
    $$058 = 0;
    label = 26;
    break;
   }
   $55 = HEAP32[$25>>2]|0;
   $56 = (($55) + -6)|0;
   $57 = ($56|0)>(2);
   $58 = ($55|0)<(6);
   $or$cond = $58 | $57;
   if ($or$cond) {
    $$058 = 0;
    label = 26;
    break;
   }
   $59 = $56&65535;
   $60 = (__cmsWriteUInt16Number($0,$59)|0);
   $61 = ($60|0)==(0);
   if ($61) {
    $$058 = 0;
    label = 26;
    break;
   }
   $62 = (__cmsWriteUInt16Number($0,0)|0);
   $63 = ($62|0)==(0);
   if ($63) {
    $$058 = 0;
    label = 26;
    break;
   }
   $64 = (15936 + ($56<<2)|0);
   $$16275 = 0;
   while(1) {
    $68 = ((((($3) + (($$16078*104)|0)|0)) + 16|0) + ($$16275<<3)|0);
    $69 = +HEAPF64[$68>>3];
    $70 = $69;
    $71 = (__cmsWriteFloat32Number($0,$70)|0);
    $72 = ($71|0)==(0);
    $67 = (($$16275) + 1)|0;
    if ($72) {
     $$058 = 0;
     label = 26;
     break L21;
    }
    $65 = HEAP32[$64>>2]|0;
    $66 = ($67>>>0)<($65>>>0);
    if ($66) {
     $$16275 = $67;
    } else {
     break;
    }
   }
  }
  $73 = (($$16078) + 1)|0;
  $74 = HEAP32[$4>>2]|0;
  $75 = ($73>>>0)<($74>>>0);
  if ($75) {
   $$16078 = $73;
  } else {
   $$058 = 1;
   label = 26;
   break;
  }
 }
 if ((label|0) == 26) {
  return ($$058|0);
 }
 return (0)|0;
}
function _ReadMPECurve($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = (_ReadSegmentedCurve($0,$1)|0);
 $6 = (($2) + ($3<<2)|0);
 HEAP32[$6>>2] = $5;
 $7 = ($5|0)!=(0|0);
 $8 = $7&1;
 return ($8|0);
}
function _ReadSegmentedCurve($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$080$lcssa = 0.0, $$080128 = 0.0, $$081 = 0, $$082127 = 0, $$085118 = 0, $$183121 = 0, $$186115 = 0, $$284111 = 0, $$3110 = 0, $$lcssa100 = 0, $$lcssa107 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0;
 var $60 = 0.0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $switch$split2D = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer = sp;
 $2 = sp + 16|0;
 $3 = sp + 20|0;
 $4 = sp + 8|0;
 $5 = sp + 4|0;
 $6 = (__cmsReadUInt32Number($1,$2)|0);
 $7 = ($6|0)!=(0);
 $8 = HEAP32[$2>>2]|0;
 $9 = ($8|0)==(1668641382);
 $or$cond = $7 & $9;
 if (!($or$cond)) {
  $$081 = 0;
  STACKTOP = sp;return ($$081|0);
 }
 $10 = (__cmsReadUInt32Number($1,0)|0);
 $11 = ($10|0)==(0);
 if ($11) {
  $$081 = 0;
  STACKTOP = sp;return ($$081|0);
 }
 $12 = (__cmsReadUInt16Number($1,$3)|0);
 $13 = ($12|0)==(0);
 if ($13) {
  $$081 = 0;
  STACKTOP = sp;return ($$081|0);
 }
 $14 = (__cmsReadUInt16Number($1,0)|0);
 $15 = ($14|0)==(0);
 if ($15) {
  $$081 = 0;
  STACKTOP = sp;return ($$081|0);
 }
 $16 = HEAP16[$3>>1]|0;
 $17 = ($16<<16>>16)==(0);
 if ($17) {
  $$081 = 0;
  STACKTOP = sp;return ($$081|0);
 }
 $18 = $16&65535;
 $19 = ((($0)) + 20|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (__cmsCalloc($20,$18,104)|0);
 $22 = ($21|0)==(0|0);
 if ($22) {
  $$081 = 0;
  STACKTOP = sp;return ($$081|0);
 }
 $23 = HEAP16[$3>>1]|0;
 $24 = ($23<<16>>16)==(1);
 L19: do {
  if ($24) {
   $$080$lcssa = -9.9999997781963083E+21;$$lcssa107 = 0;
   label = 10;
  } else {
   $$080128 = -9.9999997781963083E+21;$$082127 = 0;
   while(1) {
    $25 = (($21) + (($$082127*104)|0)|0);
    HEAPF32[$25>>2] = $$080128;
    $26 = (((($21) + (($$082127*104)|0)|0)) + 4|0);
    $27 = (__cmsReadFloat32Number($1,$26)|0);
    $28 = ($27|0)==(0);
    if ($28) {
     break L19;
    }
    $29 = +HEAPF32[$26>>2];
    $30 = (($$082127) + 1)|0;
    $31 = HEAP16[$3>>1]|0;
    $32 = $31&65535;
    $33 = (($32) + -1)|0;
    $34 = ($30>>>0)<($33>>>0);
    if ($34) {
     $$080128 = $29;$$082127 = $30;
    } else {
     $$080$lcssa = $29;$$lcssa107 = $33;
     label = 10;
     break;
    }
   }
  }
 } while(0);
 L23: do {
  if ((label|0) == 10) {
   $35 = (($21) + (($$lcssa107*104)|0)|0);
   HEAPF32[$35>>2] = $$080$lcssa;
   $36 = HEAP16[$3>>1]|0;
   $37 = $36&65535;
   $38 = (($37) + -1)|0;
   $39 = (((($21) + (($38*104)|0)|0)) + 4|0);
   HEAPF32[$39>>2] = 9.9999997781963083E+21;
   $40 = $36&65535;
   $41 = ($36<<16>>16)==(0);
   L25: do {
    if ($41) {
     $$lcssa100 = $40;
    } else {
     $$183121 = 0;
     L27: while(1) {
      $42 = (__cmsReadUInt32Number($1,$2)|0);
      $43 = ($42|0)==(0);
      if ($43) {
       break L23;
      }
      $44 = (__cmsReadUInt32Number($1,0)|0);
      $45 = ($44|0)==(0);
      if ($45) {
       break L23;
      }
      $46 = HEAP32[$2>>2]|0;
      $switch$split2D = ($46|0)<(1935764838);
      if ($switch$split2D) {
       switch ($46|0) {
       case 1885434470:  {
        break;
       }
       default: {
        label = 30;
        break L27;
       }
       }
       $47 = (__cmsReadUInt16Number($1,$4)|0);
       $48 = ($47|0)==(0);
       if ($48) {
        break;
       }
       $49 = (__cmsReadUInt16Number($1,0)|0);
       $50 = ($49|0)==(0);
       if ($50) {
        break;
       }
       $51 = HEAP16[$4>>1]|0;
       $52 = $51&65535;
       $53 = (($52) + 6)|0;
       $54 = (((($21) + (($$183121*104)|0)|0)) + 8|0);
       HEAP32[$54>>2] = $53;
       $55 = ($51&65535)>(2);
       if ($55) {
        break;
       } else {
        $$085118 = 0;
       }
       while(1) {
        $56 = (__cmsReadFloat32Number($1,$5)|0);
        $57 = ($56|0)==(0);
        if ($57) {
         label = 19;
         break L27;
        }
        $58 = ((((($21) + (($$183121*104)|0)|0)) + 16|0) + ($$085118<<3)|0);
        $59 = +HEAPF32[$5>>2];
        $60 = $59;
        HEAPF64[$58>>3] = $60;
        $61 = (($$085118) + 1)|0;
        $62 = HEAP16[$4>>1]|0;
        $63 = $62&65535;
        $64 = (15936 + ($63<<2)|0);
        $65 = HEAP32[$64>>2]|0;
        $66 = ($61>>>0)<($65>>>0);
        if ($66) {
         $$085118 = $61;
        } else {
         break;
        }
       }
      } else {
       switch ($46|0) {
       case 1935764838:  {
        break;
       }
       default: {
        label = 30;
        break L27;
       }
       }
       $67 = (__cmsReadUInt32Number($1,$4)|0);
       $68 = ($67|0)==(0);
       if ($68) {
        label = 28;
        break;
       }
       $69 = HEAP32[$4>>2]|0;
       $70 = (((($21) + (($$183121*104)|0)|0)) + 96|0);
       HEAP32[$70>>2] = $69;
       $71 = HEAP32[$19>>2]|0;
       $72 = (__cmsCalloc($71,$69,4)|0);
       $73 = (((($21) + (($$183121*104)|0)|0)) + 100|0);
       HEAP32[$73>>2] = $72;
       $74 = ($72|0)==(0|0);
       if ($74) {
        label = 28;
        break;
       }
       $75 = HEAP32[$4>>2]|0;
       $76 = ($75|0)==(0);
       if (!($76)) {
        $$186115 = 0;
        while(1) {
         $80 = HEAP32[$73>>2]|0;
         $81 = (($80) + ($$186115<<2)|0);
         $82 = (__cmsReadFloat32Number($1,$81)|0);
         $83 = ($82|0)==(0);
         $79 = (($$186115) + 1)|0;
         if ($83) {
          label = 28;
          break L27;
         }
         $77 = HEAP32[$4>>2]|0;
         $78 = ($79>>>0)<($77>>>0);
         if ($78) {
          $$186115 = $79;
         } else {
          break;
         }
        }
       }
      }
      $86 = (($$183121) + 1)|0;
      $87 = HEAP16[$3>>1]|0;
      $88 = $87&65535;
      $89 = ($86>>>0)<($88>>>0);
      if ($89) {
       $$183121 = $86;
      } else {
       $$lcssa100 = $88;
       break L25;
      }
     }
     if ((label|0) == 19) {
     }
     else if ((label|0) == 28) {
      break L23;
     }
     else if ((label|0) == 30) {
      $84 = HEAP32[$2>>2]|0;
      __cmsTagSignature2String($4,$84);
      $85 = HEAP32[$19>>2]|0;
      HEAP32[$vararg_buffer>>2] = $4;
      _cmsSignalError($85,8,28697,$vararg_buffer);
      break L23;
     }
     break L23;
    }
   } while(0);
   $90 = HEAP32[$19>>2]|0;
   $91 = (_cmsBuildSegmentedToneCurve($90,$$lcssa100,$21)|0);
   $92 = HEAP16[$3>>1]|0;
   $93 = ($92<<16>>16)==(0);
   if (!($93)) {
    $$284111 = 0;
    while(1) {
     $94 = (((($21) + (($$284111*104)|0)|0)) + 100|0);
     $95 = HEAP32[$94>>2]|0;
     $96 = ($95|0)==(0|0);
     if (!($96)) {
      $97 = HEAP32[$19>>2]|0;
      __cmsFree($97,$95);
     }
     $98 = (($$284111) + 1)|0;
     $99 = HEAP16[$3>>1]|0;
     $100 = $99&65535;
     $101 = ($98>>>0)<($100>>>0);
     if ($101) {
      $$284111 = $98;
     } else {
      break;
     }
    }
   }
   $102 = HEAP32[$19>>2]|0;
   __cmsFree($102,$21);
   $$081 = $91;
   STACKTOP = sp;return ($$081|0);
  }
 } while(0);
 if ($22) {
  $$081 = 0;
  STACKTOP = sp;return ($$081|0);
 }
 $103 = HEAP16[$3>>1]|0;
 $104 = ($103<<16>>16)==(0);
 if (!($104)) {
  $$3110 = 0;
  while(1) {
   $105 = (((($21) + (($$3110*104)|0)|0)) + 100|0);
   $106 = HEAP32[$105>>2]|0;
   $107 = ($106|0)==(0|0);
   if (!($107)) {
    $108 = HEAP32[$19>>2]|0;
    __cmsFree($108,$106);
   }
   $109 = (($$3110) + 1)|0;
   $110 = HEAP16[$3>>1]|0;
   $111 = $110&65535;
   $112 = ($109>>>0)<($111>>>0);
   if ($112) {
    $$3110 = $109;
   } else {
    break;
   }
  }
 }
 $113 = HEAP32[$19>>2]|0;
 __cmsFree($113,$21);
 $$081 = 0;
 STACKTOP = sp;return ($$081|0);
}
function _ReadMPEElem($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer = sp;
 $5 = sp + 8|0;
 $6 = sp + 4|0;
 $7 = sp + 12|0;
 $8 = ((($0)) + 20|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (__cmsContextGetClientChunk($9,11)|0);
 $11 = (__cmsReadUInt32Number($1,$5)|0);
 $12 = ($11|0)==(0);
 if ($12) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $13 = (__cmsReadUInt32Number($1,0)|0);
 $14 = ($13|0)==(0);
 if ($14) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = HEAP32[$5>>2]|0;
 $16 = HEAP32[$10>>2]|0;
 $17 = (_GetHandler($15,$16,15776)|0);
 $18 = ($17|0)==(0|0);
 if ($18) {
  $19 = HEAP32[$5>>2]|0;
  __cmsTagSignature2String($7,$19);
  $20 = HEAP32[$8>>2]|0;
  HEAP32[$vararg_buffer>>2] = $7;
  _cmsSignalError($20,8,28736,$vararg_buffer);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $21 = ((($17)) + 4|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)==(0|0);
 if (!($23)) {
  $24 = (FUNCTION_TABLE_iiiii[$22 & 255]($0,$1,$6,$4)|0);
  $25 = (_cmsPipelineInsertStage($2,1,$24)|0);
  $26 = ($25|0)==(0);
  if ($26) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _WriteCountAndSting($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (_cmsMLUgetASCII($2,28780,$3,0,0)|0);
 $5 = ((($0)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (__cmsMalloc($6,$4)|0);
 $8 = (__cmsWriteUInt32Number($1,$4)|0);
 $9 = ($8|0)==(0);
 if ($9) {
  $$0 = 0;
  return ($$0|0);
 }
 $10 = (_cmsMLUgetASCII($2,28780,$3,$7,$4)|0);
 $11 = ($10|0)==(0);
 if ($11) {
  $$0 = 0;
  return ($$0|0);
 }
 $12 = ((($1)) + 288|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (FUNCTION_TABLE_iiii[$13 & 63]($1,$4,$7)|0);
 $15 = ($14|0)==(0);
 if ($15) {
  $$0 = 0;
  return ($$0|0);
 }
 $16 = HEAP32[$5>>2]|0;
 __cmsFree($16,$7);
 $$0 = 1;
 return ($$0|0);
}
function _ReadCountAndSting($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$neg18 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $5 = sp;
 $6 = HEAP32[$3>>2]|0;
 $7 = ($6>>>0)<(4);
 do {
  if ($7) {
   $$0 = 0;
  } else {
   $8 = (__cmsReadUInt32Number($1,$5)|0);
   $9 = ($8|0)==(0);
   if ($9) {
    $$0 = 0;
   } else {
    $10 = HEAP32[$5>>2]|0;
    $11 = ($10>>>0)>(4294967291);
    if ($11) {
     $$0 = 0;
    } else {
     $12 = HEAP32[$3>>2]|0;
     $13 = (($10) + 4)|0;
     $14 = ($12>>>0)<($13>>>0);
     if ($14) {
      $$0 = 0;
     } else {
      $15 = ((($0)) + 20|0);
      $16 = HEAP32[$15>>2]|0;
      $17 = (($10) + 1)|0;
      $18 = (__cmsMalloc($16,$17)|0);
      $19 = ($18|0)==(0|0);
      if ($19) {
       $$0 = 0;
      } else {
       $20 = ((($1)) + 272|0);
       $21 = HEAP32[$20>>2]|0;
       $22 = HEAP32[$5>>2]|0;
       $23 = (FUNCTION_TABLE_iiiii[$21 & 255]($1,$18,1,$22)|0);
       $24 = HEAP32[$5>>2]|0;
       $25 = ($23|0)==($24|0);
       if ($25) {
        $27 = (($18) + ($24)|0);
        HEAP8[$27>>0] = 0;
        (_cmsMLUsetASCII($2,28780,$4,$18)|0);
        $28 = HEAP32[$15>>2]|0;
        __cmsFree($28,$18);
        $29 = HEAP32[$5>>2]|0;
        $30 = HEAP32[$3>>2]|0;
        $$neg18 = (-4 - ($29))|0;
        $31 = (($$neg18) + ($30))|0;
        HEAP32[$3>>2] = $31;
        $$0 = 1;
        break;
       } else {
        $26 = HEAP32[$15>>2]|0;
        __cmsFree($26,$18);
        $$0 = 0;
        break;
       }
      }
     }
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _WriteSetOfCurves($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0362 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $switch$split2D = 0, $trunc1 = 0, $trunc1$clear = 0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $3 = sp + 4|0;
 $4 = (_cmsStageOutputChannels($2)|0);
 $5 = (__cmsStageGetPtrToCurveSet($2)|0);
 $6 = ($4|0)==(0);
 if ($6) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 } else {
  $$0362 = 0;
 }
 L3: while(1) {
  $9 = (($5) + ($$0362<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($10)) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  switch ($12|0) {
  case 0:  {
   $trunc1 = 1668641398;
   break;
  }
  case 2:  {
   $13 = ((($10)) + 8|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ((($14)) + 112|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ($16|0)==(0);
   if ($17) {
    $trunc1 = 1668641398;
   } else {
    label = 5;
   }
   break;
  }
  default: {
   label = 5;
  }
  }
  if ((label|0) == 5) {
   label = 0;
   $18 = HEAP32[$9>>2]|0;
   $19 = ((($18)) + 8|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ((($20)) + 8|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = $22 >> 31;
   $24 = $23 & -216793067;
   $25 = (($24) + 1885434465)|0;
   $trunc1 = $25;
  }
  $26 = (__cmsWriteTypeBase($1,$trunc1)|0);
  $27 = ($26|0)==(0);
  if ($27) {
   $$0 = 0;
   label = 12;
   break;
  }
  $trunc1$clear = $trunc1 & 536870911;
  $switch$split2D = ($trunc1$clear|0)<(274821729);
  if ($switch$split2D) {
   switch ($trunc1$clear|0) {
   case 58028662:  {
    break;
   }
   default: {
    label = 10;
    break L3;
   }
   }
   $28 = HEAP32[$9>>2]|0;
   $29 = (_Type_Curve_Write($0,$1,$28,1)|0);
   $30 = ($29|0)==(0);
   if ($30) {
    $$0 = 0;
    label = 12;
    break;
   }
  } else {
   switch ($trunc1$clear|0) {
   case 274821729:  {
    break;
   }
   default: {
    label = 10;
    break L3;
   }
   }
   $31 = HEAP32[$9>>2]|0;
   $32 = (_Type_ParametricCurve_Write($0,$1,$31,1)|0);
   $33 = ($32|0)==(0);
   if ($33) {
    $$0 = 0;
    label = 12;
    break;
   }
  }
  $36 = (__cmsWriteAlignment($1)|0);
  $37 = ($36|0)==(0);
  $8 = (($$0362) + 1)|0;
  if ($37) {
   $$0 = 0;
   label = 12;
   break;
  }
  $7 = ($8>>>0)<($4>>>0);
  if ($7) {
   $$0362 = $8;
  } else {
   $$0 = 1;
   label = 12;
   break;
  }
 }
 if ((label|0) == 10) {
  __cmsTagSignature2String($3,1885434465);
  $34 = ((($0)) + 20|0);
  $35 = HEAP32[$34>>2]|0;
  HEAP32[$vararg_buffer>>2] = $3;
  _cmsSignalError($35,8,28911,$vararg_buffer);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 12) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _WriteCLUT_639($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$0 = 0, $$03336 = 0, $$135 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $4 = sp + 16|0;
 $5 = ((($3)) + 32|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0);
 if (!($9)) {
  $10 = ((($0)) + 20|0);
  $11 = HEAP32[$10>>2]|0;
  _cmsSignalError($11,13,28826,$vararg_buffer);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 dest=$4; stop=dest+16|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $12 = ((($6)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($13)) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0);
 if (!($16)) {
  $$03336 = 0;$18 = $13;
  while(1) {
   $17 = (((($18)) + 16|0) + ($$03336<<2)|0);
   $19 = HEAP32[$17>>2]|0;
   $20 = $19&255;
   $21 = (($4) + ($$03336)|0);
   HEAP8[$21>>0] = $20;
   $22 = (($$03336) + 1)|0;
   $23 = HEAP32[$12>>2]|0;
   $24 = ((($23)) + 8|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($22>>>0)<($25>>>0);
   if ($26) {
    $$03336 = $22;$18 = $23;
   } else {
    break;
   }
  }
 }
 $27 = ((($1)) + 288|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (FUNCTION_TABLE_iiii[$28 & 63]($1,16,$4)|0);
 $30 = ($29|0)==(0);
 if ($30) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $31 = (__cmsWriteUInt8Number($1,$2)|0);
 $32 = ($31|0)==(0);
 if ($32) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $33 = (__cmsWriteUInt8Number($1,0)|0);
 $34 = ($33|0)==(0);
 if ($34) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $35 = (__cmsWriteUInt8Number($1,0)|0);
 $36 = ($35|0)==(0);
 if ($36) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $37 = (__cmsWriteUInt8Number($1,0)|0);
 $38 = ($37|0)==(0);
 if ($38) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 L24: do {
  switch ($2<<24>>24) {
  case 1:  {
   $39 = ((($6)) + 8|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = ($40|0)==(0);
   if (!($41)) {
    $$135 = 0;
    while(1) {
     $45 = HEAP32[$6>>2]|0;
     $46 = (($45) + ($$135<<1)|0);
     $47 = HEAP16[$46>>1]|0;
     $48 = $47&65535;
     $49 = ($48*65281)|0;
     $50 = (($49) + 8388608)|0;
     $51 = $50 >>> 24;
     $52 = $51&255;
     $53 = (__cmsWriteUInt8Number($1,$52)|0);
     $54 = ($53|0)==(0);
     $44 = (($$135) + 1)|0;
     if ($54) {
      $$0 = 0;
      break;
     }
     $42 = HEAP32[$39>>2]|0;
     $43 = ($44>>>0)<($42>>>0);
     if ($43) {
      $$135 = $44;
     } else {
      break L24;
     }
    }
    STACKTOP = sp;return ($$0|0);
   }
   break;
  }
  case 2:  {
   $55 = ((($6)) + 8|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = HEAP32[$6>>2]|0;
   $58 = (__cmsWriteUInt16Array($1,$56,$57)|0);
   $59 = ($58|0)==(0);
   if ($59) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   break;
  }
  default: {
   $60 = $2&255;
   $61 = ((($0)) + 20|0);
   $62 = HEAP32[$61>>2]|0;
   HEAP32[$vararg_buffer1>>2] = $60;
   _cmsSignalError($62,8,28885,$vararg_buffer1);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  }
 } while(0);
 $63 = (__cmsWriteAlignment($1)|0);
 $not$ = ($63|0)!=(0);
 $$ = $not$&1;
 $$0 = $$;
 STACKTOP = sp;return ($$0|0);
}
function _WriteMatrix($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0.0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 32|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = +HEAPF64[$4>>3];
 $6 = (__cmsWrite15Fixed16Number($0,$5)|0);
 $7 = ($6|0)==(0);
 if ($7) {
  $$0 = 0;
  return ($$0|0);
 }
 $8 = HEAP32[$3>>2]|0;
 $9 = ((($8)) + 8|0);
 $10 = +HEAPF64[$9>>3];
 $11 = (__cmsWrite15Fixed16Number($0,$10)|0);
 $12 = ($11|0)==(0);
 if ($12) {
  $$0 = 0;
  return ($$0|0);
 }
 $13 = HEAP32[$3>>2]|0;
 $14 = ((($13)) + 16|0);
 $15 = +HEAPF64[$14>>3];
 $16 = (__cmsWrite15Fixed16Number($0,$15)|0);
 $17 = ($16|0)==(0);
 if ($17) {
  $$0 = 0;
  return ($$0|0);
 }
 $18 = HEAP32[$3>>2]|0;
 $19 = ((($18)) + 24|0);
 $20 = +HEAPF64[$19>>3];
 $21 = (__cmsWrite15Fixed16Number($0,$20)|0);
 $22 = ($21|0)==(0);
 if ($22) {
  $$0 = 0;
  return ($$0|0);
 }
 $23 = HEAP32[$3>>2]|0;
 $24 = ((($23)) + 32|0);
 $25 = +HEAPF64[$24>>3];
 $26 = (__cmsWrite15Fixed16Number($0,$25)|0);
 $27 = ($26|0)==(0);
 if ($27) {
  $$0 = 0;
  return ($$0|0);
 }
 $28 = HEAP32[$3>>2]|0;
 $29 = ((($28)) + 40|0);
 $30 = +HEAPF64[$29>>3];
 $31 = (__cmsWrite15Fixed16Number($0,$30)|0);
 $32 = ($31|0)==(0);
 if ($32) {
  $$0 = 0;
  return ($$0|0);
 }
 $33 = HEAP32[$3>>2]|0;
 $34 = ((($33)) + 48|0);
 $35 = +HEAPF64[$34>>3];
 $36 = (__cmsWrite15Fixed16Number($0,$35)|0);
 $37 = ($36|0)==(0);
 if ($37) {
  $$0 = 0;
  return ($$0|0);
 }
 $38 = HEAP32[$3>>2]|0;
 $39 = ((($38)) + 56|0);
 $40 = +HEAPF64[$39>>3];
 $41 = (__cmsWrite15Fixed16Number($0,$40)|0);
 $42 = ($41|0)==(0);
 if ($42) {
  $$0 = 0;
  return ($$0|0);
 }
 $43 = HEAP32[$3>>2]|0;
 $44 = ((($43)) + 64|0);
 $45 = +HEAPF64[$44>>3];
 $46 = (__cmsWrite15Fixed16Number($0,$45)|0);
 $47 = ($46|0)==(0);
 if ($47) {
  $$0 = 0;
  return ($$0|0);
 }
 $48 = ((($3)) + 4|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = ($49|0)==(0|0);
 if ($50) {
  $64 = (__cmsWrite15Fixed16Number($0,0.0)|0);
  $65 = ($64|0)==(0);
  if ($65) {
   $$0 = 0;
   return ($$0|0);
  }
  $66 = (__cmsWrite15Fixed16Number($0,0.0)|0);
  $67 = ($66|0)==(0);
  if ($67) {
   $$0 = 0;
   return ($$0|0);
  }
  $68 = (__cmsWrite15Fixed16Number($0,0.0)|0);
  $69 = ($68|0)==(0);
  if ($69) {
   $$0 = 0;
   return ($$0|0);
  }
 } else {
  $51 = +HEAPF64[$49>>3];
  $52 = (__cmsWrite15Fixed16Number($0,$51)|0);
  $53 = ($52|0)==(0);
  if ($53) {
   $$0 = 0;
   return ($$0|0);
  }
  $54 = HEAP32[$48>>2]|0;
  $55 = ((($54)) + 8|0);
  $56 = +HEAPF64[$55>>3];
  $57 = (__cmsWrite15Fixed16Number($0,$56)|0);
  $58 = ($57|0)==(0);
  if ($58) {
   $$0 = 0;
   return ($$0|0);
  }
  $59 = HEAP32[$48>>2]|0;
  $60 = ((($59)) + 16|0);
  $61 = +HEAPF64[$60>>3];
  $62 = (__cmsWrite15Fixed16Number($0,$61)|0);
  $63 = ($62|0)==(0);
  if ($63) {
   $$0 = 0;
   return ($$0|0);
  }
 }
 $$0 = 1;
 return ($$0|0);
}
function _ReadSetOfCurves($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$026 = 0, $$035 = 0, $$130 = 0, $$229 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $4 = sp;
 $5 = ($3>>>0)>(16);
 if ($5) {
  $$026 = 0;
  STACKTOP = sp;return ($$026|0);
 }
 $6 = ((($1)) + 276|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_iii[$7 & 15]($1,$2)|0);
 $9 = ($8|0)==(0);
 if ($9) {
  $$026 = 0;
  STACKTOP = sp;return ($$026|0);
 }
 $10 = ($3|0)==(0);
 L7: do {
  if ($10) {
   label = 8;
  } else {
   $11 = $3 << 2;
   _memset(($4|0),0,($11|0))|0;
   $$130 = 0;
   while(1) {
    $14 = (_ReadEmbeddedCurve($0,$1)|0);
    $15 = (($4) + ($$130<<2)|0);
    HEAP32[$15>>2] = $14;
    $16 = ($14|0)==(0|0);
    if ($16) {
     $$035 = 0;
     break L7;
    }
    $17 = (__cmsReadAlignment($1)|0);
    $18 = ($17|0)==(0);
    $13 = (($$130) + 1)|0;
    if ($18) {
     $$035 = 0;
     break L7;
    }
    $12 = ($13>>>0)<($3>>>0);
    if ($12) {
     $$130 = $13;
    } else {
     label = 8;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 8) {
  $19 = ((($0)) + 20|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (_cmsStageAllocToneCurves($20,$3,$4)|0);
  $22 = ($3|0)==(0);
  if ($22) {
   $$026 = $21;
   STACKTOP = sp;return ($$026|0);
  } else {
   $$035 = $21;
  }
 }
 $$229 = 0;
 while(1) {
  $23 = (($4) + ($$229<<2)|0);
  $24 = HEAP32[$23>>2]|0;
  _cmsFreeToneCurve($24);
  $25 = (($$229) + 1)|0;
  $exitcond = ($25|0)==($3|0);
  if ($exitcond) {
   $$026 = $$035;
   break;
  } else {
   $$229 = $25;
  }
 }
 STACKTOP = sp;return ($$026|0);
}
function _ReadMatrix($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $3 = sp + 24|0;
 $4 = sp;
 $5 = ((($1)) + 276|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (FUNCTION_TABLE_iii[$6 & 15]($1,$2)|0);
 $8 = ($7|0)==(0);
 if ($8) {
  $$0 = 0;
 } else {
  $9 = (__cmsRead15Fixed16Number($1,$3)|0);
  $10 = ($9|0)==(0);
  if ($10) {
   $$0 = 0;
  } else {
   $11 = ((($3)) + 8|0);
   $12 = (__cmsRead15Fixed16Number($1,$11)|0);
   $13 = ($12|0)==(0);
   if ($13) {
    $$0 = 0;
   } else {
    $14 = ((($3)) + 16|0);
    $15 = (__cmsRead15Fixed16Number($1,$14)|0);
    $16 = ($15|0)==(0);
    if ($16) {
     $$0 = 0;
    } else {
     $17 = ((($3)) + 24|0);
     $18 = (__cmsRead15Fixed16Number($1,$17)|0);
     $19 = ($18|0)==(0);
     if ($19) {
      $$0 = 0;
     } else {
      $20 = ((($3)) + 32|0);
      $21 = (__cmsRead15Fixed16Number($1,$20)|0);
      $22 = ($21|0)==(0);
      if ($22) {
       $$0 = 0;
      } else {
       $23 = ((($3)) + 40|0);
       $24 = (__cmsRead15Fixed16Number($1,$23)|0);
       $25 = ($24|0)==(0);
       if ($25) {
        $$0 = 0;
       } else {
        $26 = ((($3)) + 48|0);
        $27 = (__cmsRead15Fixed16Number($1,$26)|0);
        $28 = ($27|0)==(0);
        if ($28) {
         $$0 = 0;
        } else {
         $29 = ((($3)) + 56|0);
         $30 = (__cmsRead15Fixed16Number($1,$29)|0);
         $31 = ($30|0)==(0);
         if ($31) {
          $$0 = 0;
         } else {
          $32 = ((($3)) + 64|0);
          $33 = (__cmsRead15Fixed16Number($1,$32)|0);
          $34 = ($33|0)==(0);
          if ($34) {
           $$0 = 0;
          } else {
           $35 = (__cmsRead15Fixed16Number($1,$4)|0);
           $36 = ($35|0)==(0);
           if ($36) {
            $$0 = 0;
           } else {
            $37 = ((($4)) + 8|0);
            $38 = (__cmsRead15Fixed16Number($1,$37)|0);
            $39 = ($38|0)==(0);
            if ($39) {
             $$0 = 0;
            } else {
             $40 = ((($4)) + 16|0);
             $41 = (__cmsRead15Fixed16Number($1,$40)|0);
             $42 = ($41|0)==(0);
             if ($42) {
              $$0 = 0;
             } else {
              $43 = ((($0)) + 20|0);
              $44 = HEAP32[$43>>2]|0;
              $45 = (_cmsStageAllocMatrix($44,3,3,$3,$4)|0);
              $$0 = $45;
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _ReadCLUT($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$1 = 0, $$14243 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $vararg_buffer = sp;
 $5 = sp + 80|0;
 $6 = sp + 8|0;
 $7 = sp + 73|0;
 $8 = sp + 72|0;
 $9 = ((($1)) + 276|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (FUNCTION_TABLE_iii[$10 & 15]($1,$2)|0);
 $12 = ($11|0)==(0);
 L1: do {
  if ($12) {
   $$1 = 0;
  } else {
   $13 = ((($1)) + 272|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (FUNCTION_TABLE_iiiii[$14 & 255]($1,$5,16,1)|0);
   $16 = ($15|0)==(1);
   if ($16) {
    $17 = HEAP8[$5>>0]|0;
    $18 = ($17<<24>>24)==(1);
    if ($18) {
     $$1 = 0;
    } else {
     $19 = $17&255;
     HEAP32[$6>>2] = $19;
     $20 = ((($5)) + 1|0);
     $21 = HEAP8[$20>>0]|0;
     $22 = ($21<<24>>24)==(1);
     if ($22) {
      $$1 = 0;
     } else {
      $60 = $21&255;
      $61 = ((($6)) + 4|0);
      HEAP32[$61>>2] = $60;
      $62 = ((($5)) + 2|0);
      $63 = HEAP8[$62>>0]|0;
      $64 = ($63<<24>>24)==(1);
      if ($64) {
       $$1 = 0;
      } else {
       $65 = $63&255;
       $66 = ((($6)) + 8|0);
       HEAP32[$66>>2] = $65;
       $67 = ((($5)) + 3|0);
       $68 = HEAP8[$67>>0]|0;
       $69 = ($68<<24>>24)==(1);
       if ($69) {
        $$1 = 0;
       } else {
        $70 = $68&255;
        $71 = ((($6)) + 12|0);
        HEAP32[$71>>2] = $70;
        $72 = ((($5)) + 4|0);
        $73 = HEAP8[$72>>0]|0;
        $74 = ($73<<24>>24)==(1);
        if ($74) {
         $$1 = 0;
        } else {
         $75 = $73&255;
         $76 = ((($6)) + 16|0);
         HEAP32[$76>>2] = $75;
         $77 = ((($5)) + 5|0);
         $78 = HEAP8[$77>>0]|0;
         $79 = ($78<<24>>24)==(1);
         if ($79) {
          $$1 = 0;
         } else {
          $80 = $78&255;
          $81 = ((($6)) + 20|0);
          HEAP32[$81>>2] = $80;
          $82 = ((($5)) + 6|0);
          $83 = HEAP8[$82>>0]|0;
          $84 = ($83<<24>>24)==(1);
          if ($84) {
           $$1 = 0;
          } else {
           $85 = $83&255;
           $86 = ((($6)) + 24|0);
           HEAP32[$86>>2] = $85;
           $87 = ((($5)) + 7|0);
           $88 = HEAP8[$87>>0]|0;
           $89 = ($88<<24>>24)==(1);
           if ($89) {
            $$1 = 0;
           } else {
            $90 = $88&255;
            $91 = ((($6)) + 28|0);
            HEAP32[$91>>2] = $90;
            $92 = ((($5)) + 8|0);
            $93 = HEAP8[$92>>0]|0;
            $94 = ($93<<24>>24)==(1);
            if ($94) {
             $$1 = 0;
            } else {
             $95 = $93&255;
             $96 = ((($6)) + 32|0);
             HEAP32[$96>>2] = $95;
             $97 = ((($5)) + 9|0);
             $98 = HEAP8[$97>>0]|0;
             $99 = ($98<<24>>24)==(1);
             if ($99) {
              $$1 = 0;
             } else {
              $100 = $98&255;
              $101 = ((($6)) + 36|0);
              HEAP32[$101>>2] = $100;
              $102 = ((($5)) + 10|0);
              $103 = HEAP8[$102>>0]|0;
              $104 = ($103<<24>>24)==(1);
              if ($104) {
               $$1 = 0;
              } else {
               $105 = $103&255;
               $106 = ((($6)) + 40|0);
               HEAP32[$106>>2] = $105;
               $107 = ((($5)) + 11|0);
               $108 = HEAP8[$107>>0]|0;
               $109 = ($108<<24>>24)==(1);
               if ($109) {
                $$1 = 0;
               } else {
                $110 = $108&255;
                $111 = ((($6)) + 44|0);
                HEAP32[$111>>2] = $110;
                $112 = ((($5)) + 12|0);
                $113 = HEAP8[$112>>0]|0;
                $114 = ($113<<24>>24)==(1);
                if ($114) {
                 $$1 = 0;
                } else {
                 $115 = $113&255;
                 $116 = ((($6)) + 48|0);
                 HEAP32[$116>>2] = $115;
                 $117 = ((($5)) + 13|0);
                 $118 = HEAP8[$117>>0]|0;
                 $119 = ($118<<24>>24)==(1);
                 if ($119) {
                  $$1 = 0;
                 } else {
                  $120 = $118&255;
                  $121 = ((($6)) + 52|0);
                  HEAP32[$121>>2] = $120;
                  $122 = ((($5)) + 14|0);
                  $123 = HEAP8[$122>>0]|0;
                  $124 = ($123<<24>>24)==(1);
                  if ($124) {
                   $$1 = 0;
                  } else {
                   $125 = $123&255;
                   $126 = ((($6)) + 56|0);
                   HEAP32[$126>>2] = $125;
                   $127 = ((($5)) + 15|0);
                   $128 = HEAP8[$127>>0]|0;
                   $129 = ($128<<24>>24)==(1);
                   if ($129) {
                    $$1 = 0;
                   } else {
                    $130 = $128&255;
                    $131 = ((($6)) + 60|0);
                    HEAP32[$131>>2] = $130;
                    $132 = (__cmsReadUInt8Number($1,$7)|0);
                    $133 = ($132|0)==(0);
                    if ($133) {
                     $$1 = 0;
                    } else {
                     $23 = (__cmsReadUInt8Number($1,0)|0);
                     $24 = ($23|0)==(0);
                     if ($24) {
                      $$1 = 0;
                      break;
                     }
                     $25 = (__cmsReadUInt8Number($1,0)|0);
                     $26 = ($25|0)==(0);
                     if ($26) {
                      $$1 = 0;
                      break;
                     }
                     $27 = (__cmsReadUInt8Number($1,0)|0);
                     $28 = ($27|0)==(0);
                     if ($28) {
                      $$1 = 0;
                      break;
                     }
                     $29 = ((($0)) + 20|0);
                     $30 = HEAP32[$29>>2]|0;
                     $31 = (_cmsStageAllocCLut16bitGranular($30,$6,$3,$4,0)|0);
                     $32 = ($31|0)==(0|0);
                     if ($32) {
                      $$1 = 0;
                      break;
                     }
                     $33 = ((($31)) + 32|0);
                     $34 = HEAP32[$33>>2]|0;
                     $35 = HEAP8[$7>>0]|0;
                     switch ($35<<24>>24) {
                     case 1:  {
                      $36 = ((($34)) + 8|0);
                      $37 = HEAP32[$36>>2]|0;
                      $38 = ($37|0)==(0);
                      L28: do {
                       if (!($38)) {
                        $$14243 = 0;
                        while(1) {
                         $39 = HEAP32[$13>>2]|0;
                         $40 = (FUNCTION_TABLE_iiiii[$39 & 255]($1,$8,1,1)|0);
                         $41 = ($40|0)==(1);
                         if (!($41)) {
                          break;
                         }
                         $42 = HEAP8[$8>>0]|0;
                         $43 = $42&255;
                         $44 = $43 << 8;
                         $45 = $44 | $43;
                         $46 = $45&65535;
                         $47 = HEAP32[$34>>2]|0;
                         $48 = (($47) + ($$14243<<1)|0);
                         HEAP16[$48>>1] = $46;
                         $49 = (($$14243) + 1)|0;
                         $50 = HEAP32[$36>>2]|0;
                         $51 = ($49>>>0)<($50>>>0);
                         if ($51) {
                          $$14243 = $49;
                         } else {
                          break L28;
                         }
                        }
                        _cmsStageFree($31);
                        $$1 = 0;
                        break L1;
                       }
                      } while(0);
                      $$1 = $31;
                      break L1;
                      break;
                     }
                     case 2:  {
                      $52 = ((($34)) + 8|0);
                      $53 = HEAP32[$52>>2]|0;
                      $54 = HEAP32[$34>>2]|0;
                      $55 = (__cmsReadUInt16Array($1,$53,$54)|0);
                      $56 = ($55|0)==(0);
                      if (!($56)) {
                       $$1 = $31;
                       break L1;
                      }
                      _cmsStageFree($31);
                      $$1 = 0;
                      break L1;
                      break;
                     }
                     default: {
                      _cmsStageFree($31);
                      $57 = HEAP32[$29>>2]|0;
                      $58 = HEAP8[$7>>0]|0;
                      $59 = $58&255;
                      HEAP32[$vararg_buffer>>2] = $59;
                      _cmsSignalError($57,8,28885,$vararg_buffer);
                      $$1 = 0;
                      break L1;
                     }
                     }
                    }
                   }
                  }
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   } else {
    $$1 = 0;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$1|0);
}
function _ReadEmbeddedCurve($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $switch$split2D = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = sp + 4|0;
 $3 = sp + 8|0;
 $4 = (__cmsReadTypeBase($1)|0);
 $switch$split2D = ($4|0)<(1885434465);
 L1: do {
  if ($switch$split2D) {
   switch ($4|0) {
   case 1668641398:  {
    break;
   }
   default: {
    break L1;
   }
   }
   $5 = (_Type_Curve_Read($0,$1,$2,0)|0);
   $$0 = $5;
   STACKTOP = sp;return ($$0|0);
  } else {
   switch ($4|0) {
   case 1885434465:  {
    break;
   }
   default: {
    break L1;
   }
   }
   $6 = (_Type_ParametricCurve_Read($0,$1,$2,0)|0);
   $$0 = $6;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 __cmsTagSignature2String($3,$4);
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$vararg_buffer>>2] = $3;
 _cmsSignalError($8,8,28911,$vararg_buffer);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _Write16bitTables($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$0202 = 0, $$0213 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0|0);
 if ($2) {
  ___assert_fail((29160|0),(28499|0),2033,(29183|0));
  // unreachable;
 }
 $3 = ((($1)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$1>>2]|0;
 $9 = ($8|0)==(0);
 if ($9) {
  $$0 = 1;
  return ($$0|0);
 }
 $10 = ($7|0)==(0);
 $$0213 = 0;
 L7: while(1) {
  if (!($10)) {
   $$0202 = 0;
   while(1) {
    $13 = HEAP32[$3>>2]|0;
    $14 = (($13) + ($$0213<<2)|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ((($15)) + 24|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = (($17) + ($$0202<<1)|0);
    $19 = HEAP16[$18>>1]|0;
    $20 = (__cmsWriteUInt16Number($0,$19)|0);
    $21 = ($20|0)==(0);
    $12 = (($$0202) + 1)|0;
    if ($21) {
     $$0 = 0;
     label = 9;
     break L7;
    }
    $11 = ($12>>>0)<($7>>>0);
    if ($11) {
     $$0202 = $12;
    } else {
     break;
    }
   }
  }
  $22 = (($$0213) + 1)|0;
  $23 = HEAP32[$1>>2]|0;
  $24 = ($22>>>0)<($23>>>0);
  if ($24) {
   $$0213 = $22;
  } else {
   $$0 = 1;
   label = 9;
   break;
  }
 }
 if ((label|0) == 9) {
  return ($$0|0);
 }
 return (0)|0;
}
function _uipow($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0 = 0, $$018$lcssa = 0, $$01822 = 0, $$01921 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1|0)==(0);
 $4 = ($0|0)==(0);
 $or$cond = $4 | $3;
 if ($or$cond) {
  $$0 = 0;
  return ($$0|0);
 }
 $5 = ($2|0)==(0);
 L4: do {
  if ($5) {
   $$018$lcssa = 1;
  } else {
   $6 = (4294967295 / ($1>>>0))&-1;
   $$01822 = 1;$$01921 = $2;
   while(1) {
    $9 = Math_imul($$01822, $1)|0;
    $10 = ($9>>>0)>($6>>>0);
    $8 = (($$01921) + -1)|0;
    if ($10) {
     $$0 = -1;
     break;
    }
    $7 = ($8|0)==(0);
    if ($7) {
     $$018$lcssa = $9;
     break L4;
    } else {
     $$01822 = $9;$$01921 = $8;
    }
   }
   return ($$0|0);
  }
 } while(0);
 $11 = Math_imul($$018$lcssa, $0)|0;
 $12 = (($11>>>0) / ($0>>>0))&-1;
 $13 = ($$018$lcssa|0)==($12|0);
 $$ = $13 ? $11 : -1;
 $$0 = $$;
 return ($$0|0);
}
function _Read16bitTables($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$026 = 0, $$032 = 0, $$130 = 0, $$229 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond35 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $5 = sp;
 L1: do {
  switch ($4|0) {
  case 0:  {
   $$026 = 1;
   break;
  }
  case 1:  {
   $$026 = 0;
   break;
  }
  default: {
   $6 = ($3>>>0)>(16);
   if ($6) {
    $$026 = 0;
   } else {
    dest=$5; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
    $7 = ($3|0)==(0);
    L4: do {
     if ($7) {
      label = 9;
     } else {
      $$032 = 0;
      while(1) {
       $10 = (_cmsBuildTabulatedToneCurve16($0,$4,0)|0);
       $11 = (($5) + ($$032<<2)|0);
       HEAP32[$11>>2] = $10;
       $12 = ($10|0)==(0|0);
       if ($12) {
        $$229 = 0;
        break L4;
       }
       $13 = ((($10)) + 24|0);
       $14 = HEAP32[$13>>2]|0;
       $15 = (__cmsReadUInt16Array($1,$4,$14)|0);
       $16 = ($15|0)==(0);
       $9 = (($$032) + 1)|0;
       if ($16) {
        $$229 = 0;
        break L4;
       }
       $8 = ($9>>>0)<($3>>>0);
       if ($8) {
        $$032 = $9;
       } else {
        label = 9;
        break;
       }
      }
     }
    } while(0);
    do {
     if ((label|0) == 9) {
      $17 = (_cmsStageAllocToneCurves($0,$3,$5)|0);
      $18 = (_cmsPipelineInsertStage($2,1,$17)|0);
      $19 = ($18|0)==(0);
      $20 = ($3|0)==(0);
      if ($19) {
       if ($20) {
        $$026 = 0;
        break L1;
       } else {
        $$229 = 0;
        break;
       }
      }
      if ($20) {
       $$026 = 1;
       break L1;
      } else {
       $$130 = 0;
      }
      while(1) {
       $21 = (($5) + ($$130<<2)|0);
       $22 = HEAP32[$21>>2]|0;
       _cmsFreeToneCurve($22);
       $23 = (($$130) + 1)|0;
       $exitcond35 = ($23|0)==($3|0);
       if ($exitcond35) {
        $$026 = 1;
        break L1;
       } else {
        $$130 = $23;
       }
      }
     }
    } while(0);
    while(1) {
     $24 = (($5) + ($$229<<2)|0);
     $25 = HEAP32[$24>>2]|0;
     $26 = ($25|0)==(0|0);
     if (!($26)) {
      _cmsFreeToneCurve($25);
     }
     $27 = (($$229) + 1)|0;
     $exitcond = ($27|0)==($3|0);
     if ($exitcond) {
      $$026 = 0;
      break;
     } else {
      $$229 = $27;
     }
    }
   }
  }
  }
 } while(0);
 STACKTOP = sp;return ($$026|0);
}
function _Write8bitTables($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$02736 = 0, $$02835 = 0, $$134 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $4 = ($2|0)==(0);
 if ($4) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = ($3|0)==(0|0);
 $6 = ((($3)) + 4|0);
 $$02736 = 0;
 L4: while(1) {
  L6: do {
   if (!($5)) {
    $7 = HEAP32[$6>>2]|0;
    $8 = (($7) + ($$02736<<2)|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = ((($9)) + 20|0);
    $11 = HEAP32[$10>>2]|0;
    switch ($11|0) {
    case 2:  {
     break;
    }
    case 256:  {
     $$134 = 0;
     while(1) {
      $26 = HEAP32[$6>>2]|0;
      $27 = (($26) + ($$02736<<2)|0);
      $28 = HEAP32[$27>>2]|0;
      $29 = ((($28)) + 24|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (($30) + ($$134<<1)|0);
      $32 = HEAP16[$31>>1]|0;
      $33 = $32&65535;
      $34 = ($33*65281)|0;
      $35 = (($34) + 8388608)|0;
      $36 = $35 >>> 24;
      $37 = $36&255;
      $38 = (__cmsWriteUInt8Number($1,$37)|0);
      $39 = ($38|0)==(0);
      $25 = (($$134) + 1)|0;
      if ($39) {
       $$0 = 0;
       label = 13;
       break L4;
      }
      $24 = ($25|0)<(256);
      if ($24) {
       $$134 = $25;
      } else {
       break L6;
      }
     }
     break;
    }
    default: {
     label = 9;
     break L4;
    }
    }
    $12 = ((($9)) + 24|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = HEAP16[$13>>1]|0;
    $15 = ($14<<16>>16)==(0);
    if (!($15)) {
     label = 9;
     break L4;
    }
    $16 = ((($13)) + 2|0);
    $17 = HEAP16[$16>>1]|0;
    $18 = ($17<<16>>16)==(-1);
    if ($18) {
     $$02835 = 0;
    } else {
     label = 9;
     break L4;
    }
    while(1) {
     $21 = $$02835&255;
     $22 = (__cmsWriteUInt8Number($1,$21)|0);
     $23 = ($22|0)==(0);
     $20 = (($$02835) + 1)|0;
     if ($23) {
      $$0 = 0;
      label = 13;
      break L4;
     }
     $19 = ($20|0)<(256);
     if ($19) {
      $$02835 = $20;
     } else {
      break;
     }
    }
   }
  } while(0);
  $40 = (($$02736) + 1)|0;
  $41 = ($40>>>0)<($2>>>0);
  if ($41) {
   $$02736 = $40;
  } else {
   $$0 = 1;
   label = 13;
   break;
  }
 }
 if ((label|0) == 9) {
  _cmsSignalError($0,2,29240,$vararg_buffer);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 13) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _Read8bitTables($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$04661 = 0, $$04766 = 0, $$048 = 0, $$057 = 0, $$158 = 0, $$255 = 0, $$354 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond64 = 0, $exitcond65 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $4 = sp;
 $5 = (($3) + -1)|0;
 $6 = ($5>>>0)>(15);
 if ($6) {
  $$048 = 0;
  STACKTOP = sp;return ($$048|0);
 }
 dest=$4; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $7 = (__cmsMalloc($0,256)|0);
 $8 = ($7|0)==(0|0);
 if ($8) {
  $$048 = 0;
  STACKTOP = sp;return ($$048|0);
 } else {
  $$04661 = 0;
 }
 while(1) {
  $12 = (_cmsBuildTabulatedToneCurve16($0,256,0)|0);
  $13 = (($4) + ($$04661<<2)|0);
  HEAP32[$13>>2] = $12;
  $14 = ($12|0)==(0|0);
  $10 = (($$04661) + 1)|0;
  if ($14) {
   $$04766 = $7;
   break;
  }
  $9 = ($10>>>0)<($3>>>0);
  if ($9) {
   $$04661 = $10;
  } else {
   label = 4;
   break;
  }
 }
 L9: do {
  if ((label|0) == 4) {
   $11 = ((($1)) + 272|0);
   $$158 = 0;
   while(1) {
    $15 = HEAP32[$11>>2]|0;
    $16 = (FUNCTION_TABLE_iiiii[$15 & 255]($1,$7,256,1)|0);
    $17 = ($16|0)==(1);
    if (!($17)) {
     $$04766 = $7;
     break L9;
    }
    $18 = (($4) + ($$158<<2)|0);
    $$057 = 0;
    while(1) {
     $19 = (($7) + ($$057)|0);
     $20 = HEAP8[$19>>0]|0;
     $21 = $20&255;
     $22 = $21 << 8;
     $23 = $22 | $21;
     $24 = $23&65535;
     $25 = HEAP32[$18>>2]|0;
     $26 = ((($25)) + 24|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = (($27) + ($$057<<1)|0);
     HEAP16[$28>>1] = $24;
     $29 = (($$057) + 1)|0;
     $exitcond65 = ($29|0)==(256);
     if ($exitcond65) {
      break;
     } else {
      $$057 = $29;
     }
    }
    $30 = (($$158) + 1)|0;
    $31 = ($30>>>0)<($3>>>0);
    if ($31) {
     $$158 = $30;
    } else {
     break;
    }
   }
   __cmsFree($0,$7);
   $32 = (_cmsStageAllocToneCurves($0,$3,$4)|0);
   $33 = (_cmsPipelineInsertStage($2,1,$32)|0);
   $34 = ($33|0)==(0);
   $35 = ($3|0)==(0);
   if ($34) {
    if ($35) {
     $$048 = 0;
    } else {
     $$04766 = 0;
     break;
    }
    STACKTOP = sp;return ($$048|0);
   }
   if ($35) {
    $$048 = 1;
    STACKTOP = sp;return ($$048|0);
   } else {
    $$255 = 0;
   }
   while(1) {
    $36 = (($4) + ($$255<<2)|0);
    $37 = HEAP32[$36>>2]|0;
    _cmsFreeToneCurve($37);
    $38 = (($$255) + 1)|0;
    $exitcond64 = ($38|0)==($3|0);
    if ($exitcond64) {
     $$048 = 1;
     break;
    } else {
     $$255 = $38;
    }
   }
   STACKTOP = sp;return ($$048|0);
  }
 } while(0);
 $$354 = 0;
 while(1) {
  $39 = (($4) + ($$354<<2)|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ($40|0)==(0|0);
  if (!($41)) {
   _cmsFreeToneCurve($40);
  }
  $42 = (($$354) + 1)|0;
  $exitcond = ($42|0)==($3|0);
  if ($exitcond) {
   break;
  } else {
   $$354 = $42;
  }
 }
 $43 = ($$04766|0)==(0|0);
 if ($43) {
  $$048 = 0;
  STACKTOP = sp;return ($$048|0);
 }
 __cmsFree($0,$$04766);
 $$048 = 0;
 STACKTOP = sp;return ($$048|0);
}
function _SaveOneChromaticity($0,$1,$2) {
 $0 = +$0;
 $1 = +$1;
 $2 = $2|0;
 var $$ = 0, $$0 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (__cmsDoubleTo15Fixed16($0)|0);
 $4 = (__cmsWriteUInt32Number($2,$3)|0);
 $5 = ($4|0)==(0);
 if ($5) {
  $$0 = 0;
  return ($$0|0);
 }
 $6 = (__cmsDoubleTo15Fixed16($1)|0);
 $7 = (__cmsWriteUInt32Number($2,$6)|0);
 $not$ = ($7|0)!=(0);
 $$ = $not$&1;
 $$0 = $$;
 return ($$0|0);
}
function __cmsGetTagDescriptor($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$013 = 0, $$01317 = 0, $$01318 = 0, $$116 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__cmsContextGetClientChunk($0,9)|0);
 $$01317 = HEAP32[$2>>2]|0;
 $3 = ($$01317|0)==(0|0);
 L1: do {
  if ($3) {
   $$116 = 15992;
  } else {
   $$01318 = $$01317;
   while(1) {
    $4 = HEAP32[$$01318>>2]|0;
    $5 = ($4|0)==($1|0);
    if ($5) {
     break;
    }
    $7 = ((($$01318)) + 96|0);
    $$013 = HEAP32[$7>>2]|0;
    $8 = ($$013|0)==(0|0);
    if ($8) {
     $$116 = 15992;
     break L1;
    } else {
     $$01318 = $$013;
    }
   }
   $6 = ((($$01318)) + 4|0);
   $$0 = $6;
   return ($$0|0);
  }
 } while(0);
 while(1) {
  $9 = HEAP32[$$116>>2]|0;
  $10 = ($9|0)==($1|0);
  if ($10) {
   break;
  }
  $12 = ((($$116)) + 96|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==(0|0);
  if ($14) {
   $$0 = 0;
   label = 8;
   break;
  } else {
   $$116 = $13;
  }
 }
 if ((label|0) == 8) {
  return ($$0|0);
 }
 $11 = ((($$116)) + 4|0);
 $$0 = $11;
 return ($$0|0);
}
function _DecideLUTtypeA2B($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$ = 0, $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $0 < 4.0;
 if (!($2)) {
  $$0 = 1832993312;
  return ($$0|0);
 }
 $3 = ((($1)) + 36|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 $$ = $5 ? 1835430962 : 1835430961;
 $$0 = $$;
 return ($$0|0);
}
function _DecideLUTtypeB2A($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$ = 0, $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $0 < 4.0;
 if (!($2)) {
  $$0 = 1833058592;
  return ($$0|0);
 }
 $3 = ((($1)) + 36|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 $$ = $5 ? 1835430962 : 1835430961;
 $$0 = $$;
 return ($$0|0);
}
function _DecideXYZtype($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1482250784;
}
function _DecideCurveType($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$$ = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $0 < 4.0;
 if ($2) {
  return 1668641398;
 }
 $3 = ((($1)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(1);
 if ($5) {
  $6 = ((($1)) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ((($7)) + 8|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9>>>0)>(5);
  $$$ = $10 ? 1668641398 : 1885434465;
  return ($$$|0);
 } else {
  return 1668641398;
 }
 return (0)|0;
}
function _DecideTextType($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$ = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = !($0 >= 4.0);
 $$ = $2 ? 1952807028 : 1835824483;
 return ($$|0);
}
function _DecideTextDescType($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$ = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = !($0 >= 4.0);
 $$ = $2 ? 1684370275 : 1835824483;
 return ($$|0);
}
function _cmsCreateRGBProfileTHR($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0.0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0;
 var $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $9 = 0;
 var $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0;
 $4 = sp + 192|0;
 $5 = sp + 120|0;
 $6 = sp + 96|0;
 $7 = sp + 24|0;
 $8 = sp;
 $9 = (_cmsCreateProfilePlaceholder($0)|0);
 $10 = ($9|0)==(0|0);
 if ($10) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 _cmsSetProfileVersion($9,4.2999999999999998);
 _cmsSetDeviceClass($9,1835955314);
 _cmsSetColorSpace($9,1380401696);
 _cmsSetPCS($9,1482250784);
 _cmsSetHeaderRenderingIntent($9,0);
 $11 = (_SetTextTags($9,22392)|0);
 $12 = ($11|0)==(0);
 L4: do {
  if (!($12)) {
   $13 = ($1|0)!=(0|0);
   if ($13) {
    $15 = (_cmsD50_XYZ()|0);
    $16 = (_cmsWriteTag($9,2004119668,$15)|0);
    $17 = ($16|0)==(0);
    if ($17) {
     break;
    }
    _cmsxyY2XYZ($8,$1);
    $18 = (_cmsD50_XYZ()|0);
    (__cmsAdaptationMatrix($7,0,$8,$18)|0);
    $19 = (_cmsWriteTag($9,1667785060,$7)|0);
    $20 = ($19|0)==(0);
    if ($20) {
     break;
    }
    $21 = ($2|0)!=(0|0);
    $or$cond = $13 & $21;
    if ($or$cond) {
     $22 = +HEAPF64[$1>>3];
     HEAPF64[$6>>3] = $22;
     $23 = ((($1)) + 8|0);
     $24 = +HEAPF64[$23>>3];
     $25 = ((($6)) + 8|0);
     HEAPF64[$25>>3] = $24;
     $26 = ((($6)) + 16|0);
     HEAPF64[$26>>3] = 1.0;
     $27 = (__cmsBuildRGB2XYZtransferMatrix($4,$6,$2)|0);
     $28 = ($27|0)==(0);
     if ($28) {
      break;
     }
     $29 = +HEAPF64[$4>>3];
     HEAPF64[$5>>3] = $29;
     $30 = ((($4)) + 24|0);
     $31 = +HEAPF64[$30>>3];
     $32 = ((($5)) + 8|0);
     HEAPF64[$32>>3] = $31;
     $33 = ((($4)) + 48|0);
     $34 = +HEAPF64[$33>>3];
     $35 = ((($5)) + 16|0);
     HEAPF64[$35>>3] = $34;
     $36 = ((($4)) + 8|0);
     $37 = +HEAPF64[$36>>3];
     $38 = ((($5)) + 24|0);
     HEAPF64[$38>>3] = $37;
     $39 = ((($4)) + 32|0);
     $40 = +HEAPF64[$39>>3];
     $41 = ((($5)) + 32|0);
     HEAPF64[$41>>3] = $40;
     $42 = ((($4)) + 56|0);
     $43 = +HEAPF64[$42>>3];
     $44 = ((($5)) + 40|0);
     HEAPF64[$44>>3] = $43;
     $45 = ((($4)) + 16|0);
     $46 = +HEAPF64[$45>>3];
     $47 = ((($5)) + 48|0);
     HEAPF64[$47>>3] = $46;
     $48 = ((($4)) + 40|0);
     $49 = +HEAPF64[$48>>3];
     $50 = ((($5)) + 56|0);
     HEAPF64[$50>>3] = $49;
     $51 = ((($4)) + 64|0);
     $52 = +HEAPF64[$51>>3];
     $53 = ((($5)) + 64|0);
     HEAPF64[$53>>3] = $52;
     $54 = (_cmsWriteTag($9,1918392666,$5)|0);
     $55 = ($54|0)==(0);
     if ($55) {
      break;
     }
     $56 = (_cmsWriteTag($9,1649957210,$47)|0);
     $57 = ($56|0)==(0);
     if ($57) {
      break;
     }
     $58 = (_cmsWriteTag($9,1733843290,$38)|0);
     $59 = ($58|0)==(0);
     if ($59) {
      break;
     } else {
      $82 = $21;
     }
    } else {
     $82 = $21;
    }
   } else {
    $14 = ($2|0)!=(0|0);
    $82 = $14;
   }
   $60 = ($3|0)==(0|0);
   do {
    if (!($60)) {
     $61 = HEAP32[$3>>2]|0;
     $62 = (_cmsWriteTag($9,1918128707,$61)|0);
     $63 = ($62|0)==(0);
     if ($63) {
      break L4;
     }
     $64 = ((($3)) + 4|0);
     $65 = HEAP32[$64>>2]|0;
     $66 = HEAP32[$3>>2]|0;
     $67 = ($65|0)==($66|0);
     if ($67) {
      $68 = (_cmsLinkTag($9,1733579331,1918128707)|0);
      $69 = ($68|0)==(0);
      if ($69) {
       break L4;
      }
     } else {
      $70 = (_cmsWriteTag($9,1733579331,$65)|0);
      $71 = ($70|0)==(0);
      if ($71) {
       break L4;
      }
     }
     $72 = ((($3)) + 8|0);
     $73 = HEAP32[$72>>2]|0;
     $74 = HEAP32[$3>>2]|0;
     $75 = ($73|0)==($74|0);
     if ($75) {
      $76 = (_cmsLinkTag($9,1649693251,1918128707)|0);
      $77 = ($76|0)==(0);
      if ($77) {
       break L4;
      } else {
       break;
      }
     } else {
      $78 = (_cmsWriteTag($9,1649693251,$73)|0);
      $79 = ($78|0)==(0);
      if ($79) {
       break L4;
      } else {
       break;
      }
     }
    }
   } while(0);
   if (!($82)) {
    $$0 = $9;
    STACKTOP = sp;return ($$0|0);
   }
   $80 = (_cmsWriteTag($9,1667789421,$2)|0);
   $81 = ($80|0)==(0);
   if (!($81)) {
    $$0 = $9;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 (_cmsCloseProfile($9)|0);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _SetTextTags($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_cmsGetProfileContextID($0)|0);
 $3 = (_cmsMLUalloc($2,1)|0);
 $4 = (_cmsMLUalloc($2,1)|0);
 $5 = ($3|0)==(0|0);
 $6 = ($4|0)==(0|0);
 $or$cond = $5 | $6;
 if ($or$cond) {
  $$0 = 0;
 } else {
  $7 = (_cmsMLUsetWide($3,29408,29411,$1)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$0 = 0;
  } else {
   $9 = (_cmsMLUsetWide($4,29408,29411,22444)|0);
   $10 = ($9|0)==(0);
   if ($10) {
    $$0 = 0;
   } else {
    $11 = (_cmsWriteTag($0,1684370275,$3)|0);
    $12 = ($11|0)==(0);
    if ($12) {
     $$0 = 0;
    } else {
     $13 = (_cmsWriteTag($0,1668313716,$4)|0);
     $not$ = ($13|0)!=(0);
     $$ = $not$&1;
     $$0 = $$;
    }
   }
  }
 }
 if (!($5)) {
  _cmsMLUfree($3);
 }
 if ($6) {
  return ($$0|0);
 }
 _cmsMLUfree($4);
 return ($$0|0);
}
function _cmsCreateLab2ProfileTHR($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = (_cmsD50_xyY()|0);
  $4 = $3;
 } else {
  $4 = $1;
 }
 $5 = (_cmsCreateRGBProfileTHR($0,$4,0,0)|0);
 $6 = ($5|0)==(0|0);
 if ($6) {
  $$0 = 0;
  return ($$0|0);
 }
 _cmsSetProfileVersion($5,2.1000000000000001);
 _cmsSetDeviceClass($5,1633842036);
 _cmsSetColorSpace($5,1281450528);
 _cmsSetPCS($5,1281450528);
 $7 = (_SetTextTags($5,22544)|0);
 $8 = ($7|0)==(0);
 if ($8) {
  $$0 = 0;
  return ($$0|0);
 }
 $9 = (_cmsPipelineAlloc($0,3,3)|0);
 $cond = ($9|0)==(0|0);
 if (!($cond)) {
  $10 = (__cmsStageAllocIdentityCLut($0,3)|0);
  $11 = (_cmsPipelineInsertStage($9,0,$10)|0);
  $12 = ($11|0)==(0);
  if (!($12)) {
   $13 = (_cmsWriteTag($5,1093812784,$9)|0);
   $14 = ($13|0)==(0);
   if (!($14)) {
    _cmsPipelineFree($9);
    $$0 = $5;
    return ($$0|0);
   }
  }
  _cmsPipelineFree($9);
 }
 (_cmsCloseProfile($5)|0);
 $$0 = 0;
 return ($$0|0);
}
function _cmsCreateLab4ProfileTHR($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$025 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = (_cmsD50_xyY()|0);
  $4 = $3;
 } else {
  $4 = $1;
 }
 $5 = (_cmsCreateRGBProfileTHR($0,$4,0,0)|0);
 $6 = ($5|0)==(0|0);
 if ($6) {
  $$025 = 0;
  return ($$025|0);
 }
 _cmsSetProfileVersion($5,4.2999999999999998);
 _cmsSetDeviceClass($5,1633842036);
 _cmsSetColorSpace($5,1281450528);
 _cmsSetPCS($5,1281450528);
 $7 = (_SetTextTags($5,22544)|0);
 $8 = ($7|0)==(0);
 if (!($8)) {
  $9 = (_cmsPipelineAlloc($0,3,3)|0);
  $10 = ($9|0)==(0|0);
  if (!($10)) {
   $11 = (__cmsStageAllocIdentityCurves($0,3)|0);
   $12 = (_cmsPipelineInsertStage($9,0,$11)|0);
   $13 = ($12|0)==(0);
   if (!($13)) {
    $14 = (_cmsWriteTag($5,1093812784,$9)|0);
    $15 = ($14|0)==(0);
    if (!($15)) {
     _cmsPipelineFree($9);
     $$025 = $5;
     return ($$025|0);
    }
   }
   _cmsPipelineFree($9);
  }
 }
 (_cmsCloseProfile($5)|0);
 $$025 = 0;
 return ($$025|0);
}
function _cmsCreate_sRGBProfileTHR($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $1 = sp + 72|0;
 $2 = sp;
 $3 = sp + 96|0;
 ;HEAP32[$1>>2]=HEAP32[616>>2]|0;HEAP32[$1+4>>2]=HEAP32[616+4>>2]|0;HEAP32[$1+8>>2]=HEAP32[616+8>>2]|0;HEAP32[$1+12>>2]=HEAP32[616+12>>2]|0;HEAP32[$1+16>>2]=HEAP32[616+16>>2]|0;HEAP32[$1+20>>2]=HEAP32[616+20>>2]|0;
 dest=$2; src=640; stop=dest+72|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $4 = (_Build_sRGBGamma($0)|0);
 $5 = ((($3)) + 8|0);
 HEAP32[$5>>2] = $4;
 $6 = ((($3)) + 4|0);
 HEAP32[$6>>2] = $4;
 HEAP32[$3>>2] = $4;
 $7 = ($4|0)==(0|0);
 if ($7) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = (_cmsCreateRGBProfileTHR($0,$1,$2,$3)|0);
 $9 = HEAP32[$3>>2]|0;
 _cmsFreeToneCurve($9);
 $10 = ($8|0)==(0|0);
 if ($10) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = (_SetTextTags($8,22632)|0);
 $12 = ($11|0)==(0);
 if (!($12)) {
  $$0 = $8;
  STACKTOP = sp;return ($$0|0);
 }
 (_cmsCloseProfile($8)|0);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _Build_sRGBGamma($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $1 = sp;
 HEAPF64[$1>>3] = 2.3999999999999999;
 $2 = ((($1)) + 8|0);
 HEAPF64[$2>>3] = 0.94786729857819906;
 $3 = ((($1)) + 16|0);
 HEAPF64[$3>>3] = 0.052132701421800952;
 $4 = ((($1)) + 24|0);
 HEAPF64[$4>>3] = 0.077399380804953565;
 $5 = ((($1)) + 32|0);
 HEAPF64[$5>>3] = 0.04045;
 $6 = (_cmsBuildParametricToneCurve($0,4,$1)|0);
 STACKTOP = sp;return ($6|0);
}
function _cmsCreate_sRGBProfile() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_cmsCreate_sRGBProfileTHR(0)|0);
 return ($0|0);
}
function _cmsD50_XYZ() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (712|0);
}
function _cmsD50_xyY() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _cmsXYZ2xyY(32336,712);
 return (32336|0);
}
function _cmsWhitePointFromTemp($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $$0 = 0, $$sink37 = 0.0, $$sink40 = 0.0, $$sink43 = 0.0, $$sink45 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0;
 var $24 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $or$cond = 0, $or$cond3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = ($0|0)==(0|0);
 if ($2) {
  ___assert_fail((29414|0),(29441|0),54,(29471|0));
  // unreachable;
 }
 $3 = $1 * $1;
 $4 = $3 * $1;
 $5 = $1 >= 4000.0;
 $6 = $1 <= 7000.0;
 $or$cond = $5 & $6;
 if ($or$cond) {
  $$sink37 = 0.244063;$$sink40 = 0.099110000000000003;$$sink43 = 2.9678;$$sink45 = -4.6070000000000002;
 } else {
  $7 = $1 > 7000.0;
  $8 = $1 <= 25000.0;
  $or$cond3 = $7 & $8;
  if ($or$cond3) {
   $$sink37 = 0.23704;$$sink40 = 0.24748000000000001;$$sink43 = 1.9017999999999999;$$sink45 = -2.0064000000000002;
  } else {
   _cmsSignalError(0,2,29493,$vararg_buffer);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $9 = 1.0E+9 / $4;
 $10 = $9 * $$sink45;
 $11 = 1.0E+6 / $3;
 $12 = $11 * $$sink43;
 $13 = $10 + $12;
 $14 = 1000.0 / $1;
 $15 = $14 * $$sink40;
 $16 = $13 + $15;
 $17 = $$sink37 + $16;
 $18 = $17 * $17;
 $19 = $18 * 3.0;
 $20 = $17 * 2.8700000000000001;
 $21 = $20 - $19;
 $22 = $21 + -0.27500000000000002;
 HEAPF64[$0>>3] = $17;
 $23 = ((($0)) + 8|0);
 HEAPF64[$23>>3] = $22;
 $24 = ((($0)) + 16|0);
 HEAPF64[$24>>3] = 1.0;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _cmsTempFromWhitePoint($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$05867 = 0, $$05966 = 0.0, $$06065 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0;
 var $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $5 = 0, $6 = 0.0;
 var $7 = 0.0, $8 = 0.0, $9 = 0.0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0|0);
 if ($2) {
  ___assert_fail((29414|0),(29441|0),150,(29529|0));
  // unreachable;
 }
 $3 = ($0|0)==(0|0);
 if ($3) {
  ___assert_fail((29551|0),(29441|0),151,(29529|0));
  // unreachable;
 }
 $4 = +HEAPF64[$1>>3];
 $5 = ((($1)) + 8|0);
 $6 = +HEAPF64[$5>>3];
 $7 = $4 * 2.0;
 $8 = $6 * 6.0;
 $9 = $8 - $4;
 $10 = $9 + 1.5;
 $11 = $7 / $10;
 $12 = $6 * 3.0;
 $13 = $12 / $10;
 $$05867 = 0;$$05966 = 0.0;$$06065 = 0.0;
 while(1) {
  $16 = (((736 + ($$05867<<5)|0)) + 8|0);
  $17 = +HEAPF64[$16>>3];
  $18 = (((736 + ($$05867<<5)|0)) + 16|0);
  $19 = +HEAPF64[$18>>3];
  $20 = (((736 + ($$05867<<5)|0)) + 24|0);
  $21 = +HEAPF64[$20>>3];
  $22 = (736 + ($$05867<<5)|0);
  $23 = +HEAPF64[$22>>3];
  $24 = $13 - $19;
  $25 = $11 - $17;
  $26 = $25 * $21;
  $27 = $24 - $26;
  $28 = $21 * $21;
  $29 = $28 + 1.0;
  $30 = (+Math_sqrt((+$29)));
  $31 = $27 / $30;
  $32 = ($$05867|0)!=(0);
  $33 = $$05966 / $31;
  $34 = $33 < 0.0;
  $or$cond = $32 & $34;
  $15 = (($$05867) + 1)|0;
  if ($or$cond) {
   break;
  }
  $14 = ($15>>>0)<(31);
  if ($14) {
   $$05867 = $15;$$05966 = $31;$$06065 = $23;
  } else {
   $$0 = 0;
   label = 9;
   break;
  }
 }
 if ((label|0) == 9) {
  return ($$0|0);
 }
 $35 = $$05966 - $31;
 $36 = $$05966 / $35;
 $37 = $23 - $$06065;
 $38 = $37 * $36;
 $39 = $$06065 + $38;
 $40 = 1.0E+6 / $39;
 HEAPF64[$0>>3] = $40;
 $$0 = 1;
 return ($$0|0);
}
function __cmsAdaptationMatrix($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $4 = 0, $5 = 0, $6 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $4 = sp;
 dest=$4; src=1728; stop=dest+72|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $5 = ($1|0)==(0|0);
 $$ = $5 ? $4 : $1;
 $6 = (_ComputeChromaticAdaptation($0,$2,$3,$$)|0);
 STACKTOP = sp;return ($6|0);
}
function _ComputeChromaticAdaptation($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0.0;
 var $29 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0;
 $4 = sp + 240|0;
 $5 = sp + 216|0;
 $6 = sp + 192|0;
 $7 = sp + 168|0;
 $8 = sp + 144|0;
 $9 = sp + 72|0;
 $10 = sp;
 dest=$10; src=$3; stop=dest+72|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $11 = (__cmsMAT3inverse($10,$4)|0);
 $12 = ($11|0)==(0);
 if ($12) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $13 = +HEAPF64[$1>>3];
 $14 = ((($1)) + 8|0);
 $15 = +HEAPF64[$14>>3];
 $16 = ((($1)) + 16|0);
 $17 = +HEAPF64[$16>>3];
 __cmsVEC3init($5,$13,$15,$17);
 $18 = +HEAPF64[$2>>3];
 $19 = ((($2)) + 8|0);
 $20 = +HEAPF64[$19>>3];
 $21 = ((($2)) + 16|0);
 $22 = +HEAPF64[$21>>3];
 __cmsVEC3init($7,$18,$20,$22);
 __cmsMAT3eval($6,$3,$5);
 __cmsMAT3eval($8,$3,$7);
 $23 = +HEAPF64[$8>>3];
 $24 = +HEAPF64[$6>>3];
 $25 = $23 / $24;
 __cmsVEC3init($9,$25,0.0,0.0);
 $26 = ((($9)) + 24|0);
 $27 = ((($8)) + 8|0);
 $28 = +HEAPF64[$27>>3];
 $29 = ((($6)) + 8|0);
 $30 = +HEAPF64[$29>>3];
 $31 = $28 / $30;
 __cmsVEC3init($26,0.0,$31,0.0);
 $32 = ((($9)) + 48|0);
 $33 = ((($8)) + 16|0);
 $34 = +HEAPF64[$33>>3];
 $35 = ((($6)) + 16|0);
 $36 = +HEAPF64[$35>>3];
 $37 = $34 / $36;
 __cmsVEC3init($32,0.0,0.0,$37);
 __cmsMAT3per($10,$9,$3);
 __cmsMAT3per($0,$4,$10);
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function __cmsBuildRGB2XYZtransferMatrix($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0.0;
 var $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0;
 $3 = sp + 168|0;
 $4 = sp + 144|0;
 $5 = sp + 72|0;
 $6 = sp;
 $7 = +HEAPF64[$1>>3];
 $8 = ((($1)) + 8|0);
 $9 = +HEAPF64[$8>>3];
 $10 = +HEAPF64[$2>>3];
 $11 = ((($2)) + 8|0);
 $12 = +HEAPF64[$11>>3];
 $13 = ((($2)) + 24|0);
 $14 = +HEAPF64[$13>>3];
 $15 = ((($2)) + 32|0);
 $16 = +HEAPF64[$15>>3];
 $17 = ((($2)) + 48|0);
 $18 = +HEAPF64[$17>>3];
 $19 = ((($2)) + 56|0);
 $20 = +HEAPF64[$19>>3];
 __cmsVEC3init($6,$10,$14,$18);
 $21 = ((($6)) + 24|0);
 __cmsVEC3init($21,$12,$16,$20);
 $22 = ((($6)) + 48|0);
 $23 = 1.0 - $10;
 $24 = $23 - $12;
 $25 = 1.0 - $14;
 $26 = $25 - $16;
 $27 = 1.0 - $18;
 $28 = $27 - $20;
 __cmsVEC3init($22,$24,$26,$28);
 $29 = (__cmsMAT3inverse($6,$5)|0);
 $30 = ($29|0)==(0);
 if ($30) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $31 = $7 / $9;
 $32 = 1.0 - $7;
 $33 = $32 - $9;
 $34 = $33 / $9;
 __cmsVEC3init($3,$31,1.0,$34);
 __cmsMAT3eval($4,$5,$3);
 $35 = +HEAPF64[$4>>3];
 $36 = $10 * $35;
 $37 = ((($4)) + 8|0);
 $38 = +HEAPF64[$37>>3];
 $39 = $14 * $38;
 $40 = ((($4)) + 16|0);
 $41 = +HEAPF64[$40>>3];
 $42 = $18 * $41;
 __cmsVEC3init($0,$36,$39,$42);
 $43 = ((($0)) + 24|0);
 $44 = +HEAPF64[$4>>3];
 $45 = $12 * $44;
 $46 = +HEAPF64[$37>>3];
 $47 = $16 * $46;
 $48 = +HEAPF64[$40>>3];
 $49 = $20 * $48;
 __cmsVEC3init($43,$45,$47,$49);
 $50 = ((($0)) + 48|0);
 $51 = +HEAPF64[$4>>3];
 $52 = $24 * $51;
 $53 = +HEAPF64[$37>>3];
 $54 = $26 * $53;
 $55 = +HEAPF64[$40>>3];
 $56 = $28 * $55;
 __cmsVEC3init($50,$52,$54,$56);
 $57 = (__cmsAdaptMatrixToD50($0,$1)|0);
 $$0 = $57;
 STACKTOP = sp;return ($$0|0);
}
function __cmsAdaptMatrixToD50($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0;
 $2 = sp + 144|0;
 $3 = sp + 72|0;
 $4 = sp;
 _cmsxyY2XYZ($2,$1);
 $5 = (__cmsAdaptationMatrix($3,0,$2,712)|0);
 $6 = ($5|0)==(0);
 if ($6) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 dest=$4; src=$0; stop=dest+72|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 __cmsMAT3per($0,$3,$4);
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _cmsSetAdaptationStateTHR($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $2 = 0, $3 = 0.0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (__cmsContextGetClientChunk($0,3)|0);
 $3 = +HEAPF64[$2>>3];
 $4 = !($1 >= 0.0);
 if ($4) {
  return (+$3);
 }
 HEAPF64[$2>>3] = $1;
 return (+$3);
}
function _cmsDeleteTransform($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  ___assert_fail((29603|0),(29573|0),151,(29621|0));
  // unreachable;
 }
 $2 = ((($0)) + 96|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  _cmsPipelineFree($3);
 }
 $5 = ((($0)) + 92|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if (!($7)) {
  _cmsPipelineFree($6);
 }
 $8 = ((($0)) + 100|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  _cmsFreeNamedColorList($9);
 }
 $11 = ((($0)) + 104|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0|0);
 if (!($13)) {
  _cmsFreeNamedColorList($12);
 }
 $14 = ((($0)) + 168|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0|0);
 if (!($16)) {
  _cmsFreeProfileSequenceDescription($15);
 }
 $17 = ((($0)) + 192|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)==(0|0);
 if ($19) {
  $24 = ((($0)) + 188|0);
  $25 = HEAP32[$24>>2]|0;
  __cmsFree($25,$0);
  return;
 }
 $20 = ((($0)) + 196|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ((($0)) + 188|0);
 $23 = HEAP32[$22>>2]|0;
 FUNCTION_TABLE_vii[$21 & 63]($23,$18);
 $24 = ((($0)) + 188|0);
 $25 = HEAP32[$24>>2]|0;
 __cmsFree($25,$0);
 return;
}
function _cmsDoTransform($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $4 = sp;
 HEAP32[$4>>2] = 0;
 $5 = ((($4)) + 4|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($4)) + 8|0);
 HEAP32[$6>>2] = $3;
 $7 = ((($4)) + 12|0);
 HEAP32[$7>>2] = $3;
 $8 = ((($0)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 FUNCTION_TABLE_viiiiii[$9 & 15]($0,$1,$2,$3,1,$4);
 STACKTOP = sp;return;
}
function _cmsCreateExtendedTransform($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 var $$0 = 0, $$sink = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $11 = sp + 52|0;
 $12 = sp + 44|0;
 $13 = sp + 36|0;
 $14 = sp + 48|0;
 $15 = sp + 40|0;
 HEAP32[$11>>2] = $8;
 HEAP32[$12>>2] = $9;
 HEAP32[$13>>2] = $10;
 $16 = (($1) + -1)|0;
 $17 = (($4) + ($16<<2)|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = HEAP32[$13>>2]|0;
 $20 = $19 & 512;
 $21 = ($20|0)==(0);
 if (!($21)) {
  $22 = (_AllocEmptyTransform($0,0,0,$11,$12,$13)|0);
  $$0 = $22;
  STACKTOP = sp;return ($$0|0);
 }
 $23 = $19 & 4096;
 $24 = ($23|0)!=(0);
 $25 = ($6|0)==(0|0);
 $or$cond = $25 & $24;
 if ($or$cond) {
  $26 = $19 & -4097;
  HEAP32[$13>>2] = $26;
 }
 $27 = HEAP32[$11>>2]|0;
 $28 = (__cmsFormatterIsFloat($27)|0);
 $29 = ($28|0)==(0);
 if ($29) {
  $30 = HEAP32[$12>>2]|0;
  $31 = (__cmsFormatterIsFloat($30)|0);
  $32 = ($31|0)==(0);
  if (!($32)) {
   label = 7;
  }
 } else {
  label = 7;
 }
 if ((label|0) == 7) {
  $33 = HEAP32[$13>>2]|0;
  $34 = $33 | 64;
  HEAP32[$13>>2] = $34;
 }
 $35 = (_GetXFormColorSpaces($1,$2,$14,$15)|0);
 $36 = ($35|0)==(0);
 if ($36) {
  _cmsSignalError($0,4,29640,$vararg_buffer);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $37 = HEAP32[$14>>2]|0;
 $38 = HEAP32[$11>>2]|0;
 $39 = (_IsProperColorSpace($37,$38)|0);
 $40 = ($39|0)==(0);
 if ($40) {
  _cmsSignalError($0,9,29673,$vararg_buffer1);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $41 = HEAP32[$15>>2]|0;
 $42 = HEAP32[$12>>2]|0;
 $43 = (_IsProperColorSpace($41,$42)|0);
 $44 = ($43|0)==(0);
 if ($44) {
  _cmsSignalError($0,9,29710,$vararg_buffer3);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $45 = HEAP32[$13>>2]|0;
 $46 = (__cmsLinkProfiles($0,$1,$4,$2,$3,$5,$45)|0);
 $47 = ($46|0)==(0|0);
 if ($47) {
  _cmsSignalError($0,13,29748,$vararg_buffer5);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $48 = HEAP32[$14>>2]|0;
 $49 = (_cmsChannelsOf($48)|0);
 $50 = (_cmsPipelineInputChannels($46)|0);
 $51 = ($49|0)==($50|0);
 if ($51) {
  $52 = HEAP32[$15>>2]|0;
  $53 = (_cmsChannelsOf($52)|0);
  $54 = (_cmsPipelineOutputChannels($46)|0);
  $55 = ($53|0)==($54|0);
  if ($55) {
   $56 = (_AllocEmptyTransform($0,$46,$18,$11,$12,$13)|0);
   $57 = ($56|0)==(0|0);
   if ($57) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $58 = HEAP32[$14>>2]|0;
   $59 = ((($56)) + 108|0);
   HEAP32[$59>>2] = $58;
   $60 = HEAP32[$15>>2]|0;
   $61 = ((($56)) + 112|0);
   HEAP32[$61>>2] = $60;
   $62 = HEAP32[$17>>2]|0;
   $63 = ((($56)) + 184|0);
   HEAP32[$63>>2] = $62;
   $64 = ((($56)) + 120|0);
   $65 = HEAP32[$2>>2]|0;
   $66 = (_cmsReadTag($65,2004119668)|0);
   _SetWhitePoint($64,$66);
   $67 = ((($56)) + 144|0);
   $68 = (($2) + ($16<<2)|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = (_cmsReadTag($69,2004119668)|0);
   _SetWhitePoint($67,$70);
   if (!($25)) {
    $71 = HEAP32[$13>>2]|0;
    $72 = $71 & 4096;
    $73 = ($72|0)==(0);
    if (!($73)) {
     $74 = (__cmsCreateGamutCheckPipeline($0,$2,$3,$4,$5,$7,$6)|0);
     $75 = ((($56)) + 96|0);
     HEAP32[$75>>2] = $74;
    }
   }
   $76 = HEAP32[$2>>2]|0;
   $77 = (_cmsIsTag($76,1668051572)|0);
   $78 = ($77|0)==(0);
   if (!($78)) {
    $79 = HEAP32[$2>>2]|0;
    $80 = (_cmsReadTag($79,1668051572)|0);
    $81 = (_cmsDupNamedColorList($80)|0);
    $82 = ((($56)) + 100|0);
    HEAP32[$82>>2] = $81;
   }
   $83 = HEAP32[$68>>2]|0;
   $84 = (_cmsGetDeviceClass($83)|0);
   $85 = ($84|0)==(1818848875);
   $86 = HEAP32[$68>>2]|0;
   if ($85) {
    $87 = (_cmsIsTag($86,1668050804)|0);
    $88 = ($87|0)==(0);
    if (!($88)) {
     $89 = HEAP32[$68>>2]|0;
     $90 = (_cmsReadTag($89,1668050804)|0);
     $91 = (_cmsDupNamedColorList($90)|0);
     $92 = ((($56)) + 104|0);
     HEAP32[$92>>2] = $91;
    }
   } else {
    $93 = (_cmsIsTag($86,1668051572)|0);
    $94 = ($93|0)==(0);
    if (!($94)) {
     $95 = HEAP32[$68>>2]|0;
     $96 = (_cmsReadTag($95,1668051572)|0);
     $97 = (_cmsDupNamedColorList($96)|0);
     $98 = ((($56)) + 104|0);
     HEAP32[$98>>2] = $97;
    }
   }
   $99 = HEAP32[$13>>2]|0;
   $100 = $99 & 128;
   $101 = ($100|0)==(0);
   if ($101) {
    $$sink = 0;
   } else {
    $102 = (__cmsCompileProfileSequence($0,$1,$2)|0);
    $$sink = $102;
   }
   $103 = ((($56)) + 168|0);
   HEAP32[$103>>2] = $$sink;
   $104 = HEAP32[$13>>2]|0;
   $105 = $104 & 64;
   $106 = ($105|0)==(0);
   do {
    if ($106) {
     $107 = ((($56)) + 28|0);
     ;HEAP32[$107>>2]=0|0;HEAP32[$107+4>>2]=0|0;HEAP32[$107+8>>2]=0|0;HEAP32[$107+12>>2]=0|0;HEAP32[$107+16>>2]=0|0;HEAP32[$107+20>>2]=0|0;HEAP32[$107+24>>2]=0|0;HEAP32[$107+28>>2]=0|0;
     $108 = ((($56)) + 96|0);
     $109 = HEAP32[$108>>2]|0;
     $110 = ($109|0)==(0|0);
     if ($110) {
      $112 = ((($56)) + 92|0);
      $113 = HEAP32[$112>>2]|0;
      $114 = ((($113)) + 16|0);
      $115 = HEAP32[$114>>2]|0;
      $116 = ((($56)) + 60|0);
      $117 = ((($113)) + 12|0);
      $118 = HEAP32[$117>>2]|0;
      FUNCTION_TABLE_viii[$115 & 63]($107,$116,$118);
      break;
     } else {
      $111 = ((($56)) + 60|0);
      _TransformOnePixelWithGamutCheck($56,$107,$111);
      break;
     }
    }
   } while(0);
   $$0 = $56;
   STACKTOP = sp;return ($$0|0);
  }
 }
 _cmsPipelineFree($46);
 _cmsSignalError($0,13,29775,$vararg_buffer7);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _AllocEmptyTransform($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0107 = 0, $$0107111 = 0, $$0107112 = 0, $$1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $CachedXFORM$sink = 0, $FloatXFORM$sink = 0, $PrecalculatedXFORM$sink = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $6 = sp + 40|0;
 $7 = sp + 36|0;
 $8 = sp + 32|0;
 $9 = sp + 28|0;
 $10 = sp + 24|0;
 $11 = sp + 20|0;
 $12 = sp + 16|0;
 $13 = sp + 12|0;
 $14 = (__cmsContextGetClientChunk($0,13)|0);
 $15 = (__cmsMallocZero($0,208)|0);
 $16 = ($15|0)==(0|0);
 if ($16) {
  _cmsPipelineFree($1);
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 $17 = ((($15)) + 92|0);
 HEAP32[$17>>2] = $1;
 $18 = ($1|0)==(0|0);
 if (!($18)) {
  $$0107111 = HEAP32[$14>>2]|0;
  $19 = ($$0107111|0)==(0|0);
  L7: do {
   if (!($19)) {
    $20 = ((($15)) + 8|0);
    $21 = ((($15)) + 192|0);
    $22 = ((($15)) + 196|0);
    $$0107112 = $$0107111;
    while(1) {
     $23 = HEAP32[$$0107112>>2]|0;
     $24 = (FUNCTION_TABLE_iiiiiiii[$23 & 3]($20,$21,$22,$17,$3,$4,$5)|0);
     $25 = ($24|0)==(0);
     if (!($25)) {
      break;
     }
     $49 = ((($$0107112)) + 8|0);
     $$0107 = HEAP32[$49>>2]|0;
     $50 = ($$0107|0)==(0|0);
     if ($50) {
      break L7;
     } else {
      $$0107112 = $$0107;
     }
    }
    $26 = ((($15)) + 188|0);
    HEAP32[$26>>2] = $0;
    $27 = HEAP32[$3>>2]|0;
    HEAP32[$15>>2] = $27;
    $28 = HEAP32[$4>>2]|0;
    $29 = ((($15)) + 4|0);
    HEAP32[$29>>2] = $28;
    $30 = HEAP32[$5>>2]|0;
    $31 = ((($15)) + 172|0);
    HEAP32[$31>>2] = $30;
    $32 = HEAP32[$3>>2]|0;
    __cmsGetFormatter($6,$0,$32,0,0);
    $33 = HEAP32[$6>>2]|0;
    $34 = ((($15)) + 12|0);
    HEAP32[$34>>2] = $33;
    $35 = HEAP32[$4>>2]|0;
    __cmsGetFormatter($7,$0,$35,1,0);
    $36 = HEAP32[$7>>2]|0;
    $37 = ((($15)) + 16|0);
    HEAP32[$37>>2] = $36;
    $38 = HEAP32[$3>>2]|0;
    __cmsGetFormatter($8,$0,$38,0,1);
    $39 = HEAP32[$8>>2]|0;
    $40 = ((($15)) + 20|0);
    HEAP32[$40>>2] = $39;
    $41 = HEAP32[$4>>2]|0;
    __cmsGetFormatter($9,$0,$41,1,1);
    $42 = HEAP32[$9>>2]|0;
    $43 = ((($15)) + 24|0);
    HEAP32[$43>>2] = $42;
    $44 = ((($$0107112)) + 4|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = ($45|0)==(0);
    if ($46) {
     $$1 = $15;
     STACKTOP = sp;return ($$1|0);
    }
    $47 = HEAP32[$20>>2]|0;
    $48 = ((($15)) + 200|0);
    HEAP32[$48>>2] = $47;
    HEAP32[$20>>2] = 1;
    $$1 = $15;
    STACKTOP = sp;return ($$1|0);
   }
  } while(0);
  (__cmsOptimizePipeline($0,$17,$2,$3,$4,$5)|0);
 }
 $51 = HEAP32[$3>>2]|0;
 $52 = (__cmsFormatterIsFloat($51)|0);
 $53 = ($52|0)==(0);
 do {
  if ($53) {
   label = 17;
  } else {
   $54 = HEAP32[$4>>2]|0;
   $55 = (__cmsFormatterIsFloat($54)|0);
   $56 = ($55|0)==(0);
   if ($56) {
    label = 17;
   } else {
    $57 = HEAP32[$3>>2]|0;
    __cmsGetFormatter($10,$0,$57,0,1);
    $58 = HEAP32[$10>>2]|0;
    $59 = ((($15)) + 20|0);
    HEAP32[$59>>2] = $58;
    $60 = HEAP32[$4>>2]|0;
    __cmsGetFormatter($11,$0,$60,1,1);
    $61 = HEAP32[$11>>2]|0;
    $62 = ((($15)) + 24|0);
    HEAP32[$62>>2] = $61;
    $63 = HEAP32[$5>>2]|0;
    $64 = $63 | 33554432;
    HEAP32[$5>>2] = $64;
    $65 = HEAP32[$59>>2]|0;
    $66 = ($65|0)==(0|0);
    if (!($66)) {
     $67 = HEAP32[$62>>2]|0;
     $68 = ($67|0)==(0|0);
     if (!($68)) {
      $69 = $63 & 512;
      $70 = ($69|0)!=(0);
      $71 = ((($15)) + 8|0);
      $FloatXFORM$sink = $70 ? 2 : 3;
      HEAP32[$71>>2] = $FloatXFORM$sink;
      break;
     }
    }
    _cmsSignalError($0,8,29825,$vararg_buffer);
    _cmsDeleteTransform($15);
    $$1 = 0;
    STACKTOP = sp;return ($$1|0);
   }
  }
 } while(0);
 do {
  if ((label|0) == 17) {
   $72 = HEAP32[$3>>2]|0;
   $73 = ($72|0)==(0);
   if ($73) {
    $74 = HEAP32[$4>>2]|0;
    $75 = ($74|0)==(0);
    if ($75) {
     $76 = ((($15)) + 16|0);
     HEAP32[$76>>2] = 0;
     $77 = ((($15)) + 12|0);
     HEAP32[$77>>2] = 0;
     label = 23;
    } else {
     label = 20;
    }
   } else {
    label = 20;
   }
   do {
    if ((label|0) == 20) {
     __cmsGetFormatter($12,$0,$72,0,0);
     $78 = HEAP32[$12>>2]|0;
     $79 = ((($15)) + 12|0);
     HEAP32[$79>>2] = $78;
     $80 = HEAP32[$4>>2]|0;
     __cmsGetFormatter($13,$0,$80,1,0);
     $81 = HEAP32[$13>>2]|0;
     $82 = ((($15)) + 16|0);
     HEAP32[$82>>2] = $81;
     $83 = HEAP32[$79>>2]|0;
     $84 = ($83|0)==(0|0);
     $85 = ($81|0)==(0|0);
     $or$cond = $85 | $84;
     if (!($or$cond)) {
      $86 = HEAP32[$15>>2]|0;
      $87 = $86 & 7;
      $88 = ($87|0)==(1);
      if ($88) {
       break;
      } else {
       label = 23;
       break;
      }
     }
     _cmsSignalError($0,8,29825,$vararg_buffer1);
     _cmsDeleteTransform($15);
     $$1 = 0;
     STACKTOP = sp;return ($$1|0);
    }
   } while(0);
   if ((label|0) == 23) {
    $89 = HEAP32[$5>>2]|0;
    $90 = $89 | 33554432;
    HEAP32[$5>>2] = $90;
   }
   $91 = HEAP32[$5>>2]|0;
   $92 = $91 & 512;
   $93 = ($92|0)==(0);
   if (!($93)) {
    $94 = ((($15)) + 8|0);
    HEAP32[$94>>2] = 4;
    break;
   }
   $95 = $91 & 64;
   $96 = ($95|0)==(0);
   $97 = $91 & 4096;
   $98 = ($97|0)!=(0);
   $99 = ((($15)) + 8|0);
   if ($96) {
    $CachedXFORM$sink = $98 ? 7 : 8;
    HEAP32[$99>>2] = $CachedXFORM$sink;
    break;
   } else {
    $PrecalculatedXFORM$sink = $98 ? 5 : 6;
    HEAP32[$99>>2] = $PrecalculatedXFORM$sink;
    break;
   }
  }
 } while(0);
 $100 = HEAP32[$3>>2]|0;
 HEAP32[$15>>2] = $100;
 $101 = HEAP32[$4>>2]|0;
 $102 = ((($15)) + 4|0);
 HEAP32[$102>>2] = $101;
 $103 = HEAP32[$5>>2]|0;
 $104 = ((($15)) + 172|0);
 HEAP32[$104>>2] = $103;
 $105 = ((($15)) + 188|0);
 HEAP32[$105>>2] = $0;
 $106 = ((($15)) + 192|0);
 HEAP32[$106>>2] = 0;
 $$1 = $15;
 STACKTOP = sp;return ($$1|0);
}
function _GetXFormColorSpaces($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$042 = 0, $$043 = 0, $$04551 = 0, $$04650 = 0, $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($0|0)==(0);
 if ($4) {
  $$2 = 0;
  return ($$2|0);
 }
 $5 = HEAP32[$1>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $$2 = 0;
  return ($$2|0);
 }
 $7 = (_cmsGetColorSpace($5)|0);
 HEAP32[$2>>2] = $7;
 $8 = ($0|0)==(1);
 $$04551 = 0;$$04650 = $7;
 while(1) {
  $9 = (($1) + ($$04551<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($$04650|0)!=(1482250784);
  $12 = ($$04650|0)!=(1281450528);
  $13 = $11 & $12;
  $14 = ($10|0)==(0|0);
  if ($14) {
   $$2 = 0;
   label = 16;
   break;
  }
  $15 = (_cmsGetDeviceClass($10)|0);
  $16 = ($15|0)==(1852662636);
  do {
   if ($16) {
    if ($8) {
     $18 = (_cmsGetColorSpace($10)|0);
     $$042 = 826494034;$$043 = $18;
     break;
    } else {
     $17 = (_cmsGetPCS($10)|0);
     $$042 = 826494034;$$043 = $17;
     break;
    }
   } else {
    $19 = ($15|0)==(1818848875);
    $or$cond = $13 | $19;
    if ($or$cond) {
     $20 = (_cmsGetColorSpace($10)|0);
     $21 = (_cmsGetPCS($10)|0);
     $$042 = $20;$$043 = $21;
     break;
    } else {
     $22 = (_cmsGetPCS($10)|0);
     $23 = (_cmsGetColorSpace($10)|0);
     $$042 = $22;$$043 = $23;
     break;
    }
   }
  } while(0);
  $24 = ($$04551|0)==(0);
  if ($24) {
   HEAP32[$2>>2] = $$042;
  }
  $25 = (($$04551) + 1)|0;
  $26 = ($25>>>0)<($0>>>0);
  if ($26) {
   $$04551 = $25;$$04650 = $$043;
  } else {
   break;
  }
 }
 if ((label|0) == 16) {
  return ($$2|0);
 }
 HEAP32[$3>>2] = $$043;
 $$2 = 1;
 return ($$2|0);
}
function _IsProperColorSpace($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$$ = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $narrow = 0, $or$cond = 0, $or$cond16 = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1 >>> 16;
 $3 = $2 & 31;
 $4 = (__cmsLCMScolorSpace($0)|0);
 $5 = ($3|0)==(0);
 $6 = ($3|0)==($4|0);
 $or$cond16 = $5 | $6;
 if ($or$cond16) {
  return 1;
 } else {
  $7 = ($3|0)==(30);
  $8 = ($4|0)==(10);
  $or$cond = $7 & $8;
  $9 = ($3|0)==(10);
  $10 = ($4|0)==(30);
  $or$cond3 = $9 & $10;
  $narrow = $or$cond | $or$cond3;
  $$$ = $narrow&1;
  return ($$$|0);
 }
 return (0)|0;
}
function _SetWhitePoint($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0.0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0|0);
 if ($2) {
  HEAPF64[$0>>3] = 0.96419999999999995;
  $3 = ((($0)) + 8|0);
  HEAPF64[$3>>3] = 1.0;
  $4 = ((($0)) + 16|0);
  HEAPF64[$4>>3] = 0.82489999999999996;
  return;
 } else {
  $5 = +HEAPF64[$1>>3];
  HEAPF64[$0>>3] = $5;
  $6 = ((($1)) + 8|0);
  $7 = +HEAPF64[$6>>3];
  $8 = ((($0)) + 8|0);
  HEAPF64[$8>>3] = $7;
  $9 = ((($1)) + 16|0);
  $10 = +HEAPF64[$9>>3];
  $11 = ((($0)) + 16|0);
  HEAPF64[$11>>3] = $10;
  _NormalizeXYZ($0);
  return;
 }
}
function _TransformOnePixelWithGamutCheck($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$017 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $3 = sp;
 $4 = ((($0)) + 96|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($5)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 FUNCTION_TABLE_viii[$7 & 63]($1,$3,$9);
 $10 = HEAP16[$3>>1]|0;
 $11 = ($10<<16>>16)==(0);
 if ($11) {
  $30 = ((($0)) + 92|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ((($31)) + 16|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = ((($31)) + 12|0);
  $35 = HEAP32[$34>>2]|0;
  FUNCTION_TABLE_viii[$33 & 63]($1,$2,$35);
  STACKTOP = sp;return;
 }
 $12 = ((($0)) + 188|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (__cmsContextGetClientChunk($13,2)|0);
 $15 = ((($0)) + 92|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($16)) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)==(0);
 if ($19) {
  STACKTOP = sp;return;
 }
 $20 = HEAP32[$15>>2]|0;
 $21 = ((($20)) + 8|0);
 $22 = HEAP32[$21>>2]|0;
 $$017 = 0;$24 = 0;
 while(1) {
  $23 = (($14) + ($24<<1)|0);
  $25 = HEAP16[$23>>1]|0;
  $26 = (($2) + ($24<<1)|0);
  HEAP16[$26>>1] = $25;
  $27 = (($$017) + 1)<<16>>16;
  $28 = $27&65535;
  $29 = ($28>>>0)<($22>>>0);
  if ($29) {
   $$017 = $27;$24 = $28;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _NormalizeXYZ($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = ((($0)) + 16|0);
 $3 = +HEAPF64[$0>>3];
 $4 = $3 > 2.0;
 if ($4) {
  $10 = $3;
 } else {
  return;
 }
 while(1) {
  $5 = +HEAPF64[$1>>3];
  $6 = $5 > 2.0;
  if (!($6)) {
   label = 5;
   break;
  }
  $7 = +HEAPF64[$2>>3];
  $8 = $7 > 2.0;
  if (!($8)) {
   label = 5;
   break;
  }
  $9 = $10 / 10.0;
  HEAPF64[$0>>3] = $9;
  $11 = $5 / 10.0;
  HEAPF64[$1>>3] = $11;
  $12 = $7 / 10.0;
  HEAPF64[$2>>3] = $12;
  $13 = $9 > 2.0;
  if ($13) {
   $10 = $9;
  } else {
   label = 5;
   break;
  }
 }
 if ((label|0) == 5) {
  return;
 }
}
function __cmsTransform2toTransformAdaptor($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$03134 = 0, $$03233 = 0, $$035 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __cmsHandleExtraChannels($0,$1,$2,$3,$4,$5);
 $6 = ($4|0)==(0);
 if ($6) {
  return;
 }
 $7 = ((($0)) + 200|0);
 $8 = ((($5)) + 8|0);
 $9 = ((($5)) + 4|0);
 $$03134 = 0;$$03233 = 0;$$035 = 0;
 while(1) {
  $10 = (($1) + ($$03134)|0);
  $11 = (($2) + ($$03233)|0);
  $12 = HEAP32[$7>>2]|0;
  $13 = HEAP32[$8>>2]|0;
  FUNCTION_TABLE_viiiii[$12 & 0]($0,$10,$11,$3,$13);
  $14 = HEAP32[$5>>2]|0;
  $15 = (($14) + ($$03134))|0;
  $16 = HEAP32[$9>>2]|0;
  $17 = (($16) + ($$03233))|0;
  $18 = (($$035) + 1)|0;
  $exitcond = ($18|0)==($4|0);
  if ($exitcond) {
   break;
  } else {
   $$03134 = $15;$$03233 = $17;$$035 = $18;
  }
 }
 return;
}
function _NullFloatXFORM($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$03847 = 0, $$03945 = 0, $$04046 = 0, $$04144 = 0, $$04243 = 0, $$048 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond52 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $6 = sp;
 __cmsHandleExtraChannels($0,$1,$2,$3,$4,$5);
 dest=$6; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $7 = ($4|0)==(0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $8 = ($3|0)==(0);
 $9 = ((($5)) + 4|0);
 $10 = ((($0)) + 20|0);
 $11 = ((($5)) + 8|0);
 $12 = ((($0)) + 24|0);
 $13 = ((($5)) + 12|0);
 $$03847 = 0;$$04046 = 0;$$048 = 0;
 while(1) {
  if (!($8)) {
   $14 = (($2) + ($$048)|0);
   $15 = (($1) + ($$03847)|0);
   $$03945 = 0;$$04144 = $14;$$04243 = $15;
   while(1) {
    $16 = HEAP32[$10>>2]|0;
    $17 = HEAP32[$11>>2]|0;
    $18 = (FUNCTION_TABLE_iiiii[$16 & 255]($0,$6,$$04243,$17)|0);
    $19 = HEAP32[$12>>2]|0;
    $20 = HEAP32[$13>>2]|0;
    $21 = (FUNCTION_TABLE_iiiii[$19 & 255]($0,$6,$$04144,$20)|0);
    $22 = (($$03945) + 1)|0;
    $exitcond = ($22|0)==($3|0);
    if ($exitcond) {
     break;
    } else {
     $$03945 = $22;$$04144 = $21;$$04243 = $18;
    }
   }
  }
  $23 = HEAP32[$5>>2]|0;
  $24 = (($23) + ($$03847))|0;
  $25 = HEAP32[$9>>2]|0;
  $26 = (($25) + ($$048))|0;
  $27 = (($$04046) + 1)|0;
  $exitcond52 = ($27|0)==($4|0);
  if ($exitcond52) {
   break;
  } else {
   $$03847 = $24;$$04046 = $27;$$048 = $26;
  }
 }
 STACKTOP = sp;return;
}
function _FloatXFORM($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$04758 = 0, $$04956 = 0, $$05057 = 0, $$05155 = 0, $$05254 = 0, $$059 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0.0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond63 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0;
 $6 = sp + 72|0;
 $7 = sp + 8|0;
 $8 = sp;
 __cmsHandleExtraChannels($0,$1,$2,$3,$4,$5);
 dest=$6; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 dest=$7; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $9 = ($4|0)==(0);
 if ($9) {
  STACKTOP = sp;return;
 }
 $10 = ($3|0)==(0);
 $11 = ((($5)) + 4|0);
 $12 = ((($0)) + 20|0);
 $13 = ((($5)) + 8|0);
 $14 = ((($0)) + 96|0);
 $15 = ((($0)) + 92|0);
 $16 = ((($0)) + 24|0);
 $17 = ((($5)) + 12|0);
 $18 = ((($0)) + 92|0);
 $19 = ((($7)) + 4|0);
 $20 = ((($7)) + 8|0);
 $21 = ((($7)) + 12|0);
 $22 = ((($7)) + 16|0);
 $23 = ((($7)) + 20|0);
 $24 = ((($7)) + 24|0);
 $25 = ((($7)) + 28|0);
 $26 = ((($7)) + 32|0);
 $27 = ((($7)) + 36|0);
 $28 = ((($7)) + 40|0);
 $29 = ((($7)) + 44|0);
 $30 = ((($7)) + 48|0);
 $31 = ((($7)) + 52|0);
 $32 = ((($7)) + 56|0);
 $33 = ((($7)) + 60|0);
 $$04758 = 0;$$05057 = 0;$$059 = 0;
 while(1) {
  if (!($10)) {
   $34 = (($2) + ($$059)|0);
   $35 = (($1) + ($$04758)|0);
   $$04956 = 0;$$05155 = $34;$$05254 = $35;
   while(1) {
    $36 = HEAP32[$12>>2]|0;
    $37 = HEAP32[$13>>2]|0;
    $38 = (FUNCTION_TABLE_iiiii[$36 & 255]($0,$6,$$05254,$37)|0);
    $39 = HEAP32[$14>>2]|0;
    $40 = ($39|0)==(0|0);
    do {
     if ($40) {
      $44 = HEAP32[$15>>2]|0;
      _cmsPipelineEvalFloat($6,$7,$44);
     } else {
      _cmsPipelineEvalFloat($6,$8,$39);
      $41 = +HEAPF32[$8>>2];
      $42 = $41 > 0.0;
      if ($42) {
       HEAPF32[$7>>2] = -1.0;
       HEAPF32[$19>>2] = -1.0;
       HEAPF32[$20>>2] = -1.0;
       HEAPF32[$21>>2] = -1.0;
       HEAPF32[$22>>2] = -1.0;
       HEAPF32[$23>>2] = -1.0;
       HEAPF32[$24>>2] = -1.0;
       HEAPF32[$25>>2] = -1.0;
       HEAPF32[$26>>2] = -1.0;
       HEAPF32[$27>>2] = -1.0;
       HEAPF32[$28>>2] = -1.0;
       HEAPF32[$29>>2] = -1.0;
       HEAPF32[$30>>2] = -1.0;
       HEAPF32[$31>>2] = -1.0;
       HEAPF32[$32>>2] = -1.0;
       HEAPF32[$33>>2] = -1.0;
       break;
      } else {
       $43 = HEAP32[$18>>2]|0;
       _cmsPipelineEvalFloat($6,$7,$43);
       break;
      }
     }
    } while(0);
    $45 = HEAP32[$16>>2]|0;
    $46 = HEAP32[$17>>2]|0;
    $47 = (FUNCTION_TABLE_iiiii[$45 & 255]($0,$7,$$05155,$46)|0);
    $48 = (($$04956) + 1)|0;
    $exitcond = ($48|0)==($3|0);
    if ($exitcond) {
     break;
    } else {
     $$04956 = $48;$$05155 = $47;$$05254 = $38;
    }
   }
  }
  $49 = HEAP32[$5>>2]|0;
  $50 = (($49) + ($$04758))|0;
  $51 = HEAP32[$11>>2]|0;
  $52 = (($51) + ($$059))|0;
  $53 = (($$05057) + 1)|0;
  $exitcond63 = ($53|0)==($4|0);
  if ($exitcond63) {
   break;
  } else {
   $$04758 = $50;$$05057 = $53;$$059 = $52;
  }
 }
 STACKTOP = sp;return;
}
function _NullXFORM($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$03847 = 0, $$03945 = 0, $$04046 = 0, $$04144 = 0, $$04243 = 0, $$048 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond52 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $6 = sp;
 __cmsHandleExtraChannels($0,$1,$2,$3,$4,$5);
 dest=$6; stop=dest+32|0; do { HEAP16[dest>>1]=0|0; dest=dest+2|0; } while ((dest|0) < (stop|0));
 $7 = ($4|0)==(0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $8 = ($3|0)==(0);
 $9 = ((($5)) + 4|0);
 $10 = ((($0)) + 12|0);
 $11 = ((($5)) + 8|0);
 $12 = ((($0)) + 16|0);
 $13 = ((($5)) + 12|0);
 $$03847 = 0;$$04046 = 0;$$048 = 0;
 while(1) {
  if (!($8)) {
   $14 = (($2) + ($$048)|0);
   $15 = (($1) + ($$03847)|0);
   $$03945 = 0;$$04144 = $14;$$04243 = $15;
   while(1) {
    $16 = HEAP32[$10>>2]|0;
    $17 = HEAP32[$11>>2]|0;
    $18 = (FUNCTION_TABLE_iiiii[$16 & 255]($0,$6,$$04243,$17)|0);
    $19 = HEAP32[$12>>2]|0;
    $20 = HEAP32[$13>>2]|0;
    $21 = (FUNCTION_TABLE_iiiii[$19 & 255]($0,$6,$$04144,$20)|0);
    $22 = (($$03945) + 1)|0;
    $exitcond = ($22|0)==($3|0);
    if ($exitcond) {
     break;
    } else {
     $$03945 = $22;$$04144 = $21;$$04243 = $18;
    }
   }
  }
  $23 = HEAP32[$5>>2]|0;
  $24 = (($23) + ($$03847))|0;
  $25 = HEAP32[$9>>2]|0;
  $26 = (($25) + ($$048))|0;
  $27 = (($$04046) + 1)|0;
  $exitcond52 = ($27|0)==($4|0);
  if ($exitcond52) {
   break;
  } else {
   $$03847 = $24;$$04046 = $27;$$048 = $26;
  }
 }
 STACKTOP = sp;return;
}
function _PrecalculatedXFORMGamutCheck($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$03948 = 0, $$04046 = 0, $$04147 = 0, $$04245 = 0, $$04344 = 0, $$049 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond53 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $6 = sp + 32|0;
 $7 = sp;
 __cmsHandleExtraChannels($0,$1,$2,$3,$4,$5);
 dest=$6; stop=dest+32|0; do { HEAP16[dest>>1]=0|0; dest=dest+2|0; } while ((dest|0) < (stop|0));
 dest=$7; stop=dest+32|0; do { HEAP16[dest>>1]=0|0; dest=dest+2|0; } while ((dest|0) < (stop|0));
 $8 = ($4|0)==(0);
 if ($8) {
  STACKTOP = sp;return;
 }
 $9 = ($3|0)==(0);
 $10 = ((($5)) + 4|0);
 $11 = ((($0)) + 12|0);
 $12 = ((($5)) + 8|0);
 $13 = ((($0)) + 16|0);
 $14 = ((($5)) + 12|0);
 $$03948 = 0;$$04147 = 0;$$049 = 0;
 while(1) {
  if (!($9)) {
   $15 = (($2) + ($$049)|0);
   $16 = (($1) + ($$03948)|0);
   $$04046 = 0;$$04245 = $15;$$04344 = $16;
   while(1) {
    $17 = HEAP32[$11>>2]|0;
    $18 = HEAP32[$12>>2]|0;
    $19 = (FUNCTION_TABLE_iiiii[$17 & 255]($0,$6,$$04344,$18)|0);
    _TransformOnePixelWithGamutCheck($0,$6,$7);
    $20 = HEAP32[$13>>2]|0;
    $21 = HEAP32[$14>>2]|0;
    $22 = (FUNCTION_TABLE_iiiii[$20 & 255]($0,$7,$$04245,$21)|0);
    $23 = (($$04046) + 1)|0;
    $exitcond = ($23|0)==($3|0);
    if ($exitcond) {
     break;
    } else {
     $$04046 = $23;$$04245 = $22;$$04344 = $19;
    }
   }
  }
  $24 = HEAP32[$5>>2]|0;
  $25 = (($24) + ($$03948))|0;
  $26 = HEAP32[$10>>2]|0;
  $27 = (($26) + ($$049))|0;
  $28 = (($$04147) + 1)|0;
  $exitcond53 = ($28|0)==($4|0);
  if ($exitcond53) {
   break;
  } else {
   $$03948 = $25;$$04147 = $28;$$049 = $27;
  }
 }
 STACKTOP = sp;return;
}
function _PrecalculatedXFORM($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$04049 = 0, $$04147 = 0, $$04248 = 0, $$04346 = 0, $$04445 = 0, $$050 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond54 = 0, dest = 0, label = 0, sp = 0;
 var stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $6 = sp + 32|0;
 $7 = sp;
 __cmsHandleExtraChannels($0,$1,$2,$3,$4,$5);
 dest=$6; stop=dest+32|0; do { HEAP16[dest>>1]=0|0; dest=dest+2|0; } while ((dest|0) < (stop|0));
 dest=$7; stop=dest+32|0; do { HEAP16[dest>>1]=0|0; dest=dest+2|0; } while ((dest|0) < (stop|0));
 $8 = ($4|0)==(0);
 if ($8) {
  STACKTOP = sp;return;
 }
 $9 = ($3|0)==(0);
 $10 = ((($5)) + 4|0);
 $11 = ((($0)) + 12|0);
 $12 = ((($5)) + 8|0);
 $13 = ((($0)) + 92|0);
 $14 = ((($0)) + 16|0);
 $15 = ((($5)) + 12|0);
 $$04049 = 0;$$04248 = 0;$$050 = 0;
 while(1) {
  if (!($9)) {
   $16 = (($2) + ($$050)|0);
   $17 = (($1) + ($$04049)|0);
   $$04147 = 0;$$04346 = $16;$$04445 = $17;
   while(1) {
    $18 = HEAP32[$11>>2]|0;
    $19 = HEAP32[$12>>2]|0;
    $20 = (FUNCTION_TABLE_iiiii[$18 & 255]($0,$6,$$04445,$19)|0);
    $21 = HEAP32[$13>>2]|0;
    $22 = ((($21)) + 16|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ((($21)) + 12|0);
    $25 = HEAP32[$24>>2]|0;
    FUNCTION_TABLE_viii[$23 & 63]($6,$7,$25);
    $26 = HEAP32[$14>>2]|0;
    $27 = HEAP32[$15>>2]|0;
    $28 = (FUNCTION_TABLE_iiiii[$26 & 255]($0,$7,$$04346,$27)|0);
    $29 = (($$04147) + 1)|0;
    $exitcond = ($29|0)==($3|0);
    if ($exitcond) {
     break;
    } else {
     $$04147 = $29;$$04346 = $28;$$04445 = $20;
    }
   }
  }
  $30 = HEAP32[$5>>2]|0;
  $31 = (($30) + ($$04049))|0;
  $32 = HEAP32[$10>>2]|0;
  $33 = (($32) + ($$050))|0;
  $34 = (($$04248) + 1)|0;
  $exitcond54 = ($34|0)==($4|0);
  if ($exitcond54) {
   break;
  } else {
   $$04049 = $31;$$04248 = $34;$$050 = $33;
  }
 }
 STACKTOP = sp;return;
}
function _CachedXFORMGamutCheck($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$04049 = 0, $$04147 = 0, $$04248 = 0, $$04346 = 0, $$04445 = 0, $$050 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond54 = 0, dest = 0, label = 0, sp = 0;
 var src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $6 = sp + 96|0;
 $7 = sp + 64|0;
 $8 = sp;
 __cmsHandleExtraChannels($0,$1,$2,$3,$4,$5);
 dest=$6; stop=dest+32|0; do { HEAP16[dest>>1]=0|0; dest=dest+2|0; } while ((dest|0) < (stop|0));
 dest=$7; stop=dest+32|0; do { HEAP16[dest>>1]=0|0; dest=dest+2|0; } while ((dest|0) < (stop|0));
 $9 = ((($0)) + 28|0);
 dest=$8; src=$9; stop=dest+64|0; do { HEAP16[dest>>1]=HEAP16[src>>1]|0; dest=dest+2|0; src=src+2|0; } while ((dest|0) < (stop|0));
 $10 = ($4|0)==(0);
 if ($10) {
  STACKTOP = sp;return;
 }
 $11 = ($3|0)==(0);
 $12 = ((($5)) + 4|0);
 $13 = ((($0)) + 12|0);
 $14 = ((($5)) + 8|0);
 $15 = ((($8)) + 32|0);
 $16 = ((($0)) + 16|0);
 $17 = ((($5)) + 12|0);
 $18 = ((($8)) + 32|0);
 $$04049 = 0;$$04248 = 0;$$050 = 0;
 while(1) {
  if (!($11)) {
   $19 = (($2) + ($$050)|0);
   $20 = (($1) + ($$04049)|0);
   $$04147 = 0;$$04346 = $19;$$04445 = $20;
   while(1) {
    $21 = HEAP32[$13>>2]|0;
    $22 = HEAP32[$14>>2]|0;
    $23 = (FUNCTION_TABLE_iiiii[$21 & 255]($0,$6,$$04445,$22)|0);
    $24 = (_memcmp($6,$8,32)|0);
    $25 = ($24|0)==(0);
    if ($25) {
     dest=$7; src=$15; stop=dest+32|0; do { HEAP16[dest>>1]=HEAP16[src>>1]|0; dest=dest+2|0; src=src+2|0; } while ((dest|0) < (stop|0));
    } else {
     _TransformOnePixelWithGamutCheck($0,$6,$7);
     dest=$8; src=$6; stop=dest+32|0; do { HEAP16[dest>>1]=HEAP16[src>>1]|0; dest=dest+2|0; src=src+2|0; } while ((dest|0) < (stop|0));
     dest=$18; src=$7; stop=dest+32|0; do { HEAP16[dest>>1]=HEAP16[src>>1]|0; dest=dest+2|0; src=src+2|0; } while ((dest|0) < (stop|0));
    }
    $26 = HEAP32[$16>>2]|0;
    $27 = HEAP32[$17>>2]|0;
    $28 = (FUNCTION_TABLE_iiiii[$26 & 255]($0,$7,$$04346,$27)|0);
    $29 = (($$04147) + 1)|0;
    $exitcond = ($29|0)==($3|0);
    if ($exitcond) {
     break;
    } else {
     $$04147 = $29;$$04346 = $28;$$04445 = $23;
    }
   }
  }
  $30 = HEAP32[$5>>2]|0;
  $31 = (($30) + ($$04049))|0;
  $32 = HEAP32[$12>>2]|0;
  $33 = (($32) + ($$050))|0;
  $34 = (($$04248) + 1)|0;
  $exitcond54 = ($34|0)==($4|0);
  if ($exitcond54) {
   break;
  } else {
   $$04049 = $31;$$04248 = $34;$$050 = $33;
  }
 }
 STACKTOP = sp;return;
}
function _CachedXFORM($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$04150 = 0, $$04248 = 0, $$04349 = 0, $$04447 = 0, $$04546 = 0, $$051 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $exitcond = 0, $exitcond55 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $6 = sp + 96|0;
 $7 = sp + 64|0;
 $8 = sp;
 __cmsHandleExtraChannels($0,$1,$2,$3,$4,$5);
 dest=$6; stop=dest+32|0; do { HEAP16[dest>>1]=0|0; dest=dest+2|0; } while ((dest|0) < (stop|0));
 dest=$7; stop=dest+32|0; do { HEAP16[dest>>1]=0|0; dest=dest+2|0; } while ((dest|0) < (stop|0));
 $9 = ((($0)) + 28|0);
 dest=$8; src=$9; stop=dest+64|0; do { HEAP16[dest>>1]=HEAP16[src>>1]|0; dest=dest+2|0; src=src+2|0; } while ((dest|0) < (stop|0));
 $10 = ($4|0)==(0);
 if ($10) {
  STACKTOP = sp;return;
 }
 $11 = ($3|0)==(0);
 $12 = ((($5)) + 4|0);
 $13 = ((($0)) + 12|0);
 $14 = ((($5)) + 8|0);
 $15 = ((($8)) + 32|0);
 $16 = ((($0)) + 16|0);
 $17 = ((($5)) + 12|0);
 $18 = ((($0)) + 92|0);
 $19 = ((($8)) + 32|0);
 $$04150 = 0;$$04349 = 0;$$051 = 0;
 while(1) {
  if (!($11)) {
   $20 = (($2) + ($$051)|0);
   $21 = (($1) + ($$04150)|0);
   $$04248 = 0;$$04447 = $20;$$04546 = $21;
   while(1) {
    $22 = HEAP32[$13>>2]|0;
    $23 = HEAP32[$14>>2]|0;
    $24 = (FUNCTION_TABLE_iiiii[$22 & 255]($0,$6,$$04546,$23)|0);
    $25 = (_memcmp($6,$8,32)|0);
    $26 = ($25|0)==(0);
    if ($26) {
     dest=$7; src=$15; stop=dest+32|0; do { HEAP16[dest>>1]=HEAP16[src>>1]|0; dest=dest+2|0; src=src+2|0; } while ((dest|0) < (stop|0));
    } else {
     $27 = HEAP32[$18>>2]|0;
     $28 = ((($27)) + 16|0);
     $29 = HEAP32[$28>>2]|0;
     $30 = ((($27)) + 12|0);
     $31 = HEAP32[$30>>2]|0;
     FUNCTION_TABLE_viii[$29 & 63]($6,$7,$31);
     dest=$8; src=$6; stop=dest+32|0; do { HEAP16[dest>>1]=HEAP16[src>>1]|0; dest=dest+2|0; src=src+2|0; } while ((dest|0) < (stop|0));
     dest=$19; src=$7; stop=dest+32|0; do { HEAP16[dest>>1]=HEAP16[src>>1]|0; dest=dest+2|0; src=src+2|0; } while ((dest|0) < (stop|0));
    }
    $32 = HEAP32[$16>>2]|0;
    $33 = HEAP32[$17>>2]|0;
    $34 = (FUNCTION_TABLE_iiiii[$32 & 255]($0,$7,$$04447,$33)|0);
    $35 = (($$04248) + 1)|0;
    $exitcond = ($35|0)==($3|0);
    if ($exitcond) {
     break;
    } else {
     $$04248 = $35;$$04447 = $34;$$04546 = $24;
    }
   }
  }
  $36 = HEAP32[$5>>2]|0;
  $37 = (($36) + ($$04150))|0;
  $38 = HEAP32[$12>>2]|0;
  $39 = (($38) + ($$051))|0;
  $40 = (($$04349) + 1)|0;
  $exitcond55 = ($40|0)==($4|0);
  if ($exitcond55) {
   break;
  } else {
   $$04150 = $37;$$04349 = $40;$$051 = $39;
  }
 }
 STACKTOP = sp;return;
}
function _cmsCreateMultiprofileTransformTHR($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$021 = 0, $$022 = 0, $$lobit = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4112|0;
 $vararg_buffer = sp + 2048|0;
 $7 = sp + 3080|0;
 $8 = sp + 2056|0;
 $9 = sp;
 $10 = (($2) + -1)|0;
 $11 = ($10>>>0)>(254);
 if ($11) {
  HEAP32[$vararg_buffer>>2] = $2;
  _cmsSignalError($0,2,29851,$vararg_buffer);
  $$021 = 0;
  STACKTOP = sp;return ($$021|0);
 }
 $12 = $6 >>> 13;
 $$lobit = $12 & 1;
 $$022 = 0;
 while(1) {
  $13 = (($7) + ($$022<<2)|0);
  HEAP32[$13>>2] = $$lobit;
  $14 = (($8) + ($$022<<2)|0);
  HEAP32[$14>>2] = $5;
  $15 = (+_cmsSetAdaptationStateTHR($0,-1.0));
  $16 = (($9) + ($$022<<3)|0);
  HEAPF64[$16>>3] = $15;
  $17 = (($$022) + 1)|0;
  $exitcond = ($17|0)==($2|0);
  if ($exitcond) {
   break;
  } else {
   $$022 = $17;
  }
 }
 $18 = (_cmsCreateExtendedTransform($0,$2,$1,$7,$8,$9,0,0,$3,$4,$6)|0);
 $$021 = $18;
 STACKTOP = sp;return ($$021|0);
}
function _cmsCreateTransformTHR($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $11 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $7 = sp;
 HEAP32[$7>>2] = $1;
 $8 = ((($7)) + 4|0);
 HEAP32[$8>>2] = $3;
 $9 = ($3|0)==(0|0);
 $10 = $9 ? 1 : 2;
 $11 = (_cmsCreateMultiprofileTransformTHR($0,$7,$10,$2,$4,$5,$6)|0);
 STACKTOP = sp;return ($11|0);
}
function _cmsCreateTransform($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = (_cmsGetProfileContextID($0)|0);
 $7 = (_cmsCreateTransformTHR($6,$0,$1,$2,$3,$4,$5)|0);
 return ($7|0);
}
function _cmsGetTransformInputFormat($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
 } else {
  $2 = HEAP32[$0>>2]|0;
  $$0 = $2;
 }
 return ($$0|0);
}
function _cmsGetTransformOutputFormat($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
 } else {
  $2 = ((($0)) + 4|0);
  $3 = HEAP32[$2>>2]|0;
  $$0 = $3;
 }
 return ($$0|0);
}
function _emscripten_get_global_libc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (32404|0);
}
function ___stdio_close($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $1 = ((($0)) + 60|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (_dummy($2)|0);
 HEAP32[$vararg_buffer>>2] = $3;
 $4 = (___syscall6(6,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 STACKTOP = sp;return ($5|0);
}
function ___stdio_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$04756 = 0, $$04855 = 0, $$04954 = 0, $$051 = 0, $$1 = 0, $$150 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0;
 var $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $3 = sp + 32|0;
 $4 = ((($0)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $5;
 $6 = ((($3)) + 4|0);
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) - ($5))|0;
 HEAP32[$6>>2] = $9;
 $10 = ((($3)) + 8|0);
 HEAP32[$10>>2] = $1;
 $11 = ((($3)) + 12|0);
 HEAP32[$11>>2] = $2;
 $12 = (($9) + ($2))|0;
 $13 = ((($0)) + 60|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $3;
 HEAP32[$vararg_buffer>>2] = $14;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $15;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 2;
 $16 = (___syscall146(146,($vararg_buffer|0))|0);
 $17 = (___syscall_ret($16)|0);
 $18 = ($12|0)==($17|0);
 L1: do {
  if ($18) {
   label = 3;
  } else {
   $$04756 = 2;$$04855 = $12;$$04954 = $3;$26 = $17;
   while(1) {
    $25 = ($26|0)<(0);
    if ($25) {
     break;
    }
    $34 = (($$04855) - ($26))|0;
    $35 = ((($$04954)) + 4|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ($26>>>0)>($36>>>0);
    $38 = ((($$04954)) + 8|0);
    $$150 = $37 ? $38 : $$04954;
    $39 = $37 << 31 >> 31;
    $$1 = (($39) + ($$04756))|0;
    $40 = $37 ? $36 : 0;
    $$0 = (($26) - ($40))|0;
    $41 = HEAP32[$$150>>2]|0;
    $42 = (($41) + ($$0)|0);
    HEAP32[$$150>>2] = $42;
    $43 = ((($$150)) + 4|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = (($44) - ($$0))|0;
    HEAP32[$43>>2] = $45;
    $46 = HEAP32[$13>>2]|0;
    $47 = $$150;
    HEAP32[$vararg_buffer3>>2] = $46;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $47;
    $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
    HEAP32[$vararg_ptr7>>2] = $$1;
    $48 = (___syscall146(146,($vararg_buffer3|0))|0);
    $49 = (___syscall_ret($48)|0);
    $50 = ($34|0)==($49|0);
    if ($50) {
     label = 3;
     break L1;
    } else {
     $$04756 = $$1;$$04855 = $34;$$04954 = $$150;$26 = $49;
    }
   }
   $27 = ((($0)) + 16|0);
   HEAP32[$27>>2] = 0;
   HEAP32[$4>>2] = 0;
   HEAP32[$7>>2] = 0;
   $28 = HEAP32[$0>>2]|0;
   $29 = $28 | 32;
   HEAP32[$0>>2] = $29;
   $30 = ($$04756|0)==(2);
   if ($30) {
    $$051 = 0;
   } else {
    $31 = ((($$04954)) + 4|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = (($2) - ($32))|0;
    $$051 = $33;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $19 = ((($0)) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22)|0);
  $24 = ((($0)) + 16|0);
  HEAP32[$24>>2] = $23;
  HEAP32[$4>>2] = $20;
  HEAP32[$7>>2] = $20;
  $$051 = $2;
 }
 STACKTOP = sp;return ($$051|0);
}
function ___stdio_seek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer = sp;
 $3 = sp + 20|0;
 $4 = ((($0)) + 60|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $3;
 HEAP32[$vararg_buffer>>2] = $5;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $1;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $6;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $2;
 $7 = (___syscall140(140,($vararg_buffer|0))|0);
 $8 = (___syscall_ret($7)|0);
 $9 = ($8|0)<(0);
 if ($9) {
  HEAP32[$3>>2] = -1;
  $10 = -1;
 } else {
  $$pre = HEAP32[$3>>2]|0;
  $10 = $$pre;
 }
 STACKTOP = sp;return ($10|0);
}
function ___syscall_ret($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0>>>0)>(4294963200);
 if ($1) {
  $2 = (0 - ($0))|0;
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = $2;
  $$0 = -1;
 } else {
  $$0 = $0;
 }
 return ($$0|0);
}
function ___errno_location() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___pthread_self_85()|0);
 $1 = ((($0)) + 64|0);
 return ($1|0);
}
function ___pthread_self_85() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function _pthread_self() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (22688|0);
}
function _dummy($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function ___stdio_read($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer = sp;
 $3 = sp + 16|0;
 HEAP32[$3>>2] = $1;
 $4 = ((($3)) + 4|0);
 $5 = ((($0)) + 48|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0);
 $8 = $7&1;
 $9 = (($2) - ($8))|0;
 HEAP32[$4>>2] = $9;
 $10 = ((($3)) + 8|0);
 $11 = ((($0)) + 44|0);
 $12 = HEAP32[$11>>2]|0;
 HEAP32[$10>>2] = $12;
 $13 = ((($3)) + 12|0);
 HEAP32[$13>>2] = $6;
 $14 = ((($0)) + 60|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $3;
 HEAP32[$vararg_buffer>>2] = $15;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $16;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 2;
 $17 = (___syscall145(145,($vararg_buffer|0))|0);
 $18 = (___syscall_ret($17)|0);
 $19 = ($18|0)<(1);
 if ($19) {
  $20 = $18 & 48;
  $21 = $20 ^ 16;
  $22 = HEAP32[$0>>2]|0;
  $23 = $22 | $21;
  HEAP32[$0>>2] = $23;
  $$0 = $18;
 } else {
  $24 = HEAP32[$4>>2]|0;
  $25 = ($18>>>0)>($24>>>0);
  if ($25) {
   $26 = (($18) - ($24))|0;
   $27 = HEAP32[$11>>2]|0;
   $28 = ((($0)) + 4|0);
   HEAP32[$28>>2] = $27;
   $29 = (($27) + ($26)|0);
   $30 = ((($0)) + 8|0);
   HEAP32[$30>>2] = $29;
   $31 = HEAP32[$5>>2]|0;
   $32 = ($31|0)==(0);
   if ($32) {
    $$0 = $2;
   } else {
    $33 = ((($27)) + 1|0);
    HEAP32[$28>>2] = $33;
    $34 = HEAP8[$27>>0]|0;
    $35 = (($2) + -1)|0;
    $36 = (($1) + ($35)|0);
    HEAP8[$36>>0] = $34;
    $$0 = $2;
   }
  } else {
   $$0 = $18;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___stdout_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer = sp;
 $3 = sp + 16|0;
 $4 = ((($0)) + 36|0);
 HEAP32[$4>>2] = 46;
 $5 = HEAP32[$0>>2]|0;
 $6 = $5 & 64;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = ((($0)) + 60|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $3;
  HEAP32[$vararg_buffer>>2] = $9;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 21523;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $10;
  $11 = (___syscall54(54,($vararg_buffer|0))|0);
  $12 = ($11|0)==(0);
  if (!($12)) {
   $13 = ((($0)) + 75|0);
   HEAP8[$13>>0] = -1;
  }
 }
 $14 = (___stdio_write($0,$1,$2)|0);
 STACKTOP = sp;return ($14|0);
}
function _strcmp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$011 = 0, $$0710 = 0, $$lcssa = 0, $$lcssa8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$0>>0]|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = ($2<<24>>24)!=($3<<24>>24);
 $5 = ($2<<24>>24)==(0);
 $or$cond9 = $5 | $4;
 if ($or$cond9) {
  $$lcssa = $3;$$lcssa8 = $2;
 } else {
  $$011 = $1;$$0710 = $0;
  while(1) {
   $6 = ((($$0710)) + 1|0);
   $7 = ((($$011)) + 1|0);
   $8 = HEAP8[$6>>0]|0;
   $9 = HEAP8[$7>>0]|0;
   $10 = ($8<<24>>24)!=($9<<24>>24);
   $11 = ($8<<24>>24)==(0);
   $or$cond = $11 | $10;
   if ($or$cond) {
    $$lcssa = $9;$$lcssa8 = $8;
    break;
   } else {
    $$011 = $7;$$0710 = $6;
   }
  }
 }
 $12 = $$lcssa8&255;
 $13 = $$lcssa&255;
 $14 = (($12) - ($13))|0;
 return ($14|0);
}
function _strlen($0) {
 $0 = $0|0;
 var $$0 = 0, $$015$lcssa = 0, $$01519 = 0, $$1$lcssa = 0, $$pn = 0, $$pre = 0, $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0;
 $2 = $1 & 3;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $$015$lcssa = $0;
   label = 4;
  } else {
   $$01519 = $0;$23 = $1;
   while(1) {
    $4 = HEAP8[$$01519>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $$sink = $23;
     break L1;
    }
    $6 = ((($$01519)) + 1|0);
    $7 = $6;
    $8 = $7 & 3;
    $9 = ($8|0)==(0);
    if ($9) {
     $$015$lcssa = $6;
     label = 4;
     break;
    } else {
     $$01519 = $6;$23 = $7;
    }
   }
  }
 } while(0);
 if ((label|0) == 4) {
  $$0 = $$015$lcssa;
  while(1) {
   $10 = HEAP32[$$0>>2]|0;
   $11 = (($10) + -16843009)|0;
   $12 = $10 & -2139062144;
   $13 = $12 ^ -2139062144;
   $14 = $13 & $11;
   $15 = ($14|0)==(0);
   $16 = ((($$0)) + 4|0);
   if ($15) {
    $$0 = $16;
   } else {
    break;
   }
  }
  $17 = $10&255;
  $18 = ($17<<24>>24)==(0);
  if ($18) {
   $$1$lcssa = $$0;
  } else {
   $$pn = $$0;
   while(1) {
    $19 = ((($$pn)) + 1|0);
    $$pre = HEAP8[$19>>0]|0;
    $20 = ($$pre<<24>>24)==(0);
    if ($20) {
     $$1$lcssa = $19;
     break;
    } else {
     $$pn = $19;
    }
   }
  }
  $21 = $$1$lcssa;
  $$sink = $21;
 }
 $22 = (($$sink) - ($1))|0;
 return ($22|0);
}
function _fwrite($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = Math_imul($2, $1)|0;
 $5 = ($1|0)==(0);
 $$ = $5 ? 0 : $2;
 $6 = ((($3)) + 76|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)>(-1);
 if ($8) {
  $10 = (___lockfile($3)|0);
  $phitmp = ($10|0)==(0);
  $11 = (___fwritex($0,$4,$3)|0);
  if ($phitmp) {
   $13 = $11;
  } else {
   ___unlockfile($3);
   $13 = $11;
  }
 } else {
  $9 = (___fwritex($0,$4,$3)|0);
  $13 = $9;
 }
 $12 = ($13|0)==($4|0);
 if ($12) {
  $15 = $$;
 } else {
  $14 = (($13>>>0) / ($1>>>0))&-1;
  $15 = $14;
 }
 return ($15|0);
}
function ___unlist_locked_file($0) {
 $0 = $0|0;
 var $$pre = 0, $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 68|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if (!($3)) {
  $4 = ((($0)) + 116|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0|0);
  $$pre = ((($0)) + 112|0);
  if (!($6)) {
   $7 = HEAP32[$$pre>>2]|0;
   $8 = ((($5)) + 112|0);
   HEAP32[$8>>2] = $7;
  }
  $9 = HEAP32[$$pre>>2]|0;
  $10 = ($9|0)==(0|0);
  if ($10) {
   $12 = (___pthread_self_700()|0);
   $13 = ((($12)) + 232|0);
   $$sink = $13;
  } else {
   $11 = ((($9)) + 116|0);
   $$sink = $11;
  }
  HEAP32[$$sink>>2] = $5;
 }
 return;
}
function ___unlockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function ___pthread_self_700() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function ___lockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function ___towrite($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = HEAP32[$0>>2]|0;
 $8 = $7 & 8;
 $9 = ($8|0)==(0);
 if ($9) {
  $11 = ((($0)) + 8|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($0)) + 4|0);
  HEAP32[$12>>2] = 0;
  $13 = ((($0)) + 44|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($0)) + 28|0);
  HEAP32[$15>>2] = $14;
  $16 = ((($0)) + 20|0);
  HEAP32[$16>>2] = $14;
  $17 = ((($0)) + 48|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($14) + ($18)|0);
  $20 = ((($0)) + 16|0);
  HEAP32[$20>>2] = $19;
  $$0 = 0;
 } else {
  $10 = $7 | 32;
  HEAP32[$0>>2] = $10;
  $$0 = -1;
 }
 return ($$0|0);
}
function ___fwritex($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$038 = 0, $$042 = 0, $$1 = 0, $$139 = 0, $$141 = 0, $$143 = 0, $$pre = 0, $$pre47 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $7 = (___towrite($2)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$pre = HEAP32[$3>>2]|0;
   $12 = $$pre;
   label = 5;
  } else {
   $$1 = 0;
  }
 } else {
  $6 = $4;
  $12 = $6;
  label = 5;
 }
 L5: do {
  if ((label|0) == 5) {
   $9 = ((($2)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($12) - ($10))|0;
   $13 = ($11>>>0)<($1>>>0);
   $14 = $10;
   if ($13) {
    $15 = ((($2)) + 36|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (FUNCTION_TABLE_iiii[$16 & 63]($2,$0,$1)|0);
    $$1 = $17;
    break;
   }
   $18 = ((($2)) + 75|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = ($19<<24>>24)>(-1);
   L10: do {
    if ($20) {
     $$038 = $1;
     while(1) {
      $21 = ($$038|0)==(0);
      if ($21) {
       $$139 = 0;$$141 = $0;$$143 = $1;$31 = $14;
       break L10;
      }
      $22 = (($$038) + -1)|0;
      $23 = (($0) + ($22)|0);
      $24 = HEAP8[$23>>0]|0;
      $25 = ($24<<24>>24)==(10);
      if ($25) {
       break;
      } else {
       $$038 = $22;
      }
     }
     $26 = ((($2)) + 36|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = (FUNCTION_TABLE_iiii[$27 & 63]($2,$0,$$038)|0);
     $29 = ($28>>>0)<($$038>>>0);
     if ($29) {
      $$1 = $28;
      break L5;
     }
     $30 = (($0) + ($$038)|0);
     $$042 = (($1) - ($$038))|0;
     $$pre47 = HEAP32[$9>>2]|0;
     $$139 = $$038;$$141 = $30;$$143 = $$042;$31 = $$pre47;
    } else {
     $$139 = 0;$$141 = $0;$$143 = $1;$31 = $14;
    }
   } while(0);
   _memcpy(($31|0),($$141|0),($$143|0))|0;
   $32 = HEAP32[$9>>2]|0;
   $33 = (($32) + ($$143)|0);
   HEAP32[$9>>2] = $33;
   $34 = (($$139) + ($$143))|0;
   $$1 = $34;
  }
 } while(0);
 return ($$1|0);
}
function ___lctrans_impl($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = HEAP32[$1>>2]|0;
  $4 = ((($1)) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (___mo_lookup($3,$5,$0)|0);
  $$0 = $6;
 }
 $7 = ($$0|0)!=(0|0);
 $8 = $7 ? $$0 : $0;
 return ($8|0);
}
function ___mo_lookup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$090 = 0, $$094 = 0, $$191 = 0, $$195 = 0, $$4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond102 = 0, $or$cond104 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 1794895138)|0;
 $5 = ((($0)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_swapc($6,$4)|0);
 $8 = ((($0)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_swapc($9,$4)|0);
 $11 = ((($0)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_swapc($12,$4)|0);
 $14 = $1 >>> 2;
 $15 = ($7>>>0)<($14>>>0);
 L1: do {
  if ($15) {
   $16 = $7 << 2;
   $17 = (($1) - ($16))|0;
   $18 = ($10>>>0)<($17>>>0);
   $19 = ($13>>>0)<($17>>>0);
   $or$cond = $18 & $19;
   if ($or$cond) {
    $20 = $13 | $10;
    $21 = $20 & 3;
    $22 = ($21|0)==(0);
    if ($22) {
     $23 = $10 >>> 2;
     $24 = $13 >>> 2;
     $$090 = 0;$$094 = $7;
     while(1) {
      $25 = $$094 >>> 1;
      $26 = (($$090) + ($25))|0;
      $27 = $26 << 1;
      $28 = (($27) + ($23))|0;
      $29 = (($0) + ($28<<2)|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (_swapc($30,$4)|0);
      $32 = (($28) + 1)|0;
      $33 = (($0) + ($32<<2)|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = (_swapc($34,$4)|0);
      $36 = ($35>>>0)<($1>>>0);
      $37 = (($1) - ($35))|0;
      $38 = ($31>>>0)<($37>>>0);
      $or$cond102 = $36 & $38;
      if (!($or$cond102)) {
       $$4 = 0;
       break L1;
      }
      $39 = (($35) + ($31))|0;
      $40 = (($0) + ($39)|0);
      $41 = HEAP8[$40>>0]|0;
      $42 = ($41<<24>>24)==(0);
      if (!($42)) {
       $$4 = 0;
       break L1;
      }
      $43 = (($0) + ($35)|0);
      $44 = (_strcmp($2,$43)|0);
      $45 = ($44|0)==(0);
      if ($45) {
       break;
      }
      $62 = ($$094|0)==(1);
      $63 = ($44|0)<(0);
      $64 = (($$094) - ($25))|0;
      $$195 = $63 ? $25 : $64;
      $$191 = $63 ? $$090 : $26;
      if ($62) {
       $$4 = 0;
       break L1;
      } else {
       $$090 = $$191;$$094 = $$195;
      }
     }
     $46 = (($27) + ($24))|0;
     $47 = (($0) + ($46<<2)|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = (_swapc($48,$4)|0);
     $50 = (($46) + 1)|0;
     $51 = (($0) + ($50<<2)|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = (_swapc($52,$4)|0);
     $54 = ($53>>>0)<($1>>>0);
     $55 = (($1) - ($53))|0;
     $56 = ($49>>>0)<($55>>>0);
     $or$cond104 = $54 & $56;
     if ($or$cond104) {
      $57 = (($0) + ($53)|0);
      $58 = (($53) + ($49))|0;
      $59 = (($0) + ($58)|0);
      $60 = HEAP8[$59>>0]|0;
      $61 = ($60<<24>>24)==(0);
      $$ = $61 ? $57 : 0;
      $$4 = $$;
     } else {
      $$4 = 0;
     }
    } else {
     $$4 = 0;
    }
   } else {
    $$4 = 0;
   }
  } else {
   $$4 = 0;
  }
 } while(0);
 return ($$4|0);
}
function _swapc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0);
 $3 = (_llvm_bswap_i32(($0|0))|0);
 $$ = $2 ? $0 : $3;
 return ($$|0);
}
function _fopen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $memchr = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0;
 var $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $memchr = (_memchr(29904,$3,4)|0);
 $4 = ($memchr|0)==(0|0);
 if ($4) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 22;
  $$0 = 0;
 } else {
  $6 = (___fmodeflags($1)|0);
  $7 = $0;
  $8 = $6 | 32768;
  HEAP32[$vararg_buffer>>2] = $7;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $8;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 438;
  $9 = (___syscall5(5,($vararg_buffer|0))|0);
  $10 = (___syscall_ret($9)|0);
  $11 = ($10|0)<(0);
  if ($11) {
   $$0 = 0;
  } else {
   $12 = $6 & 524288;
   $13 = ($12|0)==(0);
   if (!($13)) {
    HEAP32[$vararg_buffer3>>2] = $10;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = 2;
    $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
    HEAP32[$vararg_ptr7>>2] = 1;
    (___syscall221(221,($vararg_buffer3|0))|0);
   }
   $14 = (___fdopen($10,$1)|0);
   $15 = ($14|0)==(0|0);
   if ($15) {
    HEAP32[$vararg_buffer8>>2] = $10;
    (___syscall6(6,($vararg_buffer8|0))|0);
    $$0 = 0;
   } else {
    $$0 = $14;
   }
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _memchr($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$035$lcssa = 0, $$035$lcssa65 = 0, $$03555 = 0, $$036$lcssa = 0, $$036$lcssa64 = 0, $$03654 = 0, $$046 = 0, $$137$lcssa = 0, $$13745 = 0, $$140 = 0, $$2 = 0, $$23839 = 0, $$3 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond53 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1 & 255;
 $4 = $0;
 $5 = $4 & 3;
 $6 = ($5|0)!=(0);
 $7 = ($2|0)!=(0);
 $or$cond53 = $7 & $6;
 L1: do {
  if ($or$cond53) {
   $8 = $1&255;
   $$03555 = $0;$$03654 = $2;
   while(1) {
    $9 = HEAP8[$$03555>>0]|0;
    $10 = ($9<<24>>24)==($8<<24>>24);
    if ($10) {
     $$035$lcssa65 = $$03555;$$036$lcssa64 = $$03654;
     label = 6;
     break L1;
    }
    $11 = ((($$03555)) + 1|0);
    $12 = (($$03654) + -1)|0;
    $13 = $11;
    $14 = $13 & 3;
    $15 = ($14|0)!=(0);
    $16 = ($12|0)!=(0);
    $or$cond = $16 & $15;
    if ($or$cond) {
     $$03555 = $11;$$03654 = $12;
    } else {
     $$035$lcssa = $11;$$036$lcssa = $12;$$lcssa = $16;
     label = 5;
     break;
    }
   }
  } else {
   $$035$lcssa = $0;$$036$lcssa = $2;$$lcssa = $7;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$035$lcssa65 = $$035$lcssa;$$036$lcssa64 = $$036$lcssa;
   label = 6;
  } else {
   $$2 = $$035$lcssa;$$3 = 0;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $17 = HEAP8[$$035$lcssa65>>0]|0;
   $18 = $1&255;
   $19 = ($17<<24>>24)==($18<<24>>24);
   if ($19) {
    $$2 = $$035$lcssa65;$$3 = $$036$lcssa64;
   } else {
    $20 = Math_imul($3, 16843009)|0;
    $21 = ($$036$lcssa64>>>0)>(3);
    L11: do {
     if ($21) {
      $$046 = $$035$lcssa65;$$13745 = $$036$lcssa64;
      while(1) {
       $22 = HEAP32[$$046>>2]|0;
       $23 = $22 ^ $20;
       $24 = (($23) + -16843009)|0;
       $25 = $23 & -2139062144;
       $26 = $25 ^ -2139062144;
       $27 = $26 & $24;
       $28 = ($27|0)==(0);
       if (!($28)) {
        break;
       }
       $29 = ((($$046)) + 4|0);
       $30 = (($$13745) + -4)|0;
       $31 = ($30>>>0)>(3);
       if ($31) {
        $$046 = $29;$$13745 = $30;
       } else {
        $$0$lcssa = $29;$$137$lcssa = $30;
        label = 11;
        break L11;
       }
      }
      $$140 = $$046;$$23839 = $$13745;
     } else {
      $$0$lcssa = $$035$lcssa65;$$137$lcssa = $$036$lcssa64;
      label = 11;
     }
    } while(0);
    if ((label|0) == 11) {
     $32 = ($$137$lcssa|0)==(0);
     if ($32) {
      $$2 = $$0$lcssa;$$3 = 0;
      break;
     } else {
      $$140 = $$0$lcssa;$$23839 = $$137$lcssa;
     }
    }
    while(1) {
     $33 = HEAP8[$$140>>0]|0;
     $34 = ($33<<24>>24)==($18<<24>>24);
     if ($34) {
      $$2 = $$140;$$3 = $$23839;
      break L8;
     }
     $35 = ((($$140)) + 1|0);
     $36 = (($$23839) + -1)|0;
     $37 = ($36|0)==(0);
     if ($37) {
      $$2 = $35;$$3 = 0;
      break;
     } else {
      $$140 = $35;$$23839 = $36;
     }
    }
   }
  }
 } while(0);
 $38 = ($$3|0)!=(0);
 $39 = $38 ? $$2 : 0;
 return ($39|0);
}
function ___fmodeflags($0) {
 $0 = $0|0;
 var $$ = 0, $$$4 = 0, $$0 = 0, $$0$ = 0, $$2 = 0, $$2$ = 0, $$4 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strchr($0,43)|0);
 $2 = ($1|0)==(0|0);
 $3 = HEAP8[$0>>0]|0;
 $not$ = ($3<<24>>24)!=(114);
 $$ = $not$&1;
 $$0 = $2 ? $$ : 2;
 $4 = (_strchr($0,120)|0);
 $5 = ($4|0)==(0|0);
 $6 = $$0 | 128;
 $$0$ = $5 ? $$0 : $6;
 $7 = (_strchr($0,101)|0);
 $8 = ($7|0)==(0|0);
 $9 = $$0$ | 524288;
 $$2 = $8 ? $$0$ : $9;
 $10 = ($3<<24>>24)==(114);
 $11 = $$2 | 64;
 $$2$ = $10 ? $$2 : $11;
 $12 = ($3<<24>>24)==(119);
 $13 = $$2$ | 512;
 $$4 = $12 ? $13 : $$2$;
 $14 = ($3<<24>>24)==(97);
 $15 = $$4 | 1024;
 $$$4 = $14 ? $15 : $$4;
 return ($$$4|0);
}
function ___fdopen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $$pre31 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $memchr = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = sp + 56|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = $3 << 24 >> 24;
 $memchr = (_memchr(29904,$4,4)|0);
 $5 = ($memchr|0)==(0|0);
 if ($5) {
  $6 = (___errno_location()|0);
  HEAP32[$6>>2] = 22;
  $$0 = 0;
 } else {
  $7 = (_malloc(1156)|0);
  $8 = ($7|0)==(0|0);
  if ($8) {
   $$0 = 0;
  } else {
   dest=$7; stop=dest+124|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
   $9 = (_strchr($1,43)|0);
   $10 = ($9|0)==(0|0);
   if ($10) {
    $11 = ($3<<24>>24)==(114);
    $12 = $11 ? 8 : 4;
    HEAP32[$7>>2] = $12;
   }
   $13 = (_strchr($1,101)|0);
   $14 = ($13|0)==(0|0);
   if ($14) {
    $16 = $3;
   } else {
    HEAP32[$vararg_buffer>>2] = $0;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = 2;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = 1;
    (___syscall221(221,($vararg_buffer|0))|0);
    $$pre = HEAP8[$1>>0]|0;
    $16 = $$pre;
   }
   $15 = ($16<<24>>24)==(97);
   if ($15) {
    HEAP32[$vararg_buffer3>>2] = $0;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = 3;
    $17 = (___syscall221(221,($vararg_buffer3|0))|0);
    $18 = $17 & 1024;
    $19 = ($18|0)==(0);
    if ($19) {
     $20 = $17 | 1024;
     HEAP32[$vararg_buffer7>>2] = $0;
     $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
     HEAP32[$vararg_ptr10>>2] = 4;
     $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
     HEAP32[$vararg_ptr11>>2] = $20;
     (___syscall221(221,($vararg_buffer7|0))|0);
    }
    $21 = HEAP32[$7>>2]|0;
    $22 = $21 | 128;
    HEAP32[$7>>2] = $22;
    $29 = $22;
   } else {
    $$pre31 = HEAP32[$7>>2]|0;
    $29 = $$pre31;
   }
   $23 = ((($7)) + 60|0);
   HEAP32[$23>>2] = $0;
   $24 = ((($7)) + 132|0);
   $25 = ((($7)) + 44|0);
   HEAP32[$25>>2] = $24;
   $26 = ((($7)) + 48|0);
   HEAP32[$26>>2] = 1024;
   $27 = ((($7)) + 75|0);
   HEAP8[$27>>0] = -1;
   $28 = $29 & 8;
   $30 = ($28|0)==(0);
   if ($30) {
    $31 = $2;
    HEAP32[$vararg_buffer12>>2] = $0;
    $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
    HEAP32[$vararg_ptr15>>2] = 21523;
    $vararg_ptr16 = ((($vararg_buffer12)) + 8|0);
    HEAP32[$vararg_ptr16>>2] = $31;
    $32 = (___syscall54(54,($vararg_buffer12|0))|0);
    $33 = ($32|0)==(0);
    if ($33) {
     HEAP8[$27>>0] = 10;
    }
   }
   $34 = ((($7)) + 32|0);
   HEAP32[$34>>2] = 47;
   $35 = ((($7)) + 36|0);
   HEAP32[$35>>2] = 46;
   $36 = ((($7)) + 40|0);
   HEAP32[$36>>2] = 35;
   $37 = ((($7)) + 12|0);
   HEAP32[$37>>2] = 2;
   $38 = HEAP32[(32408)>>2]|0;
   $39 = ($38|0)==(0);
   if ($39) {
    $40 = ((($7)) + 76|0);
    HEAP32[$40>>2] = -1;
   }
   $41 = (___ofl_add($7)|0);
   $$0 = $7;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _strchr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___strchrnul($0,$1)|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $1&255;
 $5 = ($3<<24>>24)==($4<<24>>24);
 $6 = $5 ? $2 : 0;
 return ($6|0);
}
function ___ofl_add($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___ofl_lock()|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 56|0);
 HEAP32[$3>>2] = $2;
 $4 = HEAP32[$1>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $6 = ((($4)) + 52|0);
  HEAP32[$6>>2] = $0;
 }
 HEAP32[$1>>2] = $0;
 ___ofl_unlock();
 return ($0|0);
}
function ___ofl_lock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___lock((32468|0));
 return (32476|0);
}
function ___ofl_unlock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___unlock((32468|0));
 return;
}
function ___strchrnul($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$029$lcssa = 0, $$02936 = 0, $$030$lcssa = 0, $$03039 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond33 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1 & 255;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $8 = (_strlen($0)|0);
   $9 = (($0) + ($8)|0);
   $$0 = $9;
  } else {
   $4 = $0;
   $5 = $4 & 3;
   $6 = ($5|0)==(0);
   if ($6) {
    $$030$lcssa = $0;
   } else {
    $7 = $1&255;
    $$03039 = $0;
    while(1) {
     $10 = HEAP8[$$03039>>0]|0;
     $11 = ($10<<24>>24)==(0);
     $12 = ($10<<24>>24)==($7<<24>>24);
     $or$cond = $11 | $12;
     if ($or$cond) {
      $$0 = $$03039;
      break L1;
     }
     $13 = ((($$03039)) + 1|0);
     $14 = $13;
     $15 = $14 & 3;
     $16 = ($15|0)==(0);
     if ($16) {
      $$030$lcssa = $13;
      break;
     } else {
      $$03039 = $13;
     }
    }
   }
   $17 = Math_imul($2, 16843009)|0;
   $18 = HEAP32[$$030$lcssa>>2]|0;
   $19 = (($18) + -16843009)|0;
   $20 = $18 & -2139062144;
   $21 = $20 ^ -2139062144;
   $22 = $21 & $19;
   $23 = ($22|0)==(0);
   L10: do {
    if ($23) {
     $$02936 = $$030$lcssa;$25 = $18;
     while(1) {
      $24 = $25 ^ $17;
      $26 = (($24) + -16843009)|0;
      $27 = $24 & -2139062144;
      $28 = $27 ^ -2139062144;
      $29 = $28 & $26;
      $30 = ($29|0)==(0);
      if (!($30)) {
       $$029$lcssa = $$02936;
       break L10;
      }
      $31 = ((($$02936)) + 4|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = (($32) + -16843009)|0;
      $34 = $32 & -2139062144;
      $35 = $34 ^ -2139062144;
      $36 = $35 & $33;
      $37 = ($36|0)==(0);
      if ($37) {
       $$02936 = $31;$25 = $32;
      } else {
       $$029$lcssa = $31;
       break;
      }
     }
    } else {
     $$029$lcssa = $$030$lcssa;
    }
   } while(0);
   $38 = $1&255;
   $$1 = $$029$lcssa;
   while(1) {
    $39 = HEAP8[$$1>>0]|0;
    $40 = ($39<<24>>24)==(0);
    $41 = ($39<<24>>24)==($38<<24>>24);
    $or$cond33 = $40 | $41;
    $42 = ((($$1)) + 1|0);
    if ($or$cond33) {
     $$0 = $$1;
     break;
    } else {
     $$1 = $42;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function _fclose($0) {
 $0 = $0|0;
 var $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $4 = (___lockfile($0)|0);
  $29 = $4;
 } else {
  $29 = 0;
 }
 ___unlist_locked_file($0);
 $5 = HEAP32[$0>>2]|0;
 $6 = $5 & 1;
 $7 = ($6|0)!=(0);
 if (!($7)) {
  $8 = (___ofl_lock()|0);
  $9 = ((($0)) + 52|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0|0);
  $12 = $10;
  $$pre = ((($0)) + 56|0);
  if (!($11)) {
   $13 = HEAP32[$$pre>>2]|0;
   $14 = ((($10)) + 56|0);
   HEAP32[$14>>2] = $13;
  }
  $15 = HEAP32[$$pre>>2]|0;
  $16 = ($15|0)==(0|0);
  if (!($16)) {
   $17 = ((($15)) + 52|0);
   HEAP32[$17>>2] = $12;
  }
  $18 = HEAP32[$8>>2]|0;
  $19 = ($18|0)==($0|0);
  if ($19) {
   HEAP32[$8>>2] = $15;
  }
  ___ofl_unlock();
 }
 $20 = (_fflush($0)|0);
 $21 = ((($0)) + 12|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (FUNCTION_TABLE_ii[$22 & 15]($0)|0);
 $24 = $23 | $20;
 $25 = ((($0)) + 92|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)==(0|0);
 if (!($27)) {
  _free($26);
 }
 if ($7) {
  $28 = ($29|0)==(0);
  if (!($28)) {
   ___unlockfile($0);
  }
 } else {
  _free($0);
 }
 return ($24|0);
}
function _fflush($0) {
 $0 = $0|0;
 var $$0 = 0, $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $8 = HEAP32[5764]|0;
   $9 = ($8|0)==(0|0);
   if ($9) {
    $29 = 0;
   } else {
    $10 = HEAP32[5764]|0;
    $11 = (_fflush($10)|0);
    $29 = $11;
   }
   $12 = (___ofl_lock()|0);
   $$02325 = HEAP32[$12>>2]|0;
   $13 = ($$02325|0)==(0|0);
   if ($13) {
    $$024$lcssa = $29;
   } else {
    $$02327 = $$02325;$$02426 = $29;
    while(1) {
     $14 = ((($$02327)) + 76|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)>(-1);
     if ($16) {
      $17 = (___lockfile($$02327)|0);
      $26 = $17;
     } else {
      $26 = 0;
     }
     $18 = ((($$02327)) + 20|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ((($$02327)) + 28|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($19>>>0)>($21>>>0);
     if ($22) {
      $23 = (___fflush_unlocked($$02327)|0);
      $24 = $23 | $$02426;
      $$1 = $24;
     } else {
      $$1 = $$02426;
     }
     $25 = ($26|0)==(0);
     if (!($25)) {
      ___unlockfile($$02327);
     }
     $27 = ((($$02327)) + 56|0);
     $$023 = HEAP32[$27>>2]|0;
     $28 = ($$023|0)==(0|0);
     if ($28) {
      $$024$lcssa = $$1;
      break;
     } else {
      $$02327 = $$023;$$02426 = $$1;
     }
    }
   }
   ___ofl_unlock();
   $$0 = $$024$lcssa;
  } else {
   $2 = ((($0)) + 76|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)>(-1);
   if (!($4)) {
    $5 = (___fflush_unlocked($0)|0);
    $$0 = $5;
    break;
   }
   $6 = (___lockfile($0)|0);
   $phitmp = ($6|0)==(0);
   $7 = (___fflush_unlocked($0)|0);
   if ($phitmp) {
    $$0 = $7;
   } else {
    ___unlockfile($0);
    $$0 = $7;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___fflush_unlocked($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)>($4>>>0);
 if ($5) {
  $6 = ((($0)) + 36|0);
  $7 = HEAP32[$6>>2]|0;
  (FUNCTION_TABLE_iiii[$7 & 63]($0,0,0)|0);
  $8 = HEAP32[$1>>2]|0;
  $9 = ($8|0)==(0|0);
  if ($9) {
   $$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $10 = ((($0)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($0)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($11>>>0)<($13>>>0);
  if ($14) {
   $15 = $11;
   $16 = $13;
   $17 = (($15) - ($16))|0;
   $18 = ((($0)) + 40|0);
   $19 = HEAP32[$18>>2]|0;
   (FUNCTION_TABLE_iiii[$19 & 63]($0,$17,1)|0);
  }
  $20 = ((($0)) + 16|0);
  HEAP32[$20>>2] = 0;
  HEAP32[$3>>2] = 0;
  HEAP32[$1>>2] = 0;
  HEAP32[$12>>2] = 0;
  HEAP32[$10>>2] = 0;
  $$0 = 0;
 }
 return ($$0|0);
}
function ___toread($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8>>>0)>($10>>>0);
 if ($11) {
  $12 = ((($0)) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  (FUNCTION_TABLE_iiii[$13 & 63]($0,0,0)|0);
 }
 $14 = ((($0)) + 16|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$9>>2] = 0;
 HEAP32[$7>>2] = 0;
 $15 = HEAP32[$0>>2]|0;
 $16 = $15 & 4;
 $17 = ($16|0)==(0);
 if ($17) {
  $19 = ((($0)) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22)|0);
  $24 = ((($0)) + 8|0);
  HEAP32[$24>>2] = $23;
  $25 = ((($0)) + 4|0);
  HEAP32[$25>>2] = $23;
  $26 = $15 << 27;
  $sext = $26 >> 31;
  $$0 = $sext;
 } else {
  $18 = $15 | 32;
  HEAP32[$0>>2] = $18;
  $$0 = -1;
 }
 return ($$0|0);
}
function _fseek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (___fseeko($0,$1,$2)|0);
 return ($3|0);
}
function _vfprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $$1$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $3 = sp + 120|0;
 $4 = sp + 80|0;
 $5 = sp;
 $6 = sp + 136|0;
 dest=$4; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$2>>2]|0;
 HEAP32[$3>>2] = $vacopy_currentptr;
 $7 = (_printf_core(0,$1,$3,$5,$4)|0);
 $8 = ($7|0)<(0);
 if ($8) {
  $$0 = -1;
 } else {
  $9 = ((($0)) + 76|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)>(-1);
  if ($11) {
   $12 = (___lockfile($0)|0);
   $40 = $12;
  } else {
   $40 = 0;
  }
  $13 = HEAP32[$0>>2]|0;
  $14 = $13 & 32;
  $15 = ((($0)) + 74|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = ($16<<24>>24)<(1);
  if ($17) {
   $18 = $13 & -33;
   HEAP32[$0>>2] = $18;
  }
  $19 = ((($0)) + 48|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==(0);
  if ($21) {
   $23 = ((($0)) + 44|0);
   $24 = HEAP32[$23>>2]|0;
   HEAP32[$23>>2] = $6;
   $25 = ((($0)) + 28|0);
   HEAP32[$25>>2] = $6;
   $26 = ((($0)) + 20|0);
   HEAP32[$26>>2] = $6;
   HEAP32[$19>>2] = 80;
   $27 = ((($6)) + 80|0);
   $28 = ((($0)) + 16|0);
   HEAP32[$28>>2] = $27;
   $29 = (_printf_core($0,$1,$3,$5,$4)|0);
   $30 = ($24|0)==(0|0);
   if ($30) {
    $$1 = $29;
   } else {
    $31 = ((($0)) + 36|0);
    $32 = HEAP32[$31>>2]|0;
    (FUNCTION_TABLE_iiii[$32 & 63]($0,0,0)|0);
    $33 = HEAP32[$26>>2]|0;
    $34 = ($33|0)==(0|0);
    $$ = $34 ? -1 : $29;
    HEAP32[$23>>2] = $24;
    HEAP32[$19>>2] = 0;
    HEAP32[$28>>2] = 0;
    HEAP32[$25>>2] = 0;
    HEAP32[$26>>2] = 0;
    $$1 = $$;
   }
  } else {
   $22 = (_printf_core($0,$1,$3,$5,$4)|0);
   $$1 = $22;
  }
  $35 = HEAP32[$0>>2]|0;
  $36 = $35 & 32;
  $37 = ($36|0)==(0);
  $$1$ = $37 ? $$1 : -1;
  $38 = $35 | $14;
  HEAP32[$0>>2] = $38;
  $39 = ($40|0)==(0);
  if (!($39)) {
   ___unlockfile($0);
  }
  $$0 = $$1$;
 }
 STACKTOP = sp;return ($$0|0);
}
function _printf_core($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$$ = 0, $$$0259 = 0, $$$0262 = 0, $$$0269 = 0, $$$4266 = 0, $$$5 = 0, $$0 = 0, $$0228 = 0, $$0228$ = 0, $$0229322 = 0, $$0232 = 0, $$0235 = 0, $$0237 = 0, $$0240$lcssa = 0, $$0240$lcssa357 = 0, $$0240321 = 0, $$0243 = 0, $$0247 = 0, $$0249$lcssa = 0;
 var $$0249306 = 0, $$0252 = 0, $$0253 = 0, $$0254 = 0, $$0254$$0254$ = 0, $$0259 = 0, $$0262$lcssa = 0, $$0262311 = 0, $$0269 = 0, $$0269$phi = 0, $$1 = 0, $$1230333 = 0, $$1233 = 0, $$1236 = 0, $$1238 = 0, $$1241332 = 0, $$1244320 = 0, $$1248 = 0, $$1250 = 0, $$1255 = 0;
 var $$1260 = 0, $$1263 = 0, $$1263$ = 0, $$1270 = 0, $$2 = 0, $$2234 = 0, $$2239 = 0, $$2242305 = 0, $$2245 = 0, $$2251 = 0, $$2256 = 0, $$2256$ = 0, $$2256$$$2256 = 0, $$2261 = 0, $$2271 = 0, $$284$ = 0, $$289 = 0, $$290 = 0, $$3257 = 0, $$3265 = 0;
 var $$3272 = 0, $$3303 = 0, $$377 = 0, $$4258355 = 0, $$4266 = 0, $$5 = 0, $$6268 = 0, $$lcssa295 = 0, $$pre = 0, $$pre346 = 0, $$pre347 = 0, $$pre347$pre = 0, $$pre349 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0;
 var $306 = 0.0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0;
 var $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $isdigit = 0, $isdigit275 = 0, $isdigit277 = 0, $isdigittmp = 0, $isdigittmp$ = 0, $isdigittmp274 = 0;
 var $isdigittmp276 = 0, $narrow = 0, $or$cond = 0, $or$cond281 = 0, $or$cond283 = 0, $or$cond286 = 0, $storemerge = 0, $storemerge273310 = 0, $storemerge278 = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $5 = sp + 16|0;
 $6 = sp;
 $7 = sp + 24|0;
 $8 = sp + 8|0;
 $9 = sp + 20|0;
 HEAP32[$5>>2] = $1;
 $10 = ($0|0)!=(0|0);
 $11 = ((($7)) + 40|0);
 $12 = $11;
 $13 = ((($7)) + 39|0);
 $14 = ((($8)) + 4|0);
 $$0243 = 0;$$0247 = 0;$$0269 = 0;$21 = $1;
 L1: while(1) {
  $15 = ($$0247|0)>(-1);
  do {
   if ($15) {
    $16 = (2147483647 - ($$0247))|0;
    $17 = ($$0243|0)>($16|0);
    if ($17) {
     $18 = (___errno_location()|0);
     HEAP32[$18>>2] = 75;
     $$1248 = -1;
     break;
    } else {
     $19 = (($$0243) + ($$0247))|0;
     $$1248 = $19;
     break;
    }
   } else {
    $$1248 = $$0247;
   }
  } while(0);
  $20 = HEAP8[$21>>0]|0;
  $22 = ($20<<24>>24)==(0);
  if ($22) {
   label = 87;
   break;
  } else {
   $23 = $20;$25 = $21;
  }
  L9: while(1) {
   switch ($23<<24>>24) {
   case 37:  {
    $$0249306 = $25;$27 = $25;
    label = 9;
    break L9;
    break;
   }
   case 0:  {
    $$0249$lcssa = $25;$39 = $25;
    break L9;
    break;
   }
   default: {
   }
   }
   $24 = ((($25)) + 1|0);
   HEAP32[$5>>2] = $24;
   $$pre = HEAP8[$24>>0]|0;
   $23 = $$pre;$25 = $24;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $26 = ((($27)) + 1|0);
     $28 = HEAP8[$26>>0]|0;
     $29 = ($28<<24>>24)==(37);
     if (!($29)) {
      $$0249$lcssa = $$0249306;$39 = $27;
      break L12;
     }
     $30 = ((($$0249306)) + 1|0);
     $31 = ((($27)) + 2|0);
     HEAP32[$5>>2] = $31;
     $32 = HEAP8[$31>>0]|0;
     $33 = ($32<<24>>24)==(37);
     if ($33) {
      $$0249306 = $30;$27 = $31;
      label = 9;
     } else {
      $$0249$lcssa = $30;$39 = $31;
      break;
     }
    }
   }
  } while(0);
  $34 = $$0249$lcssa;
  $35 = $21;
  $36 = (($34) - ($35))|0;
  if ($10) {
   _out_671($0,$21,$36);
  }
  $37 = ($36|0)==(0);
  if (!($37)) {
   $$0269$phi = $$0269;$$0243 = $36;$$0247 = $$1248;$21 = $39;$$0269 = $$0269$phi;
   continue;
  }
  $38 = ((($39)) + 1|0);
  $40 = HEAP8[$38>>0]|0;
  $41 = $40 << 24 >> 24;
  $isdigittmp = (($41) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $42 = ((($39)) + 2|0);
   $43 = HEAP8[$42>>0]|0;
   $44 = ($43<<24>>24)==(36);
   $45 = ((($39)) + 3|0);
   $$377 = $44 ? $45 : $38;
   $$$0269 = $44 ? 1 : $$0269;
   $isdigittmp$ = $44 ? $isdigittmp : -1;
   $$0253 = $isdigittmp$;$$1270 = $$$0269;$storemerge = $$377;
  } else {
   $$0253 = -1;$$1270 = $$0269;$storemerge = $38;
  }
  HEAP32[$5>>2] = $storemerge;
  $46 = HEAP8[$storemerge>>0]|0;
  $47 = $46 << 24 >> 24;
  $48 = (($47) + -32)|0;
  $49 = ($48>>>0)<(32);
  L24: do {
   if ($49) {
    $$0262311 = 0;$329 = $46;$51 = $48;$storemerge273310 = $storemerge;
    while(1) {
     $50 = 1 << $51;
     $52 = $50 & 75913;
     $53 = ($52|0)==(0);
     if ($53) {
      $$0262$lcssa = $$0262311;$$lcssa295 = $329;$62 = $storemerge273310;
      break L24;
     }
     $54 = $50 | $$0262311;
     $55 = ((($storemerge273310)) + 1|0);
     HEAP32[$5>>2] = $55;
     $56 = HEAP8[$55>>0]|0;
     $57 = $56 << 24 >> 24;
     $58 = (($57) + -32)|0;
     $59 = ($58>>>0)<(32);
     if ($59) {
      $$0262311 = $54;$329 = $56;$51 = $58;$storemerge273310 = $55;
     } else {
      $$0262$lcssa = $54;$$lcssa295 = $56;$62 = $55;
      break;
     }
    }
   } else {
    $$0262$lcssa = 0;$$lcssa295 = $46;$62 = $storemerge;
   }
  } while(0);
  $60 = ($$lcssa295<<24>>24)==(42);
  if ($60) {
   $61 = ((($62)) + 1|0);
   $63 = HEAP8[$61>>0]|0;
   $64 = $63 << 24 >> 24;
   $isdigittmp276 = (($64) + -48)|0;
   $isdigit277 = ($isdigittmp276>>>0)<(10);
   if ($isdigit277) {
    $65 = ((($62)) + 2|0);
    $66 = HEAP8[$65>>0]|0;
    $67 = ($66<<24>>24)==(36);
    if ($67) {
     $68 = (($4) + ($isdigittmp276<<2)|0);
     HEAP32[$68>>2] = 10;
     $69 = HEAP8[$61>>0]|0;
     $70 = $69 << 24 >> 24;
     $71 = (($70) + -48)|0;
     $72 = (($3) + ($71<<3)|0);
     $73 = $72;
     $74 = $73;
     $75 = HEAP32[$74>>2]|0;
     $76 = (($73) + 4)|0;
     $77 = $76;
     $78 = HEAP32[$77>>2]|0;
     $79 = ((($62)) + 3|0);
     $$0259 = $75;$$2271 = 1;$storemerge278 = $79;
    } else {
     label = 23;
    }
   } else {
    label = 23;
   }
   if ((label|0) == 23) {
    label = 0;
    $80 = ($$1270|0)==(0);
    if (!($80)) {
     $$0 = -1;
     break;
    }
    if ($10) {
     $arglist_current = HEAP32[$2>>2]|0;
     $81 = $arglist_current;
     $82 = ((0) + 4|0);
     $expanded4 = $82;
     $expanded = (($expanded4) - 1)|0;
     $83 = (($81) + ($expanded))|0;
     $84 = ((0) + 4|0);
     $expanded8 = $84;
     $expanded7 = (($expanded8) - 1)|0;
     $expanded6 = $expanded7 ^ -1;
     $85 = $83 & $expanded6;
     $86 = $85;
     $87 = HEAP32[$86>>2]|0;
     $arglist_next = ((($86)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     $$0259 = $87;$$2271 = 0;$storemerge278 = $61;
    } else {
     $$0259 = 0;$$2271 = 0;$storemerge278 = $61;
    }
   }
   HEAP32[$5>>2] = $storemerge278;
   $88 = ($$0259|0)<(0);
   $89 = $$0262$lcssa | 8192;
   $90 = (0 - ($$0259))|0;
   $$$0262 = $88 ? $89 : $$0262$lcssa;
   $$$0259 = $88 ? $90 : $$0259;
   $$1260 = $$$0259;$$1263 = $$$0262;$$3272 = $$2271;$94 = $storemerge278;
  } else {
   $91 = (_getint_672($5)|0);
   $92 = ($91|0)<(0);
   if ($92) {
    $$0 = -1;
    break;
   }
   $$pre346 = HEAP32[$5>>2]|0;
   $$1260 = $91;$$1263 = $$0262$lcssa;$$3272 = $$1270;$94 = $$pre346;
  }
  $93 = HEAP8[$94>>0]|0;
  $95 = ($93<<24>>24)==(46);
  do {
   if ($95) {
    $96 = ((($94)) + 1|0);
    $97 = HEAP8[$96>>0]|0;
    $98 = ($97<<24>>24)==(42);
    if (!($98)) {
     $125 = ((($94)) + 1|0);
     HEAP32[$5>>2] = $125;
     $126 = (_getint_672($5)|0);
     $$pre347$pre = HEAP32[$5>>2]|0;
     $$0254 = $126;$$pre347 = $$pre347$pre;
     break;
    }
    $99 = ((($94)) + 2|0);
    $100 = HEAP8[$99>>0]|0;
    $101 = $100 << 24 >> 24;
    $isdigittmp274 = (($101) + -48)|0;
    $isdigit275 = ($isdigittmp274>>>0)<(10);
    if ($isdigit275) {
     $102 = ((($94)) + 3|0);
     $103 = HEAP8[$102>>0]|0;
     $104 = ($103<<24>>24)==(36);
     if ($104) {
      $105 = (($4) + ($isdigittmp274<<2)|0);
      HEAP32[$105>>2] = 10;
      $106 = HEAP8[$99>>0]|0;
      $107 = $106 << 24 >> 24;
      $108 = (($107) + -48)|0;
      $109 = (($3) + ($108<<3)|0);
      $110 = $109;
      $111 = $110;
      $112 = HEAP32[$111>>2]|0;
      $113 = (($110) + 4)|0;
      $114 = $113;
      $115 = HEAP32[$114>>2]|0;
      $116 = ((($94)) + 4|0);
      HEAP32[$5>>2] = $116;
      $$0254 = $112;$$pre347 = $116;
      break;
     }
    }
    $117 = ($$3272|0)==(0);
    if (!($117)) {
     $$0 = -1;
     break L1;
    }
    if ($10) {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $118 = $arglist_current2;
     $119 = ((0) + 4|0);
     $expanded11 = $119;
     $expanded10 = (($expanded11) - 1)|0;
     $120 = (($118) + ($expanded10))|0;
     $121 = ((0) + 4|0);
     $expanded15 = $121;
     $expanded14 = (($expanded15) - 1)|0;
     $expanded13 = $expanded14 ^ -1;
     $122 = $120 & $expanded13;
     $123 = $122;
     $124 = HEAP32[$123>>2]|0;
     $arglist_next3 = ((($123)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $330 = $124;
    } else {
     $330 = 0;
    }
    HEAP32[$5>>2] = $99;
    $$0254 = $330;$$pre347 = $99;
   } else {
    $$0254 = -1;$$pre347 = $94;
   }
  } while(0);
  $$0252 = 0;$128 = $$pre347;
  while(1) {
   $127 = HEAP8[$128>>0]|0;
   $129 = $127 << 24 >> 24;
   $130 = (($129) + -65)|0;
   $131 = ($130>>>0)>(57);
   if ($131) {
    $$0 = -1;
    break L1;
   }
   $132 = ((($128)) + 1|0);
   HEAP32[$5>>2] = $132;
   $133 = HEAP8[$128>>0]|0;
   $134 = $133 << 24 >> 24;
   $135 = (($134) + -65)|0;
   $136 = ((29908 + (($$0252*58)|0)|0) + ($135)|0);
   $137 = HEAP8[$136>>0]|0;
   $138 = $137&255;
   $139 = (($138) + -1)|0;
   $140 = ($139>>>0)<(8);
   if ($140) {
    $$0252 = $138;$128 = $132;
   } else {
    break;
   }
  }
  $141 = ($137<<24>>24)==(0);
  if ($141) {
   $$0 = -1;
   break;
  }
  $142 = ($137<<24>>24)==(19);
  $143 = ($$0253|0)>(-1);
  do {
   if ($142) {
    if ($143) {
     $$0 = -1;
     break L1;
    } else {
     label = 49;
    }
   } else {
    if ($143) {
     $144 = (($4) + ($$0253<<2)|0);
     HEAP32[$144>>2] = $138;
     $145 = (($3) + ($$0253<<3)|0);
     $146 = $145;
     $147 = $146;
     $148 = HEAP32[$147>>2]|0;
     $149 = (($146) + 4)|0;
     $150 = $149;
     $151 = HEAP32[$150>>2]|0;
     $152 = $6;
     $153 = $152;
     HEAP32[$153>>2] = $148;
     $154 = (($152) + 4)|0;
     $155 = $154;
     HEAP32[$155>>2] = $151;
     label = 49;
     break;
    }
    if (!($10)) {
     $$0 = 0;
     break L1;
    }
    _pop_arg_674($6,$138,$2);
   }
  } while(0);
  if ((label|0) == 49) {
   label = 0;
   if (!($10)) {
    $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
    continue;
   }
  }
  $156 = HEAP8[$128>>0]|0;
  $157 = $156 << 24 >> 24;
  $158 = ($$0252|0)!=(0);
  $159 = $157 & 15;
  $160 = ($159|0)==(3);
  $or$cond281 = $158 & $160;
  $161 = $157 & -33;
  $$0235 = $or$cond281 ? $161 : $157;
  $162 = $$1263 & 8192;
  $163 = ($162|0)==(0);
  $164 = $$1263 & -65537;
  $$1263$ = $163 ? $$1263 : $164;
  L71: do {
   switch ($$0235|0) {
   case 110:  {
    $trunc = $$0252&255;
    switch ($trunc<<24>>24) {
    case 0:  {
     $171 = HEAP32[$6>>2]|0;
     HEAP32[$171>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
     break;
    }
    case 1:  {
     $172 = HEAP32[$6>>2]|0;
     HEAP32[$172>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
     break;
    }
    case 2:  {
     $173 = ($$1248|0)<(0);
     $174 = $173 << 31 >> 31;
     $175 = HEAP32[$6>>2]|0;
     $176 = $175;
     $177 = $176;
     HEAP32[$177>>2] = $$1248;
     $178 = (($176) + 4)|0;
     $179 = $178;
     HEAP32[$179>>2] = $174;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
     break;
    }
    case 3:  {
     $180 = $$1248&65535;
     $181 = HEAP32[$6>>2]|0;
     HEAP16[$181>>1] = $180;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
     break;
    }
    case 4:  {
     $182 = $$1248&255;
     $183 = HEAP32[$6>>2]|0;
     HEAP8[$183>>0] = $182;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
     break;
    }
    case 6:  {
     $184 = HEAP32[$6>>2]|0;
     HEAP32[$184>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
     break;
    }
    case 7:  {
     $185 = ($$1248|0)<(0);
     $186 = $185 << 31 >> 31;
     $187 = HEAP32[$6>>2]|0;
     $188 = $187;
     $189 = $188;
     HEAP32[$189>>2] = $$1248;
     $190 = (($188) + 4)|0;
     $191 = $190;
     HEAP32[$191>>2] = $186;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
     break;
    }
    default: {
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
     continue L1;
    }
    }
    break;
   }
   case 112:  {
    $192 = ($$0254>>>0)>(8);
    $193 = $192 ? $$0254 : 8;
    $194 = $$1263$ | 8;
    $$1236 = 120;$$1255 = $193;$$3265 = $194;
    label = 61;
    break;
   }
   case 88: case 120:  {
    $$1236 = $$0235;$$1255 = $$0254;$$3265 = $$1263$;
    label = 61;
    break;
   }
   case 111:  {
    $210 = $6;
    $211 = $210;
    $212 = HEAP32[$211>>2]|0;
    $213 = (($210) + 4)|0;
    $214 = $213;
    $215 = HEAP32[$214>>2]|0;
    $216 = (_fmt_o($212,$215,$11)|0);
    $217 = $$1263$ & 8;
    $218 = ($217|0)==(0);
    $219 = $216;
    $220 = (($12) - ($219))|0;
    $221 = ($$0254|0)>($220|0);
    $222 = (($220) + 1)|0;
    $223 = $218 | $221;
    $$0254$$0254$ = $223 ? $$0254 : $222;
    $$0228 = $216;$$1233 = 0;$$1238 = 30372;$$2256 = $$0254$$0254$;$$4266 = $$1263$;$248 = $212;$250 = $215;
    label = 67;
    break;
   }
   case 105: case 100:  {
    $224 = $6;
    $225 = $224;
    $226 = HEAP32[$225>>2]|0;
    $227 = (($224) + 4)|0;
    $228 = $227;
    $229 = HEAP32[$228>>2]|0;
    $230 = ($229|0)<(0);
    if ($230) {
     $231 = (_i64Subtract(0,0,($226|0),($229|0))|0);
     $232 = tempRet0;
     $233 = $6;
     $234 = $233;
     HEAP32[$234>>2] = $231;
     $235 = (($233) + 4)|0;
     $236 = $235;
     HEAP32[$236>>2] = $232;
     $$0232 = 1;$$0237 = 30372;$242 = $231;$243 = $232;
     label = 66;
     break L71;
    } else {
     $237 = $$1263$ & 2048;
     $238 = ($237|0)==(0);
     $239 = $$1263$ & 1;
     $240 = ($239|0)==(0);
     $$ = $240 ? 30372 : (30374);
     $$$ = $238 ? $$ : (30373);
     $241 = $$1263$ & 2049;
     $narrow = ($241|0)!=(0);
     $$284$ = $narrow&1;
     $$0232 = $$284$;$$0237 = $$$;$242 = $226;$243 = $229;
     label = 66;
     break L71;
    }
    break;
   }
   case 117:  {
    $165 = $6;
    $166 = $165;
    $167 = HEAP32[$166>>2]|0;
    $168 = (($165) + 4)|0;
    $169 = $168;
    $170 = HEAP32[$169>>2]|0;
    $$0232 = 0;$$0237 = 30372;$242 = $167;$243 = $170;
    label = 66;
    break;
   }
   case 99:  {
    $259 = $6;
    $260 = $259;
    $261 = HEAP32[$260>>2]|0;
    $262 = (($259) + 4)|0;
    $263 = $262;
    $264 = HEAP32[$263>>2]|0;
    $265 = $261&255;
    HEAP8[$13>>0] = $265;
    $$2 = $13;$$2234 = 0;$$2239 = 30372;$$2251 = $11;$$5 = 1;$$6268 = $164;
    break;
   }
   case 109:  {
    $266 = (___errno_location()|0);
    $267 = HEAP32[$266>>2]|0;
    $268 = (_strerror($267)|0);
    $$1 = $268;
    label = 71;
    break;
   }
   case 115:  {
    $269 = HEAP32[$6>>2]|0;
    $270 = ($269|0)!=(0|0);
    $271 = $270 ? $269 : 30382;
    $$1 = $271;
    label = 71;
    break;
   }
   case 67:  {
    $278 = $6;
    $279 = $278;
    $280 = HEAP32[$279>>2]|0;
    $281 = (($278) + 4)|0;
    $282 = $281;
    $283 = HEAP32[$282>>2]|0;
    HEAP32[$8>>2] = $280;
    HEAP32[$14>>2] = 0;
    HEAP32[$6>>2] = $8;
    $$4258355 = -1;$331 = $8;
    label = 75;
    break;
   }
   case 83:  {
    $$pre349 = HEAP32[$6>>2]|0;
    $284 = ($$0254|0)==(0);
    if ($284) {
     _pad_677($0,32,$$1260,0,$$1263$);
     $$0240$lcssa357 = 0;
     label = 84;
    } else {
     $$4258355 = $$0254;$331 = $$pre349;
     label = 75;
    }
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    $306 = +HEAPF64[$6>>3];
    $307 = (_fmt_fp($0,$306,$$1260,$$0254,$$1263$,$$0235)|0);
    $$0243 = $307;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
    continue L1;
    break;
   }
   default: {
    $$2 = $21;$$2234 = 0;$$2239 = 30372;$$2251 = $11;$$5 = $$0254;$$6268 = $$1263$;
   }
   }
  } while(0);
  L95: do {
   if ((label|0) == 61) {
    label = 0;
    $195 = $6;
    $196 = $195;
    $197 = HEAP32[$196>>2]|0;
    $198 = (($195) + 4)|0;
    $199 = $198;
    $200 = HEAP32[$199>>2]|0;
    $201 = $$1236 & 32;
    $202 = (_fmt_x($197,$200,$11,$201)|0);
    $203 = ($197|0)==(0);
    $204 = ($200|0)==(0);
    $205 = $203 & $204;
    $206 = $$3265 & 8;
    $207 = ($206|0)==(0);
    $or$cond283 = $207 | $205;
    $208 = $$1236 >> 4;
    $209 = (30372 + ($208)|0);
    $$289 = $or$cond283 ? 30372 : $209;
    $$290 = $or$cond283 ? 0 : 2;
    $$0228 = $202;$$1233 = $$290;$$1238 = $$289;$$2256 = $$1255;$$4266 = $$3265;$248 = $197;$250 = $200;
    label = 67;
   }
   else if ((label|0) == 66) {
    label = 0;
    $244 = (_fmt_u($242,$243,$11)|0);
    $$0228 = $244;$$1233 = $$0232;$$1238 = $$0237;$$2256 = $$0254;$$4266 = $$1263$;$248 = $242;$250 = $243;
    label = 67;
   }
   else if ((label|0) == 71) {
    label = 0;
    $272 = (_memchr($$1,0,$$0254)|0);
    $273 = ($272|0)==(0|0);
    $274 = $272;
    $275 = $$1;
    $276 = (($274) - ($275))|0;
    $277 = (($$1) + ($$0254)|0);
    $$3257 = $273 ? $$0254 : $276;
    $$1250 = $273 ? $277 : $272;
    $$2 = $$1;$$2234 = 0;$$2239 = 30372;$$2251 = $$1250;$$5 = $$3257;$$6268 = $164;
   }
   else if ((label|0) == 75) {
    label = 0;
    $$0229322 = $331;$$0240321 = 0;$$1244320 = 0;
    while(1) {
     $285 = HEAP32[$$0229322>>2]|0;
     $286 = ($285|0)==(0);
     if ($286) {
      $$0240$lcssa = $$0240321;$$2245 = $$1244320;
      break;
     }
     $287 = (_wctomb($9,$285)|0);
     $288 = ($287|0)<(0);
     $289 = (($$4258355) - ($$0240321))|0;
     $290 = ($287>>>0)>($289>>>0);
     $or$cond286 = $288 | $290;
     if ($or$cond286) {
      $$0240$lcssa = $$0240321;$$2245 = $287;
      break;
     }
     $291 = ((($$0229322)) + 4|0);
     $292 = (($287) + ($$0240321))|0;
     $293 = ($$4258355>>>0)>($292>>>0);
     if ($293) {
      $$0229322 = $291;$$0240321 = $292;$$1244320 = $287;
     } else {
      $$0240$lcssa = $292;$$2245 = $287;
      break;
     }
    }
    $294 = ($$2245|0)<(0);
    if ($294) {
     $$0 = -1;
     break L1;
    }
    _pad_677($0,32,$$1260,$$0240$lcssa,$$1263$);
    $295 = ($$0240$lcssa|0)==(0);
    if ($295) {
     $$0240$lcssa357 = 0;
     label = 84;
    } else {
     $$1230333 = $331;$$1241332 = 0;
     while(1) {
      $296 = HEAP32[$$1230333>>2]|0;
      $297 = ($296|0)==(0);
      if ($297) {
       $$0240$lcssa357 = $$0240$lcssa;
       label = 84;
       break L95;
      }
      $298 = (_wctomb($9,$296)|0);
      $299 = (($298) + ($$1241332))|0;
      $300 = ($299|0)>($$0240$lcssa|0);
      if ($300) {
       $$0240$lcssa357 = $$0240$lcssa;
       label = 84;
       break L95;
      }
      $301 = ((($$1230333)) + 4|0);
      _out_671($0,$9,$298);
      $302 = ($299>>>0)<($$0240$lcssa>>>0);
      if ($302) {
       $$1230333 = $301;$$1241332 = $299;
      } else {
       $$0240$lcssa357 = $$0240$lcssa;
       label = 84;
       break;
      }
     }
    }
   }
  } while(0);
  if ((label|0) == 67) {
   label = 0;
   $245 = ($$2256|0)>(-1);
   $246 = $$4266 & -65537;
   $$$4266 = $245 ? $246 : $$4266;
   $247 = ($248|0)!=(0);
   $249 = ($250|0)!=(0);
   $251 = $247 | $249;
   $252 = ($$2256|0)!=(0);
   $or$cond = $252 | $251;
   $253 = $$0228;
   $254 = (($12) - ($253))|0;
   $255 = $251 ^ 1;
   $256 = $255&1;
   $257 = (($256) + ($254))|0;
   $258 = ($$2256|0)>($257|0);
   $$2256$ = $258 ? $$2256 : $257;
   $$2256$$$2256 = $or$cond ? $$2256$ : $$2256;
   $$0228$ = $or$cond ? $$0228 : $11;
   $$2 = $$0228$;$$2234 = $$1233;$$2239 = $$1238;$$2251 = $11;$$5 = $$2256$$$2256;$$6268 = $$$4266;
  }
  else if ((label|0) == 84) {
   label = 0;
   $303 = $$1263$ ^ 8192;
   _pad_677($0,32,$$1260,$$0240$lcssa357,$303);
   $304 = ($$1260|0)>($$0240$lcssa357|0);
   $305 = $304 ? $$1260 : $$0240$lcssa357;
   $$0243 = $305;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
   continue;
  }
  $308 = $$2251;
  $309 = $$2;
  $310 = (($308) - ($309))|0;
  $311 = ($$5|0)<($310|0);
  $$$5 = $311 ? $310 : $$5;
  $312 = (($$$5) + ($$2234))|0;
  $313 = ($$1260|0)<($312|0);
  $$2261 = $313 ? $312 : $$1260;
  _pad_677($0,32,$$2261,$312,$$6268);
  _out_671($0,$$2239,$$2234);
  $314 = $$6268 ^ 65536;
  _pad_677($0,48,$$2261,$312,$314);
  _pad_677($0,48,$$$5,$310,0);
  _out_671($0,$$2,$310);
  $315 = $$6268 ^ 8192;
  _pad_677($0,32,$$2261,$312,$315);
  $$0243 = $$2261;$$0247 = $$1248;$$0269 = $$3272;$21 = $132;
 }
 L114: do {
  if ((label|0) == 87) {
   $316 = ($0|0)==(0|0);
   if ($316) {
    $317 = ($$0269|0)==(0);
    if ($317) {
     $$0 = 0;
    } else {
     $$2242305 = 1;
     while(1) {
      $318 = (($4) + ($$2242305<<2)|0);
      $319 = HEAP32[$318>>2]|0;
      $320 = ($319|0)==(0);
      if ($320) {
       $$3303 = $$2242305;
       break;
      }
      $321 = (($3) + ($$2242305<<3)|0);
      _pop_arg_674($321,$319,$2);
      $322 = (($$2242305) + 1)|0;
      $323 = ($322|0)<(10);
      if ($323) {
       $$2242305 = $322;
      } else {
       $$0 = 1;
       break L114;
      }
     }
     while(1) {
      $326 = (($4) + ($$3303<<2)|0);
      $327 = HEAP32[$326>>2]|0;
      $328 = ($327|0)==(0);
      $325 = (($$3303) + 1)|0;
      if (!($328)) {
       $$0 = -1;
       break L114;
      }
      $324 = ($325|0)<(10);
      if ($324) {
       $$3303 = $325;
      } else {
       $$0 = 1;
       break;
      }
     }
    }
   } else {
    $$0 = $$1248;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _out_671($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = $3 & 32;
 $5 = ($4|0)==(0);
 if ($5) {
  (___fwritex($1,$2,$0)|0);
 }
 return;
}
function _getint_672($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$06 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isdigit = 0, $isdigit5 = 0, $isdigittmp = 0, $isdigittmp4 = 0, $isdigittmp7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $isdigittmp4 = (($3) + -48)|0;
 $isdigit5 = ($isdigittmp4>>>0)<(10);
 if ($isdigit5) {
  $$06 = 0;$7 = $1;$isdigittmp7 = $isdigittmp4;
  while(1) {
   $4 = ($$06*10)|0;
   $5 = (($isdigittmp7) + ($4))|0;
   $6 = ((($7)) + 1|0);
   HEAP32[$0>>2] = $6;
   $8 = HEAP8[$6>>0]|0;
   $9 = $8 << 24 >> 24;
   $isdigittmp = (($9) + -48)|0;
   $isdigit = ($isdigittmp>>>0)<(10);
   if ($isdigit) {
    $$06 = $5;$7 = $6;$isdigittmp7 = $isdigittmp;
   } else {
    $$0$lcssa = $5;
    break;
   }
  }
 } else {
  $$0$lcssa = 0;
 }
 return ($$0$lcssa|0);
}
function _pop_arg_674($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$mask = 0, $$mask31 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0;
 var $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $expanded = 0, $expanded28 = 0, $expanded30 = 0, $expanded31 = 0;
 var $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0, $expanded42 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded58 = 0, $expanded59 = 0;
 var $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0, $expanded70 = 0, $expanded72 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded79 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded86 = 0, $expanded87 = 0;
 var $expanded88 = 0, $expanded90 = 0, $expanded91 = 0, $expanded93 = 0, $expanded94 = 0, $expanded95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(20);
 L1: do {
  if (!($3)) {
   do {
    switch ($1|0) {
    case 9:  {
     $arglist_current = HEAP32[$2>>2]|0;
     $4 = $arglist_current;
     $5 = ((0) + 4|0);
     $expanded28 = $5;
     $expanded = (($expanded28) - 1)|0;
     $6 = (($4) + ($expanded))|0;
     $7 = ((0) + 4|0);
     $expanded32 = $7;
     $expanded31 = (($expanded32) - 1)|0;
     $expanded30 = $expanded31 ^ -1;
     $8 = $6 & $expanded30;
     $9 = $8;
     $10 = HEAP32[$9>>2]|0;
     $arglist_next = ((($9)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     HEAP32[$0>>2] = $10;
     break L1;
     break;
    }
    case 10:  {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $11 = $arglist_current2;
     $12 = ((0) + 4|0);
     $expanded35 = $12;
     $expanded34 = (($expanded35) - 1)|0;
     $13 = (($11) + ($expanded34))|0;
     $14 = ((0) + 4|0);
     $expanded39 = $14;
     $expanded38 = (($expanded39) - 1)|0;
     $expanded37 = $expanded38 ^ -1;
     $15 = $13 & $expanded37;
     $16 = $15;
     $17 = HEAP32[$16>>2]|0;
     $arglist_next3 = ((($16)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $18 = ($17|0)<(0);
     $19 = $18 << 31 >> 31;
     $20 = $0;
     $21 = $20;
     HEAP32[$21>>2] = $17;
     $22 = (($20) + 4)|0;
     $23 = $22;
     HEAP32[$23>>2] = $19;
     break L1;
     break;
    }
    case 11:  {
     $arglist_current5 = HEAP32[$2>>2]|0;
     $24 = $arglist_current5;
     $25 = ((0) + 4|0);
     $expanded42 = $25;
     $expanded41 = (($expanded42) - 1)|0;
     $26 = (($24) + ($expanded41))|0;
     $27 = ((0) + 4|0);
     $expanded46 = $27;
     $expanded45 = (($expanded46) - 1)|0;
     $expanded44 = $expanded45 ^ -1;
     $28 = $26 & $expanded44;
     $29 = $28;
     $30 = HEAP32[$29>>2]|0;
     $arglist_next6 = ((($29)) + 4|0);
     HEAP32[$2>>2] = $arglist_next6;
     $31 = $0;
     $32 = $31;
     HEAP32[$32>>2] = $30;
     $33 = (($31) + 4)|0;
     $34 = $33;
     HEAP32[$34>>2] = 0;
     break L1;
     break;
    }
    case 12:  {
     $arglist_current8 = HEAP32[$2>>2]|0;
     $35 = $arglist_current8;
     $36 = ((0) + 8|0);
     $expanded49 = $36;
     $expanded48 = (($expanded49) - 1)|0;
     $37 = (($35) + ($expanded48))|0;
     $38 = ((0) + 8|0);
     $expanded53 = $38;
     $expanded52 = (($expanded53) - 1)|0;
     $expanded51 = $expanded52 ^ -1;
     $39 = $37 & $expanded51;
     $40 = $39;
     $41 = $40;
     $42 = $41;
     $43 = HEAP32[$42>>2]|0;
     $44 = (($41) + 4)|0;
     $45 = $44;
     $46 = HEAP32[$45>>2]|0;
     $arglist_next9 = ((($40)) + 8|0);
     HEAP32[$2>>2] = $arglist_next9;
     $47 = $0;
     $48 = $47;
     HEAP32[$48>>2] = $43;
     $49 = (($47) + 4)|0;
     $50 = $49;
     HEAP32[$50>>2] = $46;
     break L1;
     break;
    }
    case 13:  {
     $arglist_current11 = HEAP32[$2>>2]|0;
     $51 = $arglist_current11;
     $52 = ((0) + 4|0);
     $expanded56 = $52;
     $expanded55 = (($expanded56) - 1)|0;
     $53 = (($51) + ($expanded55))|0;
     $54 = ((0) + 4|0);
     $expanded60 = $54;
     $expanded59 = (($expanded60) - 1)|0;
     $expanded58 = $expanded59 ^ -1;
     $55 = $53 & $expanded58;
     $56 = $55;
     $57 = HEAP32[$56>>2]|0;
     $arglist_next12 = ((($56)) + 4|0);
     HEAP32[$2>>2] = $arglist_next12;
     $58 = $57&65535;
     $59 = $58 << 16 >> 16;
     $60 = ($59|0)<(0);
     $61 = $60 << 31 >> 31;
     $62 = $0;
     $63 = $62;
     HEAP32[$63>>2] = $59;
     $64 = (($62) + 4)|0;
     $65 = $64;
     HEAP32[$65>>2] = $61;
     break L1;
     break;
    }
    case 14:  {
     $arglist_current14 = HEAP32[$2>>2]|0;
     $66 = $arglist_current14;
     $67 = ((0) + 4|0);
     $expanded63 = $67;
     $expanded62 = (($expanded63) - 1)|0;
     $68 = (($66) + ($expanded62))|0;
     $69 = ((0) + 4|0);
     $expanded67 = $69;
     $expanded66 = (($expanded67) - 1)|0;
     $expanded65 = $expanded66 ^ -1;
     $70 = $68 & $expanded65;
     $71 = $70;
     $72 = HEAP32[$71>>2]|0;
     $arglist_next15 = ((($71)) + 4|0);
     HEAP32[$2>>2] = $arglist_next15;
     $$mask31 = $72 & 65535;
     $73 = $0;
     $74 = $73;
     HEAP32[$74>>2] = $$mask31;
     $75 = (($73) + 4)|0;
     $76 = $75;
     HEAP32[$76>>2] = 0;
     break L1;
     break;
    }
    case 15:  {
     $arglist_current17 = HEAP32[$2>>2]|0;
     $77 = $arglist_current17;
     $78 = ((0) + 4|0);
     $expanded70 = $78;
     $expanded69 = (($expanded70) - 1)|0;
     $79 = (($77) + ($expanded69))|0;
     $80 = ((0) + 4|0);
     $expanded74 = $80;
     $expanded73 = (($expanded74) - 1)|0;
     $expanded72 = $expanded73 ^ -1;
     $81 = $79 & $expanded72;
     $82 = $81;
     $83 = HEAP32[$82>>2]|0;
     $arglist_next18 = ((($82)) + 4|0);
     HEAP32[$2>>2] = $arglist_next18;
     $84 = $83&255;
     $85 = $84 << 24 >> 24;
     $86 = ($85|0)<(0);
     $87 = $86 << 31 >> 31;
     $88 = $0;
     $89 = $88;
     HEAP32[$89>>2] = $85;
     $90 = (($88) + 4)|0;
     $91 = $90;
     HEAP32[$91>>2] = $87;
     break L1;
     break;
    }
    case 16:  {
     $arglist_current20 = HEAP32[$2>>2]|0;
     $92 = $arglist_current20;
     $93 = ((0) + 4|0);
     $expanded77 = $93;
     $expanded76 = (($expanded77) - 1)|0;
     $94 = (($92) + ($expanded76))|0;
     $95 = ((0) + 4|0);
     $expanded81 = $95;
     $expanded80 = (($expanded81) - 1)|0;
     $expanded79 = $expanded80 ^ -1;
     $96 = $94 & $expanded79;
     $97 = $96;
     $98 = HEAP32[$97>>2]|0;
     $arglist_next21 = ((($97)) + 4|0);
     HEAP32[$2>>2] = $arglist_next21;
     $$mask = $98 & 255;
     $99 = $0;
     $100 = $99;
     HEAP32[$100>>2] = $$mask;
     $101 = (($99) + 4)|0;
     $102 = $101;
     HEAP32[$102>>2] = 0;
     break L1;
     break;
    }
    case 17:  {
     $arglist_current23 = HEAP32[$2>>2]|0;
     $103 = $arglist_current23;
     $104 = ((0) + 8|0);
     $expanded84 = $104;
     $expanded83 = (($expanded84) - 1)|0;
     $105 = (($103) + ($expanded83))|0;
     $106 = ((0) + 8|0);
     $expanded88 = $106;
     $expanded87 = (($expanded88) - 1)|0;
     $expanded86 = $expanded87 ^ -1;
     $107 = $105 & $expanded86;
     $108 = $107;
     $109 = +HEAPF64[$108>>3];
     $arglist_next24 = ((($108)) + 8|0);
     HEAP32[$2>>2] = $arglist_next24;
     HEAPF64[$0>>3] = $109;
     break L1;
     break;
    }
    case 18:  {
     $arglist_current26 = HEAP32[$2>>2]|0;
     $110 = $arglist_current26;
     $111 = ((0) + 8|0);
     $expanded91 = $111;
     $expanded90 = (($expanded91) - 1)|0;
     $112 = (($110) + ($expanded90))|0;
     $113 = ((0) + 8|0);
     $expanded95 = $113;
     $expanded94 = (($expanded95) - 1)|0;
     $expanded93 = $expanded94 ^ -1;
     $114 = $112 & $expanded93;
     $115 = $114;
     $116 = +HEAPF64[$115>>3];
     $arglist_next27 = ((($115)) + 8|0);
     HEAP32[$2>>2] = $arglist_next27;
     HEAPF64[$0>>3] = $116;
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 return;
}
function _fmt_x($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$05$lcssa = 0, $$056 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $4 = ($0|0)==(0);
 $5 = ($1|0)==(0);
 $6 = $4 & $5;
 if ($6) {
  $$05$lcssa = $2;
 } else {
  $$056 = $2;$15 = $1;$8 = $0;
  while(1) {
   $7 = $8 & 15;
   $9 = (30424 + ($7)|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10&255;
   $12 = $11 | $3;
   $13 = $12&255;
   $14 = ((($$056)) + -1|0);
   HEAP8[$14>>0] = $13;
   $16 = (_bitshift64Lshr(($8|0),($15|0),4)|0);
   $17 = tempRet0;
   $18 = ($16|0)==(0);
   $19 = ($17|0)==(0);
   $20 = $18 & $19;
   if ($20) {
    $$05$lcssa = $14;
    break;
   } else {
    $$056 = $14;$15 = $17;$8 = $16;
   }
  }
 }
 return ($$05$lcssa|0);
}
function _fmt_o($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$06 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0);
 $4 = ($1|0)==(0);
 $5 = $3 & $4;
 if ($5) {
  $$0$lcssa = $2;
 } else {
  $$06 = $2;$11 = $1;$7 = $0;
  while(1) {
   $6 = $7&255;
   $8 = $6 & 7;
   $9 = $8 | 48;
   $10 = ((($$06)) + -1|0);
   HEAP8[$10>>0] = $9;
   $12 = (_bitshift64Lshr(($7|0),($11|0),3)|0);
   $13 = tempRet0;
   $14 = ($12|0)==(0);
   $15 = ($13|0)==(0);
   $16 = $14 & $15;
   if ($16) {
    $$0$lcssa = $10;
    break;
   } else {
    $$06 = $10;$11 = $13;$7 = $12;
   }
  }
 }
 return ($$0$lcssa|0);
}
function _fmt_u($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$010$lcssa$off0 = 0, $$012 = 0, $$09$lcssa = 0, $$0914 = 0, $$1$lcssa = 0, $$111 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(0);
 $4 = ($0>>>0)>(4294967295);
 $5 = ($1|0)==(0);
 $6 = $5 & $4;
 $7 = $3 | $6;
 if ($7) {
  $$0914 = $2;$8 = $0;$9 = $1;
  while(1) {
   $10 = (___uremdi3(($8|0),($9|0),10,0)|0);
   $11 = tempRet0;
   $12 = $10&255;
   $13 = $12 | 48;
   $14 = ((($$0914)) + -1|0);
   HEAP8[$14>>0] = $13;
   $15 = (___udivdi3(($8|0),($9|0),10,0)|0);
   $16 = tempRet0;
   $17 = ($9>>>0)>(9);
   $18 = ($8>>>0)>(4294967295);
   $19 = ($9|0)==(9);
   $20 = $19 & $18;
   $21 = $17 | $20;
   if ($21) {
    $$0914 = $14;$8 = $15;$9 = $16;
   } else {
    break;
   }
  }
  $$010$lcssa$off0 = $15;$$09$lcssa = $14;
 } else {
  $$010$lcssa$off0 = $0;$$09$lcssa = $2;
 }
 $22 = ($$010$lcssa$off0|0)==(0);
 if ($22) {
  $$1$lcssa = $$09$lcssa;
 } else {
  $$012 = $$010$lcssa$off0;$$111 = $$09$lcssa;
  while(1) {
   $23 = (($$012>>>0) % 10)&-1;
   $24 = $23 | 48;
   $25 = $24&255;
   $26 = ((($$111)) + -1|0);
   HEAP8[$26>>0] = $25;
   $27 = (($$012>>>0) / 10)&-1;
   $28 = ($$012>>>0)<(10);
   if ($28) {
    $$1$lcssa = $26;
    break;
   } else {
    $$012 = $27;$$111 = $26;
   }
  }
 }
 return ($$1$lcssa|0);
}
function _strerror($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___pthread_self_86()|0);
 $2 = ((($1)) + 188|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (___strerror_l($0,$3)|0);
 return ($4|0);
}
function _pad_677($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$lcssa = 0, $$011 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0;
 $5 = sp;
 $6 = $4 & 73728;
 $7 = ($6|0)==(0);
 $8 = ($2|0)>($3|0);
 $or$cond = $8 & $7;
 if ($or$cond) {
  $9 = (($2) - ($3))|0;
  $10 = ($9>>>0)<(256);
  $11 = $10 ? $9 : 256;
  _memset(($5|0),($1|0),($11|0))|0;
  $12 = ($9>>>0)>(255);
  if ($12) {
   $13 = (($2) - ($3))|0;
   $$011 = $9;
   while(1) {
    _out_671($0,$5,256);
    $14 = (($$011) + -256)|0;
    $15 = ($14>>>0)>(255);
    if ($15) {
     $$011 = $14;
    } else {
     break;
    }
   }
   $16 = $13 & 255;
   $$0$lcssa = $16;
  } else {
   $$0$lcssa = $9;
  }
  _out_671($0,$5,$$0$lcssa);
 }
 STACKTOP = sp;return;
}
function _wctomb($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = (_wcrtomb($0,$1,0)|0);
  $$0 = $3;
 }
 return ($$0|0);
}
function _fmt_fp($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$ = 0, $$$ = 0, $$$$559 = 0.0, $$$3484 = 0, $$$3484691 = 0, $$$3484692 = 0, $$$3501 = 0, $$$4502 = 0, $$$542 = 0.0, $$$559 = 0.0, $$0 = 0, $$0463$lcssa = 0, $$0463584 = 0, $$0464594 = 0, $$0471 = 0.0, $$0479 = 0, $$0487642 = 0, $$0488 = 0, $$0488653 = 0, $$0488655 = 0;
 var $$0496$$9 = 0, $$0497654 = 0, $$0498 = 0, $$0509582 = 0.0, $$0510 = 0, $$0511 = 0, $$0514637 = 0, $$0520 = 0, $$0521 = 0, $$0521$ = 0, $$0523 = 0, $$0525 = 0, $$0527 = 0, $$0527629 = 0, $$0527631 = 0, $$0530636 = 0, $$1465 = 0, $$1467 = 0.0, $$1469 = 0.0, $$1472 = 0.0;
 var $$1480 = 0, $$1482$lcssa = 0, $$1482661 = 0, $$1489641 = 0, $$1499$lcssa = 0, $$1499660 = 0, $$1508583 = 0, $$1512$lcssa = 0, $$1512607 = 0, $$1515 = 0, $$1524 = 0, $$1526 = 0, $$1528614 = 0, $$1531$lcssa = 0, $$1531630 = 0, $$1598 = 0, $$2 = 0, $$2473 = 0.0, $$2476 = 0, $$2476$$547 = 0;
 var $$2476$$549 = 0, $$2483$ph = 0, $$2500 = 0, $$2513 = 0, $$2516618 = 0, $$2529 = 0, $$2532617 = 0, $$3 = 0.0, $$3477 = 0, $$3484$lcssa = 0, $$3484648 = 0, $$3501$lcssa = 0, $$3501647 = 0, $$3533613 = 0, $$4 = 0.0, $$4478$lcssa = 0, $$4478590 = 0, $$4492 = 0, $$4502 = 0, $$4518 = 0;
 var $$5$lcssa = 0, $$534$ = 0, $$539 = 0, $$539$ = 0, $$542 = 0.0, $$546 = 0, $$548 = 0, $$5486$lcssa = 0, $$5486623 = 0, $$5493597 = 0, $$5519$ph = 0, $$555 = 0, $$556 = 0, $$559 = 0.0, $$5602 = 0, $$6 = 0, $$6494589 = 0, $$7495601 = 0, $$7505 = 0, $$7505$ = 0;
 var $$7505$ph = 0, $$8 = 0, $$9$ph = 0, $$lcssa673 = 0, $$neg = 0, $$neg567 = 0, $$pn = 0, $$pn566 = 0, $$pr = 0, $$pr564 = 0, $$pre = 0, $$pre$phi690Z2D = 0, $$pre689 = 0, $$sink545$lcssa = 0, $$sink545622 = 0, $$sink562 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0.0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0.0, $229 = 0.0, $23 = 0;
 var $230 = 0, $231 = 0.0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0;
 var $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0;
 var $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0.0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0;
 var $358 = 0, $359 = 0, $36 = 0.0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0;
 var $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0;
 var $narrow = 0, $not$ = 0, $notlhs = 0, $notrhs = 0, $or$cond = 0, $or$cond3$not = 0, $or$cond537 = 0, $or$cond541 = 0, $or$cond544 = 0, $or$cond554 = 0, $or$cond6 = 0, $scevgep684 = 0, $scevgep684685 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560|0;
 $6 = sp + 8|0;
 $7 = sp;
 $8 = sp + 524|0;
 $9 = $8;
 $10 = sp + 512|0;
 HEAP32[$7>>2] = 0;
 $11 = ((($10)) + 12|0);
 (___DOUBLE_BITS_678($1)|0);
 $12 = tempRet0;
 $13 = ($12|0)<(0);
 if ($13) {
  $14 = -$1;
  $$0471 = $14;$$0520 = 1;$$0521 = 30389;
 } else {
  $15 = $4 & 2048;
  $16 = ($15|0)==(0);
  $17 = $4 & 1;
  $18 = ($17|0)==(0);
  $$ = $18 ? (30390) : (30395);
  $$$ = $16 ? $$ : (30392);
  $19 = $4 & 2049;
  $narrow = ($19|0)!=(0);
  $$534$ = $narrow&1;
  $$0471 = $1;$$0520 = $$534$;$$0521 = $$$;
 }
 (___DOUBLE_BITS_678($$0471)|0);
 $20 = tempRet0;
 $21 = $20 & 2146435072;
 $22 = ($21>>>0)<(2146435072);
 $23 = (0)<(0);
 $24 = ($21|0)==(2146435072);
 $25 = $24 & $23;
 $26 = $22 | $25;
 do {
  if ($26) {
   $35 = (+_frexpl($$0471,$7));
   $36 = $35 * 2.0;
   $37 = $36 != 0.0;
   if ($37) {
    $38 = HEAP32[$7>>2]|0;
    $39 = (($38) + -1)|0;
    HEAP32[$7>>2] = $39;
   }
   $40 = $5 | 32;
   $41 = ($40|0)==(97);
   if ($41) {
    $42 = $5 & 32;
    $43 = ($42|0)==(0);
    $44 = ((($$0521)) + 9|0);
    $$0521$ = $43 ? $$0521 : $44;
    $45 = $$0520 | 2;
    $46 = ($3>>>0)>(11);
    $47 = (12 - ($3))|0;
    $48 = ($47|0)==(0);
    $49 = $46 | $48;
    do {
     if ($49) {
      $$1472 = $36;
     } else {
      $$0509582 = 8.0;$$1508583 = $47;
      while(1) {
       $50 = (($$1508583) + -1)|0;
       $51 = $$0509582 * 16.0;
       $52 = ($50|0)==(0);
       if ($52) {
        break;
       } else {
        $$0509582 = $51;$$1508583 = $50;
       }
      }
      $53 = HEAP8[$$0521$>>0]|0;
      $54 = ($53<<24>>24)==(45);
      if ($54) {
       $55 = -$36;
       $56 = $55 - $51;
       $57 = $51 + $56;
       $58 = -$57;
       $$1472 = $58;
       break;
      } else {
       $59 = $36 + $51;
       $60 = $59 - $51;
       $$1472 = $60;
       break;
      }
     }
    } while(0);
    $61 = HEAP32[$7>>2]|0;
    $62 = ($61|0)<(0);
    $63 = (0 - ($61))|0;
    $64 = $62 ? $63 : $61;
    $65 = ($64|0)<(0);
    $66 = $65 << 31 >> 31;
    $67 = (_fmt_u($64,$66,$11)|0);
    $68 = ($67|0)==($11|0);
    if ($68) {
     $69 = ((($10)) + 11|0);
     HEAP8[$69>>0] = 48;
     $$0511 = $69;
    } else {
     $$0511 = $67;
    }
    $70 = $61 >> 31;
    $71 = $70 & 2;
    $72 = (($71) + 43)|0;
    $73 = $72&255;
    $74 = ((($$0511)) + -1|0);
    HEAP8[$74>>0] = $73;
    $75 = (($5) + 15)|0;
    $76 = $75&255;
    $77 = ((($$0511)) + -2|0);
    HEAP8[$77>>0] = $76;
    $notrhs = ($3|0)<(1);
    $78 = $4 & 8;
    $79 = ($78|0)==(0);
    $$0523 = $8;$$2473 = $$1472;
    while(1) {
     $80 = (~~(($$2473)));
     $81 = (30424 + ($80)|0);
     $82 = HEAP8[$81>>0]|0;
     $83 = $82&255;
     $84 = $83 | $42;
     $85 = $84&255;
     $86 = ((($$0523)) + 1|0);
     HEAP8[$$0523>>0] = $85;
     $87 = (+($80|0));
     $88 = $$2473 - $87;
     $89 = $88 * 16.0;
     $90 = $86;
     $91 = (($90) - ($9))|0;
     $92 = ($91|0)==(1);
     if ($92) {
      $notlhs = $89 == 0.0;
      $or$cond3$not = $notrhs & $notlhs;
      $or$cond = $79 & $or$cond3$not;
      if ($or$cond) {
       $$1524 = $86;
      } else {
       $93 = ((($$0523)) + 2|0);
       HEAP8[$86>>0] = 46;
       $$1524 = $93;
      }
     } else {
      $$1524 = $86;
     }
     $94 = $89 != 0.0;
     if ($94) {
      $$0523 = $$1524;$$2473 = $89;
     } else {
      break;
     }
    }
    $95 = ($3|0)!=(0);
    $96 = $77;
    $97 = $11;
    $98 = $$1524;
    $99 = (($98) - ($9))|0;
    $100 = (($97) - ($96))|0;
    $101 = (($99) + -2)|0;
    $102 = ($101|0)<($3|0);
    $or$cond537 = $95 & $102;
    $103 = (($3) + 2)|0;
    $$pn = $or$cond537 ? $103 : $99;
    $$0525 = (($100) + ($45))|0;
    $104 = (($$0525) + ($$pn))|0;
    _pad_677($0,32,$2,$104,$4);
    _out_671($0,$$0521$,$45);
    $105 = $4 ^ 65536;
    _pad_677($0,48,$2,$104,$105);
    _out_671($0,$8,$99);
    $106 = (($$pn) - ($99))|0;
    _pad_677($0,48,$106,0,0);
    _out_671($0,$77,$100);
    $107 = $4 ^ 8192;
    _pad_677($0,32,$2,$104,$107);
    $$sink562 = $104;
    break;
   }
   $108 = ($3|0)<(0);
   $$539 = $108 ? 6 : $3;
   if ($37) {
    $109 = $36 * 268435456.0;
    $110 = HEAP32[$7>>2]|0;
    $111 = (($110) + -28)|0;
    HEAP32[$7>>2] = $111;
    $$3 = $109;$$pr = $111;
   } else {
    $$pre = HEAP32[$7>>2]|0;
    $$3 = $36;$$pr = $$pre;
   }
   $112 = ($$pr|0)<(0);
   $113 = ((($6)) + 288|0);
   $$556 = $112 ? $6 : $113;
   $$0498 = $$556;$$4 = $$3;
   while(1) {
    $114 = (~~(($$4))>>>0);
    HEAP32[$$0498>>2] = $114;
    $115 = ((($$0498)) + 4|0);
    $116 = (+($114>>>0));
    $117 = $$4 - $116;
    $118 = $117 * 1.0E+9;
    $119 = $118 != 0.0;
    if ($119) {
     $$0498 = $115;$$4 = $118;
    } else {
     break;
    }
   }
   $120 = ($$pr|0)>(0);
   if ($120) {
    $$1482661 = $$556;$$1499660 = $115;$122 = $$pr;
    while(1) {
     $121 = ($122|0)<(29);
     $123 = $121 ? $122 : 29;
     $$0488653 = ((($$1499660)) + -4|0);
     $124 = ($$0488653>>>0)<($$1482661>>>0);
     if ($124) {
      $$2483$ph = $$1482661;
     } else {
      $$0488655 = $$0488653;$$0497654 = 0;
      while(1) {
       $125 = HEAP32[$$0488655>>2]|0;
       $126 = (_bitshift64Shl(($125|0),0,($123|0))|0);
       $127 = tempRet0;
       $128 = (_i64Add(($126|0),($127|0),($$0497654|0),0)|0);
       $129 = tempRet0;
       $130 = (___uremdi3(($128|0),($129|0),1000000000,0)|0);
       $131 = tempRet0;
       HEAP32[$$0488655>>2] = $130;
       $132 = (___udivdi3(($128|0),($129|0),1000000000,0)|0);
       $133 = tempRet0;
       $$0488 = ((($$0488655)) + -4|0);
       $134 = ($$0488>>>0)<($$1482661>>>0);
       if ($134) {
        break;
       } else {
        $$0488655 = $$0488;$$0497654 = $132;
       }
      }
      $135 = ($132|0)==(0);
      if ($135) {
       $$2483$ph = $$1482661;
      } else {
       $136 = ((($$1482661)) + -4|0);
       HEAP32[$136>>2] = $132;
       $$2483$ph = $136;
      }
     }
     $$2500 = $$1499660;
     while(1) {
      $137 = ($$2500>>>0)>($$2483$ph>>>0);
      if (!($137)) {
       break;
      }
      $138 = ((($$2500)) + -4|0);
      $139 = HEAP32[$138>>2]|0;
      $140 = ($139|0)==(0);
      if ($140) {
       $$2500 = $138;
      } else {
       break;
      }
     }
     $141 = HEAP32[$7>>2]|0;
     $142 = (($141) - ($123))|0;
     HEAP32[$7>>2] = $142;
     $143 = ($142|0)>(0);
     if ($143) {
      $$1482661 = $$2483$ph;$$1499660 = $$2500;$122 = $142;
     } else {
      $$1482$lcssa = $$2483$ph;$$1499$lcssa = $$2500;$$pr564 = $142;
      break;
     }
    }
   } else {
    $$1482$lcssa = $$556;$$1499$lcssa = $115;$$pr564 = $$pr;
   }
   $144 = ($$pr564|0)<(0);
   if ($144) {
    $145 = (($$539) + 25)|0;
    $146 = (($145|0) / 9)&-1;
    $147 = (($146) + 1)|0;
    $148 = ($40|0)==(102);
    $$3484648 = $$1482$lcssa;$$3501647 = $$1499$lcssa;$150 = $$pr564;
    while(1) {
     $149 = (0 - ($150))|0;
     $151 = ($149|0)<(9);
     $152 = $151 ? $149 : 9;
     $153 = ($$3484648>>>0)<($$3501647>>>0);
     if ($153) {
      $157 = 1 << $152;
      $158 = (($157) + -1)|0;
      $159 = 1000000000 >>> $152;
      $$0487642 = 0;$$1489641 = $$3484648;
      while(1) {
       $160 = HEAP32[$$1489641>>2]|0;
       $161 = $160 & $158;
       $162 = $160 >>> $152;
       $163 = (($162) + ($$0487642))|0;
       HEAP32[$$1489641>>2] = $163;
       $164 = Math_imul($161, $159)|0;
       $165 = ((($$1489641)) + 4|0);
       $166 = ($165>>>0)<($$3501647>>>0);
       if ($166) {
        $$0487642 = $164;$$1489641 = $165;
       } else {
        break;
       }
      }
      $167 = HEAP32[$$3484648>>2]|0;
      $168 = ($167|0)==(0);
      $169 = ((($$3484648)) + 4|0);
      $$$3484 = $168 ? $169 : $$3484648;
      $170 = ($164|0)==(0);
      if ($170) {
       $$$3484692 = $$$3484;$$4502 = $$3501647;
      } else {
       $171 = ((($$3501647)) + 4|0);
       HEAP32[$$3501647>>2] = $164;
       $$$3484692 = $$$3484;$$4502 = $171;
      }
     } else {
      $154 = HEAP32[$$3484648>>2]|0;
      $155 = ($154|0)==(0);
      $156 = ((($$3484648)) + 4|0);
      $$$3484691 = $155 ? $156 : $$3484648;
      $$$3484692 = $$$3484691;$$4502 = $$3501647;
     }
     $172 = $148 ? $$556 : $$$3484692;
     $173 = $$4502;
     $174 = $172;
     $175 = (($173) - ($174))|0;
     $176 = $175 >> 2;
     $177 = ($176|0)>($147|0);
     $178 = (($172) + ($147<<2)|0);
     $$$4502 = $177 ? $178 : $$4502;
     $179 = HEAP32[$7>>2]|0;
     $180 = (($179) + ($152))|0;
     HEAP32[$7>>2] = $180;
     $181 = ($180|0)<(0);
     if ($181) {
      $$3484648 = $$$3484692;$$3501647 = $$$4502;$150 = $180;
     } else {
      $$3484$lcssa = $$$3484692;$$3501$lcssa = $$$4502;
      break;
     }
    }
   } else {
    $$3484$lcssa = $$1482$lcssa;$$3501$lcssa = $$1499$lcssa;
   }
   $182 = ($$3484$lcssa>>>0)<($$3501$lcssa>>>0);
   $183 = $$556;
   if ($182) {
    $184 = $$3484$lcssa;
    $185 = (($183) - ($184))|0;
    $186 = $185 >> 2;
    $187 = ($186*9)|0;
    $188 = HEAP32[$$3484$lcssa>>2]|0;
    $189 = ($188>>>0)<(10);
    if ($189) {
     $$1515 = $187;
    } else {
     $$0514637 = $187;$$0530636 = 10;
     while(1) {
      $190 = ($$0530636*10)|0;
      $191 = (($$0514637) + 1)|0;
      $192 = ($188>>>0)<($190>>>0);
      if ($192) {
       $$1515 = $191;
       break;
      } else {
       $$0514637 = $191;$$0530636 = $190;
      }
     }
    }
   } else {
    $$1515 = 0;
   }
   $193 = ($40|0)!=(102);
   $194 = $193 ? $$1515 : 0;
   $195 = (($$539) - ($194))|0;
   $196 = ($40|0)==(103);
   $197 = ($$539|0)!=(0);
   $198 = $197 & $196;
   $$neg = $198 << 31 >> 31;
   $199 = (($195) + ($$neg))|0;
   $200 = $$3501$lcssa;
   $201 = (($200) - ($183))|0;
   $202 = $201 >> 2;
   $203 = ($202*9)|0;
   $204 = (($203) + -9)|0;
   $205 = ($199|0)<($204|0);
   if ($205) {
    $206 = ((($$556)) + 4|0);
    $207 = (($199) + 9216)|0;
    $208 = (($207|0) / 9)&-1;
    $209 = (($208) + -1024)|0;
    $210 = (($206) + ($209<<2)|0);
    $211 = (($207|0) % 9)&-1;
    $$0527629 = (($211) + 1)|0;
    $212 = ($$0527629|0)<(9);
    if ($212) {
     $$0527631 = $$0527629;$$1531630 = 10;
     while(1) {
      $213 = ($$1531630*10)|0;
      $$0527 = (($$0527631) + 1)|0;
      $exitcond = ($$0527|0)==(9);
      if ($exitcond) {
       $$1531$lcssa = $213;
       break;
      } else {
       $$0527631 = $$0527;$$1531630 = $213;
      }
     }
    } else {
     $$1531$lcssa = 10;
    }
    $214 = HEAP32[$210>>2]|0;
    $215 = (($214>>>0) % ($$1531$lcssa>>>0))&-1;
    $216 = ($215|0)==(0);
    $217 = ((($210)) + 4|0);
    $218 = ($217|0)==($$3501$lcssa|0);
    $or$cond541 = $218 & $216;
    if ($or$cond541) {
     $$4492 = $210;$$4518 = $$1515;$$8 = $$3484$lcssa;
    } else {
     $219 = (($214>>>0) / ($$1531$lcssa>>>0))&-1;
     $220 = $219 & 1;
     $221 = ($220|0)==(0);
     $$542 = $221 ? 9007199254740992.0 : 9007199254740994.0;
     $222 = (($$1531$lcssa|0) / 2)&-1;
     $223 = ($215>>>0)<($222>>>0);
     $224 = ($215|0)==($222|0);
     $or$cond544 = $218 & $224;
     $$559 = $or$cond544 ? 1.0 : 1.5;
     $$$559 = $223 ? 0.5 : $$559;
     $225 = ($$0520|0)==(0);
     if ($225) {
      $$1467 = $$$559;$$1469 = $$542;
     } else {
      $226 = HEAP8[$$0521>>0]|0;
      $227 = ($226<<24>>24)==(45);
      $228 = -$$542;
      $229 = -$$$559;
      $$$542 = $227 ? $228 : $$542;
      $$$$559 = $227 ? $229 : $$$559;
      $$1467 = $$$$559;$$1469 = $$$542;
     }
     $230 = (($214) - ($215))|0;
     HEAP32[$210>>2] = $230;
     $231 = $$1469 + $$1467;
     $232 = $231 != $$1469;
     if ($232) {
      $233 = (($230) + ($$1531$lcssa))|0;
      HEAP32[$210>>2] = $233;
      $234 = ($233>>>0)>(999999999);
      if ($234) {
       $$5486623 = $$3484$lcssa;$$sink545622 = $210;
       while(1) {
        $235 = ((($$sink545622)) + -4|0);
        HEAP32[$$sink545622>>2] = 0;
        $236 = ($235>>>0)<($$5486623>>>0);
        if ($236) {
         $237 = ((($$5486623)) + -4|0);
         HEAP32[$237>>2] = 0;
         $$6 = $237;
        } else {
         $$6 = $$5486623;
        }
        $238 = HEAP32[$235>>2]|0;
        $239 = (($238) + 1)|0;
        HEAP32[$235>>2] = $239;
        $240 = ($239>>>0)>(999999999);
        if ($240) {
         $$5486623 = $$6;$$sink545622 = $235;
        } else {
         $$5486$lcssa = $$6;$$sink545$lcssa = $235;
         break;
        }
       }
      } else {
       $$5486$lcssa = $$3484$lcssa;$$sink545$lcssa = $210;
      }
      $241 = $$5486$lcssa;
      $242 = (($183) - ($241))|0;
      $243 = $242 >> 2;
      $244 = ($243*9)|0;
      $245 = HEAP32[$$5486$lcssa>>2]|0;
      $246 = ($245>>>0)<(10);
      if ($246) {
       $$4492 = $$sink545$lcssa;$$4518 = $244;$$8 = $$5486$lcssa;
      } else {
       $$2516618 = $244;$$2532617 = 10;
       while(1) {
        $247 = ($$2532617*10)|0;
        $248 = (($$2516618) + 1)|0;
        $249 = ($245>>>0)<($247>>>0);
        if ($249) {
         $$4492 = $$sink545$lcssa;$$4518 = $248;$$8 = $$5486$lcssa;
         break;
        } else {
         $$2516618 = $248;$$2532617 = $247;
        }
       }
      }
     } else {
      $$4492 = $210;$$4518 = $$1515;$$8 = $$3484$lcssa;
     }
    }
    $250 = ((($$4492)) + 4|0);
    $251 = ($$3501$lcssa>>>0)>($250>>>0);
    $$$3501 = $251 ? $250 : $$3501$lcssa;
    $$5519$ph = $$4518;$$7505$ph = $$$3501;$$9$ph = $$8;
   } else {
    $$5519$ph = $$1515;$$7505$ph = $$3501$lcssa;$$9$ph = $$3484$lcssa;
   }
   $$7505 = $$7505$ph;
   while(1) {
    $252 = ($$7505>>>0)>($$9$ph>>>0);
    if (!($252)) {
     $$lcssa673 = 0;
     break;
    }
    $253 = ((($$7505)) + -4|0);
    $254 = HEAP32[$253>>2]|0;
    $255 = ($254|0)==(0);
    if ($255) {
     $$7505 = $253;
    } else {
     $$lcssa673 = 1;
     break;
    }
   }
   $256 = (0 - ($$5519$ph))|0;
   do {
    if ($196) {
     $not$ = $197 ^ 1;
     $257 = $not$&1;
     $$539$ = (($257) + ($$539))|0;
     $258 = ($$539$|0)>($$5519$ph|0);
     $259 = ($$5519$ph|0)>(-5);
     $or$cond6 = $258 & $259;
     if ($or$cond6) {
      $260 = (($5) + -1)|0;
      $$neg567 = (($$539$) + -1)|0;
      $261 = (($$neg567) - ($$5519$ph))|0;
      $$0479 = $260;$$2476 = $261;
     } else {
      $262 = (($5) + -2)|0;
      $263 = (($$539$) + -1)|0;
      $$0479 = $262;$$2476 = $263;
     }
     $264 = $4 & 8;
     $265 = ($264|0)==(0);
     if ($265) {
      if ($$lcssa673) {
       $266 = ((($$7505)) + -4|0);
       $267 = HEAP32[$266>>2]|0;
       $268 = ($267|0)==(0);
       if ($268) {
        $$2529 = 9;
       } else {
        $269 = (($267>>>0) % 10)&-1;
        $270 = ($269|0)==(0);
        if ($270) {
         $$1528614 = 0;$$3533613 = 10;
         while(1) {
          $271 = ($$3533613*10)|0;
          $272 = (($$1528614) + 1)|0;
          $273 = (($267>>>0) % ($271>>>0))&-1;
          $274 = ($273|0)==(0);
          if ($274) {
           $$1528614 = $272;$$3533613 = $271;
          } else {
           $$2529 = $272;
           break;
          }
         }
        } else {
         $$2529 = 0;
        }
       }
      } else {
       $$2529 = 9;
      }
      $275 = $$0479 | 32;
      $276 = ($275|0)==(102);
      $277 = $$7505;
      $278 = (($277) - ($183))|0;
      $279 = $278 >> 2;
      $280 = ($279*9)|0;
      $281 = (($280) + -9)|0;
      if ($276) {
       $282 = (($281) - ($$2529))|0;
       $283 = ($282|0)>(0);
       $$546 = $283 ? $282 : 0;
       $284 = ($$2476|0)<($$546|0);
       $$2476$$547 = $284 ? $$2476 : $$546;
       $$1480 = $$0479;$$3477 = $$2476$$547;$$pre$phi690Z2D = 0;
       break;
      } else {
       $285 = (($281) + ($$5519$ph))|0;
       $286 = (($285) - ($$2529))|0;
       $287 = ($286|0)>(0);
       $$548 = $287 ? $286 : 0;
       $288 = ($$2476|0)<($$548|0);
       $$2476$$549 = $288 ? $$2476 : $$548;
       $$1480 = $$0479;$$3477 = $$2476$$549;$$pre$phi690Z2D = 0;
       break;
      }
     } else {
      $$1480 = $$0479;$$3477 = $$2476;$$pre$phi690Z2D = $264;
     }
    } else {
     $$pre689 = $4 & 8;
     $$1480 = $5;$$3477 = $$539;$$pre$phi690Z2D = $$pre689;
    }
   } while(0);
   $289 = $$3477 | $$pre$phi690Z2D;
   $290 = ($289|0)!=(0);
   $291 = $290&1;
   $292 = $$1480 | 32;
   $293 = ($292|0)==(102);
   if ($293) {
    $294 = ($$5519$ph|0)>(0);
    $295 = $294 ? $$5519$ph : 0;
    $$2513 = 0;$$pn566 = $295;
   } else {
    $296 = ($$5519$ph|0)<(0);
    $297 = $296 ? $256 : $$5519$ph;
    $298 = ($297|0)<(0);
    $299 = $298 << 31 >> 31;
    $300 = (_fmt_u($297,$299,$11)|0);
    $301 = $11;
    $302 = $300;
    $303 = (($301) - ($302))|0;
    $304 = ($303|0)<(2);
    if ($304) {
     $$1512607 = $300;
     while(1) {
      $305 = ((($$1512607)) + -1|0);
      HEAP8[$305>>0] = 48;
      $306 = $305;
      $307 = (($301) - ($306))|0;
      $308 = ($307|0)<(2);
      if ($308) {
       $$1512607 = $305;
      } else {
       $$1512$lcssa = $305;
       break;
      }
     }
    } else {
     $$1512$lcssa = $300;
    }
    $309 = $$5519$ph >> 31;
    $310 = $309 & 2;
    $311 = (($310) + 43)|0;
    $312 = $311&255;
    $313 = ((($$1512$lcssa)) + -1|0);
    HEAP8[$313>>0] = $312;
    $314 = $$1480&255;
    $315 = ((($$1512$lcssa)) + -2|0);
    HEAP8[$315>>0] = $314;
    $316 = $315;
    $317 = (($301) - ($316))|0;
    $$2513 = $315;$$pn566 = $317;
   }
   $318 = (($$0520) + 1)|0;
   $319 = (($318) + ($$3477))|0;
   $$1526 = (($319) + ($291))|0;
   $320 = (($$1526) + ($$pn566))|0;
   _pad_677($0,32,$2,$320,$4);
   _out_671($0,$$0521,$$0520);
   $321 = $4 ^ 65536;
   _pad_677($0,48,$2,$320,$321);
   if ($293) {
    $322 = ($$9$ph>>>0)>($$556>>>0);
    $$0496$$9 = $322 ? $$556 : $$9$ph;
    $323 = ((($8)) + 9|0);
    $324 = $323;
    $325 = ((($8)) + 8|0);
    $$5493597 = $$0496$$9;
    while(1) {
     $326 = HEAP32[$$5493597>>2]|0;
     $327 = (_fmt_u($326,0,$323)|0);
     $328 = ($$5493597|0)==($$0496$$9|0);
     if ($328) {
      $334 = ($327|0)==($323|0);
      if ($334) {
       HEAP8[$325>>0] = 48;
       $$1465 = $325;
      } else {
       $$1465 = $327;
      }
     } else {
      $329 = ($327>>>0)>($8>>>0);
      if ($329) {
       $330 = $327;
       $331 = (($330) - ($9))|0;
       _memset(($8|0),48,($331|0))|0;
       $$0464594 = $327;
       while(1) {
        $332 = ((($$0464594)) + -1|0);
        $333 = ($332>>>0)>($8>>>0);
        if ($333) {
         $$0464594 = $332;
        } else {
         $$1465 = $332;
         break;
        }
       }
      } else {
       $$1465 = $327;
      }
     }
     $335 = $$1465;
     $336 = (($324) - ($335))|0;
     _out_671($0,$$1465,$336);
     $337 = ((($$5493597)) + 4|0);
     $338 = ($337>>>0)>($$556>>>0);
     if ($338) {
      break;
     } else {
      $$5493597 = $337;
     }
    }
    $339 = ($289|0)==(0);
    if (!($339)) {
     _out_671($0,30440,1);
    }
    $340 = ($337>>>0)<($$7505>>>0);
    $341 = ($$3477|0)>(0);
    $342 = $340 & $341;
    if ($342) {
     $$4478590 = $$3477;$$6494589 = $337;
     while(1) {
      $343 = HEAP32[$$6494589>>2]|0;
      $344 = (_fmt_u($343,0,$323)|0);
      $345 = ($344>>>0)>($8>>>0);
      if ($345) {
       $346 = $344;
       $347 = (($346) - ($9))|0;
       _memset(($8|0),48,($347|0))|0;
       $$0463584 = $344;
       while(1) {
        $348 = ((($$0463584)) + -1|0);
        $349 = ($348>>>0)>($8>>>0);
        if ($349) {
         $$0463584 = $348;
        } else {
         $$0463$lcssa = $348;
         break;
        }
       }
      } else {
       $$0463$lcssa = $344;
      }
      $350 = ($$4478590|0)<(9);
      $351 = $350 ? $$4478590 : 9;
      _out_671($0,$$0463$lcssa,$351);
      $352 = ((($$6494589)) + 4|0);
      $353 = (($$4478590) + -9)|0;
      $354 = ($352>>>0)<($$7505>>>0);
      $355 = ($$4478590|0)>(9);
      $356 = $354 & $355;
      if ($356) {
       $$4478590 = $353;$$6494589 = $352;
      } else {
       $$4478$lcssa = $353;
       break;
      }
     }
    } else {
     $$4478$lcssa = $$3477;
    }
    $357 = (($$4478$lcssa) + 9)|0;
    _pad_677($0,48,$357,9,0);
   } else {
    $358 = ((($$9$ph)) + 4|0);
    $$7505$ = $$lcssa673 ? $$7505 : $358;
    $359 = ($$3477|0)>(-1);
    if ($359) {
     $360 = ((($8)) + 9|0);
     $361 = ($$pre$phi690Z2D|0)==(0);
     $362 = $360;
     $363 = (0 - ($9))|0;
     $364 = ((($8)) + 8|0);
     $$5602 = $$3477;$$7495601 = $$9$ph;
     while(1) {
      $365 = HEAP32[$$7495601>>2]|0;
      $366 = (_fmt_u($365,0,$360)|0);
      $367 = ($366|0)==($360|0);
      if ($367) {
       HEAP8[$364>>0] = 48;
       $$0 = $364;
      } else {
       $$0 = $366;
      }
      $368 = ($$7495601|0)==($$9$ph|0);
      do {
       if ($368) {
        $372 = ((($$0)) + 1|0);
        _out_671($0,$$0,1);
        $373 = ($$5602|0)<(1);
        $or$cond554 = $361 & $373;
        if ($or$cond554) {
         $$2 = $372;
         break;
        }
        _out_671($0,30440,1);
        $$2 = $372;
       } else {
        $369 = ($$0>>>0)>($8>>>0);
        if (!($369)) {
         $$2 = $$0;
         break;
        }
        $scevgep684 = (($$0) + ($363)|0);
        $scevgep684685 = $scevgep684;
        _memset(($8|0),48,($scevgep684685|0))|0;
        $$1598 = $$0;
        while(1) {
         $370 = ((($$1598)) + -1|0);
         $371 = ($370>>>0)>($8>>>0);
         if ($371) {
          $$1598 = $370;
         } else {
          $$2 = $370;
          break;
         }
        }
       }
      } while(0);
      $374 = $$2;
      $375 = (($362) - ($374))|0;
      $376 = ($$5602|0)>($375|0);
      $377 = $376 ? $375 : $$5602;
      _out_671($0,$$2,$377);
      $378 = (($$5602) - ($375))|0;
      $379 = ((($$7495601)) + 4|0);
      $380 = ($379>>>0)<($$7505$>>>0);
      $381 = ($378|0)>(-1);
      $382 = $380 & $381;
      if ($382) {
       $$5602 = $378;$$7495601 = $379;
      } else {
       $$5$lcssa = $378;
       break;
      }
     }
    } else {
     $$5$lcssa = $$3477;
    }
    $383 = (($$5$lcssa) + 18)|0;
    _pad_677($0,48,$383,18,0);
    $384 = $11;
    $385 = $$2513;
    $386 = (($384) - ($385))|0;
    _out_671($0,$$2513,$386);
   }
   $387 = $4 ^ 8192;
   _pad_677($0,32,$2,$320,$387);
   $$sink562 = $320;
  } else {
   $27 = $5 & 32;
   $28 = ($27|0)!=(0);
   $29 = $28 ? 30408 : 30412;
   $30 = ($$0471 != $$0471) | (0.0 != 0.0);
   $31 = $28 ? 30416 : 30420;
   $$0510 = $30 ? $31 : $29;
   $32 = (($$0520) + 3)|0;
   $33 = $4 & -65537;
   _pad_677($0,32,$2,$32,$33);
   _out_671($0,$$0521,$$0520);
   _out_671($0,$$0510,3);
   $34 = $4 ^ 8192;
   _pad_677($0,32,$2,$32,$34);
   $$sink562 = $32;
  }
 } while(0);
 $388 = ($$sink562|0)<($2|0);
 $$555 = $388 ? $2 : $$sink562;
 STACKTOP = sp;return ($$555|0);
}
function ___DOUBLE_BITS_678($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 tempRet0 = ($2);
 return ($1|0);
}
function _frexpl($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_frexp($0,$1));
 return (+$2);
}
function _frexp($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$0 = 0.0, $$016 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $storemerge = 0, $trunc$clear = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $5 = tempRet0;
 $6 = $4&65535;
 $trunc$clear = $6 & 2047;
 switch ($trunc$clear<<16>>16) {
 case 0:  {
  $7 = $0 != 0.0;
  if ($7) {
   $8 = $0 * 1.8446744073709552E+19;
   $9 = (+_frexp($8,$1));
   $10 = HEAP32[$1>>2]|0;
   $11 = (($10) + -64)|0;
   $$016 = $9;$storemerge = $11;
  } else {
   $$016 = $0;$storemerge = 0;
  }
  HEAP32[$1>>2] = $storemerge;
  $$0 = $$016;
  break;
 }
 case 2047:  {
  $$0 = $0;
  break;
 }
 default: {
  $12 = $4 & 2047;
  $13 = (($12) + -1022)|0;
  HEAP32[$1>>2] = $13;
  $14 = $3 & -2146435073;
  $15 = $14 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $15;$16 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $16;
 }
 }
 return (+$$0);
}
function _wcrtomb($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0|0);
 do {
  if ($3) {
   $$0 = 1;
  } else {
   $4 = ($1>>>0)<(128);
   if ($4) {
    $5 = $1&255;
    HEAP8[$0>>0] = $5;
    $$0 = 1;
    break;
   }
   $6 = (___pthread_self_909()|0);
   $7 = ((($6)) + 188|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = HEAP32[$8>>2]|0;
   $not$ = ($9|0)==(0|0);
   if ($not$) {
    $10 = $1 & -128;
    $11 = ($10|0)==(57216);
    if ($11) {
     $13 = $1&255;
     HEAP8[$0>>0] = $13;
     $$0 = 1;
     break;
    } else {
     $12 = (___errno_location()|0);
     HEAP32[$12>>2] = 84;
     $$0 = -1;
     break;
    }
   }
   $14 = ($1>>>0)<(2048);
   if ($14) {
    $15 = $1 >>> 6;
    $16 = $15 | 192;
    $17 = $16&255;
    $18 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $17;
    $19 = $1 & 63;
    $20 = $19 | 128;
    $21 = $20&255;
    HEAP8[$18>>0] = $21;
    $$0 = 2;
    break;
   }
   $22 = ($1>>>0)<(55296);
   $23 = $1 & -8192;
   $24 = ($23|0)==(57344);
   $or$cond = $22 | $24;
   if ($or$cond) {
    $25 = $1 >>> 12;
    $26 = $25 | 224;
    $27 = $26&255;
    $28 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $27;
    $29 = $1 >>> 6;
    $30 = $29 & 63;
    $31 = $30 | 128;
    $32 = $31&255;
    $33 = ((($0)) + 2|0);
    HEAP8[$28>>0] = $32;
    $34 = $1 & 63;
    $35 = $34 | 128;
    $36 = $35&255;
    HEAP8[$33>>0] = $36;
    $$0 = 3;
    break;
   }
   $37 = (($1) + -65536)|0;
   $38 = ($37>>>0)<(1048576);
   if ($38) {
    $39 = $1 >>> 18;
    $40 = $39 | 240;
    $41 = $40&255;
    $42 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $41;
    $43 = $1 >>> 12;
    $44 = $43 & 63;
    $45 = $44 | 128;
    $46 = $45&255;
    $47 = ((($0)) + 2|0);
    HEAP8[$42>>0] = $46;
    $48 = $1 >>> 6;
    $49 = $48 & 63;
    $50 = $49 | 128;
    $51 = $50&255;
    $52 = ((($0)) + 3|0);
    HEAP8[$47>>0] = $51;
    $53 = $1 & 63;
    $54 = $53 | 128;
    $55 = $54&255;
    HEAP8[$52>>0] = $55;
    $$0 = 4;
    break;
   } else {
    $56 = (___errno_location()|0);
    HEAP32[$56>>2] = 84;
    $$0 = -1;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___pthread_self_909() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function ___pthread_self_86() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function ___strerror_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$012$lcssa = 0, $$01214 = 0, $$016 = 0, $$113 = 0, $$115 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $$016 = 0;
 while(1) {
  $3 = (30442 + ($$016)|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = $4&255;
  $6 = ($5|0)==($0|0);
  if ($6) {
   label = 2;
   break;
  }
  $7 = (($$016) + 1)|0;
  $8 = ($7|0)==(87);
  if ($8) {
   $$01214 = 30530;$$115 = 87;
   label = 5;
   break;
  } else {
   $$016 = $7;
  }
 }
 if ((label|0) == 2) {
  $2 = ($$016|0)==(0);
  if ($2) {
   $$012$lcssa = 30530;
  } else {
   $$01214 = 30530;$$115 = $$016;
   label = 5;
  }
 }
 if ((label|0) == 5) {
  while(1) {
   label = 0;
   $$113 = $$01214;
   while(1) {
    $9 = HEAP8[$$113>>0]|0;
    $10 = ($9<<24>>24)==(0);
    $11 = ((($$113)) + 1|0);
    if ($10) {
     break;
    } else {
     $$113 = $11;
    }
   }
   $12 = (($$115) + -1)|0;
   $13 = ($12|0)==(0);
   if ($13) {
    $$012$lcssa = $11;
    break;
   } else {
    $$01214 = $11;$$115 = $12;
    label = 5;
   }
  }
 }
 $14 = ((($1)) + 20|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (___lctrans($$012$lcssa,$15)|0);
 return ($16|0);
}
function ___lctrans($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___lctrans_impl($0,$1)|0);
 return ($2|0);
}
function ___fseeko($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 76|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)>(-1);
 if ($5) {
  $7 = (___lockfile($0)|0);
  $phitmp = ($7|0)==(0);
  $8 = (___fseeko_unlocked($0,$1,$2)|0);
  if ($phitmp) {
   $9 = $8;
  } else {
   ___unlockfile($0);
   $9 = $8;
  }
 } else {
  $6 = (___fseeko_unlocked($0,$1,$2)|0);
  $9 = $6;
 }
 return ($9|0);
}
function ___fseeko_unlocked($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$019 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(1);
 if ($3) {
  $4 = ((($0)) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($0)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($1) - ($5))|0;
  $9 = (($8) + ($7))|0;
  $$019 = $9;
 } else {
  $$019 = $1;
 }
 $10 = ((($0)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($0)) + 28|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($11>>>0)>($13>>>0);
 if ($14) {
  $15 = ((($0)) + 36|0);
  $16 = HEAP32[$15>>2]|0;
  (FUNCTION_TABLE_iiii[$16 & 63]($0,0,0)|0);
  $17 = HEAP32[$10>>2]|0;
  $18 = ($17|0)==(0|0);
  if ($18) {
   $$0 = -1;
  } else {
   label = 5;
  }
 } else {
  label = 5;
 }
 if ((label|0) == 5) {
  $19 = ((($0)) + 16|0);
  HEAP32[$19>>2] = 0;
  HEAP32[$12>>2] = 0;
  HEAP32[$10>>2] = 0;
  $20 = ((($0)) + 40|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (FUNCTION_TABLE_iiii[$21 & 63]($0,$$019,$2)|0);
  $23 = ($22|0)<(0);
  if ($23) {
   $$0 = -1;
  } else {
   $24 = ((($0)) + 8|0);
   HEAP32[$24>>2] = 0;
   $25 = ((($0)) + 4|0);
   HEAP32[$25>>2] = 0;
   $26 = HEAP32[$0>>2]|0;
   $27 = $26 & -17;
   HEAP32[$0>>2] = $27;
   $$0 = 0;
  }
 }
 return ($$0|0);
}
function _memcmp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$01318 = 0, $$01417 = 0, $$019 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $14 = 0;
  } else {
   $$01318 = $0;$$01417 = $2;$$019 = $1;
   while(1) {
    $4 = HEAP8[$$01318>>0]|0;
    $5 = HEAP8[$$019>>0]|0;
    $6 = ($4<<24>>24)==($5<<24>>24);
    if (!($6)) {
     break;
    }
    $7 = (($$01417) + -1)|0;
    $8 = ((($$01318)) + 1|0);
    $9 = ((($$019)) + 1|0);
    $10 = ($7|0)==(0);
    if ($10) {
     $14 = 0;
     break L1;
    } else {
     $$01318 = $8;$$01417 = $7;$$019 = $9;
    }
   }
   $11 = $4&255;
   $12 = $5&255;
   $13 = (($11) - ($12))|0;
   $14 = $13;
  }
 } while(0);
 return ($14|0);
}
function _vsnprintf($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$$015 = 0, $$0 = 0, $$014 = 0, $$015 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $4 = sp + 124|0;
 $5 = sp;
 dest=$5; src=23060; stop=dest+124|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $6 = (($1) + -1)|0;
 $7 = ($6>>>0)>(2147483646);
 if ($7) {
  $8 = ($1|0)==(0);
  if ($8) {
   $$014 = $4;$$015 = 1;
   label = 4;
  } else {
   $9 = (___errno_location()|0);
   HEAP32[$9>>2] = 75;
   $$0 = -1;
  }
 } else {
  $$014 = $0;$$015 = $1;
  label = 4;
 }
 if ((label|0) == 4) {
  $10 = $$014;
  $11 = (-2 - ($10))|0;
  $12 = ($$015>>>0)>($11>>>0);
  $$$015 = $12 ? $11 : $$015;
  $13 = ((($5)) + 48|0);
  HEAP32[$13>>2] = $$$015;
  $14 = ((($5)) + 20|0);
  HEAP32[$14>>2] = $$014;
  $15 = ((($5)) + 44|0);
  HEAP32[$15>>2] = $$014;
  $16 = (($$014) + ($$$015)|0);
  $17 = ((($5)) + 16|0);
  HEAP32[$17>>2] = $16;
  $18 = ((($5)) + 28|0);
  HEAP32[$18>>2] = $16;
  $19 = (_vfprintf($5,$2,$3)|0);
  $20 = ($$$015|0)==(0);
  if ($20) {
   $$0 = $19;
  } else {
   $21 = HEAP32[$14>>2]|0;
   $22 = HEAP32[$17>>2]|0;
   $23 = ($21|0)==($22|0);
   $24 = $23 << 31 >> 31;
   $25 = (($21) + ($24)|0);
   HEAP8[$25>>0] = 0;
   $$0 = $19;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _sn_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6;
 $8 = (($4) - ($7))|0;
 $9 = ($8>>>0)>($2>>>0);
 $$ = $9 ? $2 : $8;
 _memcpy(($6|0),($1|0),($$|0))|0;
 $10 = HEAP32[$5>>2]|0;
 $11 = (($10) + ($$)|0);
 HEAP32[$5>>2] = $11;
 return ($2|0);
}
function _strcpy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___stpcpy($0,$1)|0);
 return ($0|0);
}
function ___stpcpy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$lcssa = 0, $$025$lcssa = 0, $$02536 = 0, $$026$lcssa = 0, $$02642 = 0, $$027$lcssa = 0, $$02741 = 0, $$029 = 0, $$037 = 0, $$1$ph = 0, $$128$ph = 0, $$12834 = 0, $$135 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1;
 $3 = $0;
 $4 = $2 ^ $3;
 $5 = $4 & 3;
 $6 = ($5|0)==(0);
 L1: do {
  if ($6) {
   $7 = $2 & 3;
   $8 = ($7|0)==(0);
   if ($8) {
    $$026$lcssa = $1;$$027$lcssa = $0;
   } else {
    $$02642 = $1;$$02741 = $0;
    while(1) {
     $9 = HEAP8[$$02642>>0]|0;
     HEAP8[$$02741>>0] = $9;
     $10 = ($9<<24>>24)==(0);
     if ($10) {
      $$029 = $$02741;
      break L1;
     }
     $11 = ((($$02642)) + 1|0);
     $12 = ((($$02741)) + 1|0);
     $13 = $11;
     $14 = $13 & 3;
     $15 = ($14|0)==(0);
     if ($15) {
      $$026$lcssa = $11;$$027$lcssa = $12;
      break;
     } else {
      $$02642 = $11;$$02741 = $12;
     }
    }
   }
   $16 = HEAP32[$$026$lcssa>>2]|0;
   $17 = (($16) + -16843009)|0;
   $18 = $16 & -2139062144;
   $19 = $18 ^ -2139062144;
   $20 = $19 & $17;
   $21 = ($20|0)==(0);
   if ($21) {
    $$02536 = $$027$lcssa;$$037 = $$026$lcssa;$24 = $16;
    while(1) {
     $22 = ((($$037)) + 4|0);
     $23 = ((($$02536)) + 4|0);
     HEAP32[$$02536>>2] = $24;
     $25 = HEAP32[$22>>2]|0;
     $26 = (($25) + -16843009)|0;
     $27 = $25 & -2139062144;
     $28 = $27 ^ -2139062144;
     $29 = $28 & $26;
     $30 = ($29|0)==(0);
     if ($30) {
      $$02536 = $23;$$037 = $22;$24 = $25;
     } else {
      $$0$lcssa = $22;$$025$lcssa = $23;
      break;
     }
    }
   } else {
    $$0$lcssa = $$026$lcssa;$$025$lcssa = $$027$lcssa;
   }
   $$1$ph = $$0$lcssa;$$128$ph = $$025$lcssa;
   label = 8;
  } else {
   $$1$ph = $1;$$128$ph = $0;
   label = 8;
  }
 } while(0);
 if ((label|0) == 8) {
  $31 = HEAP8[$$1$ph>>0]|0;
  HEAP8[$$128$ph>>0] = $31;
  $32 = ($31<<24>>24)==(0);
  if ($32) {
   $$029 = $$128$ph;
  } else {
   $$12834 = $$128$ph;$$135 = $$1$ph;
   while(1) {
    $33 = ((($$135)) + 1|0);
    $34 = ((($$12834)) + 1|0);
    $35 = HEAP8[$33>>0]|0;
    HEAP8[$34>>0] = $35;
    $36 = ($35<<24>>24)==(0);
    if ($36) {
     $$029 = $34;
     break;
    } else {
     $$12834 = $34;$$135 = $33;
    }
   }
  }
 }
 return ($$029|0);
}
function _strncpy($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___stpncpy($0,$1,$2)|0);
 return ($0|0);
}
function ___stpncpy($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$037$lcssa = 0, $$03753 = 0, $$038$lcssa = 0, $$038$lcssa79 = 0, $$03866 = 0, $$039$lcssa = 0, $$039$lcssa78 = 0, $$03965 = 0, $$041$lcssa = 0, $$041$lcssa77 = 0, $$04164 = 0, $$054 = 0, $$1$lcssa = 0, $$140$ph = 0, $$14046 = 0, $$142$ph = 0, $$14245 = 0, $$152 = 0, $$2$ph = 0;
 var $$243 = 0, $$247 = 0, $$3 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $or$cond = 0, $or$cond63 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1;
 $4 = $0;
 $5 = $3 ^ $4;
 $6 = $5 & 3;
 $7 = ($6|0)==(0);
 do {
  if ($7) {
   $8 = $3 & 3;
   $9 = ($8|0)!=(0);
   $10 = ($2|0)!=(0);
   $or$cond63 = $10 & $9;
   L3: do {
    if ($or$cond63) {
     $$03866 = $2;$$03965 = $1;$$04164 = $0;
     while(1) {
      $11 = HEAP8[$$03965>>0]|0;
      HEAP8[$$04164>>0] = $11;
      $12 = ($11<<24>>24)==(0);
      if ($12) {
       $$038$lcssa79 = $$03866;$$039$lcssa78 = $$03965;$$041$lcssa77 = $$04164;
       break L3;
      }
      $13 = (($$03866) + -1)|0;
      $14 = ((($$03965)) + 1|0);
      $15 = ((($$04164)) + 1|0);
      $16 = $14;
      $17 = $16 & 3;
      $18 = ($17|0)!=(0);
      $19 = ($13|0)!=(0);
      $or$cond = $19 & $18;
      if ($or$cond) {
       $$03866 = $13;$$03965 = $14;$$04164 = $15;
      } else {
       $$038$lcssa = $13;$$039$lcssa = $14;$$041$lcssa = $15;$$lcssa = $19;
       label = 5;
       break;
      }
     }
    } else {
     $$038$lcssa = $2;$$039$lcssa = $1;$$041$lcssa = $0;$$lcssa = $10;
     label = 5;
    }
   } while(0);
   if ((label|0) == 5) {
    if ($$lcssa) {
     $$038$lcssa79 = $$038$lcssa;$$039$lcssa78 = $$039$lcssa;$$041$lcssa77 = $$041$lcssa;
    } else {
     $$243 = $$041$lcssa;$$3 = 0;
     break;
    }
   }
   $20 = HEAP8[$$039$lcssa78>>0]|0;
   $21 = ($20<<24>>24)==(0);
   if ($21) {
    $$243 = $$041$lcssa77;$$3 = $$038$lcssa79;
   } else {
    $22 = ($$038$lcssa79>>>0)>(3);
    L11: do {
     if ($22) {
      $$03753 = $$041$lcssa77;$$054 = $$039$lcssa78;$$152 = $$038$lcssa79;
      while(1) {
       $23 = HEAP32[$$054>>2]|0;
       $24 = (($23) + -16843009)|0;
       $25 = $23 & -2139062144;
       $26 = $25 ^ -2139062144;
       $27 = $26 & $24;
       $28 = ($27|0)==(0);
       if (!($28)) {
        $$0$lcssa = $$054;$$037$lcssa = $$03753;$$1$lcssa = $$152;
        break L11;
       }
       HEAP32[$$03753>>2] = $23;
       $29 = (($$152) + -4)|0;
       $30 = ((($$054)) + 4|0);
       $31 = ((($$03753)) + 4|0);
       $32 = ($29>>>0)>(3);
       if ($32) {
        $$03753 = $31;$$054 = $30;$$152 = $29;
       } else {
        $$0$lcssa = $30;$$037$lcssa = $31;$$1$lcssa = $29;
        break;
       }
      }
     } else {
      $$0$lcssa = $$039$lcssa78;$$037$lcssa = $$041$lcssa77;$$1$lcssa = $$038$lcssa79;
     }
    } while(0);
    $$140$ph = $$0$lcssa;$$142$ph = $$037$lcssa;$$2$ph = $$1$lcssa;
    label = 11;
   }
  } else {
   $$140$ph = $1;$$142$ph = $0;$$2$ph = $2;
   label = 11;
  }
 } while(0);
 L16: do {
  if ((label|0) == 11) {
   $33 = ($$2$ph|0)==(0);
   if ($33) {
    $$243 = $$142$ph;$$3 = 0;
   } else {
    $$14046 = $$140$ph;$$14245 = $$142$ph;$$247 = $$2$ph;
    while(1) {
     $34 = HEAP8[$$14046>>0]|0;
     HEAP8[$$14245>>0] = $34;
     $35 = ($34<<24>>24)==(0);
     if ($35) {
      $$243 = $$14245;$$3 = $$247;
      break L16;
     }
     $36 = (($$247) + -1)|0;
     $37 = ((($$14046)) + 1|0);
     $38 = ((($$14245)) + 1|0);
     $39 = ($36|0)==(0);
     if ($39) {
      $$243 = $38;$$3 = 0;
      break;
     } else {
      $$14046 = $37;$$14245 = $38;$$247 = $36;
     }
    }
   }
  }
 } while(0);
 _memset(($$243|0),0,($$3|0))|0;
 return ($$243|0);
}
function ___fpclassifyf($0) {
 $0 = +$0;
 var $$0 = 0, $$mask = 0, $$mask7 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $not$ = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (HEAPF32[tempDoublePtr>>2]=$0,HEAP32[tempDoublePtr>>2]|0);
 $2 = $1 >>> 23;
 $trunc = $2&255;
 switch ($trunc<<24>>24) {
 case 0:  {
  $$mask = $1 & 2147483647;
  $3 = ($$mask|0)!=(0);
  $4 = $3 ? 3 : 2;
  $$0 = $4;
  break;
 }
 case -1:  {
  $$mask7 = $1 & 8388607;
  $not$ = ($$mask7|0)==(0);
  $5 = $not$&1;
  $$0 = $5;
  break;
 }
 default: {
  $$0 = 4;
 }
 }
 return ($$0|0);
}
function _log10($0) {
 $0 = +$0;
 var $$0 = 0, $$0100 = 0, $$0101 = 0.0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0;
 var $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0;
 var $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0, $8 = 0, $9 = 0.0, $or$cond = 0, $or$cond105 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 $3 = ($2>>>0)<(1048576);
 $4 = ($2|0)<(0);
 $or$cond = $4 | $3;
 do {
  if ($or$cond) {
   $5 = $2 & 2147483647;
   $6 = ($1|0)==(0);
   $7 = ($5|0)==(0);
   $8 = $6 & $7;
   if ($8) {
    $9 = $0 * $0;
    $10 = -1.0 / $9;
    $$0101 = $10;
    break;
   }
   if ($4) {
    $11 = $0 - $0;
    $12 = $11 / 0.0;
    $$0101 = $12;
    break;
   } else {
    $13 = $0 * 18014398509481984.0;
    HEAPF64[tempDoublePtr>>3] = $13;$14 = HEAP32[tempDoublePtr>>2]|0;
    $15 = HEAP32[tempDoublePtr+4>>2]|0;
    $$0 = -1077;$$0100 = $15;$26 = $14;$71 = $15;
    label = 9;
    break;
   }
  } else {
   $16 = ($2>>>0)>(2146435071);
   if ($16) {
    $$0101 = $0;
   } else {
    $17 = ($2|0)==(1072693248);
    $18 = ($1|0)==(0);
    $19 = (0)==(0);
    $20 = $18 & $19;
    $or$cond105 = $20 & $17;
    if ($or$cond105) {
     $$0101 = 0.0;
    } else {
     $$0 = -1023;$$0100 = $2;$26 = $1;$71 = $2;
     label = 9;
    }
   }
  }
 } while(0);
 if ((label|0) == 9) {
  $21 = (($$0100) + 614242)|0;
  $22 = $21 >>> 20;
  $23 = (($$0) + ($22))|0;
  $24 = $21 & 1048575;
  $25 = (($24) + 1072079006)|0;
  HEAP32[tempDoublePtr>>2] = $26;HEAP32[tempDoublePtr+4>>2] = $25;$27 = +HEAPF64[tempDoublePtr>>3];
  $28 = $27 + -1.0;
  $29 = $28 * 0.5;
  $30 = $28 * $29;
  $31 = $28 + 2.0;
  $32 = $28 / $31;
  $33 = $32 * $32;
  $34 = $33 * $33;
  $35 = $34 * 0.15313837699209373;
  $36 = $35 + 0.22222198432149784;
  $37 = $34 * $36;
  $38 = $37 + 0.39999999999409419;
  $39 = $34 * $38;
  $40 = $34 * 0.14798198605116586;
  $41 = $40 + 0.1818357216161805;
  $42 = $34 * $41;
  $43 = $42 + 0.28571428743662391;
  $44 = $34 * $43;
  $45 = $44 + 0.66666666666667351;
  $46 = $33 * $45;
  $47 = $39 + $46;
  $48 = $28 - $30;
  HEAPF64[tempDoublePtr>>3] = $48;$49 = HEAP32[tempDoublePtr>>2]|0;
  $50 = HEAP32[tempDoublePtr+4>>2]|0;
  HEAP32[tempDoublePtr>>2] = 0;HEAP32[tempDoublePtr+4>>2] = $50;$51 = +HEAPF64[tempDoublePtr>>3];
  $52 = $28 - $51;
  $53 = $52 - $30;
  $54 = $30 + $47;
  $55 = $32 * $54;
  $56 = $53 + $55;
  $57 = $51 * 0.43429448187816888;
  $58 = (+($23|0));
  $59 = $58 * 0.30102999566361177;
  $60 = $58 * 3.6942390771589308E-13;
  $61 = $51 + $56;
  $62 = $61 * 2.5082946711645275E-11;
  $63 = $60 + $62;
  $64 = $56 * 0.43429448187816888;
  $65 = $64 + $63;
  $66 = $59 + $57;
  $67 = $59 - $66;
  $68 = $57 + $67;
  $69 = $68 + $65;
  $70 = $66 + $69;
  $$0101 = $70;
 }
 return (+$$0101);
}
function _fread($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$0 = 0, $$054$ph = 0, $$05460 = 0, $$056$ph = 0, $$05659 = 0, $$57 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = Math_imul($2, $1)|0;
 $5 = ($1|0)==(0);
 $$ = $5 ? 0 : $2;
 $6 = ((($3)) + 76|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)>(-1);
 if ($8) {
  $9 = (___lockfile($3)|0);
  $36 = $9;
 } else {
  $36 = 0;
 }
 $10 = ((($3)) + 74|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11 << 24 >> 24;
 $13 = (($12) + 255)|0;
 $14 = $13 | $12;
 $15 = $14&255;
 HEAP8[$10>>0] = $15;
 $16 = ((($3)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($3)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $19;
 $21 = (($17) - ($20))|0;
 $22 = ($21|0)>(0);
 $23 = ($21>>>0)<($4>>>0);
 $$57 = $23 ? $21 : $4;
 if ($22) {
  $24 = (($4) - ($$57))|0;
  $25 = (($0) + ($$57)|0);
  _memcpy(($0|0),($19|0),($$57|0))|0;
  $26 = (($19) + ($$57)|0);
  HEAP32[$18>>2] = $26;
  $$054$ph = $24;$$056$ph = $25;
 } else {
  $$054$ph = $4;$$056$ph = $0;
 }
 $27 = ($$054$ph|0)==(0);
 L7: do {
  if ($27) {
   label = 13;
  } else {
   $28 = ((($3)) + 32|0);
   $$05460 = $$054$ph;$$05659 = $$056$ph;
   while(1) {
    $29 = (___toread($3)|0);
    $30 = ($29|0)==(0);
    if (!($30)) {
     break;
    }
    $31 = HEAP32[$28>>2]|0;
    $32 = (FUNCTION_TABLE_iiii[$31 & 63]($3,$$05659,$$05460)|0);
    $33 = (($32) + 1)|0;
    $34 = ($33>>>0)<(2);
    if ($34) {
     break;
    }
    $39 = (($$05460) - ($32))|0;
    $40 = (($$05659) + ($32)|0);
    $41 = ($39|0)==(0);
    if ($41) {
     label = 13;
     break L7;
    } else {
     $$05460 = $39;$$05659 = $40;
    }
   }
   $35 = ($36|0)==(0);
   if (!($35)) {
    ___unlockfile($3);
   }
   $37 = (($4) - ($$05460))|0;
   $38 = (($37>>>0) / ($1>>>0))&-1;
   $$0 = $38;
  }
 } while(0);
 if ((label|0) == 13) {
  $42 = ($36|0)==(0);
  if ($42) {
   $$0 = $$;
  } else {
   ___unlockfile($3);
   $$0 = $$;
  }
 }
 return ($$0|0);
}
function _remove($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $1;
 $2 = (___syscall10(10,($vararg_buffer|0))|0);
 $3 = ($2|0)==(-21);
 if ($3) {
  HEAP32[$vararg_buffer1>>2] = $1;
  $4 = (___syscall40(40,($vararg_buffer1|0))|0);
  $$0 = $4;
 } else {
  $$0 = $2;
 }
 $5 = (___syscall_ret($$0)|0);
 STACKTOP = sp;return ($5|0);
}
function ___ftello_unlocked($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 40|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$0>>2]|0;
 $4 = $3 & 128;
 $5 = ($4|0)==(0);
 if ($5) {
  $11 = 1;
 } else {
  $6 = ((($0)) + 20|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ((($0)) + 28|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($7>>>0)>($9>>>0);
  $phitmp = $10 ? 2 : 1;
  $11 = $phitmp;
 }
 $12 = (FUNCTION_TABLE_iiii[$2 & 63]($0,0,$11)|0);
 $13 = ($12|0)<(0);
 if ($13) {
  $$0 = $12;
 } else {
  $14 = ((($0)) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ((($0)) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($0)) + 20|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($0)) + 28|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($12) - ($15))|0;
  $23 = (($22) + ($17))|0;
  $24 = (($23) + ($19))|0;
  $25 = (($24) - ($21))|0;
  $$0 = $25;
 }
 return ($$0|0);
}
function ___ftello($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $5 = (___lockfile($0)|0);
  $phitmp = ($5|0)==(0);
  $6 = (___ftello_unlocked($0)|0);
  if ($phitmp) {
   $7 = $6;
  } else {
   ___unlockfile($0);
   $7 = $6;
  }
 } else {
  $4 = (___ftello_unlocked($0)|0);
  $7 = $4;
 }
 return ($7|0);
}
function _ftell($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___ftello($0)|0);
 return ($1|0);
}
function _malloc($0) {
 $0 = $0|0;
 var $$$0192$i = 0, $$$0193$i = 0, $$$4236$i = 0, $$$4351$i = 0, $$$i = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i18$i = 0, $$01$i$i = 0, $$0189$i = 0, $$0192$lcssa$i = 0, $$01928$i = 0, $$0193$lcssa$i = 0, $$01937$i = 0, $$0197 = 0, $$0199 = 0, $$0206$i$i = 0, $$0207$i$i = 0, $$0211$i$i = 0;
 var $$0212$i$i = 0, $$024371$i = 0, $$0287$i$i = 0, $$0288$i$i = 0, $$0289$i$i = 0, $$0295$i$i = 0, $$0296$i$i = 0, $$0342$i = 0, $$0344$i = 0, $$0345$i = 0, $$0347$i = 0, $$0353$i = 0, $$0358$i = 0, $$0359$$i = 0, $$0359$i = 0, $$0361$i = 0, $$0362$i = 0, $$0368$i = 0, $$1196$i = 0, $$1198$i = 0;
 var $$124470$i = 0, $$1291$i$i = 0, $$1293$i$i = 0, $$1343$i = 0, $$1348$i = 0, $$1363$i = 0, $$1370$i = 0, $$1374$i = 0, $$2234253237$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2355$i = 0, $$3$i = 0, $$3$i$i = 0, $$3$i201 = 0, $$3350$i = 0, $$3372$i = 0, $$4$lcssa$i = 0, $$4$ph$i = 0, $$415$i = 0;
 var $$4236$i = 0, $$4351$lcssa$i = 0, $$435114$i = 0, $$4357$$4$i = 0, $$4357$ph$i = 0, $$435713$i = 0, $$723948$i = 0, $$749$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i19$i = 0, $$pre$i210 = 0, $$pre$i212 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i20$iZ2D = 0, $$pre$phi$i211Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi11$i$iZ2D = 0, $$pre$phiZ2D = 0;
 var $$pre10$i$i = 0, $$sink1$i = 0, $$sink1$i$i = 0, $$sink16$i = 0, $$sink2$i = 0, $$sink2$i204 = 0, $$sink3$i = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0;
 var $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0;
 var $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0;
 var $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
 var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
 var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
 var $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0;
 var $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0;
 var $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0;
 var $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0;
 var $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0;
 var $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0;
 var $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0;
 var $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0;
 var $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0;
 var $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0;
 var $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0;
 var $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0;
 var $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0;
 var $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0;
 var $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0;
 var $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0;
 var $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0;
 var $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0;
 var $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0;
 var $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0;
 var $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0;
 var $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0;
 var $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0;
 var $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0;
 var $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0;
 var $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0;
 var $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0;
 var $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0;
 var $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0;
 var $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0;
 var $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0;
 var $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0;
 var $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0;
 var $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0;
 var $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0;
 var $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0;
 var $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i208 = 0, $exitcond$i$i = 0, $not$$i = 0, $not$$i$i = 0, $not$$i17$i = 0, $not$$i209 = 0, $not$$i216 = 0, $not$1$i = 0, $not$1$i203 = 0, $not$5$i = 0, $not$7$i$i = 0, $not$8$i = 0, $not$9$i = 0;
 var $or$cond$i = 0, $or$cond$i214 = 0, $or$cond1$i = 0, $or$cond10$i = 0, $or$cond11$i = 0, $or$cond11$not$i = 0, $or$cond12$i = 0, $or$cond2$i = 0, $or$cond2$i215 = 0, $or$cond5$i = 0, $or$cond50$i = 0, $or$cond51$i = 0, $or$cond7$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 $2 = ($0>>>0)<(245);
 do {
  if ($2) {
   $3 = ($0>>>0)<(11);
   $4 = (($0) + 11)|0;
   $5 = $4 & -8;
   $6 = $3 ? 16 : $5;
   $7 = $6 >>> 3;
   $8 = HEAP32[8120]|0;
   $9 = $8 >>> $7;
   $10 = $9 & 3;
   $11 = ($10|0)==(0);
   if (!($11)) {
    $12 = $9 & 1;
    $13 = $12 ^ 1;
    $14 = (($13) + ($7))|0;
    $15 = $14 << 1;
    $16 = (32520 + ($15<<2)|0);
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($18)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($16|0)==($20|0);
    do {
     if ($21) {
      $22 = 1 << $14;
      $23 = $22 ^ -1;
      $24 = $8 & $23;
      HEAP32[8120] = $24;
     } else {
      $25 = HEAP32[(32496)>>2]|0;
      $26 = ($20>>>0)<($25>>>0);
      if ($26) {
       _abort();
       // unreachable;
      }
      $27 = ((($20)) + 12|0);
      $28 = HEAP32[$27>>2]|0;
      $29 = ($28|0)==($18|0);
      if ($29) {
       HEAP32[$27>>2] = $16;
       HEAP32[$17>>2] = $20;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $30 = $14 << 3;
    $31 = $30 | 3;
    $32 = ((($18)) + 4|0);
    HEAP32[$32>>2] = $31;
    $33 = (($18) + ($30)|0);
    $34 = ((($33)) + 4|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = $35 | 1;
    HEAP32[$34>>2] = $36;
    $$0 = $19;
    STACKTOP = sp;return ($$0|0);
   }
   $37 = HEAP32[(32488)>>2]|0;
   $38 = ($6>>>0)>($37>>>0);
   if ($38) {
    $39 = ($9|0)==(0);
    if (!($39)) {
     $40 = $9 << $7;
     $41 = 2 << $7;
     $42 = (0 - ($41))|0;
     $43 = $41 | $42;
     $44 = $40 & $43;
     $45 = (0 - ($44))|0;
     $46 = $44 & $45;
     $47 = (($46) + -1)|0;
     $48 = $47 >>> 12;
     $49 = $48 & 16;
     $50 = $47 >>> $49;
     $51 = $50 >>> 5;
     $52 = $51 & 8;
     $53 = $52 | $49;
     $54 = $50 >>> $52;
     $55 = $54 >>> 2;
     $56 = $55 & 4;
     $57 = $53 | $56;
     $58 = $54 >>> $56;
     $59 = $58 >>> 1;
     $60 = $59 & 2;
     $61 = $57 | $60;
     $62 = $58 >>> $60;
     $63 = $62 >>> 1;
     $64 = $63 & 1;
     $65 = $61 | $64;
     $66 = $62 >>> $64;
     $67 = (($65) + ($66))|0;
     $68 = $67 << 1;
     $69 = (32520 + ($68<<2)|0);
     $70 = ((($69)) + 8|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = ((($71)) + 8|0);
     $73 = HEAP32[$72>>2]|0;
     $74 = ($69|0)==($73|0);
     do {
      if ($74) {
       $75 = 1 << $67;
       $76 = $75 ^ -1;
       $77 = $8 & $76;
       HEAP32[8120] = $77;
       $98 = $77;
      } else {
       $78 = HEAP32[(32496)>>2]|0;
       $79 = ($73>>>0)<($78>>>0);
       if ($79) {
        _abort();
        // unreachable;
       }
       $80 = ((($73)) + 12|0);
       $81 = HEAP32[$80>>2]|0;
       $82 = ($81|0)==($71|0);
       if ($82) {
        HEAP32[$80>>2] = $69;
        HEAP32[$70>>2] = $73;
        $98 = $8;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $83 = $67 << 3;
     $84 = (($83) - ($6))|0;
     $85 = $6 | 3;
     $86 = ((($71)) + 4|0);
     HEAP32[$86>>2] = $85;
     $87 = (($71) + ($6)|0);
     $88 = $84 | 1;
     $89 = ((($87)) + 4|0);
     HEAP32[$89>>2] = $88;
     $90 = (($87) + ($84)|0);
     HEAP32[$90>>2] = $84;
     $91 = ($37|0)==(0);
     if (!($91)) {
      $92 = HEAP32[(32500)>>2]|0;
      $93 = $37 >>> 3;
      $94 = $93 << 1;
      $95 = (32520 + ($94<<2)|0);
      $96 = 1 << $93;
      $97 = $98 & $96;
      $99 = ($97|0)==(0);
      if ($99) {
       $100 = $98 | $96;
       HEAP32[8120] = $100;
       $$pre = ((($95)) + 8|0);
       $$0199 = $95;$$pre$phiZ2D = $$pre;
      } else {
       $101 = ((($95)) + 8|0);
       $102 = HEAP32[$101>>2]|0;
       $103 = HEAP32[(32496)>>2]|0;
       $104 = ($102>>>0)<($103>>>0);
       if ($104) {
        _abort();
        // unreachable;
       } else {
        $$0199 = $102;$$pre$phiZ2D = $101;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $92;
      $105 = ((($$0199)) + 12|0);
      HEAP32[$105>>2] = $92;
      $106 = ((($92)) + 8|0);
      HEAP32[$106>>2] = $$0199;
      $107 = ((($92)) + 12|0);
      HEAP32[$107>>2] = $95;
     }
     HEAP32[(32488)>>2] = $84;
     HEAP32[(32500)>>2] = $87;
     $$0 = $72;
     STACKTOP = sp;return ($$0|0);
    }
    $108 = HEAP32[(32484)>>2]|0;
    $109 = ($108|0)==(0);
    if ($109) {
     $$0197 = $6;
    } else {
     $110 = (0 - ($108))|0;
     $111 = $108 & $110;
     $112 = (($111) + -1)|0;
     $113 = $112 >>> 12;
     $114 = $113 & 16;
     $115 = $112 >>> $114;
     $116 = $115 >>> 5;
     $117 = $116 & 8;
     $118 = $117 | $114;
     $119 = $115 >>> $117;
     $120 = $119 >>> 2;
     $121 = $120 & 4;
     $122 = $118 | $121;
     $123 = $119 >>> $121;
     $124 = $123 >>> 1;
     $125 = $124 & 2;
     $126 = $122 | $125;
     $127 = $123 >>> $125;
     $128 = $127 >>> 1;
     $129 = $128 & 1;
     $130 = $126 | $129;
     $131 = $127 >>> $129;
     $132 = (($130) + ($131))|0;
     $133 = (32784 + ($132<<2)|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = ((($134)) + 4|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = $136 & -8;
     $138 = (($137) - ($6))|0;
     $139 = ((($134)) + 16|0);
     $140 = HEAP32[$139>>2]|0;
     $not$5$i = ($140|0)==(0|0);
     $$sink16$i = $not$5$i&1;
     $141 = (((($134)) + 16|0) + ($$sink16$i<<2)|0);
     $142 = HEAP32[$141>>2]|0;
     $143 = ($142|0)==(0|0);
     if ($143) {
      $$0192$lcssa$i = $134;$$0193$lcssa$i = $138;
     } else {
      $$01928$i = $134;$$01937$i = $138;$145 = $142;
      while(1) {
       $144 = ((($145)) + 4|0);
       $146 = HEAP32[$144>>2]|0;
       $147 = $146 & -8;
       $148 = (($147) - ($6))|0;
       $149 = ($148>>>0)<($$01937$i>>>0);
       $$$0193$i = $149 ? $148 : $$01937$i;
       $$$0192$i = $149 ? $145 : $$01928$i;
       $150 = ((($145)) + 16|0);
       $151 = HEAP32[$150>>2]|0;
       $not$$i = ($151|0)==(0|0);
       $$sink1$i = $not$$i&1;
       $152 = (((($145)) + 16|0) + ($$sink1$i<<2)|0);
       $153 = HEAP32[$152>>2]|0;
       $154 = ($153|0)==(0|0);
       if ($154) {
        $$0192$lcssa$i = $$$0192$i;$$0193$lcssa$i = $$$0193$i;
        break;
       } else {
        $$01928$i = $$$0192$i;$$01937$i = $$$0193$i;$145 = $153;
       }
      }
     }
     $155 = HEAP32[(32496)>>2]|0;
     $156 = ($$0192$lcssa$i>>>0)<($155>>>0);
     if ($156) {
      _abort();
      // unreachable;
     }
     $157 = (($$0192$lcssa$i) + ($6)|0);
     $158 = ($$0192$lcssa$i>>>0)<($157>>>0);
     if (!($158)) {
      _abort();
      // unreachable;
     }
     $159 = ((($$0192$lcssa$i)) + 24|0);
     $160 = HEAP32[$159>>2]|0;
     $161 = ((($$0192$lcssa$i)) + 12|0);
     $162 = HEAP32[$161>>2]|0;
     $163 = ($162|0)==($$0192$lcssa$i|0);
     do {
      if ($163) {
       $173 = ((($$0192$lcssa$i)) + 20|0);
       $174 = HEAP32[$173>>2]|0;
       $175 = ($174|0)==(0|0);
       if ($175) {
        $176 = ((($$0192$lcssa$i)) + 16|0);
        $177 = HEAP32[$176>>2]|0;
        $178 = ($177|0)==(0|0);
        if ($178) {
         $$3$i = 0;
         break;
        } else {
         $$1196$i = $177;$$1198$i = $176;
        }
       } else {
        $$1196$i = $174;$$1198$i = $173;
       }
       while(1) {
        $179 = ((($$1196$i)) + 20|0);
        $180 = HEAP32[$179>>2]|0;
        $181 = ($180|0)==(0|0);
        if (!($181)) {
         $$1196$i = $180;$$1198$i = $179;
         continue;
        }
        $182 = ((($$1196$i)) + 16|0);
        $183 = HEAP32[$182>>2]|0;
        $184 = ($183|0)==(0|0);
        if ($184) {
         break;
        } else {
         $$1196$i = $183;$$1198$i = $182;
        }
       }
       $185 = ($$1198$i>>>0)<($155>>>0);
       if ($185) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$$1198$i>>2] = 0;
        $$3$i = $$1196$i;
        break;
       }
      } else {
       $164 = ((($$0192$lcssa$i)) + 8|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = ($165>>>0)<($155>>>0);
       if ($166) {
        _abort();
        // unreachable;
       }
       $167 = ((($165)) + 12|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = ($168|0)==($$0192$lcssa$i|0);
       if (!($169)) {
        _abort();
        // unreachable;
       }
       $170 = ((($162)) + 8|0);
       $171 = HEAP32[$170>>2]|0;
       $172 = ($171|0)==($$0192$lcssa$i|0);
       if ($172) {
        HEAP32[$167>>2] = $162;
        HEAP32[$170>>2] = $165;
        $$3$i = $162;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $186 = ($160|0)==(0|0);
     L73: do {
      if (!($186)) {
       $187 = ((($$0192$lcssa$i)) + 28|0);
       $188 = HEAP32[$187>>2]|0;
       $189 = (32784 + ($188<<2)|0);
       $190 = HEAP32[$189>>2]|0;
       $191 = ($$0192$lcssa$i|0)==($190|0);
       do {
        if ($191) {
         HEAP32[$189>>2] = $$3$i;
         $cond$i = ($$3$i|0)==(0|0);
         if ($cond$i) {
          $192 = 1 << $188;
          $193 = $192 ^ -1;
          $194 = $108 & $193;
          HEAP32[(32484)>>2] = $194;
          break L73;
         }
        } else {
         $195 = HEAP32[(32496)>>2]|0;
         $196 = ($160>>>0)<($195>>>0);
         if ($196) {
          _abort();
          // unreachable;
         } else {
          $197 = ((($160)) + 16|0);
          $198 = HEAP32[$197>>2]|0;
          $not$1$i = ($198|0)!=($$0192$lcssa$i|0);
          $$sink2$i = $not$1$i&1;
          $199 = (((($160)) + 16|0) + ($$sink2$i<<2)|0);
          HEAP32[$199>>2] = $$3$i;
          $200 = ($$3$i|0)==(0|0);
          if ($200) {
           break L73;
          } else {
           break;
          }
         }
        }
       } while(0);
       $201 = HEAP32[(32496)>>2]|0;
       $202 = ($$3$i>>>0)<($201>>>0);
       if ($202) {
        _abort();
        // unreachable;
       }
       $203 = ((($$3$i)) + 24|0);
       HEAP32[$203>>2] = $160;
       $204 = ((($$0192$lcssa$i)) + 16|0);
       $205 = HEAP32[$204>>2]|0;
       $206 = ($205|0)==(0|0);
       do {
        if (!($206)) {
         $207 = ($205>>>0)<($201>>>0);
         if ($207) {
          _abort();
          // unreachable;
         } else {
          $208 = ((($$3$i)) + 16|0);
          HEAP32[$208>>2] = $205;
          $209 = ((($205)) + 24|0);
          HEAP32[$209>>2] = $$3$i;
          break;
         }
        }
       } while(0);
       $210 = ((($$0192$lcssa$i)) + 20|0);
       $211 = HEAP32[$210>>2]|0;
       $212 = ($211|0)==(0|0);
       if (!($212)) {
        $213 = HEAP32[(32496)>>2]|0;
        $214 = ($211>>>0)<($213>>>0);
        if ($214) {
         _abort();
         // unreachable;
        } else {
         $215 = ((($$3$i)) + 20|0);
         HEAP32[$215>>2] = $211;
         $216 = ((($211)) + 24|0);
         HEAP32[$216>>2] = $$3$i;
         break;
        }
       }
      }
     } while(0);
     $217 = ($$0193$lcssa$i>>>0)<(16);
     if ($217) {
      $218 = (($$0193$lcssa$i) + ($6))|0;
      $219 = $218 | 3;
      $220 = ((($$0192$lcssa$i)) + 4|0);
      HEAP32[$220>>2] = $219;
      $221 = (($$0192$lcssa$i) + ($218)|0);
      $222 = ((($221)) + 4|0);
      $223 = HEAP32[$222>>2]|0;
      $224 = $223 | 1;
      HEAP32[$222>>2] = $224;
     } else {
      $225 = $6 | 3;
      $226 = ((($$0192$lcssa$i)) + 4|0);
      HEAP32[$226>>2] = $225;
      $227 = $$0193$lcssa$i | 1;
      $228 = ((($157)) + 4|0);
      HEAP32[$228>>2] = $227;
      $229 = (($157) + ($$0193$lcssa$i)|0);
      HEAP32[$229>>2] = $$0193$lcssa$i;
      $230 = ($37|0)==(0);
      if (!($230)) {
       $231 = HEAP32[(32500)>>2]|0;
       $232 = $37 >>> 3;
       $233 = $232 << 1;
       $234 = (32520 + ($233<<2)|0);
       $235 = 1 << $232;
       $236 = $8 & $235;
       $237 = ($236|0)==(0);
       if ($237) {
        $238 = $8 | $235;
        HEAP32[8120] = $238;
        $$pre$i = ((($234)) + 8|0);
        $$0189$i = $234;$$pre$phi$iZ2D = $$pre$i;
       } else {
        $239 = ((($234)) + 8|0);
        $240 = HEAP32[$239>>2]|0;
        $241 = HEAP32[(32496)>>2]|0;
        $242 = ($240>>>0)<($241>>>0);
        if ($242) {
         _abort();
         // unreachable;
        } else {
         $$0189$i = $240;$$pre$phi$iZ2D = $239;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $231;
       $243 = ((($$0189$i)) + 12|0);
       HEAP32[$243>>2] = $231;
       $244 = ((($231)) + 8|0);
       HEAP32[$244>>2] = $$0189$i;
       $245 = ((($231)) + 12|0);
       HEAP32[$245>>2] = $234;
      }
      HEAP32[(32488)>>2] = $$0193$lcssa$i;
      HEAP32[(32500)>>2] = $157;
     }
     $246 = ((($$0192$lcssa$i)) + 8|0);
     $$0 = $246;
     STACKTOP = sp;return ($$0|0);
    }
   } else {
    $$0197 = $6;
   }
  } else {
   $247 = ($0>>>0)>(4294967231);
   if ($247) {
    $$0197 = -1;
   } else {
    $248 = (($0) + 11)|0;
    $249 = $248 & -8;
    $250 = HEAP32[(32484)>>2]|0;
    $251 = ($250|0)==(0);
    if ($251) {
     $$0197 = $249;
    } else {
     $252 = (0 - ($249))|0;
     $253 = $248 >>> 8;
     $254 = ($253|0)==(0);
     if ($254) {
      $$0358$i = 0;
     } else {
      $255 = ($249>>>0)>(16777215);
      if ($255) {
       $$0358$i = 31;
      } else {
       $256 = (($253) + 1048320)|0;
       $257 = $256 >>> 16;
       $258 = $257 & 8;
       $259 = $253 << $258;
       $260 = (($259) + 520192)|0;
       $261 = $260 >>> 16;
       $262 = $261 & 4;
       $263 = $262 | $258;
       $264 = $259 << $262;
       $265 = (($264) + 245760)|0;
       $266 = $265 >>> 16;
       $267 = $266 & 2;
       $268 = $263 | $267;
       $269 = (14 - ($268))|0;
       $270 = $264 << $267;
       $271 = $270 >>> 15;
       $272 = (($269) + ($271))|0;
       $273 = $272 << 1;
       $274 = (($272) + 7)|0;
       $275 = $249 >>> $274;
       $276 = $275 & 1;
       $277 = $276 | $273;
       $$0358$i = $277;
      }
     }
     $278 = (32784 + ($$0358$i<<2)|0);
     $279 = HEAP32[$278>>2]|0;
     $280 = ($279|0)==(0|0);
     L117: do {
      if ($280) {
       $$2355$i = 0;$$3$i201 = 0;$$3350$i = $252;
       label = 81;
      } else {
       $281 = ($$0358$i|0)==(31);
       $282 = $$0358$i >>> 1;
       $283 = (25 - ($282))|0;
       $284 = $281 ? 0 : $283;
       $285 = $249 << $284;
       $$0342$i = 0;$$0347$i = $252;$$0353$i = $279;$$0359$i = $285;$$0362$i = 0;
       while(1) {
        $286 = ((($$0353$i)) + 4|0);
        $287 = HEAP32[$286>>2]|0;
        $288 = $287 & -8;
        $289 = (($288) - ($249))|0;
        $290 = ($289>>>0)<($$0347$i>>>0);
        if ($290) {
         $291 = ($289|0)==(0);
         if ($291) {
          $$415$i = $$0353$i;$$435114$i = 0;$$435713$i = $$0353$i;
          label = 85;
          break L117;
         } else {
          $$1343$i = $$0353$i;$$1348$i = $289;
         }
        } else {
         $$1343$i = $$0342$i;$$1348$i = $$0347$i;
        }
        $292 = ((($$0353$i)) + 20|0);
        $293 = HEAP32[$292>>2]|0;
        $294 = $$0359$i >>> 31;
        $295 = (((($$0353$i)) + 16|0) + ($294<<2)|0);
        $296 = HEAP32[$295>>2]|0;
        $297 = ($293|0)==(0|0);
        $298 = ($293|0)==($296|0);
        $or$cond2$i = $297 | $298;
        $$1363$i = $or$cond2$i ? $$0362$i : $293;
        $299 = ($296|0)==(0|0);
        $not$8$i = $299 ^ 1;
        $300 = $not$8$i&1;
        $$0359$$i = $$0359$i << $300;
        if ($299) {
         $$2355$i = $$1363$i;$$3$i201 = $$1343$i;$$3350$i = $$1348$i;
         label = 81;
         break;
        } else {
         $$0342$i = $$1343$i;$$0347$i = $$1348$i;$$0353$i = $296;$$0359$i = $$0359$$i;$$0362$i = $$1363$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 81) {
      $301 = ($$2355$i|0)==(0|0);
      $302 = ($$3$i201|0)==(0|0);
      $or$cond$i = $301 & $302;
      if ($or$cond$i) {
       $303 = 2 << $$0358$i;
       $304 = (0 - ($303))|0;
       $305 = $303 | $304;
       $306 = $250 & $305;
       $307 = ($306|0)==(0);
       if ($307) {
        $$0197 = $249;
        break;
       }
       $308 = (0 - ($306))|0;
       $309 = $306 & $308;
       $310 = (($309) + -1)|0;
       $311 = $310 >>> 12;
       $312 = $311 & 16;
       $313 = $310 >>> $312;
       $314 = $313 >>> 5;
       $315 = $314 & 8;
       $316 = $315 | $312;
       $317 = $313 >>> $315;
       $318 = $317 >>> 2;
       $319 = $318 & 4;
       $320 = $316 | $319;
       $321 = $317 >>> $319;
       $322 = $321 >>> 1;
       $323 = $322 & 2;
       $324 = $320 | $323;
       $325 = $321 >>> $323;
       $326 = $325 >>> 1;
       $327 = $326 & 1;
       $328 = $324 | $327;
       $329 = $325 >>> $327;
       $330 = (($328) + ($329))|0;
       $331 = (32784 + ($330<<2)|0);
       $332 = HEAP32[$331>>2]|0;
       $$4$ph$i = 0;$$4357$ph$i = $332;
      } else {
       $$4$ph$i = $$3$i201;$$4357$ph$i = $$2355$i;
      }
      $333 = ($$4357$ph$i|0)==(0|0);
      if ($333) {
       $$4$lcssa$i = $$4$ph$i;$$4351$lcssa$i = $$3350$i;
      } else {
       $$415$i = $$4$ph$i;$$435114$i = $$3350$i;$$435713$i = $$4357$ph$i;
       label = 85;
      }
     }
     if ((label|0) == 85) {
      while(1) {
       label = 0;
       $334 = ((($$435713$i)) + 4|0);
       $335 = HEAP32[$334>>2]|0;
       $336 = $335 & -8;
       $337 = (($336) - ($249))|0;
       $338 = ($337>>>0)<($$435114$i>>>0);
       $$$4351$i = $338 ? $337 : $$435114$i;
       $$4357$$4$i = $338 ? $$435713$i : $$415$i;
       $339 = ((($$435713$i)) + 16|0);
       $340 = HEAP32[$339>>2]|0;
       $not$1$i203 = ($340|0)==(0|0);
       $$sink2$i204 = $not$1$i203&1;
       $341 = (((($$435713$i)) + 16|0) + ($$sink2$i204<<2)|0);
       $342 = HEAP32[$341>>2]|0;
       $343 = ($342|0)==(0|0);
       if ($343) {
        $$4$lcssa$i = $$4357$$4$i;$$4351$lcssa$i = $$$4351$i;
        break;
       } else {
        $$415$i = $$4357$$4$i;$$435114$i = $$$4351$i;$$435713$i = $342;
        label = 85;
       }
      }
     }
     $344 = ($$4$lcssa$i|0)==(0|0);
     if ($344) {
      $$0197 = $249;
     } else {
      $345 = HEAP32[(32488)>>2]|0;
      $346 = (($345) - ($249))|0;
      $347 = ($$4351$lcssa$i>>>0)<($346>>>0);
      if ($347) {
       $348 = HEAP32[(32496)>>2]|0;
       $349 = ($$4$lcssa$i>>>0)<($348>>>0);
       if ($349) {
        _abort();
        // unreachable;
       }
       $350 = (($$4$lcssa$i) + ($249)|0);
       $351 = ($$4$lcssa$i>>>0)<($350>>>0);
       if (!($351)) {
        _abort();
        // unreachable;
       }
       $352 = ((($$4$lcssa$i)) + 24|0);
       $353 = HEAP32[$352>>2]|0;
       $354 = ((($$4$lcssa$i)) + 12|0);
       $355 = HEAP32[$354>>2]|0;
       $356 = ($355|0)==($$4$lcssa$i|0);
       do {
        if ($356) {
         $366 = ((($$4$lcssa$i)) + 20|0);
         $367 = HEAP32[$366>>2]|0;
         $368 = ($367|0)==(0|0);
         if ($368) {
          $369 = ((($$4$lcssa$i)) + 16|0);
          $370 = HEAP32[$369>>2]|0;
          $371 = ($370|0)==(0|0);
          if ($371) {
           $$3372$i = 0;
           break;
          } else {
           $$1370$i = $370;$$1374$i = $369;
          }
         } else {
          $$1370$i = $367;$$1374$i = $366;
         }
         while(1) {
          $372 = ((($$1370$i)) + 20|0);
          $373 = HEAP32[$372>>2]|0;
          $374 = ($373|0)==(0|0);
          if (!($374)) {
           $$1370$i = $373;$$1374$i = $372;
           continue;
          }
          $375 = ((($$1370$i)) + 16|0);
          $376 = HEAP32[$375>>2]|0;
          $377 = ($376|0)==(0|0);
          if ($377) {
           break;
          } else {
           $$1370$i = $376;$$1374$i = $375;
          }
         }
         $378 = ($$1374$i>>>0)<($348>>>0);
         if ($378) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$$1374$i>>2] = 0;
          $$3372$i = $$1370$i;
          break;
         }
        } else {
         $357 = ((($$4$lcssa$i)) + 8|0);
         $358 = HEAP32[$357>>2]|0;
         $359 = ($358>>>0)<($348>>>0);
         if ($359) {
          _abort();
          // unreachable;
         }
         $360 = ((($358)) + 12|0);
         $361 = HEAP32[$360>>2]|0;
         $362 = ($361|0)==($$4$lcssa$i|0);
         if (!($362)) {
          _abort();
          // unreachable;
         }
         $363 = ((($355)) + 8|0);
         $364 = HEAP32[$363>>2]|0;
         $365 = ($364|0)==($$4$lcssa$i|0);
         if ($365) {
          HEAP32[$360>>2] = $355;
          HEAP32[$363>>2] = $358;
          $$3372$i = $355;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $379 = ($353|0)==(0|0);
       L164: do {
        if ($379) {
         $470 = $250;
        } else {
         $380 = ((($$4$lcssa$i)) + 28|0);
         $381 = HEAP32[$380>>2]|0;
         $382 = (32784 + ($381<<2)|0);
         $383 = HEAP32[$382>>2]|0;
         $384 = ($$4$lcssa$i|0)==($383|0);
         do {
          if ($384) {
           HEAP32[$382>>2] = $$3372$i;
           $cond$i208 = ($$3372$i|0)==(0|0);
           if ($cond$i208) {
            $385 = 1 << $381;
            $386 = $385 ^ -1;
            $387 = $250 & $386;
            HEAP32[(32484)>>2] = $387;
            $470 = $387;
            break L164;
           }
          } else {
           $388 = HEAP32[(32496)>>2]|0;
           $389 = ($353>>>0)<($388>>>0);
           if ($389) {
            _abort();
            // unreachable;
           } else {
            $390 = ((($353)) + 16|0);
            $391 = HEAP32[$390>>2]|0;
            $not$$i209 = ($391|0)!=($$4$lcssa$i|0);
            $$sink3$i = $not$$i209&1;
            $392 = (((($353)) + 16|0) + ($$sink3$i<<2)|0);
            HEAP32[$392>>2] = $$3372$i;
            $393 = ($$3372$i|0)==(0|0);
            if ($393) {
             $470 = $250;
             break L164;
            } else {
             break;
            }
           }
          }
         } while(0);
         $394 = HEAP32[(32496)>>2]|0;
         $395 = ($$3372$i>>>0)<($394>>>0);
         if ($395) {
          _abort();
          // unreachable;
         }
         $396 = ((($$3372$i)) + 24|0);
         HEAP32[$396>>2] = $353;
         $397 = ((($$4$lcssa$i)) + 16|0);
         $398 = HEAP32[$397>>2]|0;
         $399 = ($398|0)==(0|0);
         do {
          if (!($399)) {
           $400 = ($398>>>0)<($394>>>0);
           if ($400) {
            _abort();
            // unreachable;
           } else {
            $401 = ((($$3372$i)) + 16|0);
            HEAP32[$401>>2] = $398;
            $402 = ((($398)) + 24|0);
            HEAP32[$402>>2] = $$3372$i;
            break;
           }
          }
         } while(0);
         $403 = ((($$4$lcssa$i)) + 20|0);
         $404 = HEAP32[$403>>2]|0;
         $405 = ($404|0)==(0|0);
         if ($405) {
          $470 = $250;
         } else {
          $406 = HEAP32[(32496)>>2]|0;
          $407 = ($404>>>0)<($406>>>0);
          if ($407) {
           _abort();
           // unreachable;
          } else {
           $408 = ((($$3372$i)) + 20|0);
           HEAP32[$408>>2] = $404;
           $409 = ((($404)) + 24|0);
           HEAP32[$409>>2] = $$3372$i;
           $470 = $250;
           break;
          }
         }
        }
       } while(0);
       $410 = ($$4351$lcssa$i>>>0)<(16);
       do {
        if ($410) {
         $411 = (($$4351$lcssa$i) + ($249))|0;
         $412 = $411 | 3;
         $413 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$413>>2] = $412;
         $414 = (($$4$lcssa$i) + ($411)|0);
         $415 = ((($414)) + 4|0);
         $416 = HEAP32[$415>>2]|0;
         $417 = $416 | 1;
         HEAP32[$415>>2] = $417;
        } else {
         $418 = $249 | 3;
         $419 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$419>>2] = $418;
         $420 = $$4351$lcssa$i | 1;
         $421 = ((($350)) + 4|0);
         HEAP32[$421>>2] = $420;
         $422 = (($350) + ($$4351$lcssa$i)|0);
         HEAP32[$422>>2] = $$4351$lcssa$i;
         $423 = $$4351$lcssa$i >>> 3;
         $424 = ($$4351$lcssa$i>>>0)<(256);
         if ($424) {
          $425 = $423 << 1;
          $426 = (32520 + ($425<<2)|0);
          $427 = HEAP32[8120]|0;
          $428 = 1 << $423;
          $429 = $427 & $428;
          $430 = ($429|0)==(0);
          if ($430) {
           $431 = $427 | $428;
           HEAP32[8120] = $431;
           $$pre$i210 = ((($426)) + 8|0);
           $$0368$i = $426;$$pre$phi$i211Z2D = $$pre$i210;
          } else {
           $432 = ((($426)) + 8|0);
           $433 = HEAP32[$432>>2]|0;
           $434 = HEAP32[(32496)>>2]|0;
           $435 = ($433>>>0)<($434>>>0);
           if ($435) {
            _abort();
            // unreachable;
           } else {
            $$0368$i = $433;$$pre$phi$i211Z2D = $432;
           }
          }
          HEAP32[$$pre$phi$i211Z2D>>2] = $350;
          $436 = ((($$0368$i)) + 12|0);
          HEAP32[$436>>2] = $350;
          $437 = ((($350)) + 8|0);
          HEAP32[$437>>2] = $$0368$i;
          $438 = ((($350)) + 12|0);
          HEAP32[$438>>2] = $426;
          break;
         }
         $439 = $$4351$lcssa$i >>> 8;
         $440 = ($439|0)==(0);
         if ($440) {
          $$0361$i = 0;
         } else {
          $441 = ($$4351$lcssa$i>>>0)>(16777215);
          if ($441) {
           $$0361$i = 31;
          } else {
           $442 = (($439) + 1048320)|0;
           $443 = $442 >>> 16;
           $444 = $443 & 8;
           $445 = $439 << $444;
           $446 = (($445) + 520192)|0;
           $447 = $446 >>> 16;
           $448 = $447 & 4;
           $449 = $448 | $444;
           $450 = $445 << $448;
           $451 = (($450) + 245760)|0;
           $452 = $451 >>> 16;
           $453 = $452 & 2;
           $454 = $449 | $453;
           $455 = (14 - ($454))|0;
           $456 = $450 << $453;
           $457 = $456 >>> 15;
           $458 = (($455) + ($457))|0;
           $459 = $458 << 1;
           $460 = (($458) + 7)|0;
           $461 = $$4351$lcssa$i >>> $460;
           $462 = $461 & 1;
           $463 = $462 | $459;
           $$0361$i = $463;
          }
         }
         $464 = (32784 + ($$0361$i<<2)|0);
         $465 = ((($350)) + 28|0);
         HEAP32[$465>>2] = $$0361$i;
         $466 = ((($350)) + 16|0);
         $467 = ((($466)) + 4|0);
         HEAP32[$467>>2] = 0;
         HEAP32[$466>>2] = 0;
         $468 = 1 << $$0361$i;
         $469 = $470 & $468;
         $471 = ($469|0)==(0);
         if ($471) {
          $472 = $470 | $468;
          HEAP32[(32484)>>2] = $472;
          HEAP32[$464>>2] = $350;
          $473 = ((($350)) + 24|0);
          HEAP32[$473>>2] = $464;
          $474 = ((($350)) + 12|0);
          HEAP32[$474>>2] = $350;
          $475 = ((($350)) + 8|0);
          HEAP32[$475>>2] = $350;
          break;
         }
         $476 = HEAP32[$464>>2]|0;
         $477 = ($$0361$i|0)==(31);
         $478 = $$0361$i >>> 1;
         $479 = (25 - ($478))|0;
         $480 = $477 ? 0 : $479;
         $481 = $$4351$lcssa$i << $480;
         $$0344$i = $481;$$0345$i = $476;
         while(1) {
          $482 = ((($$0345$i)) + 4|0);
          $483 = HEAP32[$482>>2]|0;
          $484 = $483 & -8;
          $485 = ($484|0)==($$4351$lcssa$i|0);
          if ($485) {
           label = 139;
           break;
          }
          $486 = $$0344$i >>> 31;
          $487 = (((($$0345$i)) + 16|0) + ($486<<2)|0);
          $488 = $$0344$i << 1;
          $489 = HEAP32[$487>>2]|0;
          $490 = ($489|0)==(0|0);
          if ($490) {
           label = 136;
           break;
          } else {
           $$0344$i = $488;$$0345$i = $489;
          }
         }
         if ((label|0) == 136) {
          $491 = HEAP32[(32496)>>2]|0;
          $492 = ($487>>>0)<($491>>>0);
          if ($492) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$487>>2] = $350;
           $493 = ((($350)) + 24|0);
           HEAP32[$493>>2] = $$0345$i;
           $494 = ((($350)) + 12|0);
           HEAP32[$494>>2] = $350;
           $495 = ((($350)) + 8|0);
           HEAP32[$495>>2] = $350;
           break;
          }
         }
         else if ((label|0) == 139) {
          $496 = ((($$0345$i)) + 8|0);
          $497 = HEAP32[$496>>2]|0;
          $498 = HEAP32[(32496)>>2]|0;
          $499 = ($497>>>0)>=($498>>>0);
          $not$9$i = ($$0345$i>>>0)>=($498>>>0);
          $500 = $499 & $not$9$i;
          if ($500) {
           $501 = ((($497)) + 12|0);
           HEAP32[$501>>2] = $350;
           HEAP32[$496>>2] = $350;
           $502 = ((($350)) + 8|0);
           HEAP32[$502>>2] = $497;
           $503 = ((($350)) + 12|0);
           HEAP32[$503>>2] = $$0345$i;
           $504 = ((($350)) + 24|0);
           HEAP32[$504>>2] = 0;
           break;
          } else {
           _abort();
           // unreachable;
          }
         }
        }
       } while(0);
       $505 = ((($$4$lcssa$i)) + 8|0);
       $$0 = $505;
       STACKTOP = sp;return ($$0|0);
      } else {
       $$0197 = $249;
      }
     }
    }
   }
  }
 } while(0);
 $506 = HEAP32[(32488)>>2]|0;
 $507 = ($506>>>0)<($$0197>>>0);
 if (!($507)) {
  $508 = (($506) - ($$0197))|0;
  $509 = HEAP32[(32500)>>2]|0;
  $510 = ($508>>>0)>(15);
  if ($510) {
   $511 = (($509) + ($$0197)|0);
   HEAP32[(32500)>>2] = $511;
   HEAP32[(32488)>>2] = $508;
   $512 = $508 | 1;
   $513 = ((($511)) + 4|0);
   HEAP32[$513>>2] = $512;
   $514 = (($511) + ($508)|0);
   HEAP32[$514>>2] = $508;
   $515 = $$0197 | 3;
   $516 = ((($509)) + 4|0);
   HEAP32[$516>>2] = $515;
  } else {
   HEAP32[(32488)>>2] = 0;
   HEAP32[(32500)>>2] = 0;
   $517 = $506 | 3;
   $518 = ((($509)) + 4|0);
   HEAP32[$518>>2] = $517;
   $519 = (($509) + ($506)|0);
   $520 = ((($519)) + 4|0);
   $521 = HEAP32[$520>>2]|0;
   $522 = $521 | 1;
   HEAP32[$520>>2] = $522;
  }
  $523 = ((($509)) + 8|0);
  $$0 = $523;
  STACKTOP = sp;return ($$0|0);
 }
 $524 = HEAP32[(32492)>>2]|0;
 $525 = ($524>>>0)>($$0197>>>0);
 if ($525) {
  $526 = (($524) - ($$0197))|0;
  HEAP32[(32492)>>2] = $526;
  $527 = HEAP32[(32504)>>2]|0;
  $528 = (($527) + ($$0197)|0);
  HEAP32[(32504)>>2] = $528;
  $529 = $526 | 1;
  $530 = ((($528)) + 4|0);
  HEAP32[$530>>2] = $529;
  $531 = $$0197 | 3;
  $532 = ((($527)) + 4|0);
  HEAP32[$532>>2] = $531;
  $533 = ((($527)) + 8|0);
  $$0 = $533;
  STACKTOP = sp;return ($$0|0);
 }
 $534 = HEAP32[8238]|0;
 $535 = ($534|0)==(0);
 if ($535) {
  HEAP32[(32960)>>2] = 4096;
  HEAP32[(32956)>>2] = 4096;
  HEAP32[(32964)>>2] = -1;
  HEAP32[(32968)>>2] = -1;
  HEAP32[(32972)>>2] = 0;
  HEAP32[(32924)>>2] = 0;
  $536 = $1;
  $537 = $536 & -16;
  $538 = $537 ^ 1431655768;
  HEAP32[$1>>2] = $538;
  HEAP32[8238] = $538;
  $542 = 4096;
 } else {
  $$pre$i212 = HEAP32[(32960)>>2]|0;
  $542 = $$pre$i212;
 }
 $539 = (($$0197) + 48)|0;
 $540 = (($$0197) + 47)|0;
 $541 = (($542) + ($540))|0;
 $543 = (0 - ($542))|0;
 $544 = $541 & $543;
 $545 = ($544>>>0)>($$0197>>>0);
 if (!($545)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $546 = HEAP32[(32920)>>2]|0;
 $547 = ($546|0)==(0);
 if (!($547)) {
  $548 = HEAP32[(32912)>>2]|0;
  $549 = (($548) + ($544))|0;
  $550 = ($549>>>0)<=($548>>>0);
  $551 = ($549>>>0)>($546>>>0);
  $or$cond1$i = $550 | $551;
  if ($or$cond1$i) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $552 = HEAP32[(32924)>>2]|0;
 $553 = $552 & 4;
 $554 = ($553|0)==(0);
 L244: do {
  if ($554) {
   $555 = HEAP32[(32504)>>2]|0;
   $556 = ($555|0)==(0|0);
   L246: do {
    if ($556) {
     label = 163;
    } else {
     $$0$i$i = (32928);
     while(1) {
      $557 = HEAP32[$$0$i$i>>2]|0;
      $558 = ($557>>>0)>($555>>>0);
      if (!($558)) {
       $559 = ((($$0$i$i)) + 4|0);
       $560 = HEAP32[$559>>2]|0;
       $561 = (($557) + ($560)|0);
       $562 = ($561>>>0)>($555>>>0);
       if ($562) {
        break;
       }
      }
      $563 = ((($$0$i$i)) + 8|0);
      $564 = HEAP32[$563>>2]|0;
      $565 = ($564|0)==(0|0);
      if ($565) {
       label = 163;
       break L246;
      } else {
       $$0$i$i = $564;
      }
     }
     $588 = (($541) - ($524))|0;
     $589 = $588 & $543;
     $590 = ($589>>>0)<(2147483647);
     if ($590) {
      $591 = (_sbrk(($589|0))|0);
      $592 = HEAP32[$$0$i$i>>2]|0;
      $593 = HEAP32[$559>>2]|0;
      $594 = (($592) + ($593)|0);
      $595 = ($591|0)==($594|0);
      if ($595) {
       $596 = ($591|0)==((-1)|0);
       if ($596) {
        $$2234253237$i = $589;
       } else {
        $$723948$i = $589;$$749$i = $591;
        label = 180;
        break L244;
       }
      } else {
       $$2247$ph$i = $591;$$2253$ph$i = $589;
       label = 171;
      }
     } else {
      $$2234253237$i = 0;
     }
    }
   } while(0);
   do {
    if ((label|0) == 163) {
     $566 = (_sbrk(0)|0);
     $567 = ($566|0)==((-1)|0);
     if ($567) {
      $$2234253237$i = 0;
     } else {
      $568 = $566;
      $569 = HEAP32[(32956)>>2]|0;
      $570 = (($569) + -1)|0;
      $571 = $570 & $568;
      $572 = ($571|0)==(0);
      $573 = (($570) + ($568))|0;
      $574 = (0 - ($569))|0;
      $575 = $573 & $574;
      $576 = (($575) - ($568))|0;
      $577 = $572 ? 0 : $576;
      $$$i = (($577) + ($544))|0;
      $578 = HEAP32[(32912)>>2]|0;
      $579 = (($$$i) + ($578))|0;
      $580 = ($$$i>>>0)>($$0197>>>0);
      $581 = ($$$i>>>0)<(2147483647);
      $or$cond$i214 = $580 & $581;
      if ($or$cond$i214) {
       $582 = HEAP32[(32920)>>2]|0;
       $583 = ($582|0)==(0);
       if (!($583)) {
        $584 = ($579>>>0)<=($578>>>0);
        $585 = ($579>>>0)>($582>>>0);
        $or$cond2$i215 = $584 | $585;
        if ($or$cond2$i215) {
         $$2234253237$i = 0;
         break;
        }
       }
       $586 = (_sbrk(($$$i|0))|0);
       $587 = ($586|0)==($566|0);
       if ($587) {
        $$723948$i = $$$i;$$749$i = $566;
        label = 180;
        break L244;
       } else {
        $$2247$ph$i = $586;$$2253$ph$i = $$$i;
        label = 171;
       }
      } else {
       $$2234253237$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 171) {
     $597 = (0 - ($$2253$ph$i))|0;
     $598 = ($$2247$ph$i|0)!=((-1)|0);
     $599 = ($$2253$ph$i>>>0)<(2147483647);
     $or$cond7$i = $599 & $598;
     $600 = ($539>>>0)>($$2253$ph$i>>>0);
     $or$cond10$i = $600 & $or$cond7$i;
     if (!($or$cond10$i)) {
      $610 = ($$2247$ph$i|0)==((-1)|0);
      if ($610) {
       $$2234253237$i = 0;
       break;
      } else {
       $$723948$i = $$2253$ph$i;$$749$i = $$2247$ph$i;
       label = 180;
       break L244;
      }
     }
     $601 = HEAP32[(32960)>>2]|0;
     $602 = (($540) - ($$2253$ph$i))|0;
     $603 = (($602) + ($601))|0;
     $604 = (0 - ($601))|0;
     $605 = $603 & $604;
     $606 = ($605>>>0)<(2147483647);
     if (!($606)) {
      $$723948$i = $$2253$ph$i;$$749$i = $$2247$ph$i;
      label = 180;
      break L244;
     }
     $607 = (_sbrk(($605|0))|0);
     $608 = ($607|0)==((-1)|0);
     if ($608) {
      (_sbrk(($597|0))|0);
      $$2234253237$i = 0;
      break;
     } else {
      $609 = (($605) + ($$2253$ph$i))|0;
      $$723948$i = $609;$$749$i = $$2247$ph$i;
      label = 180;
      break L244;
     }
    }
   } while(0);
   $611 = HEAP32[(32924)>>2]|0;
   $612 = $611 | 4;
   HEAP32[(32924)>>2] = $612;
   $$4236$i = $$2234253237$i;
   label = 178;
  } else {
   $$4236$i = 0;
   label = 178;
  }
 } while(0);
 if ((label|0) == 178) {
  $613 = ($544>>>0)<(2147483647);
  if ($613) {
   $614 = (_sbrk(($544|0))|0);
   $615 = (_sbrk(0)|0);
   $616 = ($614|0)!=((-1)|0);
   $617 = ($615|0)!=((-1)|0);
   $or$cond5$i = $616 & $617;
   $618 = ($614>>>0)<($615>>>0);
   $or$cond11$i = $618 & $or$cond5$i;
   $619 = $615;
   $620 = $614;
   $621 = (($619) - ($620))|0;
   $622 = (($$0197) + 40)|0;
   $623 = ($621>>>0)>($622>>>0);
   $$$4236$i = $623 ? $621 : $$4236$i;
   $or$cond11$not$i = $or$cond11$i ^ 1;
   $624 = ($614|0)==((-1)|0);
   $not$$i216 = $623 ^ 1;
   $625 = $624 | $not$$i216;
   $or$cond50$i = $625 | $or$cond11$not$i;
   if (!($or$cond50$i)) {
    $$723948$i = $$$4236$i;$$749$i = $614;
    label = 180;
   }
  }
 }
 if ((label|0) == 180) {
  $626 = HEAP32[(32912)>>2]|0;
  $627 = (($626) + ($$723948$i))|0;
  HEAP32[(32912)>>2] = $627;
  $628 = HEAP32[(32916)>>2]|0;
  $629 = ($627>>>0)>($628>>>0);
  if ($629) {
   HEAP32[(32916)>>2] = $627;
  }
  $630 = HEAP32[(32504)>>2]|0;
  $631 = ($630|0)==(0|0);
  do {
   if ($631) {
    $632 = HEAP32[(32496)>>2]|0;
    $633 = ($632|0)==(0|0);
    $634 = ($$749$i>>>0)<($632>>>0);
    $or$cond12$i = $633 | $634;
    if ($or$cond12$i) {
     HEAP32[(32496)>>2] = $$749$i;
    }
    HEAP32[(32928)>>2] = $$749$i;
    HEAP32[(32932)>>2] = $$723948$i;
    HEAP32[(32940)>>2] = 0;
    $635 = HEAP32[8238]|0;
    HEAP32[(32516)>>2] = $635;
    HEAP32[(32512)>>2] = -1;
    $$01$i$i = 0;
    while(1) {
     $636 = $$01$i$i << 1;
     $637 = (32520 + ($636<<2)|0);
     $638 = ((($637)) + 12|0);
     HEAP32[$638>>2] = $637;
     $639 = ((($637)) + 8|0);
     HEAP32[$639>>2] = $637;
     $640 = (($$01$i$i) + 1)|0;
     $exitcond$i$i = ($640|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $$01$i$i = $640;
     }
    }
    $641 = (($$723948$i) + -40)|0;
    $642 = ((($$749$i)) + 8|0);
    $643 = $642;
    $644 = $643 & 7;
    $645 = ($644|0)==(0);
    $646 = (0 - ($643))|0;
    $647 = $646 & 7;
    $648 = $645 ? 0 : $647;
    $649 = (($$749$i) + ($648)|0);
    $650 = (($641) - ($648))|0;
    HEAP32[(32504)>>2] = $649;
    HEAP32[(32492)>>2] = $650;
    $651 = $650 | 1;
    $652 = ((($649)) + 4|0);
    HEAP32[$652>>2] = $651;
    $653 = (($649) + ($650)|0);
    $654 = ((($653)) + 4|0);
    HEAP32[$654>>2] = 40;
    $655 = HEAP32[(32968)>>2]|0;
    HEAP32[(32508)>>2] = $655;
   } else {
    $$024371$i = (32928);
    while(1) {
     $656 = HEAP32[$$024371$i>>2]|0;
     $657 = ((($$024371$i)) + 4|0);
     $658 = HEAP32[$657>>2]|0;
     $659 = (($656) + ($658)|0);
     $660 = ($$749$i|0)==($659|0);
     if ($660) {
      label = 190;
      break;
     }
     $661 = ((($$024371$i)) + 8|0);
     $662 = HEAP32[$661>>2]|0;
     $663 = ($662|0)==(0|0);
     if ($663) {
      break;
     } else {
      $$024371$i = $662;
     }
    }
    if ((label|0) == 190) {
     $664 = ((($$024371$i)) + 12|0);
     $665 = HEAP32[$664>>2]|0;
     $666 = $665 & 8;
     $667 = ($666|0)==(0);
     if ($667) {
      $668 = ($630>>>0)>=($656>>>0);
      $669 = ($630>>>0)<($$749$i>>>0);
      $or$cond51$i = $669 & $668;
      if ($or$cond51$i) {
       $670 = (($658) + ($$723948$i))|0;
       HEAP32[$657>>2] = $670;
       $671 = HEAP32[(32492)>>2]|0;
       $672 = ((($630)) + 8|0);
       $673 = $672;
       $674 = $673 & 7;
       $675 = ($674|0)==(0);
       $676 = (0 - ($673))|0;
       $677 = $676 & 7;
       $678 = $675 ? 0 : $677;
       $679 = (($630) + ($678)|0);
       $680 = (($$723948$i) - ($678))|0;
       $681 = (($671) + ($680))|0;
       HEAP32[(32504)>>2] = $679;
       HEAP32[(32492)>>2] = $681;
       $682 = $681 | 1;
       $683 = ((($679)) + 4|0);
       HEAP32[$683>>2] = $682;
       $684 = (($679) + ($681)|0);
       $685 = ((($684)) + 4|0);
       HEAP32[$685>>2] = 40;
       $686 = HEAP32[(32968)>>2]|0;
       HEAP32[(32508)>>2] = $686;
       break;
      }
     }
    }
    $687 = HEAP32[(32496)>>2]|0;
    $688 = ($$749$i>>>0)<($687>>>0);
    if ($688) {
     HEAP32[(32496)>>2] = $$749$i;
     $752 = $$749$i;
    } else {
     $752 = $687;
    }
    $689 = (($$749$i) + ($$723948$i)|0);
    $$124470$i = (32928);
    while(1) {
     $690 = HEAP32[$$124470$i>>2]|0;
     $691 = ($690|0)==($689|0);
     if ($691) {
      label = 198;
      break;
     }
     $692 = ((($$124470$i)) + 8|0);
     $693 = HEAP32[$692>>2]|0;
     $694 = ($693|0)==(0|0);
     if ($694) {
      break;
     } else {
      $$124470$i = $693;
     }
    }
    if ((label|0) == 198) {
     $695 = ((($$124470$i)) + 12|0);
     $696 = HEAP32[$695>>2]|0;
     $697 = $696 & 8;
     $698 = ($697|0)==(0);
     if ($698) {
      HEAP32[$$124470$i>>2] = $$749$i;
      $699 = ((($$124470$i)) + 4|0);
      $700 = HEAP32[$699>>2]|0;
      $701 = (($700) + ($$723948$i))|0;
      HEAP32[$699>>2] = $701;
      $702 = ((($$749$i)) + 8|0);
      $703 = $702;
      $704 = $703 & 7;
      $705 = ($704|0)==(0);
      $706 = (0 - ($703))|0;
      $707 = $706 & 7;
      $708 = $705 ? 0 : $707;
      $709 = (($$749$i) + ($708)|0);
      $710 = ((($689)) + 8|0);
      $711 = $710;
      $712 = $711 & 7;
      $713 = ($712|0)==(0);
      $714 = (0 - ($711))|0;
      $715 = $714 & 7;
      $716 = $713 ? 0 : $715;
      $717 = (($689) + ($716)|0);
      $718 = $717;
      $719 = $709;
      $720 = (($718) - ($719))|0;
      $721 = (($709) + ($$0197)|0);
      $722 = (($720) - ($$0197))|0;
      $723 = $$0197 | 3;
      $724 = ((($709)) + 4|0);
      HEAP32[$724>>2] = $723;
      $725 = ($717|0)==($630|0);
      do {
       if ($725) {
        $726 = HEAP32[(32492)>>2]|0;
        $727 = (($726) + ($722))|0;
        HEAP32[(32492)>>2] = $727;
        HEAP32[(32504)>>2] = $721;
        $728 = $727 | 1;
        $729 = ((($721)) + 4|0);
        HEAP32[$729>>2] = $728;
       } else {
        $730 = HEAP32[(32500)>>2]|0;
        $731 = ($717|0)==($730|0);
        if ($731) {
         $732 = HEAP32[(32488)>>2]|0;
         $733 = (($732) + ($722))|0;
         HEAP32[(32488)>>2] = $733;
         HEAP32[(32500)>>2] = $721;
         $734 = $733 | 1;
         $735 = ((($721)) + 4|0);
         HEAP32[$735>>2] = $734;
         $736 = (($721) + ($733)|0);
         HEAP32[$736>>2] = $733;
         break;
        }
        $737 = ((($717)) + 4|0);
        $738 = HEAP32[$737>>2]|0;
        $739 = $738 & 3;
        $740 = ($739|0)==(1);
        if ($740) {
         $741 = $738 & -8;
         $742 = $738 >>> 3;
         $743 = ($738>>>0)<(256);
         L314: do {
          if ($743) {
           $744 = ((($717)) + 8|0);
           $745 = HEAP32[$744>>2]|0;
           $746 = ((($717)) + 12|0);
           $747 = HEAP32[$746>>2]|0;
           $748 = $742 << 1;
           $749 = (32520 + ($748<<2)|0);
           $750 = ($745|0)==($749|0);
           do {
            if (!($750)) {
             $751 = ($745>>>0)<($752>>>0);
             if ($751) {
              _abort();
              // unreachable;
             }
             $753 = ((($745)) + 12|0);
             $754 = HEAP32[$753>>2]|0;
             $755 = ($754|0)==($717|0);
             if ($755) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $756 = ($747|0)==($745|0);
           if ($756) {
            $757 = 1 << $742;
            $758 = $757 ^ -1;
            $759 = HEAP32[8120]|0;
            $760 = $759 & $758;
            HEAP32[8120] = $760;
            break;
           }
           $761 = ($747|0)==($749|0);
           do {
            if ($761) {
             $$pre10$i$i = ((($747)) + 8|0);
             $$pre$phi11$i$iZ2D = $$pre10$i$i;
            } else {
             $762 = ($747>>>0)<($752>>>0);
             if ($762) {
              _abort();
              // unreachable;
             }
             $763 = ((($747)) + 8|0);
             $764 = HEAP32[$763>>2]|0;
             $765 = ($764|0)==($717|0);
             if ($765) {
              $$pre$phi11$i$iZ2D = $763;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $766 = ((($745)) + 12|0);
           HEAP32[$766>>2] = $747;
           HEAP32[$$pre$phi11$i$iZ2D>>2] = $745;
          } else {
           $767 = ((($717)) + 24|0);
           $768 = HEAP32[$767>>2]|0;
           $769 = ((($717)) + 12|0);
           $770 = HEAP32[$769>>2]|0;
           $771 = ($770|0)==($717|0);
           do {
            if ($771) {
             $781 = ((($717)) + 16|0);
             $782 = ((($781)) + 4|0);
             $783 = HEAP32[$782>>2]|0;
             $784 = ($783|0)==(0|0);
             if ($784) {
              $785 = HEAP32[$781>>2]|0;
              $786 = ($785|0)==(0|0);
              if ($786) {
               $$3$i$i = 0;
               break;
              } else {
               $$1291$i$i = $785;$$1293$i$i = $781;
              }
             } else {
              $$1291$i$i = $783;$$1293$i$i = $782;
             }
             while(1) {
              $787 = ((($$1291$i$i)) + 20|0);
              $788 = HEAP32[$787>>2]|0;
              $789 = ($788|0)==(0|0);
              if (!($789)) {
               $$1291$i$i = $788;$$1293$i$i = $787;
               continue;
              }
              $790 = ((($$1291$i$i)) + 16|0);
              $791 = HEAP32[$790>>2]|0;
              $792 = ($791|0)==(0|0);
              if ($792) {
               break;
              } else {
               $$1291$i$i = $791;$$1293$i$i = $790;
              }
             }
             $793 = ($$1293$i$i>>>0)<($752>>>0);
             if ($793) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$$1293$i$i>>2] = 0;
              $$3$i$i = $$1291$i$i;
              break;
             }
            } else {
             $772 = ((($717)) + 8|0);
             $773 = HEAP32[$772>>2]|0;
             $774 = ($773>>>0)<($752>>>0);
             if ($774) {
              _abort();
              // unreachable;
             }
             $775 = ((($773)) + 12|0);
             $776 = HEAP32[$775>>2]|0;
             $777 = ($776|0)==($717|0);
             if (!($777)) {
              _abort();
              // unreachable;
             }
             $778 = ((($770)) + 8|0);
             $779 = HEAP32[$778>>2]|0;
             $780 = ($779|0)==($717|0);
             if ($780) {
              HEAP32[$775>>2] = $770;
              HEAP32[$778>>2] = $773;
              $$3$i$i = $770;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $794 = ($768|0)==(0|0);
           if ($794) {
            break;
           }
           $795 = ((($717)) + 28|0);
           $796 = HEAP32[$795>>2]|0;
           $797 = (32784 + ($796<<2)|0);
           $798 = HEAP32[$797>>2]|0;
           $799 = ($717|0)==($798|0);
           do {
            if ($799) {
             HEAP32[$797>>2] = $$3$i$i;
             $cond$i$i = ($$3$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $800 = 1 << $796;
             $801 = $800 ^ -1;
             $802 = HEAP32[(32484)>>2]|0;
             $803 = $802 & $801;
             HEAP32[(32484)>>2] = $803;
             break L314;
            } else {
             $804 = HEAP32[(32496)>>2]|0;
             $805 = ($768>>>0)<($804>>>0);
             if ($805) {
              _abort();
              // unreachable;
             } else {
              $806 = ((($768)) + 16|0);
              $807 = HEAP32[$806>>2]|0;
              $not$$i17$i = ($807|0)!=($717|0);
              $$sink1$i$i = $not$$i17$i&1;
              $808 = (((($768)) + 16|0) + ($$sink1$i$i<<2)|0);
              HEAP32[$808>>2] = $$3$i$i;
              $809 = ($$3$i$i|0)==(0|0);
              if ($809) {
               break L314;
              } else {
               break;
              }
             }
            }
           } while(0);
           $810 = HEAP32[(32496)>>2]|0;
           $811 = ($$3$i$i>>>0)<($810>>>0);
           if ($811) {
            _abort();
            // unreachable;
           }
           $812 = ((($$3$i$i)) + 24|0);
           HEAP32[$812>>2] = $768;
           $813 = ((($717)) + 16|0);
           $814 = HEAP32[$813>>2]|0;
           $815 = ($814|0)==(0|0);
           do {
            if (!($815)) {
             $816 = ($814>>>0)<($810>>>0);
             if ($816) {
              _abort();
              // unreachable;
             } else {
              $817 = ((($$3$i$i)) + 16|0);
              HEAP32[$817>>2] = $814;
              $818 = ((($814)) + 24|0);
              HEAP32[$818>>2] = $$3$i$i;
              break;
             }
            }
           } while(0);
           $819 = ((($813)) + 4|0);
           $820 = HEAP32[$819>>2]|0;
           $821 = ($820|0)==(0|0);
           if ($821) {
            break;
           }
           $822 = HEAP32[(32496)>>2]|0;
           $823 = ($820>>>0)<($822>>>0);
           if ($823) {
            _abort();
            // unreachable;
           } else {
            $824 = ((($$3$i$i)) + 20|0);
            HEAP32[$824>>2] = $820;
            $825 = ((($820)) + 24|0);
            HEAP32[$825>>2] = $$3$i$i;
            break;
           }
          }
         } while(0);
         $826 = (($717) + ($741)|0);
         $827 = (($741) + ($722))|0;
         $$0$i18$i = $826;$$0287$i$i = $827;
        } else {
         $$0$i18$i = $717;$$0287$i$i = $722;
        }
        $828 = ((($$0$i18$i)) + 4|0);
        $829 = HEAP32[$828>>2]|0;
        $830 = $829 & -2;
        HEAP32[$828>>2] = $830;
        $831 = $$0287$i$i | 1;
        $832 = ((($721)) + 4|0);
        HEAP32[$832>>2] = $831;
        $833 = (($721) + ($$0287$i$i)|0);
        HEAP32[$833>>2] = $$0287$i$i;
        $834 = $$0287$i$i >>> 3;
        $835 = ($$0287$i$i>>>0)<(256);
        if ($835) {
         $836 = $834 << 1;
         $837 = (32520 + ($836<<2)|0);
         $838 = HEAP32[8120]|0;
         $839 = 1 << $834;
         $840 = $838 & $839;
         $841 = ($840|0)==(0);
         do {
          if ($841) {
           $842 = $838 | $839;
           HEAP32[8120] = $842;
           $$pre$i19$i = ((($837)) + 8|0);
           $$0295$i$i = $837;$$pre$phi$i20$iZ2D = $$pre$i19$i;
          } else {
           $843 = ((($837)) + 8|0);
           $844 = HEAP32[$843>>2]|0;
           $845 = HEAP32[(32496)>>2]|0;
           $846 = ($844>>>0)<($845>>>0);
           if (!($846)) {
            $$0295$i$i = $844;$$pre$phi$i20$iZ2D = $843;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i20$iZ2D>>2] = $721;
         $847 = ((($$0295$i$i)) + 12|0);
         HEAP32[$847>>2] = $721;
         $848 = ((($721)) + 8|0);
         HEAP32[$848>>2] = $$0295$i$i;
         $849 = ((($721)) + 12|0);
         HEAP32[$849>>2] = $837;
         break;
        }
        $850 = $$0287$i$i >>> 8;
        $851 = ($850|0)==(0);
        do {
         if ($851) {
          $$0296$i$i = 0;
         } else {
          $852 = ($$0287$i$i>>>0)>(16777215);
          if ($852) {
           $$0296$i$i = 31;
           break;
          }
          $853 = (($850) + 1048320)|0;
          $854 = $853 >>> 16;
          $855 = $854 & 8;
          $856 = $850 << $855;
          $857 = (($856) + 520192)|0;
          $858 = $857 >>> 16;
          $859 = $858 & 4;
          $860 = $859 | $855;
          $861 = $856 << $859;
          $862 = (($861) + 245760)|0;
          $863 = $862 >>> 16;
          $864 = $863 & 2;
          $865 = $860 | $864;
          $866 = (14 - ($865))|0;
          $867 = $861 << $864;
          $868 = $867 >>> 15;
          $869 = (($866) + ($868))|0;
          $870 = $869 << 1;
          $871 = (($869) + 7)|0;
          $872 = $$0287$i$i >>> $871;
          $873 = $872 & 1;
          $874 = $873 | $870;
          $$0296$i$i = $874;
         }
        } while(0);
        $875 = (32784 + ($$0296$i$i<<2)|0);
        $876 = ((($721)) + 28|0);
        HEAP32[$876>>2] = $$0296$i$i;
        $877 = ((($721)) + 16|0);
        $878 = ((($877)) + 4|0);
        HEAP32[$878>>2] = 0;
        HEAP32[$877>>2] = 0;
        $879 = HEAP32[(32484)>>2]|0;
        $880 = 1 << $$0296$i$i;
        $881 = $879 & $880;
        $882 = ($881|0)==(0);
        if ($882) {
         $883 = $879 | $880;
         HEAP32[(32484)>>2] = $883;
         HEAP32[$875>>2] = $721;
         $884 = ((($721)) + 24|0);
         HEAP32[$884>>2] = $875;
         $885 = ((($721)) + 12|0);
         HEAP32[$885>>2] = $721;
         $886 = ((($721)) + 8|0);
         HEAP32[$886>>2] = $721;
         break;
        }
        $887 = HEAP32[$875>>2]|0;
        $888 = ($$0296$i$i|0)==(31);
        $889 = $$0296$i$i >>> 1;
        $890 = (25 - ($889))|0;
        $891 = $888 ? 0 : $890;
        $892 = $$0287$i$i << $891;
        $$0288$i$i = $892;$$0289$i$i = $887;
        while(1) {
         $893 = ((($$0289$i$i)) + 4|0);
         $894 = HEAP32[$893>>2]|0;
         $895 = $894 & -8;
         $896 = ($895|0)==($$0287$i$i|0);
         if ($896) {
          label = 265;
          break;
         }
         $897 = $$0288$i$i >>> 31;
         $898 = (((($$0289$i$i)) + 16|0) + ($897<<2)|0);
         $899 = $$0288$i$i << 1;
         $900 = HEAP32[$898>>2]|0;
         $901 = ($900|0)==(0|0);
         if ($901) {
          label = 262;
          break;
         } else {
          $$0288$i$i = $899;$$0289$i$i = $900;
         }
        }
        if ((label|0) == 262) {
         $902 = HEAP32[(32496)>>2]|0;
         $903 = ($898>>>0)<($902>>>0);
         if ($903) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$898>>2] = $721;
          $904 = ((($721)) + 24|0);
          HEAP32[$904>>2] = $$0289$i$i;
          $905 = ((($721)) + 12|0);
          HEAP32[$905>>2] = $721;
          $906 = ((($721)) + 8|0);
          HEAP32[$906>>2] = $721;
          break;
         }
        }
        else if ((label|0) == 265) {
         $907 = ((($$0289$i$i)) + 8|0);
         $908 = HEAP32[$907>>2]|0;
         $909 = HEAP32[(32496)>>2]|0;
         $910 = ($908>>>0)>=($909>>>0);
         $not$7$i$i = ($$0289$i$i>>>0)>=($909>>>0);
         $911 = $910 & $not$7$i$i;
         if ($911) {
          $912 = ((($908)) + 12|0);
          HEAP32[$912>>2] = $721;
          HEAP32[$907>>2] = $721;
          $913 = ((($721)) + 8|0);
          HEAP32[$913>>2] = $908;
          $914 = ((($721)) + 12|0);
          HEAP32[$914>>2] = $$0289$i$i;
          $915 = ((($721)) + 24|0);
          HEAP32[$915>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       }
      } while(0);
      $1047 = ((($709)) + 8|0);
      $$0 = $1047;
      STACKTOP = sp;return ($$0|0);
     }
    }
    $$0$i$i$i = (32928);
    while(1) {
     $916 = HEAP32[$$0$i$i$i>>2]|0;
     $917 = ($916>>>0)>($630>>>0);
     if (!($917)) {
      $918 = ((($$0$i$i$i)) + 4|0);
      $919 = HEAP32[$918>>2]|0;
      $920 = (($916) + ($919)|0);
      $921 = ($920>>>0)>($630>>>0);
      if ($921) {
       break;
      }
     }
     $922 = ((($$0$i$i$i)) + 8|0);
     $923 = HEAP32[$922>>2]|0;
     $$0$i$i$i = $923;
    }
    $924 = ((($920)) + -47|0);
    $925 = ((($924)) + 8|0);
    $926 = $925;
    $927 = $926 & 7;
    $928 = ($927|0)==(0);
    $929 = (0 - ($926))|0;
    $930 = $929 & 7;
    $931 = $928 ? 0 : $930;
    $932 = (($924) + ($931)|0);
    $933 = ((($630)) + 16|0);
    $934 = ($932>>>0)<($933>>>0);
    $935 = $934 ? $630 : $932;
    $936 = ((($935)) + 8|0);
    $937 = ((($935)) + 24|0);
    $938 = (($$723948$i) + -40)|0;
    $939 = ((($$749$i)) + 8|0);
    $940 = $939;
    $941 = $940 & 7;
    $942 = ($941|0)==(0);
    $943 = (0 - ($940))|0;
    $944 = $943 & 7;
    $945 = $942 ? 0 : $944;
    $946 = (($$749$i) + ($945)|0);
    $947 = (($938) - ($945))|0;
    HEAP32[(32504)>>2] = $946;
    HEAP32[(32492)>>2] = $947;
    $948 = $947 | 1;
    $949 = ((($946)) + 4|0);
    HEAP32[$949>>2] = $948;
    $950 = (($946) + ($947)|0);
    $951 = ((($950)) + 4|0);
    HEAP32[$951>>2] = 40;
    $952 = HEAP32[(32968)>>2]|0;
    HEAP32[(32508)>>2] = $952;
    $953 = ((($935)) + 4|0);
    HEAP32[$953>>2] = 27;
    ;HEAP32[$936>>2]=HEAP32[(32928)>>2]|0;HEAP32[$936+4>>2]=HEAP32[(32928)+4>>2]|0;HEAP32[$936+8>>2]=HEAP32[(32928)+8>>2]|0;HEAP32[$936+12>>2]=HEAP32[(32928)+12>>2]|0;
    HEAP32[(32928)>>2] = $$749$i;
    HEAP32[(32932)>>2] = $$723948$i;
    HEAP32[(32940)>>2] = 0;
    HEAP32[(32936)>>2] = $936;
    $955 = $937;
    while(1) {
     $954 = ((($955)) + 4|0);
     HEAP32[$954>>2] = 7;
     $956 = ((($955)) + 8|0);
     $957 = ($956>>>0)<($920>>>0);
     if ($957) {
      $955 = $954;
     } else {
      break;
     }
    }
    $958 = ($935|0)==($630|0);
    if (!($958)) {
     $959 = $935;
     $960 = $630;
     $961 = (($959) - ($960))|0;
     $962 = HEAP32[$953>>2]|0;
     $963 = $962 & -2;
     HEAP32[$953>>2] = $963;
     $964 = $961 | 1;
     $965 = ((($630)) + 4|0);
     HEAP32[$965>>2] = $964;
     HEAP32[$935>>2] = $961;
     $966 = $961 >>> 3;
     $967 = ($961>>>0)<(256);
     if ($967) {
      $968 = $966 << 1;
      $969 = (32520 + ($968<<2)|0);
      $970 = HEAP32[8120]|0;
      $971 = 1 << $966;
      $972 = $970 & $971;
      $973 = ($972|0)==(0);
      if ($973) {
       $974 = $970 | $971;
       HEAP32[8120] = $974;
       $$pre$i$i = ((($969)) + 8|0);
       $$0211$i$i = $969;$$pre$phi$i$iZ2D = $$pre$i$i;
      } else {
       $975 = ((($969)) + 8|0);
       $976 = HEAP32[$975>>2]|0;
       $977 = HEAP32[(32496)>>2]|0;
       $978 = ($976>>>0)<($977>>>0);
       if ($978) {
        _abort();
        // unreachable;
       } else {
        $$0211$i$i = $976;$$pre$phi$i$iZ2D = $975;
       }
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $630;
      $979 = ((($$0211$i$i)) + 12|0);
      HEAP32[$979>>2] = $630;
      $980 = ((($630)) + 8|0);
      HEAP32[$980>>2] = $$0211$i$i;
      $981 = ((($630)) + 12|0);
      HEAP32[$981>>2] = $969;
      break;
     }
     $982 = $961 >>> 8;
     $983 = ($982|0)==(0);
     if ($983) {
      $$0212$i$i = 0;
     } else {
      $984 = ($961>>>0)>(16777215);
      if ($984) {
       $$0212$i$i = 31;
      } else {
       $985 = (($982) + 1048320)|0;
       $986 = $985 >>> 16;
       $987 = $986 & 8;
       $988 = $982 << $987;
       $989 = (($988) + 520192)|0;
       $990 = $989 >>> 16;
       $991 = $990 & 4;
       $992 = $991 | $987;
       $993 = $988 << $991;
       $994 = (($993) + 245760)|0;
       $995 = $994 >>> 16;
       $996 = $995 & 2;
       $997 = $992 | $996;
       $998 = (14 - ($997))|0;
       $999 = $993 << $996;
       $1000 = $999 >>> 15;
       $1001 = (($998) + ($1000))|0;
       $1002 = $1001 << 1;
       $1003 = (($1001) + 7)|0;
       $1004 = $961 >>> $1003;
       $1005 = $1004 & 1;
       $1006 = $1005 | $1002;
       $$0212$i$i = $1006;
      }
     }
     $1007 = (32784 + ($$0212$i$i<<2)|0);
     $1008 = ((($630)) + 28|0);
     HEAP32[$1008>>2] = $$0212$i$i;
     $1009 = ((($630)) + 20|0);
     HEAP32[$1009>>2] = 0;
     HEAP32[$933>>2] = 0;
     $1010 = HEAP32[(32484)>>2]|0;
     $1011 = 1 << $$0212$i$i;
     $1012 = $1010 & $1011;
     $1013 = ($1012|0)==(0);
     if ($1013) {
      $1014 = $1010 | $1011;
      HEAP32[(32484)>>2] = $1014;
      HEAP32[$1007>>2] = $630;
      $1015 = ((($630)) + 24|0);
      HEAP32[$1015>>2] = $1007;
      $1016 = ((($630)) + 12|0);
      HEAP32[$1016>>2] = $630;
      $1017 = ((($630)) + 8|0);
      HEAP32[$1017>>2] = $630;
      break;
     }
     $1018 = HEAP32[$1007>>2]|0;
     $1019 = ($$0212$i$i|0)==(31);
     $1020 = $$0212$i$i >>> 1;
     $1021 = (25 - ($1020))|0;
     $1022 = $1019 ? 0 : $1021;
     $1023 = $961 << $1022;
     $$0206$i$i = $1023;$$0207$i$i = $1018;
     while(1) {
      $1024 = ((($$0207$i$i)) + 4|0);
      $1025 = HEAP32[$1024>>2]|0;
      $1026 = $1025 & -8;
      $1027 = ($1026|0)==($961|0);
      if ($1027) {
       label = 292;
       break;
      }
      $1028 = $$0206$i$i >>> 31;
      $1029 = (((($$0207$i$i)) + 16|0) + ($1028<<2)|0);
      $1030 = $$0206$i$i << 1;
      $1031 = HEAP32[$1029>>2]|0;
      $1032 = ($1031|0)==(0|0);
      if ($1032) {
       label = 289;
       break;
      } else {
       $$0206$i$i = $1030;$$0207$i$i = $1031;
      }
     }
     if ((label|0) == 289) {
      $1033 = HEAP32[(32496)>>2]|0;
      $1034 = ($1029>>>0)<($1033>>>0);
      if ($1034) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$1029>>2] = $630;
       $1035 = ((($630)) + 24|0);
       HEAP32[$1035>>2] = $$0207$i$i;
       $1036 = ((($630)) + 12|0);
       HEAP32[$1036>>2] = $630;
       $1037 = ((($630)) + 8|0);
       HEAP32[$1037>>2] = $630;
       break;
      }
     }
     else if ((label|0) == 292) {
      $1038 = ((($$0207$i$i)) + 8|0);
      $1039 = HEAP32[$1038>>2]|0;
      $1040 = HEAP32[(32496)>>2]|0;
      $1041 = ($1039>>>0)>=($1040>>>0);
      $not$$i$i = ($$0207$i$i>>>0)>=($1040>>>0);
      $1042 = $1041 & $not$$i$i;
      if ($1042) {
       $1043 = ((($1039)) + 12|0);
       HEAP32[$1043>>2] = $630;
       HEAP32[$1038>>2] = $630;
       $1044 = ((($630)) + 8|0);
       HEAP32[$1044>>2] = $1039;
       $1045 = ((($630)) + 12|0);
       HEAP32[$1045>>2] = $$0207$i$i;
       $1046 = ((($630)) + 24|0);
       HEAP32[$1046>>2] = 0;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    }
   }
  } while(0);
  $1048 = HEAP32[(32492)>>2]|0;
  $1049 = ($1048>>>0)>($$0197>>>0);
  if ($1049) {
   $1050 = (($1048) - ($$0197))|0;
   HEAP32[(32492)>>2] = $1050;
   $1051 = HEAP32[(32504)>>2]|0;
   $1052 = (($1051) + ($$0197)|0);
   HEAP32[(32504)>>2] = $1052;
   $1053 = $1050 | 1;
   $1054 = ((($1052)) + 4|0);
   HEAP32[$1054>>2] = $1053;
   $1055 = $$0197 | 3;
   $1056 = ((($1051)) + 4|0);
   HEAP32[$1056>>2] = $1055;
   $1057 = ((($1051)) + 8|0);
   $$0 = $1057;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $1058 = (___errno_location()|0);
 HEAP32[$1058>>2] = 12;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _free($0) {
 $0 = $0|0;
 var $$0212$i = 0, $$0212$in$i = 0, $$0383 = 0, $$0384 = 0, $$0396 = 0, $$0403 = 0, $$1 = 0, $$1382 = 0, $$1387 = 0, $$1390 = 0, $$1398 = 0, $$1402 = 0, $$2 = 0, $$3 = 0, $$3400 = 0, $$pre = 0, $$pre$phi443Z2D = 0, $$pre$phi445Z2D = 0, $$pre$phiZ2D = 0, $$pre442 = 0;
 var $$pre444 = 0, $$sink3 = 0, $$sink5 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $cond421 = 0, $cond422 = 0, $not$ = 0, $not$405 = 0, $not$437 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + -8|0);
 $3 = HEAP32[(32496)>>2]|0;
 $4 = ($2>>>0)<($3>>>0);
 if ($4) {
  _abort();
  // unreachable;
 }
 $5 = ((($0)) + -4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 3;
 $8 = ($7|0)==(1);
 if ($8) {
  _abort();
  // unreachable;
 }
 $9 = $6 & -8;
 $10 = (($2) + ($9)|0);
 $11 = $6 & 1;
 $12 = ($11|0)==(0);
 L10: do {
  if ($12) {
   $13 = HEAP32[$2>>2]|0;
   $14 = ($7|0)==(0);
   if ($14) {
    return;
   }
   $15 = (0 - ($13))|0;
   $16 = (($2) + ($15)|0);
   $17 = (($13) + ($9))|0;
   $18 = ($16>>>0)<($3>>>0);
   if ($18) {
    _abort();
    // unreachable;
   }
   $19 = HEAP32[(32500)>>2]|0;
   $20 = ($16|0)==($19|0);
   if ($20) {
    $104 = ((($10)) + 4|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = $105 & 3;
    $107 = ($106|0)==(3);
    if (!($107)) {
     $$1 = $16;$$1382 = $17;$113 = $16;
     break;
    }
    $108 = (($16) + ($17)|0);
    $109 = ((($16)) + 4|0);
    $110 = $17 | 1;
    $111 = $105 & -2;
    HEAP32[(32488)>>2] = $17;
    HEAP32[$104>>2] = $111;
    HEAP32[$109>>2] = $110;
    HEAP32[$108>>2] = $17;
    return;
   }
   $21 = $13 >>> 3;
   $22 = ($13>>>0)<(256);
   if ($22) {
    $23 = ((($16)) + 8|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ((($16)) + 12|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = $21 << 1;
    $28 = (32520 + ($27<<2)|0);
    $29 = ($24|0)==($28|0);
    if (!($29)) {
     $30 = ($24>>>0)<($3>>>0);
     if ($30) {
      _abort();
      // unreachable;
     }
     $31 = ((($24)) + 12|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = ($32|0)==($16|0);
     if (!($33)) {
      _abort();
      // unreachable;
     }
    }
    $34 = ($26|0)==($24|0);
    if ($34) {
     $35 = 1 << $21;
     $36 = $35 ^ -1;
     $37 = HEAP32[8120]|0;
     $38 = $37 & $36;
     HEAP32[8120] = $38;
     $$1 = $16;$$1382 = $17;$113 = $16;
     break;
    }
    $39 = ($26|0)==($28|0);
    if ($39) {
     $$pre444 = ((($26)) + 8|0);
     $$pre$phi445Z2D = $$pre444;
    } else {
     $40 = ($26>>>0)<($3>>>0);
     if ($40) {
      _abort();
      // unreachable;
     }
     $41 = ((($26)) + 8|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = ($42|0)==($16|0);
     if ($43) {
      $$pre$phi445Z2D = $41;
     } else {
      _abort();
      // unreachable;
     }
    }
    $44 = ((($24)) + 12|0);
    HEAP32[$44>>2] = $26;
    HEAP32[$$pre$phi445Z2D>>2] = $24;
    $$1 = $16;$$1382 = $17;$113 = $16;
    break;
   }
   $45 = ((($16)) + 24|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ((($16)) + 12|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ($48|0)==($16|0);
   do {
    if ($49) {
     $59 = ((($16)) + 16|0);
     $60 = ((($59)) + 4|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = ($61|0)==(0|0);
     if ($62) {
      $63 = HEAP32[$59>>2]|0;
      $64 = ($63|0)==(0|0);
      if ($64) {
       $$3 = 0;
       break;
      } else {
       $$1387 = $63;$$1390 = $59;
      }
     } else {
      $$1387 = $61;$$1390 = $60;
     }
     while(1) {
      $65 = ((($$1387)) + 20|0);
      $66 = HEAP32[$65>>2]|0;
      $67 = ($66|0)==(0|0);
      if (!($67)) {
       $$1387 = $66;$$1390 = $65;
       continue;
      }
      $68 = ((($$1387)) + 16|0);
      $69 = HEAP32[$68>>2]|0;
      $70 = ($69|0)==(0|0);
      if ($70) {
       break;
      } else {
       $$1387 = $69;$$1390 = $68;
      }
     }
     $71 = ($$1390>>>0)<($3>>>0);
     if ($71) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$1390>>2] = 0;
      $$3 = $$1387;
      break;
     }
    } else {
     $50 = ((($16)) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51>>>0)<($3>>>0);
     if ($52) {
      _abort();
      // unreachable;
     }
     $53 = ((($51)) + 12|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)==($16|0);
     if (!($55)) {
      _abort();
      // unreachable;
     }
     $56 = ((($48)) + 8|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = ($57|0)==($16|0);
     if ($58) {
      HEAP32[$53>>2] = $48;
      HEAP32[$56>>2] = $51;
      $$3 = $48;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $72 = ($46|0)==(0|0);
   if ($72) {
    $$1 = $16;$$1382 = $17;$113 = $16;
   } else {
    $73 = ((($16)) + 28|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = (32784 + ($74<<2)|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = ($16|0)==($76|0);
    do {
     if ($77) {
      HEAP32[$75>>2] = $$3;
      $cond421 = ($$3|0)==(0|0);
      if ($cond421) {
       $78 = 1 << $74;
       $79 = $78 ^ -1;
       $80 = HEAP32[(32484)>>2]|0;
       $81 = $80 & $79;
       HEAP32[(32484)>>2] = $81;
       $$1 = $16;$$1382 = $17;$113 = $16;
       break L10;
      }
     } else {
      $82 = HEAP32[(32496)>>2]|0;
      $83 = ($46>>>0)<($82>>>0);
      if ($83) {
       _abort();
       // unreachable;
      } else {
       $84 = ((($46)) + 16|0);
       $85 = HEAP32[$84>>2]|0;
       $not$405 = ($85|0)!=($16|0);
       $$sink3 = $not$405&1;
       $86 = (((($46)) + 16|0) + ($$sink3<<2)|0);
       HEAP32[$86>>2] = $$3;
       $87 = ($$3|0)==(0|0);
       if ($87) {
        $$1 = $16;$$1382 = $17;$113 = $16;
        break L10;
       } else {
        break;
       }
      }
     }
    } while(0);
    $88 = HEAP32[(32496)>>2]|0;
    $89 = ($$3>>>0)<($88>>>0);
    if ($89) {
     _abort();
     // unreachable;
    }
    $90 = ((($$3)) + 24|0);
    HEAP32[$90>>2] = $46;
    $91 = ((($16)) + 16|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ($92|0)==(0|0);
    do {
     if (!($93)) {
      $94 = ($92>>>0)<($88>>>0);
      if ($94) {
       _abort();
       // unreachable;
      } else {
       $95 = ((($$3)) + 16|0);
       HEAP32[$95>>2] = $92;
       $96 = ((($92)) + 24|0);
       HEAP32[$96>>2] = $$3;
       break;
      }
     }
    } while(0);
    $97 = ((($91)) + 4|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = ($98|0)==(0|0);
    if ($99) {
     $$1 = $16;$$1382 = $17;$113 = $16;
    } else {
     $100 = HEAP32[(32496)>>2]|0;
     $101 = ($98>>>0)<($100>>>0);
     if ($101) {
      _abort();
      // unreachable;
     } else {
      $102 = ((($$3)) + 20|0);
      HEAP32[$102>>2] = $98;
      $103 = ((($98)) + 24|0);
      HEAP32[$103>>2] = $$3;
      $$1 = $16;$$1382 = $17;$113 = $16;
      break;
     }
    }
   }
  } else {
   $$1 = $2;$$1382 = $9;$113 = $2;
  }
 } while(0);
 $112 = ($113>>>0)<($10>>>0);
 if (!($112)) {
  _abort();
  // unreachable;
 }
 $114 = ((($10)) + 4|0);
 $115 = HEAP32[$114>>2]|0;
 $116 = $115 & 1;
 $117 = ($116|0)==(0);
 if ($117) {
  _abort();
  // unreachable;
 }
 $118 = $115 & 2;
 $119 = ($118|0)==(0);
 if ($119) {
  $120 = HEAP32[(32504)>>2]|0;
  $121 = ($10|0)==($120|0);
  $122 = HEAP32[(32500)>>2]|0;
  if ($121) {
   $123 = HEAP32[(32492)>>2]|0;
   $124 = (($123) + ($$1382))|0;
   HEAP32[(32492)>>2] = $124;
   HEAP32[(32504)>>2] = $$1;
   $125 = $124 | 1;
   $126 = ((($$1)) + 4|0);
   HEAP32[$126>>2] = $125;
   $127 = ($$1|0)==($122|0);
   if (!($127)) {
    return;
   }
   HEAP32[(32500)>>2] = 0;
   HEAP32[(32488)>>2] = 0;
   return;
  }
  $128 = ($10|0)==($122|0);
  if ($128) {
   $129 = HEAP32[(32488)>>2]|0;
   $130 = (($129) + ($$1382))|0;
   HEAP32[(32488)>>2] = $130;
   HEAP32[(32500)>>2] = $113;
   $131 = $130 | 1;
   $132 = ((($$1)) + 4|0);
   HEAP32[$132>>2] = $131;
   $133 = (($113) + ($130)|0);
   HEAP32[$133>>2] = $130;
   return;
  }
  $134 = $115 & -8;
  $135 = (($134) + ($$1382))|0;
  $136 = $115 >>> 3;
  $137 = ($115>>>0)<(256);
  L108: do {
   if ($137) {
    $138 = ((($10)) + 8|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = ((($10)) + 12|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = $136 << 1;
    $143 = (32520 + ($142<<2)|0);
    $144 = ($139|0)==($143|0);
    if (!($144)) {
     $145 = HEAP32[(32496)>>2]|0;
     $146 = ($139>>>0)<($145>>>0);
     if ($146) {
      _abort();
      // unreachable;
     }
     $147 = ((($139)) + 12|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = ($148|0)==($10|0);
     if (!($149)) {
      _abort();
      // unreachable;
     }
    }
    $150 = ($141|0)==($139|0);
    if ($150) {
     $151 = 1 << $136;
     $152 = $151 ^ -1;
     $153 = HEAP32[8120]|0;
     $154 = $153 & $152;
     HEAP32[8120] = $154;
     break;
    }
    $155 = ($141|0)==($143|0);
    if ($155) {
     $$pre442 = ((($141)) + 8|0);
     $$pre$phi443Z2D = $$pre442;
    } else {
     $156 = HEAP32[(32496)>>2]|0;
     $157 = ($141>>>0)<($156>>>0);
     if ($157) {
      _abort();
      // unreachable;
     }
     $158 = ((($141)) + 8|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = ($159|0)==($10|0);
     if ($160) {
      $$pre$phi443Z2D = $158;
     } else {
      _abort();
      // unreachable;
     }
    }
    $161 = ((($139)) + 12|0);
    HEAP32[$161>>2] = $141;
    HEAP32[$$pre$phi443Z2D>>2] = $139;
   } else {
    $162 = ((($10)) + 24|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = ((($10)) + 12|0);
    $165 = HEAP32[$164>>2]|0;
    $166 = ($165|0)==($10|0);
    do {
     if ($166) {
      $177 = ((($10)) + 16|0);
      $178 = ((($177)) + 4|0);
      $179 = HEAP32[$178>>2]|0;
      $180 = ($179|0)==(0|0);
      if ($180) {
       $181 = HEAP32[$177>>2]|0;
       $182 = ($181|0)==(0|0);
       if ($182) {
        $$3400 = 0;
        break;
       } else {
        $$1398 = $181;$$1402 = $177;
       }
      } else {
       $$1398 = $179;$$1402 = $178;
      }
      while(1) {
       $183 = ((($$1398)) + 20|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($184|0)==(0|0);
       if (!($185)) {
        $$1398 = $184;$$1402 = $183;
        continue;
       }
       $186 = ((($$1398)) + 16|0);
       $187 = HEAP32[$186>>2]|0;
       $188 = ($187|0)==(0|0);
       if ($188) {
        break;
       } else {
        $$1398 = $187;$$1402 = $186;
       }
      }
      $189 = HEAP32[(32496)>>2]|0;
      $190 = ($$1402>>>0)<($189>>>0);
      if ($190) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$$1402>>2] = 0;
       $$3400 = $$1398;
       break;
      }
     } else {
      $167 = ((($10)) + 8|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = HEAP32[(32496)>>2]|0;
      $170 = ($168>>>0)<($169>>>0);
      if ($170) {
       _abort();
       // unreachable;
      }
      $171 = ((($168)) + 12|0);
      $172 = HEAP32[$171>>2]|0;
      $173 = ($172|0)==($10|0);
      if (!($173)) {
       _abort();
       // unreachable;
      }
      $174 = ((($165)) + 8|0);
      $175 = HEAP32[$174>>2]|0;
      $176 = ($175|0)==($10|0);
      if ($176) {
       HEAP32[$171>>2] = $165;
       HEAP32[$174>>2] = $168;
       $$3400 = $165;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $191 = ($163|0)==(0|0);
    if (!($191)) {
     $192 = ((($10)) + 28|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = (32784 + ($193<<2)|0);
     $195 = HEAP32[$194>>2]|0;
     $196 = ($10|0)==($195|0);
     do {
      if ($196) {
       HEAP32[$194>>2] = $$3400;
       $cond422 = ($$3400|0)==(0|0);
       if ($cond422) {
        $197 = 1 << $193;
        $198 = $197 ^ -1;
        $199 = HEAP32[(32484)>>2]|0;
        $200 = $199 & $198;
        HEAP32[(32484)>>2] = $200;
        break L108;
       }
      } else {
       $201 = HEAP32[(32496)>>2]|0;
       $202 = ($163>>>0)<($201>>>0);
       if ($202) {
        _abort();
        // unreachable;
       } else {
        $203 = ((($163)) + 16|0);
        $204 = HEAP32[$203>>2]|0;
        $not$ = ($204|0)!=($10|0);
        $$sink5 = $not$&1;
        $205 = (((($163)) + 16|0) + ($$sink5<<2)|0);
        HEAP32[$205>>2] = $$3400;
        $206 = ($$3400|0)==(0|0);
        if ($206) {
         break L108;
        } else {
         break;
        }
       }
      }
     } while(0);
     $207 = HEAP32[(32496)>>2]|0;
     $208 = ($$3400>>>0)<($207>>>0);
     if ($208) {
      _abort();
      // unreachable;
     }
     $209 = ((($$3400)) + 24|0);
     HEAP32[$209>>2] = $163;
     $210 = ((($10)) + 16|0);
     $211 = HEAP32[$210>>2]|0;
     $212 = ($211|0)==(0|0);
     do {
      if (!($212)) {
       $213 = ($211>>>0)<($207>>>0);
       if ($213) {
        _abort();
        // unreachable;
       } else {
        $214 = ((($$3400)) + 16|0);
        HEAP32[$214>>2] = $211;
        $215 = ((($211)) + 24|0);
        HEAP32[$215>>2] = $$3400;
        break;
       }
      }
     } while(0);
     $216 = ((($210)) + 4|0);
     $217 = HEAP32[$216>>2]|0;
     $218 = ($217|0)==(0|0);
     if (!($218)) {
      $219 = HEAP32[(32496)>>2]|0;
      $220 = ($217>>>0)<($219>>>0);
      if ($220) {
       _abort();
       // unreachable;
      } else {
       $221 = ((($$3400)) + 20|0);
       HEAP32[$221>>2] = $217;
       $222 = ((($217)) + 24|0);
       HEAP32[$222>>2] = $$3400;
       break;
      }
     }
    }
   }
  } while(0);
  $223 = $135 | 1;
  $224 = ((($$1)) + 4|0);
  HEAP32[$224>>2] = $223;
  $225 = (($113) + ($135)|0);
  HEAP32[$225>>2] = $135;
  $226 = HEAP32[(32500)>>2]|0;
  $227 = ($$1|0)==($226|0);
  if ($227) {
   HEAP32[(32488)>>2] = $135;
   return;
  } else {
   $$2 = $135;
  }
 } else {
  $228 = $115 & -2;
  HEAP32[$114>>2] = $228;
  $229 = $$1382 | 1;
  $230 = ((($$1)) + 4|0);
  HEAP32[$230>>2] = $229;
  $231 = (($113) + ($$1382)|0);
  HEAP32[$231>>2] = $$1382;
  $$2 = $$1382;
 }
 $232 = $$2 >>> 3;
 $233 = ($$2>>>0)<(256);
 if ($233) {
  $234 = $232 << 1;
  $235 = (32520 + ($234<<2)|0);
  $236 = HEAP32[8120]|0;
  $237 = 1 << $232;
  $238 = $236 & $237;
  $239 = ($238|0)==(0);
  if ($239) {
   $240 = $236 | $237;
   HEAP32[8120] = $240;
   $$pre = ((($235)) + 8|0);
   $$0403 = $235;$$pre$phiZ2D = $$pre;
  } else {
   $241 = ((($235)) + 8|0);
   $242 = HEAP32[$241>>2]|0;
   $243 = HEAP32[(32496)>>2]|0;
   $244 = ($242>>>0)<($243>>>0);
   if ($244) {
    _abort();
    // unreachable;
   } else {
    $$0403 = $242;$$pre$phiZ2D = $241;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $245 = ((($$0403)) + 12|0);
  HEAP32[$245>>2] = $$1;
  $246 = ((($$1)) + 8|0);
  HEAP32[$246>>2] = $$0403;
  $247 = ((($$1)) + 12|0);
  HEAP32[$247>>2] = $235;
  return;
 }
 $248 = $$2 >>> 8;
 $249 = ($248|0)==(0);
 if ($249) {
  $$0396 = 0;
 } else {
  $250 = ($$2>>>0)>(16777215);
  if ($250) {
   $$0396 = 31;
  } else {
   $251 = (($248) + 1048320)|0;
   $252 = $251 >>> 16;
   $253 = $252 & 8;
   $254 = $248 << $253;
   $255 = (($254) + 520192)|0;
   $256 = $255 >>> 16;
   $257 = $256 & 4;
   $258 = $257 | $253;
   $259 = $254 << $257;
   $260 = (($259) + 245760)|0;
   $261 = $260 >>> 16;
   $262 = $261 & 2;
   $263 = $258 | $262;
   $264 = (14 - ($263))|0;
   $265 = $259 << $262;
   $266 = $265 >>> 15;
   $267 = (($264) + ($266))|0;
   $268 = $267 << 1;
   $269 = (($267) + 7)|0;
   $270 = $$2 >>> $269;
   $271 = $270 & 1;
   $272 = $271 | $268;
   $$0396 = $272;
  }
 }
 $273 = (32784 + ($$0396<<2)|0);
 $274 = ((($$1)) + 28|0);
 HEAP32[$274>>2] = $$0396;
 $275 = ((($$1)) + 16|0);
 $276 = ((($$1)) + 20|0);
 HEAP32[$276>>2] = 0;
 HEAP32[$275>>2] = 0;
 $277 = HEAP32[(32484)>>2]|0;
 $278 = 1 << $$0396;
 $279 = $277 & $278;
 $280 = ($279|0)==(0);
 do {
  if ($280) {
   $281 = $277 | $278;
   HEAP32[(32484)>>2] = $281;
   HEAP32[$273>>2] = $$1;
   $282 = ((($$1)) + 24|0);
   HEAP32[$282>>2] = $273;
   $283 = ((($$1)) + 12|0);
   HEAP32[$283>>2] = $$1;
   $284 = ((($$1)) + 8|0);
   HEAP32[$284>>2] = $$1;
  } else {
   $285 = HEAP32[$273>>2]|0;
   $286 = ($$0396|0)==(31);
   $287 = $$0396 >>> 1;
   $288 = (25 - ($287))|0;
   $289 = $286 ? 0 : $288;
   $290 = $$2 << $289;
   $$0383 = $290;$$0384 = $285;
   while(1) {
    $291 = ((($$0384)) + 4|0);
    $292 = HEAP32[$291>>2]|0;
    $293 = $292 & -8;
    $294 = ($293|0)==($$2|0);
    if ($294) {
     label = 124;
     break;
    }
    $295 = $$0383 >>> 31;
    $296 = (((($$0384)) + 16|0) + ($295<<2)|0);
    $297 = $$0383 << 1;
    $298 = HEAP32[$296>>2]|0;
    $299 = ($298|0)==(0|0);
    if ($299) {
     label = 121;
     break;
    } else {
     $$0383 = $297;$$0384 = $298;
    }
   }
   if ((label|0) == 121) {
    $300 = HEAP32[(32496)>>2]|0;
    $301 = ($296>>>0)<($300>>>0);
    if ($301) {
     _abort();
     // unreachable;
    } else {
     HEAP32[$296>>2] = $$1;
     $302 = ((($$1)) + 24|0);
     HEAP32[$302>>2] = $$0384;
     $303 = ((($$1)) + 12|0);
     HEAP32[$303>>2] = $$1;
     $304 = ((($$1)) + 8|0);
     HEAP32[$304>>2] = $$1;
     break;
    }
   }
   else if ((label|0) == 124) {
    $305 = ((($$0384)) + 8|0);
    $306 = HEAP32[$305>>2]|0;
    $307 = HEAP32[(32496)>>2]|0;
    $308 = ($306>>>0)>=($307>>>0);
    $not$437 = ($$0384>>>0)>=($307>>>0);
    $309 = $308 & $not$437;
    if ($309) {
     $310 = ((($306)) + 12|0);
     HEAP32[$310>>2] = $$1;
     HEAP32[$305>>2] = $$1;
     $311 = ((($$1)) + 8|0);
     HEAP32[$311>>2] = $306;
     $312 = ((($$1)) + 12|0);
     HEAP32[$312>>2] = $$0384;
     $313 = ((($$1)) + 24|0);
     HEAP32[$313>>2] = 0;
     break;
    } else {
     _abort();
     // unreachable;
    }
   }
  }
 } while(0);
 $314 = HEAP32[(32512)>>2]|0;
 $315 = (($314) + -1)|0;
 HEAP32[(32512)>>2] = $315;
 $316 = ($315|0)==(0);
 if ($316) {
  $$0212$in$i = (32936);
 } else {
  return;
 }
 while(1) {
  $$0212$i = HEAP32[$$0212$in$i>>2]|0;
  $317 = ($$0212$i|0)==(0|0);
  $318 = ((($$0212$i)) + 8|0);
  if ($317) {
   break;
  } else {
   $$0212$in$i = $318;
  }
 }
 HEAP32[(32512)>>2] = -1;
 return;
}
function _realloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $3 = (_malloc($1)|0);
  $$1 = $3;
  return ($$1|0);
 }
 $4 = ($1>>>0)>(4294967231);
 if ($4) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 12;
  $$1 = 0;
  return ($$1|0);
 }
 $6 = ($1>>>0)<(11);
 $7 = (($1) + 11)|0;
 $8 = $7 & -8;
 $9 = $6 ? 16 : $8;
 $10 = ((($0)) + -8|0);
 $11 = (_try_realloc_chunk($10,$9)|0);
 $12 = ($11|0)==(0|0);
 if (!($12)) {
  $13 = ((($11)) + 8|0);
  $$1 = $13;
  return ($$1|0);
 }
 $14 = (_malloc($1)|0);
 $15 = ($14|0)==(0|0);
 if ($15) {
  $$1 = 0;
  return ($$1|0);
 }
 $16 = ((($0)) + -4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 & -8;
 $19 = $17 & 3;
 $20 = ($19|0)==(0);
 $21 = $20 ? 8 : 4;
 $22 = (($18) - ($21))|0;
 $23 = ($22>>>0)<($1>>>0);
 $24 = $23 ? $22 : $1;
 _memcpy(($14|0),($0|0),($24|0))|0;
 _free($0);
 $$1 = $14;
 return ($$1|0);
}
function _try_realloc_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1272 = 0, $$1275 = 0, $$2 = 0, $$3 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $cond = 0, $not$ = 0, $notlhs = 0, $notrhs = 0, $or$cond$not = 0, $or$cond3 = 0, $storemerge = 0, $storemerge1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & -8;
 $5 = (($0) + ($4)|0);
 $6 = HEAP32[(32496)>>2]|0;
 $7 = $3 & 3;
 $notlhs = ($0>>>0)>=($6>>>0);
 $notrhs = ($7|0)!=(1);
 $or$cond$not = $notrhs & $notlhs;
 $8 = ($0>>>0)<($5>>>0);
 $or$cond3 = $or$cond$not & $8;
 if (!($or$cond3)) {
  _abort();
  // unreachable;
 }
 $9 = ((($5)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 1;
 $12 = ($11|0)==(0);
 if ($12) {
  _abort();
  // unreachable;
 }
 $13 = ($7|0)==(0);
 if ($13) {
  $14 = ($1>>>0)<(256);
  if ($14) {
   $$2 = 0;
   return ($$2|0);
  }
  $15 = (($1) + 4)|0;
  $16 = ($4>>>0)<($15>>>0);
  if (!($16)) {
   $17 = (($4) - ($1))|0;
   $18 = HEAP32[(32960)>>2]|0;
   $19 = $18 << 1;
   $20 = ($17>>>0)>($19>>>0);
   if (!($20)) {
    $$2 = $0;
    return ($$2|0);
   }
  }
  $$2 = 0;
  return ($$2|0);
 }
 $21 = ($4>>>0)<($1>>>0);
 if (!($21)) {
  $22 = (($4) - ($1))|0;
  $23 = ($22>>>0)>(15);
  if (!($23)) {
   $$2 = $0;
   return ($$2|0);
  }
  $24 = (($0) + ($1)|0);
  $25 = $3 & 1;
  $26 = $25 | $1;
  $27 = $26 | 2;
  HEAP32[$2>>2] = $27;
  $28 = ((($24)) + 4|0);
  $29 = $22 | 3;
  HEAP32[$28>>2] = $29;
  $30 = (($24) + ($22)|0);
  $31 = ((($30)) + 4|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = $32 | 1;
  HEAP32[$31>>2] = $33;
  _dispose_chunk($24,$22);
  $$2 = $0;
  return ($$2|0);
 }
 $34 = HEAP32[(32504)>>2]|0;
 $35 = ($5|0)==($34|0);
 if ($35) {
  $36 = HEAP32[(32492)>>2]|0;
  $37 = (($36) + ($4))|0;
  $38 = ($37>>>0)>($1>>>0);
  $39 = (($37) - ($1))|0;
  $40 = (($0) + ($1)|0);
  if (!($38)) {
   $$2 = 0;
   return ($$2|0);
  }
  $41 = $39 | 1;
  $42 = ((($40)) + 4|0);
  $43 = $3 & 1;
  $44 = $43 | $1;
  $45 = $44 | 2;
  HEAP32[$2>>2] = $45;
  HEAP32[$42>>2] = $41;
  HEAP32[(32504)>>2] = $40;
  HEAP32[(32492)>>2] = $39;
  $$2 = $0;
  return ($$2|0);
 }
 $46 = HEAP32[(32500)>>2]|0;
 $47 = ($5|0)==($46|0);
 if ($47) {
  $48 = HEAP32[(32488)>>2]|0;
  $49 = (($48) + ($4))|0;
  $50 = ($49>>>0)<($1>>>0);
  if ($50) {
   $$2 = 0;
   return ($$2|0);
  }
  $51 = (($49) - ($1))|0;
  $52 = ($51>>>0)>(15);
  $53 = $3 & 1;
  if ($52) {
   $54 = (($0) + ($1)|0);
   $55 = (($54) + ($51)|0);
   $56 = $53 | $1;
   $57 = $56 | 2;
   HEAP32[$2>>2] = $57;
   $58 = ((($54)) + 4|0);
   $59 = $51 | 1;
   HEAP32[$58>>2] = $59;
   HEAP32[$55>>2] = $51;
   $60 = ((($55)) + 4|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $61 & -2;
   HEAP32[$60>>2] = $62;
   $storemerge = $54;$storemerge1 = $51;
  } else {
   $63 = $53 | $49;
   $64 = $63 | 2;
   HEAP32[$2>>2] = $64;
   $65 = (($0) + ($49)|0);
   $66 = ((($65)) + 4|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = $67 | 1;
   HEAP32[$66>>2] = $68;
   $storemerge = 0;$storemerge1 = 0;
  }
  HEAP32[(32488)>>2] = $storemerge1;
  HEAP32[(32500)>>2] = $storemerge;
  $$2 = $0;
  return ($$2|0);
 }
 $69 = $10 & 2;
 $70 = ($69|0)==(0);
 if (!($70)) {
  $$2 = 0;
  return ($$2|0);
 }
 $71 = $10 & -8;
 $72 = (($71) + ($4))|0;
 $73 = ($72>>>0)<($1>>>0);
 if ($73) {
  $$2 = 0;
  return ($$2|0);
 }
 $74 = (($72) - ($1))|0;
 $75 = $10 >>> 3;
 $76 = ($10>>>0)<(256);
 L49: do {
  if ($76) {
   $77 = ((($5)) + 8|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = ((($5)) + 12|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = $75 << 1;
   $82 = (32520 + ($81<<2)|0);
   $83 = ($78|0)==($82|0);
   if (!($83)) {
    $84 = ($78>>>0)<($6>>>0);
    if ($84) {
     _abort();
     // unreachable;
    }
    $85 = ((($78)) + 12|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = ($86|0)==($5|0);
    if (!($87)) {
     _abort();
     // unreachable;
    }
   }
   $88 = ($80|0)==($78|0);
   if ($88) {
    $89 = 1 << $75;
    $90 = $89 ^ -1;
    $91 = HEAP32[8120]|0;
    $92 = $91 & $90;
    HEAP32[8120] = $92;
    break;
   }
   $93 = ($80|0)==($82|0);
   if ($93) {
    $$pre = ((($80)) + 8|0);
    $$pre$phiZ2D = $$pre;
   } else {
    $94 = ($80>>>0)<($6>>>0);
    if ($94) {
     _abort();
     // unreachable;
    }
    $95 = ((($80)) + 8|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = ($96|0)==($5|0);
    if ($97) {
     $$pre$phiZ2D = $95;
    } else {
     _abort();
     // unreachable;
    }
   }
   $98 = ((($78)) + 12|0);
   HEAP32[$98>>2] = $80;
   HEAP32[$$pre$phiZ2D>>2] = $78;
  } else {
   $99 = ((($5)) + 24|0);
   $100 = HEAP32[$99>>2]|0;
   $101 = ((($5)) + 12|0);
   $102 = HEAP32[$101>>2]|0;
   $103 = ($102|0)==($5|0);
   do {
    if ($103) {
     $113 = ((($5)) + 16|0);
     $114 = ((($113)) + 4|0);
     $115 = HEAP32[$114>>2]|0;
     $116 = ($115|0)==(0|0);
     if ($116) {
      $117 = HEAP32[$113>>2]|0;
      $118 = ($117|0)==(0|0);
      if ($118) {
       $$3 = 0;
       break;
      } else {
       $$1272 = $117;$$1275 = $113;
      }
     } else {
      $$1272 = $115;$$1275 = $114;
     }
     while(1) {
      $119 = ((($$1272)) + 20|0);
      $120 = HEAP32[$119>>2]|0;
      $121 = ($120|0)==(0|0);
      if (!($121)) {
       $$1272 = $120;$$1275 = $119;
       continue;
      }
      $122 = ((($$1272)) + 16|0);
      $123 = HEAP32[$122>>2]|0;
      $124 = ($123|0)==(0|0);
      if ($124) {
       break;
      } else {
       $$1272 = $123;$$1275 = $122;
      }
     }
     $125 = ($$1275>>>0)<($6>>>0);
     if ($125) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$1275>>2] = 0;
      $$3 = $$1272;
      break;
     }
    } else {
     $104 = ((($5)) + 8|0);
     $105 = HEAP32[$104>>2]|0;
     $106 = ($105>>>0)<($6>>>0);
     if ($106) {
      _abort();
      // unreachable;
     }
     $107 = ((($105)) + 12|0);
     $108 = HEAP32[$107>>2]|0;
     $109 = ($108|0)==($5|0);
     if (!($109)) {
      _abort();
      // unreachable;
     }
     $110 = ((($102)) + 8|0);
     $111 = HEAP32[$110>>2]|0;
     $112 = ($111|0)==($5|0);
     if ($112) {
      HEAP32[$107>>2] = $102;
      HEAP32[$110>>2] = $105;
      $$3 = $102;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $126 = ($100|0)==(0|0);
   if (!($126)) {
    $127 = ((($5)) + 28|0);
    $128 = HEAP32[$127>>2]|0;
    $129 = (32784 + ($128<<2)|0);
    $130 = HEAP32[$129>>2]|0;
    $131 = ($5|0)==($130|0);
    do {
     if ($131) {
      HEAP32[$129>>2] = $$3;
      $cond = ($$3|0)==(0|0);
      if ($cond) {
       $132 = 1 << $128;
       $133 = $132 ^ -1;
       $134 = HEAP32[(32484)>>2]|0;
       $135 = $134 & $133;
       HEAP32[(32484)>>2] = $135;
       break L49;
      }
     } else {
      $136 = HEAP32[(32496)>>2]|0;
      $137 = ($100>>>0)<($136>>>0);
      if ($137) {
       _abort();
       // unreachable;
      } else {
       $138 = ((($100)) + 16|0);
       $139 = HEAP32[$138>>2]|0;
       $not$ = ($139|0)!=($5|0);
       $$sink1 = $not$&1;
       $140 = (((($100)) + 16|0) + ($$sink1<<2)|0);
       HEAP32[$140>>2] = $$3;
       $141 = ($$3|0)==(0|0);
       if ($141) {
        break L49;
       } else {
        break;
       }
      }
     }
    } while(0);
    $142 = HEAP32[(32496)>>2]|0;
    $143 = ($$3>>>0)<($142>>>0);
    if ($143) {
     _abort();
     // unreachable;
    }
    $144 = ((($$3)) + 24|0);
    HEAP32[$144>>2] = $100;
    $145 = ((($5)) + 16|0);
    $146 = HEAP32[$145>>2]|0;
    $147 = ($146|0)==(0|0);
    do {
     if (!($147)) {
      $148 = ($146>>>0)<($142>>>0);
      if ($148) {
       _abort();
       // unreachable;
      } else {
       $149 = ((($$3)) + 16|0);
       HEAP32[$149>>2] = $146;
       $150 = ((($146)) + 24|0);
       HEAP32[$150>>2] = $$3;
       break;
      }
     }
    } while(0);
    $151 = ((($145)) + 4|0);
    $152 = HEAP32[$151>>2]|0;
    $153 = ($152|0)==(0|0);
    if (!($153)) {
     $154 = HEAP32[(32496)>>2]|0;
     $155 = ($152>>>0)<($154>>>0);
     if ($155) {
      _abort();
      // unreachable;
     } else {
      $156 = ((($$3)) + 20|0);
      HEAP32[$156>>2] = $152;
      $157 = ((($152)) + 24|0);
      HEAP32[$157>>2] = $$3;
      break;
     }
    }
   }
  }
 } while(0);
 $158 = ($74>>>0)<(16);
 $159 = $3 & 1;
 if ($158) {
  $160 = $72 | $159;
  $161 = $160 | 2;
  HEAP32[$2>>2] = $161;
  $162 = (($0) + ($72)|0);
  $163 = ((($162)) + 4|0);
  $164 = HEAP32[$163>>2]|0;
  $165 = $164 | 1;
  HEAP32[$163>>2] = $165;
  $$2 = $0;
  return ($$2|0);
 } else {
  $166 = (($0) + ($1)|0);
  $167 = $159 | $1;
  $168 = $167 | 2;
  HEAP32[$2>>2] = $168;
  $169 = ((($166)) + 4|0);
  $170 = $74 | 3;
  HEAP32[$169>>2] = $170;
  $171 = (($166) + ($74)|0);
  $172 = ((($171)) + 4|0);
  $173 = HEAP32[$172>>2]|0;
  $174 = $173 | 1;
  HEAP32[$172>>2] = $174;
  _dispose_chunk($166,$74);
  $$2 = $0;
  return ($$2|0);
 }
 return (0)|0;
}
function _dispose_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0419 = 0, $$0420 = 0, $$0431 = 0, $$0438 = 0, $$1 = 0, $$1418 = 0, $$1426 = 0, $$1429 = 0, $$1433 = 0, $$1437 = 0, $$2 = 0, $$3 = 0, $$3435 = 0, $$pre = 0, $$pre$phi24Z2D = 0, $$pre$phi26Z2D = 0, $$pre$phiZ2D = 0, $$pre23 = 0, $$pre25 = 0, $$sink2 = 0;
 var $$sink4 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $cond = 0, $cond17 = 0, $not$ = 0, $not$1 = 0, $not$19 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($0) + ($1)|0);
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1;
 $6 = ($5|0)==(0);
 L1: do {
  if ($6) {
   $7 = HEAP32[$0>>2]|0;
   $8 = $4 & 3;
   $9 = ($8|0)==(0);
   if ($9) {
    return;
   }
   $10 = (0 - ($7))|0;
   $11 = (($0) + ($10)|0);
   $12 = (($7) + ($1))|0;
   $13 = HEAP32[(32496)>>2]|0;
   $14 = ($11>>>0)<($13>>>0);
   if ($14) {
    _abort();
    // unreachable;
   }
   $15 = HEAP32[(32500)>>2]|0;
   $16 = ($11|0)==($15|0);
   if ($16) {
    $100 = ((($2)) + 4|0);
    $101 = HEAP32[$100>>2]|0;
    $102 = $101 & 3;
    $103 = ($102|0)==(3);
    if (!($103)) {
     $$1 = $11;$$1418 = $12;
     break;
    }
    $104 = (($11) + ($12)|0);
    $105 = ((($11)) + 4|0);
    $106 = $12 | 1;
    $107 = $101 & -2;
    HEAP32[(32488)>>2] = $12;
    HEAP32[$100>>2] = $107;
    HEAP32[$105>>2] = $106;
    HEAP32[$104>>2] = $12;
    return;
   }
   $17 = $7 >>> 3;
   $18 = ($7>>>0)<(256);
   if ($18) {
    $19 = ((($11)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ((($11)) + 12|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = $17 << 1;
    $24 = (32520 + ($23<<2)|0);
    $25 = ($20|0)==($24|0);
    if (!($25)) {
     $26 = ($20>>>0)<($13>>>0);
     if ($26) {
      _abort();
      // unreachable;
     }
     $27 = ((($20)) + 12|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = ($28|0)==($11|0);
     if (!($29)) {
      _abort();
      // unreachable;
     }
    }
    $30 = ($22|0)==($20|0);
    if ($30) {
     $31 = 1 << $17;
     $32 = $31 ^ -1;
     $33 = HEAP32[8120]|0;
     $34 = $33 & $32;
     HEAP32[8120] = $34;
     $$1 = $11;$$1418 = $12;
     break;
    }
    $35 = ($22|0)==($24|0);
    if ($35) {
     $$pre25 = ((($22)) + 8|0);
     $$pre$phi26Z2D = $$pre25;
    } else {
     $36 = ($22>>>0)<($13>>>0);
     if ($36) {
      _abort();
      // unreachable;
     }
     $37 = ((($22)) + 8|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = ($38|0)==($11|0);
     if ($39) {
      $$pre$phi26Z2D = $37;
     } else {
      _abort();
      // unreachable;
     }
    }
    $40 = ((($20)) + 12|0);
    HEAP32[$40>>2] = $22;
    HEAP32[$$pre$phi26Z2D>>2] = $20;
    $$1 = $11;$$1418 = $12;
    break;
   }
   $41 = ((($11)) + 24|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ((($11)) + 12|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ($44|0)==($11|0);
   do {
    if ($45) {
     $55 = ((($11)) + 16|0);
     $56 = ((($55)) + 4|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = ($57|0)==(0|0);
     if ($58) {
      $59 = HEAP32[$55>>2]|0;
      $60 = ($59|0)==(0|0);
      if ($60) {
       $$3 = 0;
       break;
      } else {
       $$1426 = $59;$$1429 = $55;
      }
     } else {
      $$1426 = $57;$$1429 = $56;
     }
     while(1) {
      $61 = ((($$1426)) + 20|0);
      $62 = HEAP32[$61>>2]|0;
      $63 = ($62|0)==(0|0);
      if (!($63)) {
       $$1426 = $62;$$1429 = $61;
       continue;
      }
      $64 = ((($$1426)) + 16|0);
      $65 = HEAP32[$64>>2]|0;
      $66 = ($65|0)==(0|0);
      if ($66) {
       break;
      } else {
       $$1426 = $65;$$1429 = $64;
      }
     }
     $67 = ($$1429>>>0)<($13>>>0);
     if ($67) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$1429>>2] = 0;
      $$3 = $$1426;
      break;
     }
    } else {
     $46 = ((($11)) + 8|0);
     $47 = HEAP32[$46>>2]|0;
     $48 = ($47>>>0)<($13>>>0);
     if ($48) {
      _abort();
      // unreachable;
     }
     $49 = ((($47)) + 12|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = ($50|0)==($11|0);
     if (!($51)) {
      _abort();
      // unreachable;
     }
     $52 = ((($44)) + 8|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ($53|0)==($11|0);
     if ($54) {
      HEAP32[$49>>2] = $44;
      HEAP32[$52>>2] = $47;
      $$3 = $44;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $68 = ($42|0)==(0|0);
   if ($68) {
    $$1 = $11;$$1418 = $12;
   } else {
    $69 = ((($11)) + 28|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = (32784 + ($70<<2)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ($11|0)==($72|0);
    do {
     if ($73) {
      HEAP32[$71>>2] = $$3;
      $cond = ($$3|0)==(0|0);
      if ($cond) {
       $74 = 1 << $70;
       $75 = $74 ^ -1;
       $76 = HEAP32[(32484)>>2]|0;
       $77 = $76 & $75;
       HEAP32[(32484)>>2] = $77;
       $$1 = $11;$$1418 = $12;
       break L1;
      }
     } else {
      $78 = HEAP32[(32496)>>2]|0;
      $79 = ($42>>>0)<($78>>>0);
      if ($79) {
       _abort();
       // unreachable;
      } else {
       $80 = ((($42)) + 16|0);
       $81 = HEAP32[$80>>2]|0;
       $not$1 = ($81|0)!=($11|0);
       $$sink2 = $not$1&1;
       $82 = (((($42)) + 16|0) + ($$sink2<<2)|0);
       HEAP32[$82>>2] = $$3;
       $83 = ($$3|0)==(0|0);
       if ($83) {
        $$1 = $11;$$1418 = $12;
        break L1;
       } else {
        break;
       }
      }
     }
    } while(0);
    $84 = HEAP32[(32496)>>2]|0;
    $85 = ($$3>>>0)<($84>>>0);
    if ($85) {
     _abort();
     // unreachable;
    }
    $86 = ((($$3)) + 24|0);
    HEAP32[$86>>2] = $42;
    $87 = ((($11)) + 16|0);
    $88 = HEAP32[$87>>2]|0;
    $89 = ($88|0)==(0|0);
    do {
     if (!($89)) {
      $90 = ($88>>>0)<($84>>>0);
      if ($90) {
       _abort();
       // unreachable;
      } else {
       $91 = ((($$3)) + 16|0);
       HEAP32[$91>>2] = $88;
       $92 = ((($88)) + 24|0);
       HEAP32[$92>>2] = $$3;
       break;
      }
     }
    } while(0);
    $93 = ((($87)) + 4|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = ($94|0)==(0|0);
    if ($95) {
     $$1 = $11;$$1418 = $12;
    } else {
     $96 = HEAP32[(32496)>>2]|0;
     $97 = ($94>>>0)<($96>>>0);
     if ($97) {
      _abort();
      // unreachable;
     } else {
      $98 = ((($$3)) + 20|0);
      HEAP32[$98>>2] = $94;
      $99 = ((($94)) + 24|0);
      HEAP32[$99>>2] = $$3;
      $$1 = $11;$$1418 = $12;
      break;
     }
    }
   }
  } else {
   $$1 = $0;$$1418 = $1;
  }
 } while(0);
 $108 = HEAP32[(32496)>>2]|0;
 $109 = ($2>>>0)<($108>>>0);
 if ($109) {
  _abort();
  // unreachable;
 }
 $110 = ((($2)) + 4|0);
 $111 = HEAP32[$110>>2]|0;
 $112 = $111 & 2;
 $113 = ($112|0)==(0);
 if ($113) {
  $114 = HEAP32[(32504)>>2]|0;
  $115 = ($2|0)==($114|0);
  $116 = HEAP32[(32500)>>2]|0;
  if ($115) {
   $117 = HEAP32[(32492)>>2]|0;
   $118 = (($117) + ($$1418))|0;
   HEAP32[(32492)>>2] = $118;
   HEAP32[(32504)>>2] = $$1;
   $119 = $118 | 1;
   $120 = ((($$1)) + 4|0);
   HEAP32[$120>>2] = $119;
   $121 = ($$1|0)==($116|0);
   if (!($121)) {
    return;
   }
   HEAP32[(32500)>>2] = 0;
   HEAP32[(32488)>>2] = 0;
   return;
  }
  $122 = ($2|0)==($116|0);
  if ($122) {
   $123 = HEAP32[(32488)>>2]|0;
   $124 = (($123) + ($$1418))|0;
   HEAP32[(32488)>>2] = $124;
   HEAP32[(32500)>>2] = $$1;
   $125 = $124 | 1;
   $126 = ((($$1)) + 4|0);
   HEAP32[$126>>2] = $125;
   $127 = (($$1) + ($124)|0);
   HEAP32[$127>>2] = $124;
   return;
  }
  $128 = $111 & -8;
  $129 = (($128) + ($$1418))|0;
  $130 = $111 >>> 3;
  $131 = ($111>>>0)<(256);
  L96: do {
   if ($131) {
    $132 = ((($2)) + 8|0);
    $133 = HEAP32[$132>>2]|0;
    $134 = ((($2)) + 12|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = $130 << 1;
    $137 = (32520 + ($136<<2)|0);
    $138 = ($133|0)==($137|0);
    if (!($138)) {
     $139 = ($133>>>0)<($108>>>0);
     if ($139) {
      _abort();
      // unreachable;
     }
     $140 = ((($133)) + 12|0);
     $141 = HEAP32[$140>>2]|0;
     $142 = ($141|0)==($2|0);
     if (!($142)) {
      _abort();
      // unreachable;
     }
    }
    $143 = ($135|0)==($133|0);
    if ($143) {
     $144 = 1 << $130;
     $145 = $144 ^ -1;
     $146 = HEAP32[8120]|0;
     $147 = $146 & $145;
     HEAP32[8120] = $147;
     break;
    }
    $148 = ($135|0)==($137|0);
    if ($148) {
     $$pre23 = ((($135)) + 8|0);
     $$pre$phi24Z2D = $$pre23;
    } else {
     $149 = ($135>>>0)<($108>>>0);
     if ($149) {
      _abort();
      // unreachable;
     }
     $150 = ((($135)) + 8|0);
     $151 = HEAP32[$150>>2]|0;
     $152 = ($151|0)==($2|0);
     if ($152) {
      $$pre$phi24Z2D = $150;
     } else {
      _abort();
      // unreachable;
     }
    }
    $153 = ((($133)) + 12|0);
    HEAP32[$153>>2] = $135;
    HEAP32[$$pre$phi24Z2D>>2] = $133;
   } else {
    $154 = ((($2)) + 24|0);
    $155 = HEAP32[$154>>2]|0;
    $156 = ((($2)) + 12|0);
    $157 = HEAP32[$156>>2]|0;
    $158 = ($157|0)==($2|0);
    do {
     if ($158) {
      $168 = ((($2)) + 16|0);
      $169 = ((($168)) + 4|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($170|0)==(0|0);
      if ($171) {
       $172 = HEAP32[$168>>2]|0;
       $173 = ($172|0)==(0|0);
       if ($173) {
        $$3435 = 0;
        break;
       } else {
        $$1433 = $172;$$1437 = $168;
       }
      } else {
       $$1433 = $170;$$1437 = $169;
      }
      while(1) {
       $174 = ((($$1433)) + 20|0);
       $175 = HEAP32[$174>>2]|0;
       $176 = ($175|0)==(0|0);
       if (!($176)) {
        $$1433 = $175;$$1437 = $174;
        continue;
       }
       $177 = ((($$1433)) + 16|0);
       $178 = HEAP32[$177>>2]|0;
       $179 = ($178|0)==(0|0);
       if ($179) {
        break;
       } else {
        $$1433 = $178;$$1437 = $177;
       }
      }
      $180 = ($$1437>>>0)<($108>>>0);
      if ($180) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$$1437>>2] = 0;
       $$3435 = $$1433;
       break;
      }
     } else {
      $159 = ((($2)) + 8|0);
      $160 = HEAP32[$159>>2]|0;
      $161 = ($160>>>0)<($108>>>0);
      if ($161) {
       _abort();
       // unreachable;
      }
      $162 = ((($160)) + 12|0);
      $163 = HEAP32[$162>>2]|0;
      $164 = ($163|0)==($2|0);
      if (!($164)) {
       _abort();
       // unreachable;
      }
      $165 = ((($157)) + 8|0);
      $166 = HEAP32[$165>>2]|0;
      $167 = ($166|0)==($2|0);
      if ($167) {
       HEAP32[$162>>2] = $157;
       HEAP32[$165>>2] = $160;
       $$3435 = $157;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $181 = ($155|0)==(0|0);
    if (!($181)) {
     $182 = ((($2)) + 28|0);
     $183 = HEAP32[$182>>2]|0;
     $184 = (32784 + ($183<<2)|0);
     $185 = HEAP32[$184>>2]|0;
     $186 = ($2|0)==($185|0);
     do {
      if ($186) {
       HEAP32[$184>>2] = $$3435;
       $cond17 = ($$3435|0)==(0|0);
       if ($cond17) {
        $187 = 1 << $183;
        $188 = $187 ^ -1;
        $189 = HEAP32[(32484)>>2]|0;
        $190 = $189 & $188;
        HEAP32[(32484)>>2] = $190;
        break L96;
       }
      } else {
       $191 = HEAP32[(32496)>>2]|0;
       $192 = ($155>>>0)<($191>>>0);
       if ($192) {
        _abort();
        // unreachable;
       } else {
        $193 = ((($155)) + 16|0);
        $194 = HEAP32[$193>>2]|0;
        $not$ = ($194|0)!=($2|0);
        $$sink4 = $not$&1;
        $195 = (((($155)) + 16|0) + ($$sink4<<2)|0);
        HEAP32[$195>>2] = $$3435;
        $196 = ($$3435|0)==(0|0);
        if ($196) {
         break L96;
        } else {
         break;
        }
       }
      }
     } while(0);
     $197 = HEAP32[(32496)>>2]|0;
     $198 = ($$3435>>>0)<($197>>>0);
     if ($198) {
      _abort();
      // unreachable;
     }
     $199 = ((($$3435)) + 24|0);
     HEAP32[$199>>2] = $155;
     $200 = ((($2)) + 16|0);
     $201 = HEAP32[$200>>2]|0;
     $202 = ($201|0)==(0|0);
     do {
      if (!($202)) {
       $203 = ($201>>>0)<($197>>>0);
       if ($203) {
        _abort();
        // unreachable;
       } else {
        $204 = ((($$3435)) + 16|0);
        HEAP32[$204>>2] = $201;
        $205 = ((($201)) + 24|0);
        HEAP32[$205>>2] = $$3435;
        break;
       }
      }
     } while(0);
     $206 = ((($200)) + 4|0);
     $207 = HEAP32[$206>>2]|0;
     $208 = ($207|0)==(0|0);
     if (!($208)) {
      $209 = HEAP32[(32496)>>2]|0;
      $210 = ($207>>>0)<($209>>>0);
      if ($210) {
       _abort();
       // unreachable;
      } else {
       $211 = ((($$3435)) + 20|0);
       HEAP32[$211>>2] = $207;
       $212 = ((($207)) + 24|0);
       HEAP32[$212>>2] = $$3435;
       break;
      }
     }
    }
   }
  } while(0);
  $213 = $129 | 1;
  $214 = ((($$1)) + 4|0);
  HEAP32[$214>>2] = $213;
  $215 = (($$1) + ($129)|0);
  HEAP32[$215>>2] = $129;
  $216 = HEAP32[(32500)>>2]|0;
  $217 = ($$1|0)==($216|0);
  if ($217) {
   HEAP32[(32488)>>2] = $129;
   return;
  } else {
   $$2 = $129;
  }
 } else {
  $218 = $111 & -2;
  HEAP32[$110>>2] = $218;
  $219 = $$1418 | 1;
  $220 = ((($$1)) + 4|0);
  HEAP32[$220>>2] = $219;
  $221 = (($$1) + ($$1418)|0);
  HEAP32[$221>>2] = $$1418;
  $$2 = $$1418;
 }
 $222 = $$2 >>> 3;
 $223 = ($$2>>>0)<(256);
 if ($223) {
  $224 = $222 << 1;
  $225 = (32520 + ($224<<2)|0);
  $226 = HEAP32[8120]|0;
  $227 = 1 << $222;
  $228 = $226 & $227;
  $229 = ($228|0)==(0);
  if ($229) {
   $230 = $226 | $227;
   HEAP32[8120] = $230;
   $$pre = ((($225)) + 8|0);
   $$0438 = $225;$$pre$phiZ2D = $$pre;
  } else {
   $231 = ((($225)) + 8|0);
   $232 = HEAP32[$231>>2]|0;
   $233 = HEAP32[(32496)>>2]|0;
   $234 = ($232>>>0)<($233>>>0);
   if ($234) {
    _abort();
    // unreachable;
   } else {
    $$0438 = $232;$$pre$phiZ2D = $231;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $235 = ((($$0438)) + 12|0);
  HEAP32[$235>>2] = $$1;
  $236 = ((($$1)) + 8|0);
  HEAP32[$236>>2] = $$0438;
  $237 = ((($$1)) + 12|0);
  HEAP32[$237>>2] = $225;
  return;
 }
 $238 = $$2 >>> 8;
 $239 = ($238|0)==(0);
 if ($239) {
  $$0431 = 0;
 } else {
  $240 = ($$2>>>0)>(16777215);
  if ($240) {
   $$0431 = 31;
  } else {
   $241 = (($238) + 1048320)|0;
   $242 = $241 >>> 16;
   $243 = $242 & 8;
   $244 = $238 << $243;
   $245 = (($244) + 520192)|0;
   $246 = $245 >>> 16;
   $247 = $246 & 4;
   $248 = $247 | $243;
   $249 = $244 << $247;
   $250 = (($249) + 245760)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 2;
   $253 = $248 | $252;
   $254 = (14 - ($253))|0;
   $255 = $249 << $252;
   $256 = $255 >>> 15;
   $257 = (($254) + ($256))|0;
   $258 = $257 << 1;
   $259 = (($257) + 7)|0;
   $260 = $$2 >>> $259;
   $261 = $260 & 1;
   $262 = $261 | $258;
   $$0431 = $262;
  }
 }
 $263 = (32784 + ($$0431<<2)|0);
 $264 = ((($$1)) + 28|0);
 HEAP32[$264>>2] = $$0431;
 $265 = ((($$1)) + 16|0);
 $266 = ((($$1)) + 20|0);
 HEAP32[$266>>2] = 0;
 HEAP32[$265>>2] = 0;
 $267 = HEAP32[(32484)>>2]|0;
 $268 = 1 << $$0431;
 $269 = $267 & $268;
 $270 = ($269|0)==(0);
 if ($270) {
  $271 = $267 | $268;
  HEAP32[(32484)>>2] = $271;
  HEAP32[$263>>2] = $$1;
  $272 = ((($$1)) + 24|0);
  HEAP32[$272>>2] = $263;
  $273 = ((($$1)) + 12|0);
  HEAP32[$273>>2] = $$1;
  $274 = ((($$1)) + 8|0);
  HEAP32[$274>>2] = $$1;
  return;
 }
 $275 = HEAP32[$263>>2]|0;
 $276 = ($$0431|0)==(31);
 $277 = $$0431 >>> 1;
 $278 = (25 - ($277))|0;
 $279 = $276 ? 0 : $278;
 $280 = $$2 << $279;
 $$0419 = $280;$$0420 = $275;
 while(1) {
  $281 = ((($$0420)) + 4|0);
  $282 = HEAP32[$281>>2]|0;
  $283 = $282 & -8;
  $284 = ($283|0)==($$2|0);
  if ($284) {
   label = 121;
   break;
  }
  $285 = $$0419 >>> 31;
  $286 = (((($$0420)) + 16|0) + ($285<<2)|0);
  $287 = $$0419 << 1;
  $288 = HEAP32[$286>>2]|0;
  $289 = ($288|0)==(0|0);
  if ($289) {
   label = 118;
   break;
  } else {
   $$0419 = $287;$$0420 = $288;
  }
 }
 if ((label|0) == 118) {
  $290 = HEAP32[(32496)>>2]|0;
  $291 = ($286>>>0)<($290>>>0);
  if ($291) {
   _abort();
   // unreachable;
  }
  HEAP32[$286>>2] = $$1;
  $292 = ((($$1)) + 24|0);
  HEAP32[$292>>2] = $$0420;
  $293 = ((($$1)) + 12|0);
  HEAP32[$293>>2] = $$1;
  $294 = ((($$1)) + 8|0);
  HEAP32[$294>>2] = $$1;
  return;
 }
 else if ((label|0) == 121) {
  $295 = ((($$0420)) + 8|0);
  $296 = HEAP32[$295>>2]|0;
  $297 = HEAP32[(32496)>>2]|0;
  $298 = ($296>>>0)>=($297>>>0);
  $not$19 = ($$0420>>>0)>=($297>>>0);
  $299 = $298 & $not$19;
  if (!($299)) {
   _abort();
   // unreachable;
  }
  $300 = ((($296)) + 12|0);
  HEAP32[$300>>2] = $$1;
  HEAP32[$295>>2] = $$1;
  $301 = ((($$1)) + 8|0);
  HEAP32[$301>>2] = $296;
  $302 = ((($$1)) + 12|0);
  HEAP32[$302>>2] = $$0420;
  $303 = ((($$1)) + 24|0);
  HEAP32[$303>>2] = 0;
  return;
 }
}
function runPostSets() {
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
    end = (ptr + num)|0;

    value = value & 0xff;
    if ((num|0) >= 67 /* 64 bytes for an unrolled loop + 3 bytes for unaligned head*/) {
      while ((ptr&3) != 0) {
        HEAP8[((ptr)>>0)]=value;
        ptr = (ptr+1)|0;
      }

      aligned_end = (end & -4)|0;
      block_aligned_end = (aligned_end - 64)|0;
      value4 = value | (value << 8) | (value << 16) | (value << 24);

      while((ptr|0) <= (block_aligned_end|0)) {
        HEAP32[((ptr)>>2)]=value4;
        HEAP32[(((ptr)+(4))>>2)]=value4;
        HEAP32[(((ptr)+(8))>>2)]=value4;
        HEAP32[(((ptr)+(12))>>2)]=value4;
        HEAP32[(((ptr)+(16))>>2)]=value4;
        HEAP32[(((ptr)+(20))>>2)]=value4;
        HEAP32[(((ptr)+(24))>>2)]=value4;
        HEAP32[(((ptr)+(28))>>2)]=value4;
        HEAP32[(((ptr)+(32))>>2)]=value4;
        HEAP32[(((ptr)+(36))>>2)]=value4;
        HEAP32[(((ptr)+(40))>>2)]=value4;
        HEAP32[(((ptr)+(44))>>2)]=value4;
        HEAP32[(((ptr)+(48))>>2)]=value4;
        HEAP32[(((ptr)+(52))>>2)]=value4;
        HEAP32[(((ptr)+(56))>>2)]=value4;
        HEAP32[(((ptr)+(60))>>2)]=value4;
        ptr = (ptr + 64)|0;
      }

      while ((ptr|0) < (aligned_end|0) ) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    // The remaining bytes.
    while ((ptr|0) < (end|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (end-num)|0;
}
function _pthread_mutex_lock(x) {
    x = x | 0;
    return 0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _pthread_mutex_unlock(x) {
    x = x | 0;
    return 0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    var aligned_dest_end = 0;
    var block_aligned_dest_end = 0;
    var dest_end = 0;
    // Test against a benchmarked cutoff limit for when HEAPU8.set() becomes faster to use.
    if ((num|0) >=
      8192
    ) {
      return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    }

    ret = dest|0;
    dest_end = (dest + num)|0;
    if ((dest&3) == (src&3)) {
      // The initial unaligned < 4-byte front.
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      aligned_dest_end = (dest_end & -4)|0;
      block_aligned_dest_end = (aligned_dest_end - 64)|0;
      while ((dest|0) <= (block_aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        HEAP32[(((dest)+(4))>>2)]=((HEAP32[(((src)+(4))>>2)])|0);
        HEAP32[(((dest)+(8))>>2)]=((HEAP32[(((src)+(8))>>2)])|0);
        HEAP32[(((dest)+(12))>>2)]=((HEAP32[(((src)+(12))>>2)])|0);
        HEAP32[(((dest)+(16))>>2)]=((HEAP32[(((src)+(16))>>2)])|0);
        HEAP32[(((dest)+(20))>>2)]=((HEAP32[(((src)+(20))>>2)])|0);
        HEAP32[(((dest)+(24))>>2)]=((HEAP32[(((src)+(24))>>2)])|0);
        HEAP32[(((dest)+(28))>>2)]=((HEAP32[(((src)+(28))>>2)])|0);
        HEAP32[(((dest)+(32))>>2)]=((HEAP32[(((src)+(32))>>2)])|0);
        HEAP32[(((dest)+(36))>>2)]=((HEAP32[(((src)+(36))>>2)])|0);
        HEAP32[(((dest)+(40))>>2)]=((HEAP32[(((src)+(40))>>2)])|0);
        HEAP32[(((dest)+(44))>>2)]=((HEAP32[(((src)+(44))>>2)])|0);
        HEAP32[(((dest)+(48))>>2)]=((HEAP32[(((src)+(48))>>2)])|0);
        HEAP32[(((dest)+(52))>>2)]=((HEAP32[(((src)+(52))>>2)])|0);
        HEAP32[(((dest)+(56))>>2)]=((HEAP32[(((src)+(56))>>2)])|0);
        HEAP32[(((dest)+(60))>>2)]=((HEAP32[(((src)+(60))>>2)])|0);
        dest = (dest+64)|0;
        src = (src+64)|0;
      }
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    } else {
      // In the unaligned copy case, unroll a bit as well.
      aligned_dest_end = (dest_end - 4)|0;
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        HEAP8[(((dest)+(1))>>0)]=((HEAP8[(((src)+(1))>>0)])|0);
        HEAP8[(((dest)+(2))>>0)]=((HEAP8[(((src)+(2))>>0)])|0);
        HEAP8[(((dest)+(3))>>0)]=((HEAP8[(((src)+(3))>>0)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    }
    // The remaining unaligned < 4 byte tail.
    while ((dest|0) < (dest_end|0)) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
    }
    return ret|0;
}
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    $rem = $rem | 0;
    var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
    $n_sroa_0_0_extract_trunc = $a$0;
    $n_sroa_1_4_extract_shift$0 = $a$1;
    $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
    $d_sroa_0_0_extract_trunc = $b$0;
    $d_sroa_1_4_extract_shift$0 = $b$1;
    $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
    if (($n_sroa_1_4_extract_trunc | 0) == 0) {
      $4 = ($rem | 0) != 0;
      if (($d_sroa_1_4_extract_trunc | 0) == 0) {
        if ($4) {
          HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$4) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
    $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
    do {
      if (($d_sroa_0_0_extract_trunc | 0) == 0) {
        if ($17) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
            HEAP32[$rem + 4 >> 2] = 0;
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        if (($n_sroa_0_0_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0;
            HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
        if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0 | $a$0 & -1;
            HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
          }
          $_0$1 = 0;
          $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($51 >>> 0 <= 30) {
          $57 = $51 + 1 | 0;
          $58 = 31 - $51 | 0;
          $sr_1_ph = $57;
          $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$17) {
          $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
          $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          if ($119 >>> 0 <= 31) {
            $125 = $119 + 1 | 0;
            $126 = 31 - $119 | 0;
            $130 = $119 - 31 >> 31;
            $sr_1_ph = $125;
            $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
            $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
            $q_sroa_0_1_ph = 0;
            $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
            break;
          }
          if (($rem | 0) == 0) {
            $_0$1 = 0;
            $_0$0 = 0;
            return (tempRet0 = $_0$1, $_0$0) | 0;
          }
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
        if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
          $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
          $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          $89 = 64 - $88 | 0;
          $91 = 32 - $88 | 0;
          $92 = $91 >> 31;
          $95 = $88 - 32 | 0;
          $105 = $95 >> 31;
          $sr_1_ph = $88;
          $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
          $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
          $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
          $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
          break;
        }
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
          HEAP32[$rem + 4 >> 2] = 0;
        }
        if (($d_sroa_0_0_extract_trunc | 0) == 1) {
          $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$0 = 0 | $a$0 & -1;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        } else {
          $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
          $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
          $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
      }
    } while (0);
    if (($sr_1_ph | 0) == 0) {
      $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
      $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
      $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
      $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = 0;
    } else {
      $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
      $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
      $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
      $137$1 = tempRet0;
      $q_sroa_1_1198 = $q_sroa_1_1_ph;
      $q_sroa_0_1199 = $q_sroa_0_1_ph;
      $r_sroa_1_1200 = $r_sroa_1_1_ph;
      $r_sroa_0_1201 = $r_sroa_0_1_ph;
      $sr_1202 = $sr_1_ph;
      $carry_0203 = 0;
      while (1) {
        $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
        $149 = $carry_0203 | $q_sroa_0_1199 << 1;
        $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
        $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
        _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
        $150$1 = tempRet0;
        $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
        $152 = $151$0 & 1;
        $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
        $r_sroa_0_0_extract_trunc = $154$0;
        $r_sroa_1_4_extract_trunc = tempRet0;
        $155 = $sr_1202 - 1 | 0;
        if (($155 | 0) == 0) {
          break;
        } else {
          $q_sroa_1_1198 = $147;
          $q_sroa_0_1199 = $149;
          $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
          $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
          $sr_1202 = $155;
          $carry_0203 = $152;
        }
      }
      $q_sroa_1_1_lcssa = $147;
      $q_sroa_0_1_lcssa = $149;
      $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
      $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = $152;
    }
    $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
    $q_sroa_0_0_insert_ext75$1 = 0;
    $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
    if (($rem | 0) != 0) {
      HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
      HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
    }
    $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
    $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $1$0 = 0;
    $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
    return $1$0 | 0;
}
function _sbrk(increment) {
    increment = increment|0;
    var oldDynamicTop = 0;
    var oldDynamicTopOnChange = 0;
    var newDynamicTop = 0;
    var totalMemory = 0;
    increment = ((increment + 15) & -16)|0;
    oldDynamicTop = HEAP32[DYNAMICTOP_PTR>>2]|0;
    newDynamicTop = oldDynamicTop + increment | 0;

    if (((increment|0) > 0 & (newDynamicTop|0) < (oldDynamicTop|0)) // Detect and fail if we would wrap around signed 32-bit int.
      | (newDynamicTop|0) < 0) { // Also underflow, sbrk() should be able to be used to subtract.
      abortOnCannotGrowMemory()|0;
      ___setErrNo(12);
      return -1;
    }

    HEAP32[DYNAMICTOP_PTR>>2] = newDynamicTop;
    totalMemory = getTotalMemory()|0;
    if ((newDynamicTop|0) > (totalMemory|0)) {
      if ((enlargeMemory()|0) == 0) {
        ___setErrNo(12);
        HEAP32[DYNAMICTOP_PTR>>2] = oldDynamicTop;
        return -1;
      }
    }
    return oldDynamicTop|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $rem = 0, __stackBase__ = 0;
    __stackBase__ = STACKTOP;
    STACKTOP = STACKTOP + 16 | 0;
    $rem = __stackBase__ | 0;
    ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
    STACKTOP = __stackBase__;
    return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function _llvm_bswap_i32(x) {
    x = x|0;
    return (((x&0xff)<<24) | (((x>>8)&0xff)<<16) | (((x>>16)&0xff)<<8) | (x>>>24))|0;
}
function _llvm_bswap_i16(x) {
    x = x|0;
    return (((x&0xff)<<8) | ((x>>8)&0xff))|0;
}

  
function dynCall_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
  return FUNCTION_TABLE_iiiiiiii[index&3](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0)|0;
}


function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&63](a1|0,a2|0,a3|0)|0;
}


function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  FUNCTION_TABLE_viiiii[index&0](a1|0,a2|0,a3|0,a4|0,a5|0);
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&7](a1|0);
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&63](a1|0,a2|0);
}


function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&15](a1|0)|0;
}


function dynCall_diid(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=+a3;
  return +FUNCTION_TABLE_diid[index&1](a1|0,a2|0,+a3);
}


function dynCall_viii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  FUNCTION_TABLE_viii[index&63](a1|0,a2|0,a3|0);
}


function dynCall_idi(index,a1,a2) {
  index = index|0;
  a1=+a1; a2=a2|0;
  return FUNCTION_TABLE_idi[index&7](+a1,a2|0)|0;
}


function dynCall_iiiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return FUNCTION_TABLE_iiiii[index&255](a1|0,a2|0,a3|0,a4|0)|0;
}


function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  FUNCTION_TABLE_viiiiii[index&15](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&15](a1|0,a2|0)|0;
}


function dynCall_iiiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  return FUNCTION_TABLE_iiiiii[index&15](a1|0,a2|0,a3|0,a4|0,a5|0)|0;
}


function dynCall_viiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  FUNCTION_TABLE_viiii[index&0](a1|0,a2|0,a3|0,a4|0);
}

function b0(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; abort(0);return 0;
}
function b1(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; abort(1);return 0;
}
function b2(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; abort(2);
}
function b3(p0) {
 p0 = p0|0; abort(3);
}
function b4(p0,p1) {
 p0 = p0|0;p1 = p1|0; abort(4);
}
function b5(p0) {
 p0 = p0|0; abort(5);return 0;
}
function b6(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = +p2; abort(6);return +0;
}
function b7(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; abort(7);
}
function b8(p0,p1) {
 p0 = +p0;p1 = p1|0; abort(8);return 0;
}
function b9(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; abort(9);return 0;
}
function b10(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; abort(10);
}
function b11(p0,p1) {
 p0 = p0|0;p1 = p1|0; abort(11);return 0;
}
function b12(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; abort(12);return 0;
}
function b13(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; abort(13);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_iiiiiiii = [b0,_DefaultICCintents,_BlackPreservingKOnlyIntents,_BlackPreservingKPlaneIntents];
var FUNCTION_TABLE_iiii = [b1,__cmsReallocDefaultFn,__cmsCallocDefaultFn,__cmsDupDefaultFn,_Type_Chromaticity_Dup,_Type_ColorantOrderType_Dup,_Type_S15Fixed16_Dup,_Type_U16Fixed16_Dup,_Type_Text_Dup,_Type_Text_Description_Dup,_Type_Curve_Dup,_Type_ParametricCurve_Dup,_Type_DateTime_Dup,_Type_LUT8_Dup,_Type_LUT16_Dup,_Type_ColorantTable_Dup,_Type_NamedColor_Dup,_Type_MLU_Dup,_Type_ProfileSequenceDesc_Dup,_Type_Signature_Dup,_Type_Measurement_Dup,_Type_Data_Dup,_Type_LUTA2B_Dup,_Type_LUTB2A_Dup,_Type_UcrBg_Dup,_Type_CrdInfo_Dup,_Type_MPE_Dup,_Type_Screening_Dup,_Type_ViewingConditions_Dup
,_Type_XYZ_Dup,_Type_ProfileSequenceId_Dup,_Type_Dictionary_Dup,_Type_vcgt_Dup,_GenericMPEdup,___stdout_write,___stdio_seek,_sn_write,_BlackPreservingGrayOnlySampler,_BlackPreservingSampler,_GamutSampler,_EstimateTAC,_NULLWrite,_MemoryWrite,_FileWrite,_IdentitySampler,_XFormSampler16,___stdio_write,___stdio_read,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1];
var FUNCTION_TABLE_viiiii = [b2];
var FUNCTION_TABLE_vi = [b3,_CurveSetElemTypeFree,_MatrixElemTypeFree,_CLutElemTypeFree,_FreeNamedColorList,b3,b3,b3];
var FUNCTION_TABLE_vii = [b4,_copy8,_from8to16,_from8toHLF,_from8toFLT,_from8toDBL,_from16to8,_copy16,_from16toHLF,_from16toFLT,_from16toDBL,_fromHLFto8,_fromHLFto16,_fromHLFtoFLT,_fromHLFtoDBL,_fromFLTto8,_fromFLTto16,_fromFLTtoHLF,_copy32,_fromFLTtoDBL,_fromDBLto8,_fromDBLto16,_fromDBLtoHLF,_fromDBLtoFLT,_copy64,__cmsFreeDefaultFn,_defMtxDestroy,_defMtxUnlock,_Type_Chromaticity_Free
,_Type_ColorantOrderType_Free,_Type_S15Fixed16_Free,_Type_U16Fixed16_Free,_Type_Text_Free,_Type_Text_Description_Free,_Type_Curve_Free,_Type_ParametricCurve_Free,_Type_DateTime_Free,_Type_LUT8_Free,_Type_LUT16_Free,_Type_ColorantTable_Free,_Type_NamedColor_Free,_Type_MLU_Free,_Type_ProfileSequenceDesc_Free,_Type_Signature_Free,_Type_Measurement_Free,_Type_Data_Free,_Type_LUTA2B_Free,_Type_LUTB2A_Free,_Type_UcrBg_Free,_Type_CrdInfo_Free,_Type_MPE_Free,_Type_Screening_Free,_Type_ViewingConditions_Free,_Type_XYZ_Free,_Type_ProfileSequenceId_Free,_Type_Dictionary_Free,_Type_vcgt_Free,_GenericMPEfree,_PrelinOpt16free
,_CurvesFree,_Prelin8free,_FreeMatShaper,b4,b4];
var FUNCTION_TABLE_ii = [b5,_defMtxCreate,___stdio_close,_NULLClose,_NULLTell,_MemoryClose,_MemoryTell,_FileClose,_FileTell,_CurveSetDup,_MatrixElemDup,_CLUTElemDup,_DupNamedColorList,b5,b5,b5];
var FUNCTION_TABLE_diid = [b6,_DefaultEvalParametricFn];
var FUNCTION_TABLE_viii = [b7,_DefaultLogErrorHandlerFunction,_LinLerp1Dfloat,_LinLerp1D,_Eval1InputFloat,_Eval1Input,_BilinearInterp16,_BilinearInterpFloat,_TrilinearInterpFloat,_TrilinearInterp16,_TetrahedralInterpFloat,_TetrahedralInterp16,_Eval4Inputs,_Eval4InputsFloat,_Eval5Inputs,_Eval5InputsFloat,_Eval6Inputs,_Eval6InputsFloat,_Eval7Inputs,_Eval7InputsFloat,_Eval8Inputs,_Eval8InputsFloat,_EvaluateIdentity,_EvaluateCurves,_EvaluateMatrix,_EvaluateCLUTfloatIn16,_EvaluateCLUTfloat,_EvaluateLab2XYZ,_Clipper
,_EvaluateXYZ2Lab,__LUTeval16,__LUTevalFloat,_EvalNamedColorPCS,_EvalNamedColor,_FastIdentity16,_PrelinEval16,_FastEvaluateCurves8,_FastEvaluateCurves16,_PrelinEval8,_Eval16nop1D,_MatShaperEval16,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7];
var FUNCTION_TABLE_idi = [b8,_DecideLUTtypeA2B,_DecideLUTtypeB2A,_DecideXYZtype,_DecideCurveType,_DecideTextType,_DecideTextDescType,b8];
var FUNCTION_TABLE_iiiii = [b9,_PackLabDoubleFrom16,_PackXYZDoubleFrom16,_PackLabFloatFrom16,_PackXYZFloatFrom16,_PackDoubleFrom16,_PackFloatFrom16,_PackHalfFrom16,_Pack1Byte,_Pack1ByteSkip1,_Pack1ByteSkip1SwapFirst,_Pack1ByteReversed,_PackLabV2_8,_PackALabV2_8,_PackLabV2_16,_Pack3BytesOptimized,_Pack3BytesAndSkip1Optimized,_Pack3BytesAndSkip1SwapFirstOptimized,_Pack3BytesAndSkip1SwapSwapFirstOptimized,_Pack3BytesAndSkip1SwapOptimized,_Pack3BytesSwapOptimized,_Pack3Bytes,_Pack3BytesAndSkip1,_Pack3BytesAndSkip1SwapFirst,_Pack3BytesAndSkip1SwapSwapFirst,_Pack3BytesAndSkip1Swap,_Pack3BytesSwap,_Pack6Bytes,_Pack6BytesSwap
,_Pack4Bytes,_Pack4BytesReverse,_Pack4BytesSwapFirst,_Pack4BytesSwap,_Pack4BytesSwapSwapFirst,_PackAnyBytes,_PackPlanarBytes,_Pack1Word,_Pack1WordSkip1,_Pack1WordSkip1SwapFirst,_Pack1WordReversed,_Pack1WordBigEndian,_Pack3Words,_Pack3WordsSwap,_Pack3WordsBigEndian,_Pack3WordsAndSkip1,_Pack3WordsAndSkip1Swap,_Pack3WordsAndSkip1SwapFirst,_Pack3WordsAndSkip1SwapSwapFirst,_Pack4Words,_Pack4WordsReverse,_Pack4WordsSwap,_Pack4WordsBigEndian,_Pack6Words,_Pack6WordsSwap,_PackPlanarWords,_PackAnyWords,_PackLabFloatFromFloat,_PackXYZFloatFromFloat,_PackLabDoubleFromFloat
,_PackXYZDoubleFromFloat,_PackFloatsFromFloat,_PackDoublesFromFloat,_PackHalfFromFloat,_UnrollLabDoubleTo16,_UnrollXYZDoubleTo16,_UnrollLabFloatTo16,_UnrollXYZFloatTo16,_UnrollDouble1Chan,_UnrollDoubleTo16,_UnrollFloatTo16,_UnrollHalfTo16,_Unroll1Byte,_Unroll1ByteSkip1,_Unroll1ByteSkip2,_Unroll1ByteReversed,_Unroll2Bytes,_UnrollLabV2_8,_UnrollALabV2_8,_UnrollLabV2_16,_Unroll3Bytes,_Unroll3BytesSwap,_Unroll3BytesSkip1Swap,_Unroll3BytesSkip1SwapFirst,_Unroll3BytesSkip1SwapSwapFirst,_Unroll4Bytes,_Unroll4BytesReverse,_Unroll4BytesSwapFirst,_Unroll4BytesSwap,_Unroll4BytesSwapSwapFirst
,_UnrollPlanarBytes,_UnrollChunkyBytes,_Unroll1Word,_Unroll1WordReversed,_Unroll1WordSkip3,_Unroll2Words,_Unroll3Words,_Unroll4Words,_Unroll3WordsSwap,_Unroll3WordsSkip1SwapFirst,_Unroll3WordsSkip1Swap,_Unroll4WordsReverse,_Unroll4WordsSwapFirst,_Unroll4WordsSwap,_Unroll4WordsSwapSwapFirst,_UnrollPlanarWords,_UnrollAnyWords,_UnrollLabDoubleToFloat,_UnrollLabFloatToFloat,_UnrollXYZDoubleToFloat,_UnrollXYZFloatToFloat,_UnrollFloatsToFloat,_UnrollDoublesToFloat,_UnrollHalfToFloat,_Type_Chromaticity_Read,_Type_Chromaticity_Write,_Type_ColorantOrderType_Read,_Type_ColorantOrderType_Write,_Type_S15Fixed16_Read,_Type_S15Fixed16_Write
,_Type_U16Fixed16_Read,_Type_U16Fixed16_Write,_Type_Text_Read,_Type_Text_Write,_Type_Text_Description_Read,_Type_Text_Description_Write,_Type_Curve_Read,_Type_Curve_Write,_Type_ParametricCurve_Read,_Type_ParametricCurve_Write,_Type_DateTime_Read,_Type_DateTime_Write,_Type_LUT8_Read,_Type_LUT8_Write,_Type_LUT16_Read,_Type_LUT16_Write,_Type_ColorantTable_Read,_Type_ColorantTable_Write,_Type_NamedColor_Read,_Type_NamedColor_Write,_Type_MLU_Read,_Type_MLU_Write,_Type_ProfileSequenceDesc_Read,_Type_ProfileSequenceDesc_Write,_Type_Signature_Read,_Type_Signature_Write,_Type_Measurement_Read,_Type_Measurement_Write,_Type_Data_Read,_Type_Data_Write
,_Type_LUTA2B_Read,_Type_LUTA2B_Write,_Type_LUTB2A_Read,_Type_LUTB2A_Write,_Type_UcrBg_Read,_Type_UcrBg_Write,_Type_CrdInfo_Read,_Type_CrdInfo_Write,_Type_MPE_Read,_Type_MPE_Write,_Type_Screening_Read,_Type_Screening_Write,_Type_ViewingConditions_Read,_Type_ViewingConditions_Write,_Type_XYZ_Read,_Type_XYZ_Write,_Type_ProfileSequenceId_Read,_Type_ProfileSequenceId_Write,_Type_Dictionary_Read,_Type_Dictionary_Write,_Type_vcgt_Read,_Type_vcgt_Write,_Type_MPEcurve_Read,_Type_MPEcurve_Write,_Type_MPEmatrix_Read,_Type_MPEmatrix_Write,_Type_MPEclut_Read,_Type_MPEclut_Write,_NULLRead,_MemoryRead
,_FileRead,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9];
var FUNCTION_TABLE_viiiiii = [b10,__cmsTransform2toTransformAdaptor,_NullFloatXFORM,_FloatXFORM,_NullXFORM,_PrecalculatedXFORMGamutCheck,_PrecalculatedXFORM,_CachedXFORMGamutCheck,_CachedXFORM,b10,b10,b10,b10,b10,b10,b10];
var FUNCTION_TABLE_iii = [b11,__cmsMallocDefaultFn,__cmsMallocZeroDefaultFn,_defMtxLock,_NULLSeek,_MemorySeek,_FileSeek,_Prelin16dup,_CurvesDup,_Prelin8dup,_DupMatShaper,b11,b11,b11,b11,b11];
var FUNCTION_TABLE_iiiiii = [b12,_OptimizeByJoiningCurves,_OptimizeMatrixShaper,_OptimizeByComputingLinearization,_OptimizeByResampling,_ReadMPEElem,_ReadSeqID,_WriteSeqID,_ReadMPECurve,_WriteMPECurve,b12,b12,b12,b12,b12,b12];
var FUNCTION_TABLE_viiii = [b13];

  return { _cmsXYZ2xyY: _cmsXYZ2xyY, _cmsGetTransformInputFormat: _cmsGetTransformInputFormat, _cmsCreateTransform: _cmsCreateTransform, _cmsReadTag: _cmsReadTag, _cmsOpenProfileFromMem: _cmsOpenProfileFromMem, _memset: _memset, _cmsGetTransformOutputFormat: _cmsGetTransformOutputFormat, _cmsGetProfileInfoASCII: _cmsGetProfileInfoASCII, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _cmsDeleteTransform: _cmsDeleteTransform, _fflush: _fflush, _cmsDoTransform: _cmsDoTransform, _llvm_cttz_i32: _llvm_cttz_i32, _sbrk: _sbrk, _memcpy: _memcpy, _llvm_bswap_i32: _llvm_bswap_i32, ___uremdi3: ___uremdi3, _i64Subtract: _i64Subtract, ___udivmoddi4: ___udivmoddi4, _i64Add: _i64Add, _pthread_mutex_unlock: _pthread_mutex_unlock, _llvm_bswap_i16: _llvm_bswap_i16, _cmsCloseProfile: _cmsCloseProfile, _emscripten_get_global_libc: _emscripten_get_global_libc, _cmsFormatterForColorspaceOfProfile: _cmsFormatterForColorspaceOfProfile, ___udivdi3: ___udivdi3, ___errno_location: ___errno_location, _free: _free, _memmove: _memmove, _cmsGetColorSpace: _cmsGetColorSpace, _malloc: _malloc, _pthread_mutex_lock: _pthread_mutex_lock, _cmsCreate_sRGBProfile: _cmsCreate_sRGBProfile, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, establishStackSpace: establishStackSpace, setTempRet0: setTempRet0, getTempRet0: getTempRet0, setThrew: setThrew, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, establishStackSpace: establishStackSpace, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiiiiiii: dynCall_iiiiiiii, dynCall_iiii: dynCall_iiii, dynCall_viiiii: dynCall_viiiii, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_ii: dynCall_ii, dynCall_diid: dynCall_diid, dynCall_viii: dynCall_viii, dynCall_idi: dynCall_idi, dynCall_iiiii: dynCall_iiiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_iii: dynCall_iii, dynCall_iiiiii: dynCall_iiiiii, dynCall_viiii: dynCall_viiii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var _cmsXYZ2xyY = Module["_cmsXYZ2xyY"] = asm["_cmsXYZ2xyY"];
var _cmsGetTransformInputFormat = Module["_cmsGetTransformInputFormat"] = asm["_cmsGetTransformInputFormat"];
var _cmsCreateTransform = Module["_cmsCreateTransform"] = asm["_cmsCreateTransform"];
var stackSave = Module["stackSave"] = asm["stackSave"];
var _cmsReadTag = Module["_cmsReadTag"] = asm["_cmsReadTag"];
var _cmsOpenProfileFromMem = Module["_cmsOpenProfileFromMem"] = asm["_cmsOpenProfileFromMem"];
var _memset = Module["_memset"] = asm["_memset"];
var getTempRet0 = Module["getTempRet0"] = asm["getTempRet0"];
var _cmsGetTransformOutputFormat = Module["_cmsGetTransformOutputFormat"] = asm["_cmsGetTransformOutputFormat"];
var _cmsGetProfileInfoASCII = Module["_cmsGetProfileInfoASCII"] = asm["_cmsGetProfileInfoASCII"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _cmsDeleteTransform = Module["_cmsDeleteTransform"] = asm["_cmsDeleteTransform"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _cmsDoTransform = Module["_cmsDoTransform"] = asm["_cmsDoTransform"];
var _llvm_cttz_i32 = Module["_llvm_cttz_i32"] = asm["_llvm_cttz_i32"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___uremdi3 = Module["___uremdi3"] = asm["___uremdi3"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var ___udivmoddi4 = Module["___udivmoddi4"] = asm["___udivmoddi4"];
var setTempRet0 = Module["setTempRet0"] = asm["setTempRet0"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _pthread_mutex_unlock = Module["_pthread_mutex_unlock"] = asm["_pthread_mutex_unlock"];
var _llvm_bswap_i16 = Module["_llvm_bswap_i16"] = asm["_llvm_bswap_i16"];
var _cmsCloseProfile = Module["_cmsCloseProfile"] = asm["_cmsCloseProfile"];
var _emscripten_get_global_libc = Module["_emscripten_get_global_libc"] = asm["_emscripten_get_global_libc"];
var _cmsFormatterForColorspaceOfProfile = Module["_cmsFormatterForColorspaceOfProfile"] = asm["_cmsFormatterForColorspaceOfProfile"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var _free = Module["_free"] = asm["_free"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var setThrew = Module["setThrew"] = asm["setThrew"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _cmsGetColorSpace = Module["_cmsGetColorSpace"] = asm["_cmsGetColorSpace"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _pthread_mutex_lock = Module["_pthread_mutex_lock"] = asm["_pthread_mutex_lock"];
var _cmsCreate_sRGBProfile = Module["_cmsCreate_sRGBProfile"] = asm["_cmsCreate_sRGBProfile"];
var dynCall_iiiiiiii = Module["dynCall_iiiiiiii"] = asm["dynCall_iiiiiiii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_diid = Module["dynCall_diid"] = asm["dynCall_diid"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_idi = Module["dynCall_idi"] = asm["dynCall_idi"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
;

Runtime.stackAlloc = Module['stackAlloc'];
Runtime.stackSave = Module['stackSave'];
Runtime.stackRestore = Module['stackRestore'];
Runtime.establishStackSpace = Module['establishStackSpace'];

Runtime.setTempRet0 = Module['setTempRet0'];
Runtime.getTempRet0 = Module['getTempRet0'];



// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;





function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      var toLog = e;
      if (e && typeof e === 'object' && e.stack) {
        toLog = [e, e.stack];
      }
      Module.printErr('exception thrown: ' + toLog);
      Module['quit'](1, e);
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    return;
  }


  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();


    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    return;
  }

  if (Module['noExitRuntime']) {
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  }
  Module['quit'](status, new ExitStatus(status));
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '\nIf this abort() is unexpected, build with -s ASSERTIONS=1 which can give more information.';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}





// {{MODULE_ADDITIONS}}



